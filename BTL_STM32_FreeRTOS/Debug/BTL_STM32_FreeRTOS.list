
BTL_STM32_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd4c  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000604  0800ce60  0800ce60  0000de60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d464  0800d464  0000f1ec  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d464  0800d464  0000e464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d46c  0800d46c  0000f1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d46c  0800d46c  0000e46c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d470  0800d470  0000e470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  0800d474  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000028e4  200001ec  0800d660  0000f1ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002ad0  0800d660  0000fad0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000f1ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cd99  00000000  00000000  0000f215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ee4  00000000  00000000  0002bfae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a00  00000000  00000000  0002fe98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000144e  00000000  00000000  00031898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004b83  00000000  00000000  00032ce6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cde2  00000000  00000000  00037869  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e9c5  00000000  00000000  0005464b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f3010  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000823c  00000000  00000000  000f3054  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000fb290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001ec 	.word	0x200001ec
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ce44 	.word	0x0800ce44

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f0 	.word	0x200001f0
 800014c:	0800ce44 	.word	0x0800ce44

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000d4e:	4a38      	ldr	r2, [pc, #224]	@ (8000e30 <HD44780_Init+0xec>)
 8000d50:	79fb      	ldrb	r3, [r7, #7]
 8000d52:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000d54:	4b37      	ldr	r3, [pc, #220]	@ (8000e34 <HD44780_Init+0xf0>)
 8000d56:	2208      	movs	r2, #8
 8000d58:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000d5a:	4b37      	ldr	r3, [pc, #220]	@ (8000e38 <HD44780_Init+0xf4>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000d60:	4b33      	ldr	r3, [pc, #204]	@ (8000e30 <HD44780_Init+0xec>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d907      	bls.n	8000d78 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000d68:	4b33      	ldr	r3, [pc, #204]	@ (8000e38 <HD44780_Init+0xf4>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	f043 0308 	orr.w	r3, r3, #8
 8000d70:	b2da      	uxtb	r2, r3
 8000d72:	4b31      	ldr	r3, [pc, #196]	@ (8000e38 <HD44780_Init+0xf4>)
 8000d74:	701a      	strb	r2, [r3, #0]
 8000d76:	e006      	b.n	8000d86 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000d78:	4b2f      	ldr	r3, [pc, #188]	@ (8000e38 <HD44780_Init+0xf4>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	f043 0304 	orr.w	r3, r3, #4
 8000d80:	b2da      	uxtb	r2, r3
 8000d82:	4b2d      	ldr	r3, [pc, #180]	@ (8000e38 <HD44780_Init+0xf4>)
 8000d84:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000d86:	f000 f987 	bl	8001098 <DelayInit>
  HAL_Delay(50);
 8000d8a:	2032      	movs	r0, #50	@ 0x32
 8000d8c:	f001 f972 	bl	8002074 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000d90:	4b28      	ldr	r3, [pc, #160]	@ (8000e34 <HD44780_Init+0xf0>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f000 f945 	bl	8001024 <ExpanderWrite>
  HAL_Delay(1000);
 8000d9a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d9e:	f001 f969 	bl	8002074 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000da2:	2030      	movs	r0, #48	@ 0x30
 8000da4:	f000 f92c 	bl	8001000 <Write4Bits>
  DelayUS(4500);
 8000da8:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000dac:	f000 f99c 	bl	80010e8 <DelayUS>

  Write4Bits(0x03 << 4);
 8000db0:	2030      	movs	r0, #48	@ 0x30
 8000db2:	f000 f925 	bl	8001000 <Write4Bits>
  DelayUS(4500);
 8000db6:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000dba:	f000 f995 	bl	80010e8 <DelayUS>

  Write4Bits(0x03 << 4);
 8000dbe:	2030      	movs	r0, #48	@ 0x30
 8000dc0:	f000 f91e 	bl	8001000 <Write4Bits>
  DelayUS(4500);
 8000dc4:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000dc8:	f000 f98e 	bl	80010e8 <DelayUS>

  Write4Bits(0x02 << 4);
 8000dcc:	2020      	movs	r0, #32
 8000dce:	f000 f917 	bl	8001000 <Write4Bits>
  DelayUS(100);
 8000dd2:	2064      	movs	r0, #100	@ 0x64
 8000dd4:	f000 f988 	bl	80010e8 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000dd8:	4b17      	ldr	r3, [pc, #92]	@ (8000e38 <HD44780_Init+0xf4>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	f043 0320 	orr.w	r3, r3, #32
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	4618      	mov	r0, r3
 8000de4:	f000 f8cf 	bl	8000f86 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000de8:	4b14      	ldr	r3, [pc, #80]	@ (8000e3c <HD44780_Init+0xf8>)
 8000dea:	2204      	movs	r2, #4
 8000dec:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8000dee:	f000 f875 	bl	8000edc <HD44780_Display>
  HD44780_Clear();
 8000df2:	f000 f82b 	bl	8000e4c <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000df6:	4b12      	ldr	r3, [pc, #72]	@ (8000e40 <HD44780_Init+0xfc>)
 8000df8:	2202      	movs	r2, #2
 8000dfa:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000dfc:	4b10      	ldr	r3, [pc, #64]	@ (8000e40 <HD44780_Init+0xfc>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	f043 0304 	orr.w	r3, r3, #4
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	4618      	mov	r0, r3
 8000e08:	f000 f8bd 	bl	8000f86 <SendCommand>
  DelayUS(4500);
 8000e0c:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000e10:	f000 f96a 	bl	80010e8 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8000e14:	490b      	ldr	r1, [pc, #44]	@ (8000e44 <HD44780_Init+0x100>)
 8000e16:	2000      	movs	r0, #0
 8000e18:	f000 f876 	bl	8000f08 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8000e1c:	490a      	ldr	r1, [pc, #40]	@ (8000e48 <HD44780_Init+0x104>)
 8000e1e:	2001      	movs	r0, #1
 8000e20:	f000 f872 	bl	8000f08 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000e24:	f000 f81d 	bl	8000e62 <HD44780_Home>
}
 8000e28:	bf00      	nop
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	2000020b 	.word	0x2000020b
 8000e34:	2000020c 	.word	0x2000020c
 8000e38:	20000208 	.word	0x20000208
 8000e3c:	20000209 	.word	0x20000209
 8000e40:	2000020a 	.word	0x2000020a
 8000e44:	20000000 	.word	0x20000000
 8000e48:	20000008 	.word	0x20000008

08000e4c <HD44780_Clear>:

void HD44780_Clear()
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000e50:	2001      	movs	r0, #1
 8000e52:	f000 f898 	bl	8000f86 <SendCommand>
  DelayUS(2000);
 8000e56:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000e5a:	f000 f945 	bl	80010e8 <DelayUS>
}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <HD44780_Home>:

void HD44780_Home()
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8000e66:	2002      	movs	r0, #2
 8000e68:	f000 f88d 	bl	8000f86 <SendCommand>
  DelayUS(2000);
 8000e6c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000e70:	f000 f93a 	bl	80010e8 <DelayUS>
}
 8000e74:	bf00      	nop
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000e78:	b590      	push	{r4, r7, lr}
 8000e7a:	b087      	sub	sp, #28
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	460a      	mov	r2, r1
 8000e82:	71fb      	strb	r3, [r7, #7]
 8000e84:	4613      	mov	r3, r2
 8000e86:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000e88:	4b12      	ldr	r3, [pc, #72]	@ (8000ed4 <HD44780_SetCursor+0x5c>)
 8000e8a:	f107 0408 	add.w	r4, r7, #8
 8000e8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8000e94:	4b10      	ldr	r3, [pc, #64]	@ (8000ed8 <HD44780_SetCursor+0x60>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	79ba      	ldrb	r2, [r7, #6]
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	d303      	bcc.n	8000ea6 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8000e9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed8 <HD44780_SetCursor+0x60>)
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8000ea6:	79bb      	ldrb	r3, [r7, #6]
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	3318      	adds	r3, #24
 8000eac:	443b      	add	r3, r7
 8000eae:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000eb2:	b2da      	uxtb	r2, r3
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	b25b      	sxtb	r3, r3
 8000ebc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000ec0:	b25b      	sxtb	r3, r3
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f000 f85e 	bl	8000f86 <SendCommand>
}
 8000eca:	bf00      	nop
 8000ecc:	371c      	adds	r7, #28
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd90      	pop	{r4, r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	0800ce60 	.word	0x0800ce60
 8000ed8:	2000020b 	.word	0x2000020b

08000edc <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000ee0:	4b08      	ldr	r3, [pc, #32]	@ (8000f04 <HD44780_Display+0x28>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	f043 0304 	orr.w	r3, r3, #4
 8000ee8:	b2da      	uxtb	r2, r3
 8000eea:	4b06      	ldr	r3, [pc, #24]	@ (8000f04 <HD44780_Display+0x28>)
 8000eec:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000eee:	4b05      	ldr	r3, [pc, #20]	@ (8000f04 <HD44780_Display+0x28>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	f043 0308 	orr.w	r3, r3, #8
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f000 f844 	bl	8000f86 <SendCommand>
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000209 	.word	0x20000209

08000f08 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	6039      	str	r1, [r7, #0]
 8000f12:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	f003 0307 	and.w	r3, r3, #7
 8000f1a:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f20:	00db      	lsls	r3, r3, #3
 8000f22:	b25b      	sxtb	r3, r3
 8000f24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f28:	b25b      	sxtb	r3, r3
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f000 f82a 	bl	8000f86 <SendCommand>
  for (int i=0; i<8; i++)
 8000f32:	2300      	movs	r3, #0
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	e009      	b.n	8000f4c <HD44780_CreateSpecialChar+0x44>
  {
    SendChar(charmap[i]);
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	683a      	ldr	r2, [r7, #0]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f000 f82e 	bl	8000fa2 <SendChar>
  for (int i=0; i<8; i++)
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	2b07      	cmp	r3, #7
 8000f50:	ddf2      	ble.n	8000f38 <HD44780_CreateSpecialChar+0x30>
  }
}
 8000f52:	bf00      	nop
 8000f54:	bf00      	nop
 8000f56:	3710      	adds	r7, #16
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8000f64:	e006      	b.n	8000f74 <HD44780_PrintStr+0x18>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	1c5a      	adds	r2, r3, #1
 8000f6a:	607a      	str	r2, [r7, #4]
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f000 f817 	bl	8000fa2 <SendChar>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d1f4      	bne.n	8000f66 <HD44780_PrintStr+0xa>
}
 8000f7c:	bf00      	nop
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b082      	sub	sp, #8
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	2100      	movs	r1, #0
 8000f94:	4618      	mov	r0, r3
 8000f96:	f000 f812 	bl	8000fbe <Send>
}
 8000f9a:	bf00      	nop
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <SendChar>:

static void SendChar(uint8_t ch)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b082      	sub	sp, #8
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	4603      	mov	r3, r0
 8000faa:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8000fac:	79fb      	ldrb	r3, [r7, #7]
 8000fae:	2101      	movs	r1, #1
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f000 f804 	bl	8000fbe <Send>
}
 8000fb6:	bf00      	nop
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b084      	sub	sp, #16
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	460a      	mov	r2, r1
 8000fc8:	71fb      	strb	r3, [r7, #7]
 8000fca:	4613      	mov	r3, r2
 8000fcc:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	f023 030f 	bic.w	r3, r3, #15
 8000fd4:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	011b      	lsls	r3, r3, #4
 8000fda:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8000fdc:	7bfa      	ldrb	r2, [r7, #15]
 8000fde:	79bb      	ldrb	r3, [r7, #6]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f000 f80b 	bl	8001000 <Write4Bits>
  Write4Bits((lownib)|mode);
 8000fea:	7bba      	ldrb	r2, [r7, #14]
 8000fec:	79bb      	ldrb	r3, [r7, #6]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 f804 	bl	8001000 <Write4Bits>
}
 8000ff8:	bf00      	nop
 8000ffa:	3710      	adds	r7, #16
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	4618      	mov	r0, r3
 800100e:	f000 f809 	bl	8001024 <ExpanderWrite>
  PulseEnable(value);
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	4618      	mov	r0, r3
 8001016:	f000 f821 	bl	800105c <PulseEnable>
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
	...

08001024 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af02      	add	r7, sp, #8
 800102a:	4603      	mov	r3, r0
 800102c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 800102e:	4b09      	ldr	r3, [pc, #36]	@ (8001054 <ExpanderWrite+0x30>)
 8001030:	781a      	ldrb	r2, [r3, #0]
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	4313      	orrs	r3, r2
 8001036:	b2db      	uxtb	r3, r3
 8001038:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 800103a:	f107 020f 	add.w	r2, r7, #15
 800103e:	230a      	movs	r3, #10
 8001040:	9300      	str	r3, [sp, #0]
 8001042:	2301      	movs	r3, #1
 8001044:	214e      	movs	r1, #78	@ 0x4e
 8001046:	4804      	ldr	r0, [pc, #16]	@ (8001058 <ExpanderWrite+0x34>)
 8001048:	f002 f8ea 	bl	8003220 <HAL_I2C_Master_Transmit>
}
 800104c:	bf00      	nop
 800104e:	3710      	adds	r7, #16
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	2000020c 	.word	0x2000020c
 8001058:	20000240 	.word	0x20000240

0800105c <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	f043 0304 	orr.w	r3, r3, #4
 800106c:	b2db      	uxtb	r3, r3
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff ffd8 	bl	8001024 <ExpanderWrite>
  DelayUS(20);
 8001074:	2014      	movs	r0, #20
 8001076:	f000 f837 	bl	80010e8 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	f023 0304 	bic.w	r3, r3, #4
 8001080:	b2db      	uxtb	r3, r3
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff ffce 	bl	8001024 <ExpanderWrite>
  DelayUS(20);
 8001088:	2014      	movs	r0, #20
 800108a:	f000 f82d 	bl	80010e8 <DelayUS>
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
	...

08001098 <DelayInit>:

static void DelayInit(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 800109c:	4b10      	ldr	r3, [pc, #64]	@ (80010e0 <DelayInit+0x48>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	4a0f      	ldr	r2, [pc, #60]	@ (80010e0 <DelayInit+0x48>)
 80010a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80010a6:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 80010a8:	4b0d      	ldr	r3, [pc, #52]	@ (80010e0 <DelayInit+0x48>)
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	4a0c      	ldr	r2, [pc, #48]	@ (80010e0 <DelayInit+0x48>)
 80010ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80010b2:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80010b4:	4b0b      	ldr	r3, [pc, #44]	@ (80010e4 <DelayInit+0x4c>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a0a      	ldr	r2, [pc, #40]	@ (80010e4 <DelayInit+0x4c>)
 80010ba:	f023 0301 	bic.w	r3, r3, #1
 80010be:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80010c0:	4b08      	ldr	r3, [pc, #32]	@ (80010e4 <DelayInit+0x4c>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a07      	ldr	r2, [pc, #28]	@ (80010e4 <DelayInit+0x4c>)
 80010c6:	f043 0301 	orr.w	r3, r3, #1
 80010ca:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 80010cc:	4b05      	ldr	r3, [pc, #20]	@ (80010e4 <DelayInit+0x4c>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 80010d2:	bf00      	nop
  __ASM volatile ("NOP");
 80010d4:	bf00      	nop
  __ASM volatile ("NOP");
 80010d6:	bf00      	nop
}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	bc80      	pop	{r7}
 80010de:	4770      	bx	lr
 80010e0:	e000edf0 	.word	0xe000edf0
 80010e4:	e0001000 	.word	0xe0001000

080010e8 <DelayUS>:

static void DelayUS(uint32_t us) {
 80010e8:	b480      	push	{r7}
 80010ea:	b087      	sub	sp, #28
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 80010f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001128 <DelayUS+0x40>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a0d      	ldr	r2, [pc, #52]	@ (800112c <DelayUS+0x44>)
 80010f6:	fba2 2303 	umull	r2, r3, r2, r3
 80010fa:	0c9a      	lsrs	r2, r3, #18
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	fb02 f303 	mul.w	r3, r2, r3
 8001102:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8001104:	4b0a      	ldr	r3, [pc, #40]	@ (8001130 <DelayUS+0x48>)
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 800110a:	4b09      	ldr	r3, [pc, #36]	@ (8001130 <DelayUS+0x48>)
 800110c:	685a      	ldr	r2, [r3, #4]
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	697a      	ldr	r2, [r7, #20]
 8001118:	429a      	cmp	r2, r3
 800111a:	d8f6      	bhi.n	800110a <DelayUS+0x22>
}
 800111c:	bf00      	nop
 800111e:	bf00      	nop
 8001120:	371c      	adds	r7, #28
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr
 8001128:	20000014 	.word	0x20000014
 800112c:	431bde83 	.word	0x431bde83
 8001130:	e0001000 	.word	0xe0001000

08001134 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001138:	f000 ff6a 	bl	8002010 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800113c:	f000 f88a 	bl	8001254 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001140:	f000 f9f0 	bl	8001524 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001144:	f000 f8e2 	bl	800130c <MX_ADC1_Init>
  MX_I2C1_Init();
 8001148:	f000 f91e 	bl	8001388 <MX_I2C1_Init>
  MX_TIM2_Init();
 800114c:	f000 f94a 	bl	80013e4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001150:	f000 f9be 	bl	80014d0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HD44780_Init(2);
 8001154:	2002      	movs	r0, #2
 8001156:	f7ff fdf5 	bl	8000d44 <HD44780_Init>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800115a:	210c      	movs	r1, #12
 800115c:	4826      	ldr	r0, [pc, #152]	@ (80011f8 <main+0xc4>)
 800115e:	f003 fa5d 	bl	800461c <HAL_TIM_PWM_Start>

  HAL_ADC_Start(&hadc1);
 8001162:	4826      	ldr	r0, [pc, #152]	@ (80011fc <main+0xc8>)
 8001164:	f001 f882 	bl	800226c <HAL_ADC_Start>

  HAL_UART_Receive_IT(&huart1, &rxByte, 1);
 8001168:	2201      	movs	r2, #1
 800116a:	4925      	ldr	r1, [pc, #148]	@ (8001200 <main+0xcc>)
 800116c:	4825      	ldr	r0, [pc, #148]	@ (8001204 <main+0xd0>)
 800116e:	f004 f990 	bl	8005492 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001172:	f004 ff61 	bl	8006038 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of uartMutex */
  uartMutexHandle = osMutexNew(&uartMutex_attributes);
 8001176:	4824      	ldr	r0, [pc, #144]	@ (8001208 <main+0xd4>)
 8001178:	f005 f87a 	bl	8006270 <osMutexNew>
 800117c:	4603      	mov	r3, r0
 800117e:	4a23      	ldr	r2, [pc, #140]	@ (800120c <main+0xd8>)
 8001180:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_MUTEX */
    // Tao mutex de bao ve bien nhiet do
    tempMutexHandle = osMutexNew(NULL);
 8001182:	2000      	movs	r0, #0
 8001184:	f005 f874 	bl	8006270 <osMutexNew>
 8001188:	4603      	mov	r3, r0
 800118a:	4a21      	ldr	r2, [pc, #132]	@ (8001210 <main+0xdc>)
 800118c:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of temperatureQueue */
  temperatureQueueHandle = osMessageQueueNew (1, sizeof(float), &temperatureQueue_attributes);
 800118e:	4a21      	ldr	r2, [pc, #132]	@ (8001214 <main+0xe0>)
 8001190:	2104      	movs	r1, #4
 8001192:	2001      	movs	r0, #1
 8001194:	f005 f97a 	bl	800648c <osMessageQueueNew>
 8001198:	4603      	mov	r3, r0
 800119a:	4a1f      	ldr	r2, [pc, #124]	@ (8001218 <main+0xe4>)
 800119c:	6013      	str	r3, [r2, #0]

  /* creation of commandQueue */
  commandQueueHandle = osMessageQueueNew (32, sizeof(uint8_t), &commandQueue_attributes);
 800119e:	4a1f      	ldr	r2, [pc, #124]	@ (800121c <main+0xe8>)
 80011a0:	2101      	movs	r1, #1
 80011a2:	2020      	movs	r0, #32
 80011a4:	f005 f972 	bl	800648c <osMessageQueueNew>
 80011a8:	4603      	mov	r3, r0
 80011aa:	4a1d      	ldr	r2, [pc, #116]	@ (8001220 <main+0xec>)
 80011ac:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of readTempTask */
  readTempTaskHandle = osThreadNew(StartReadTempTask, NULL, &readTempTask_attributes);
 80011ae:	4a1d      	ldr	r2, [pc, #116]	@ (8001224 <main+0xf0>)
 80011b0:	2100      	movs	r1, #0
 80011b2:	481d      	ldr	r0, [pc, #116]	@ (8001228 <main+0xf4>)
 80011b4:	f004 ff9d 	bl	80060f2 <osThreadNew>
 80011b8:	4603      	mov	r3, r0
 80011ba:	4a1c      	ldr	r2, [pc, #112]	@ (800122c <main+0xf8>)
 80011bc:	6013      	str	r3, [r2, #0]

  /* creation of updateLcdTask */
  updateLcdTaskHandle = osThreadNew(StartUpdateLcdTask, NULL, &updateLcdTask_attributes);
 80011be:	4a1c      	ldr	r2, [pc, #112]	@ (8001230 <main+0xfc>)
 80011c0:	2100      	movs	r1, #0
 80011c2:	481c      	ldr	r0, [pc, #112]	@ (8001234 <main+0x100>)
 80011c4:	f004 ff95 	bl	80060f2 <osThreadNew>
 80011c8:	4603      	mov	r3, r0
 80011ca:	4a1b      	ldr	r2, [pc, #108]	@ (8001238 <main+0x104>)
 80011cc:	6013      	str	r3, [r2, #0]

  /* creation of sendTempTask */
  sendTempTaskHandle = osThreadNew(StartSendTempTask, NULL, &sendTempTask_attributes);
 80011ce:	4a1b      	ldr	r2, [pc, #108]	@ (800123c <main+0x108>)
 80011d0:	2100      	movs	r1, #0
 80011d2:	481b      	ldr	r0, [pc, #108]	@ (8001240 <main+0x10c>)
 80011d4:	f004 ff8d 	bl	80060f2 <osThreadNew>
 80011d8:	4603      	mov	r3, r0
 80011da:	4a1a      	ldr	r2, [pc, #104]	@ (8001244 <main+0x110>)
 80011dc:	6013      	str	r3, [r2, #0]

  /* creation of processCmdTask */
  processCmdTaskHandle = osThreadNew(StartProcessCmdTask, NULL, &processCmdTask_attributes);
 80011de:	4a1a      	ldr	r2, [pc, #104]	@ (8001248 <main+0x114>)
 80011e0:	2100      	movs	r1, #0
 80011e2:	481a      	ldr	r0, [pc, #104]	@ (800124c <main+0x118>)
 80011e4:	f004 ff85 	bl	80060f2 <osThreadNew>
 80011e8:	4603      	mov	r3, r0
 80011ea:	4a19      	ldr	r2, [pc, #100]	@ (8001250 <main+0x11c>)
 80011ec:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80011ee:	f004 ff45 	bl	800607c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011f2:	bf00      	nop
 80011f4:	e7fd      	b.n	80011f2 <main+0xbe>
 80011f6:	bf00      	nop
 80011f8:	20000294 	.word	0x20000294
 80011fc:	20000210 	.word	0x20000210
 8001200:	20000340 	.word	0x20000340
 8001204:	200002dc 	.word	0x200002dc
 8001208:	0800d088 	.word	0x0800d088
 800120c:	2000033c 	.word	0x2000033c
 8001210:	20000348 	.word	0x20000348
 8001214:	0800d058 	.word	0x0800d058
 8001218:	20000334 	.word	0x20000334
 800121c:	0800d070 	.word	0x0800d070
 8001220:	20000338 	.word	0x20000338
 8001224:	0800cfc8 	.word	0x0800cfc8
 8001228:	080015c9 	.word	0x080015c9
 800122c:	20000324 	.word	0x20000324
 8001230:	0800cfec 	.word	0x0800cfec
 8001234:	080016c9 	.word	0x080016c9
 8001238:	20000328 	.word	0x20000328
 800123c:	0800d010 	.word	0x0800d010
 8001240:	08001781 	.word	0x08001781
 8001244:	2000032c 	.word	0x2000032c
 8001248:	0800d034 	.word	0x0800d034
 800124c:	08001839 	.word	0x08001839
 8001250:	20000330 	.word	0x20000330

08001254 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b094      	sub	sp, #80	@ 0x50
 8001258:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800125a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800125e:	2228      	movs	r2, #40	@ 0x28
 8001260:	2100      	movs	r1, #0
 8001262:	4618      	mov	r0, r3
 8001264:	f009 f83f 	bl	800a2e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001278:	1d3b      	adds	r3, r7, #4
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]
 8001280:	609a      	str	r2, [r3, #8]
 8001282:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001284:	2301      	movs	r3, #1
 8001286:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001288:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800128c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800128e:	2300      	movs	r3, #0
 8001290:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001292:	2301      	movs	r3, #1
 8001294:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001296:	2302      	movs	r3, #2
 8001298:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800129a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800129e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80012a0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80012a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012aa:	4618      	mov	r0, r3
 80012ac:	f002 fb10 	bl	80038d0 <HAL_RCC_OscConfig>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <SystemClock_Config+0x66>
  {
    Error_Handler();
 80012b6:	f000 fbd7 	bl	8001a68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ba:	230f      	movs	r3, #15
 80012bc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012be:	2302      	movs	r3, #2
 80012c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012c2:	2300      	movs	r3, #0
 80012c4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012ca:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012cc:	2300      	movs	r3, #0
 80012ce:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012d0:	f107 0314 	add.w	r3, r7, #20
 80012d4:	2102      	movs	r1, #2
 80012d6:	4618      	mov	r0, r3
 80012d8:	f002 fd7c 	bl	8003dd4 <HAL_RCC_ClockConfig>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80012e2:	f000 fbc1 	bl	8001a68 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80012e6:	2302      	movs	r3, #2
 80012e8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80012ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80012ee:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012f0:	1d3b      	adds	r3, r7, #4
 80012f2:	4618      	mov	r0, r3
 80012f4:	f002 ff2c 	bl	8004150 <HAL_RCCEx_PeriphCLKConfig>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80012fe:	f000 fbb3 	bl	8001a68 <Error_Handler>
  }
}
 8001302:	bf00      	nop
 8001304:	3750      	adds	r7, #80	@ 0x50
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
	...

0800130c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001312:	1d3b      	adds	r3, r7, #4
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800131c:	4b18      	ldr	r3, [pc, #96]	@ (8001380 <MX_ADC1_Init+0x74>)
 800131e:	4a19      	ldr	r2, [pc, #100]	@ (8001384 <MX_ADC1_Init+0x78>)
 8001320:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001322:	4b17      	ldr	r3, [pc, #92]	@ (8001380 <MX_ADC1_Init+0x74>)
 8001324:	2200      	movs	r2, #0
 8001326:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001328:	4b15      	ldr	r3, [pc, #84]	@ (8001380 <MX_ADC1_Init+0x74>)
 800132a:	2200      	movs	r2, #0
 800132c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800132e:	4b14      	ldr	r3, [pc, #80]	@ (8001380 <MX_ADC1_Init+0x74>)
 8001330:	2200      	movs	r2, #0
 8001332:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001334:	4b12      	ldr	r3, [pc, #72]	@ (8001380 <MX_ADC1_Init+0x74>)
 8001336:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800133a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800133c:	4b10      	ldr	r3, [pc, #64]	@ (8001380 <MX_ADC1_Init+0x74>)
 800133e:	2200      	movs	r2, #0
 8001340:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001342:	4b0f      	ldr	r3, [pc, #60]	@ (8001380 <MX_ADC1_Init+0x74>)
 8001344:	2201      	movs	r2, #1
 8001346:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001348:	480d      	ldr	r0, [pc, #52]	@ (8001380 <MX_ADC1_Init+0x74>)
 800134a:	f000 feb7 	bl	80020bc <HAL_ADC_Init>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001354:	f000 fb88 	bl	8001a68 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001358:	2310      	movs	r3, #16
 800135a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800135c:	2301      	movs	r3, #1
 800135e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001360:	2307      	movs	r3, #7
 8001362:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001364:	1d3b      	adds	r3, r7, #4
 8001366:	4619      	mov	r1, r3
 8001368:	4805      	ldr	r0, [pc, #20]	@ (8001380 <MX_ADC1_Init+0x74>)
 800136a:	f001 f96b 	bl	8002644 <HAL_ADC_ConfigChannel>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001374:	f000 fb78 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001378:	bf00      	nop
 800137a:	3710      	adds	r7, #16
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	20000210 	.word	0x20000210
 8001384:	40012400 	.word	0x40012400

08001388 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800138c:	4b12      	ldr	r3, [pc, #72]	@ (80013d8 <MX_I2C1_Init+0x50>)
 800138e:	4a13      	ldr	r2, [pc, #76]	@ (80013dc <MX_I2C1_Init+0x54>)
 8001390:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001392:	4b11      	ldr	r3, [pc, #68]	@ (80013d8 <MX_I2C1_Init+0x50>)
 8001394:	4a12      	ldr	r2, [pc, #72]	@ (80013e0 <MX_I2C1_Init+0x58>)
 8001396:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001398:	4b0f      	ldr	r3, [pc, #60]	@ (80013d8 <MX_I2C1_Init+0x50>)
 800139a:	2200      	movs	r2, #0
 800139c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800139e:	4b0e      	ldr	r3, [pc, #56]	@ (80013d8 <MX_I2C1_Init+0x50>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013a4:	4b0c      	ldr	r3, [pc, #48]	@ (80013d8 <MX_I2C1_Init+0x50>)
 80013a6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80013aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013ac:	4b0a      	ldr	r3, [pc, #40]	@ (80013d8 <MX_I2C1_Init+0x50>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013b2:	4b09      	ldr	r3, [pc, #36]	@ (80013d8 <MX_I2C1_Init+0x50>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013b8:	4b07      	ldr	r3, [pc, #28]	@ (80013d8 <MX_I2C1_Init+0x50>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013be:	4b06      	ldr	r3, [pc, #24]	@ (80013d8 <MX_I2C1_Init+0x50>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013c4:	4804      	ldr	r0, [pc, #16]	@ (80013d8 <MX_I2C1_Init+0x50>)
 80013c6:	f001 fde7 	bl	8002f98 <HAL_I2C_Init>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013d0:	f000 fb4a 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013d4:	bf00      	nop
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20000240 	.word	0x20000240
 80013dc:	40005400 	.word	0x40005400
 80013e0:	000186a0 	.word	0x000186a0

080013e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b08e      	sub	sp, #56	@ 0x38
 80013e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	605a      	str	r2, [r3, #4]
 80013f4:	609a      	str	r2, [r3, #8]
 80013f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013f8:	f107 0320 	add.w	r3, r7, #32
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001402:	1d3b      	adds	r3, r7, #4
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]
 8001410:	615a      	str	r2, [r3, #20]
 8001412:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001414:	4b2d      	ldr	r3, [pc, #180]	@ (80014cc <MX_TIM2_Init+0xe8>)
 8001416:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800141a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 800141c:	4b2b      	ldr	r3, [pc, #172]	@ (80014cc <MX_TIM2_Init+0xe8>)
 800141e:	2247      	movs	r2, #71	@ 0x47
 8001420:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001422:	4b2a      	ldr	r3, [pc, #168]	@ (80014cc <MX_TIM2_Init+0xe8>)
 8001424:	2200      	movs	r2, #0
 8001426:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001428:	4b28      	ldr	r3, [pc, #160]	@ (80014cc <MX_TIM2_Init+0xe8>)
 800142a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800142e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001430:	4b26      	ldr	r3, [pc, #152]	@ (80014cc <MX_TIM2_Init+0xe8>)
 8001432:	2200      	movs	r2, #0
 8001434:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001436:	4b25      	ldr	r3, [pc, #148]	@ (80014cc <MX_TIM2_Init+0xe8>)
 8001438:	2200      	movs	r2, #0
 800143a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800143c:	4823      	ldr	r0, [pc, #140]	@ (80014cc <MX_TIM2_Init+0xe8>)
 800143e:	f002 fff3 	bl	8004428 <HAL_TIM_Base_Init>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001448:	f000 fb0e 	bl	8001a68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800144c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001450:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001452:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001456:	4619      	mov	r1, r3
 8001458:	481c      	ldr	r0, [pc, #112]	@ (80014cc <MX_TIM2_Init+0xe8>)
 800145a:	f003 fb33 	bl	8004ac4 <HAL_TIM_ConfigClockSource>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001464:	f000 fb00 	bl	8001a68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001468:	4818      	ldr	r0, [pc, #96]	@ (80014cc <MX_TIM2_Init+0xe8>)
 800146a:	f003 f87f 	bl	800456c <HAL_TIM_PWM_Init>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001474:	f000 faf8 	bl	8001a68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001478:	2300      	movs	r3, #0
 800147a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800147c:	2300      	movs	r3, #0
 800147e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001480:	f107 0320 	add.w	r3, r7, #32
 8001484:	4619      	mov	r1, r3
 8001486:	4811      	ldr	r0, [pc, #68]	@ (80014cc <MX_TIM2_Init+0xe8>)
 8001488:	f003 feb8 	bl	80051fc <HAL_TIMEx_MasterConfigSynchronization>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001492:	f000 fae9 	bl	8001a68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001496:	2360      	movs	r3, #96	@ 0x60
 8001498:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 800149a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800149e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014a0:	2300      	movs	r3, #0
 80014a2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80014a8:	1d3b      	adds	r3, r7, #4
 80014aa:	220c      	movs	r2, #12
 80014ac:	4619      	mov	r1, r3
 80014ae:	4807      	ldr	r0, [pc, #28]	@ (80014cc <MX_TIM2_Init+0xe8>)
 80014b0:	f003 fa46 	bl	8004940 <HAL_TIM_PWM_ConfigChannel>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80014ba:	f000 fad5 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80014be:	4803      	ldr	r0, [pc, #12]	@ (80014cc <MX_TIM2_Init+0xe8>)
 80014c0:	f000 fb88 	bl	8001bd4 <HAL_TIM_MspPostInit>

}
 80014c4:	bf00      	nop
 80014c6:	3738      	adds	r7, #56	@ 0x38
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	20000294 	.word	0x20000294

080014d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014d4:	4b11      	ldr	r3, [pc, #68]	@ (800151c <MX_USART1_UART_Init+0x4c>)
 80014d6:	4a12      	ldr	r2, [pc, #72]	@ (8001520 <MX_USART1_UART_Init+0x50>)
 80014d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014da:	4b10      	ldr	r3, [pc, #64]	@ (800151c <MX_USART1_UART_Init+0x4c>)
 80014dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014e2:	4b0e      	ldr	r3, [pc, #56]	@ (800151c <MX_USART1_UART_Init+0x4c>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014e8:	4b0c      	ldr	r3, [pc, #48]	@ (800151c <MX_USART1_UART_Init+0x4c>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014ee:	4b0b      	ldr	r3, [pc, #44]	@ (800151c <MX_USART1_UART_Init+0x4c>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014f4:	4b09      	ldr	r3, [pc, #36]	@ (800151c <MX_USART1_UART_Init+0x4c>)
 80014f6:	220c      	movs	r2, #12
 80014f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014fa:	4b08      	ldr	r3, [pc, #32]	@ (800151c <MX_USART1_UART_Init+0x4c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001500:	4b06      	ldr	r3, [pc, #24]	@ (800151c <MX_USART1_UART_Init+0x4c>)
 8001502:	2200      	movs	r2, #0
 8001504:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001506:	4805      	ldr	r0, [pc, #20]	@ (800151c <MX_USART1_UART_Init+0x4c>)
 8001508:	f003 fee8 	bl	80052dc <HAL_UART_Init>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001512:	f000 faa9 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	200002dc 	.word	0x200002dc
 8001520:	40013800 	.word	0x40013800

08001524 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800152a:	4b14      	ldr	r3, [pc, #80]	@ (800157c <MX_GPIO_Init+0x58>)
 800152c:	699b      	ldr	r3, [r3, #24]
 800152e:	4a13      	ldr	r2, [pc, #76]	@ (800157c <MX_GPIO_Init+0x58>)
 8001530:	f043 0320 	orr.w	r3, r3, #32
 8001534:	6193      	str	r3, [r2, #24]
 8001536:	4b11      	ldr	r3, [pc, #68]	@ (800157c <MX_GPIO_Init+0x58>)
 8001538:	699b      	ldr	r3, [r3, #24]
 800153a:	f003 0320 	and.w	r3, r3, #32
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001542:	4b0e      	ldr	r3, [pc, #56]	@ (800157c <MX_GPIO_Init+0x58>)
 8001544:	699b      	ldr	r3, [r3, #24]
 8001546:	4a0d      	ldr	r2, [pc, #52]	@ (800157c <MX_GPIO_Init+0x58>)
 8001548:	f043 0304 	orr.w	r3, r3, #4
 800154c:	6193      	str	r3, [r2, #24]
 800154e:	4b0b      	ldr	r3, [pc, #44]	@ (800157c <MX_GPIO_Init+0x58>)
 8001550:	699b      	ldr	r3, [r3, #24]
 8001552:	f003 0304 	and.w	r3, r3, #4
 8001556:	60bb      	str	r3, [r7, #8]
 8001558:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800155a:	4b08      	ldr	r3, [pc, #32]	@ (800157c <MX_GPIO_Init+0x58>)
 800155c:	699b      	ldr	r3, [r3, #24]
 800155e:	4a07      	ldr	r2, [pc, #28]	@ (800157c <MX_GPIO_Init+0x58>)
 8001560:	f043 0308 	orr.w	r3, r3, #8
 8001564:	6193      	str	r3, [r2, #24]
 8001566:	4b05      	ldr	r3, [pc, #20]	@ (800157c <MX_GPIO_Init+0x58>)
 8001568:	699b      	ldr	r3, [r3, #24]
 800156a:	f003 0308 	and.w	r3, r3, #8
 800156e:	607b      	str	r3, [r7, #4]
 8001570:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001572:	bf00      	nop
 8001574:	3714      	adds	r7, #20
 8001576:	46bd      	mov	sp, r7
 8001578:	bc80      	pop	{r7}
 800157a:	4770      	bx	lr
 800157c:	40021000 	.word	0x40021000

08001580 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a09      	ldr	r2, [pc, #36]	@ (80015b4 <HAL_UART_RxCpltCallback+0x34>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d10b      	bne.n	80015aa <HAL_UART_RxCpltCallback+0x2a>

        osMessageQueuePut(commandQueueHandle, &rxByte, 0, 0);
 8001592:	4b09      	ldr	r3, [pc, #36]	@ (80015b8 <HAL_UART_RxCpltCallback+0x38>)
 8001594:	6818      	ldr	r0, [r3, #0]
 8001596:	2300      	movs	r3, #0
 8001598:	2200      	movs	r2, #0
 800159a:	4908      	ldr	r1, [pc, #32]	@ (80015bc <HAL_UART_RxCpltCallback+0x3c>)
 800159c:	f004 ffea 	bl	8006574 <osMessageQueuePut>
        HAL_UART_Receive_IT(&huart1, &rxByte, 1);
 80015a0:	2201      	movs	r2, #1
 80015a2:	4906      	ldr	r1, [pc, #24]	@ (80015bc <HAL_UART_RxCpltCallback+0x3c>)
 80015a4:	4806      	ldr	r0, [pc, #24]	@ (80015c0 <HAL_UART_RxCpltCallback+0x40>)
 80015a6:	f003 ff74 	bl	8005492 <HAL_UART_Receive_IT>
    }
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40013800 	.word	0x40013800
 80015b8:	20000338 	.word	0x20000338
 80015bc:	20000340 	.word	0x20000340
 80015c0:	200002dc 	.word	0x200002dc
 80015c4:	00000000 	.word	0x00000000

080015c8 <StartReadTempTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartReadTempTask */
void StartReadTempTask(void *argument)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b086      	sub	sp, #24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  uint32_t xLastWakeTime = osKernelGetTickCount();
 80015d0:	f004 fd7a 	bl	80060c8 <osKernelGetTickCount>
 80015d4:	6178      	str	r0, [r7, #20]
  const uint32_t xFrequency = 2000; // ms, 2 giây 1 lần
 80015d6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80015da:	613b      	str	r3, [r7, #16]

  for (;;)
  {
    // Đợi cho đến đúng thời điểm tiếp theo (CMSIS-RTOS2)
    xLastWakeTime += xFrequency;
 80015dc:	697a      	ldr	r2, [r7, #20]
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	4413      	add	r3, r2
 80015e2:	617b      	str	r3, [r7, #20]
    osDelayUntil(xLastWakeTime);
 80015e4:	6978      	ldr	r0, [r7, #20]
 80015e6:	f004 fe16 	bl	8006216 <osDelayUntil>

    HAL_ADC_Start(&hadc1);
 80015ea:	4833      	ldr	r0, [pc, #204]	@ (80016b8 <StartReadTempTask+0xf0>)
 80015ec:	f000 fe3e 	bl	800226c <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 100);
 80015f0:	2164      	movs	r1, #100	@ 0x64
 80015f2:	4831      	ldr	r0, [pc, #196]	@ (80016b8 <StartReadTempTask+0xf0>)
 80015f4:	f000 ff14 	bl	8002420 <HAL_ADC_PollForConversion>
    uint32_t adcVal = HAL_ADC_GetValue(&hadc1);
 80015f8:	482f      	ldr	r0, [pc, #188]	@ (80016b8 <StartReadTempTask+0xf0>)
 80015fa:	f001 f817 	bl	800262c <HAL_ADC_GetValue>
 80015fe:	60f8      	str	r0, [r7, #12]
    HAL_ADC_Stop(&hadc1);
 8001600:	482d      	ldr	r0, [pc, #180]	@ (80016b8 <StartReadTempTask+0xf0>)
 8001602:	f000 fee1 	bl	80023c8 <HAL_ADC_Stop>

    float temperature = ((1.43 - (float)adcVal * 3.3 / 4095.0) / 0.0043) + 25.0;
 8001606:	68f8      	ldr	r0, [r7, #12]
 8001608:	f7ff fb44 	bl	8000c94 <__aeabi_ui2f>
 800160c:	4603      	mov	r3, r0
 800160e:	4618      	mov	r0, r3
 8001610:	f7fe ff0a 	bl	8000428 <__aeabi_f2d>
 8001614:	a320      	add	r3, pc, #128	@ (adr r3, 8001698 <StartReadTempTask+0xd0>)
 8001616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161a:	f7fe ff5d 	bl	80004d8 <__aeabi_dmul>
 800161e:	4602      	mov	r2, r0
 8001620:	460b      	mov	r3, r1
 8001622:	4610      	mov	r0, r2
 8001624:	4619      	mov	r1, r3
 8001626:	a31e      	add	r3, pc, #120	@ (adr r3, 80016a0 <StartReadTempTask+0xd8>)
 8001628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162c:	f7ff f87e 	bl	800072c <__aeabi_ddiv>
 8001630:	4602      	mov	r2, r0
 8001632:	460b      	mov	r3, r1
 8001634:	a11c      	add	r1, pc, #112	@ (adr r1, 80016a8 <StartReadTempTask+0xe0>)
 8001636:	e9d1 0100 	ldrd	r0, r1, [r1]
 800163a:	f7fe fd95 	bl	8000168 <__aeabi_dsub>
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	4610      	mov	r0, r2
 8001644:	4619      	mov	r1, r3
 8001646:	a31a      	add	r3, pc, #104	@ (adr r3, 80016b0 <StartReadTempTask+0xe8>)
 8001648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800164c:	f7ff f86e 	bl	800072c <__aeabi_ddiv>
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	4610      	mov	r0, r2
 8001656:	4619      	mov	r1, r3
 8001658:	f04f 0200 	mov.w	r2, #0
 800165c:	4b17      	ldr	r3, [pc, #92]	@ (80016bc <StartReadTempTask+0xf4>)
 800165e:	f7fe fd85 	bl	800016c <__adddf3>
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	4610      	mov	r0, r2
 8001668:	4619      	mov	r1, r3
 800166a:	f7ff fa0d 	bl	8000a88 <__aeabi_d2f>
 800166e:	4603      	mov	r3, r0
 8001670:	60bb      	str	r3, [r7, #8]

    if (osMutexAcquire(tempMutexHandle, osWaitForever) == osOK)
 8001672:	4b13      	ldr	r3, [pc, #76]	@ (80016c0 <StartReadTempTask+0xf8>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f04f 31ff 	mov.w	r1, #4294967295
 800167a:	4618      	mov	r0, r3
 800167c:	f004 fe7e 	bl	800637c <osMutexAcquire>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d1aa      	bne.n	80015dc <StartReadTempTask+0x14>
    {
        g_currentTemperature = temperature;
 8001686:	4a0f      	ldr	r2, [pc, #60]	@ (80016c4 <StartReadTempTask+0xfc>)
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	6013      	str	r3, [r2, #0]
        osMutexRelease(tempMutexHandle);
 800168c:	4b0c      	ldr	r3, [pc, #48]	@ (80016c0 <StartReadTempTask+0xf8>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4618      	mov	r0, r3
 8001692:	f004 febe 	bl	8006412 <osMutexRelease>
  {
 8001696:	e7a1      	b.n	80015dc <StartReadTempTask+0x14>
 8001698:	66666666 	.word	0x66666666
 800169c:	400a6666 	.word	0x400a6666
 80016a0:	00000000 	.word	0x00000000
 80016a4:	40affe00 	.word	0x40affe00
 80016a8:	ae147ae1 	.word	0xae147ae1
 80016ac:	3ff6e147 	.word	0x3ff6e147
 80016b0:	75f6fd22 	.word	0x75f6fd22
 80016b4:	3f719ce0 	.word	0x3f719ce0
 80016b8:	20000210 	.word	0x20000210
 80016bc:	40390000 	.word	0x40390000
 80016c0:	20000348 	.word	0x20000348
 80016c4:	20000344 	.word	0x20000344

080016c8 <StartUpdateLcdTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUpdateLcdTask */
void StartUpdateLcdTask(void *argument)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b08c      	sub	sp, #48	@ 0x30
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
	  float localTemp;
	  uint32_t localFreq;
	  char lcdBuffer[20];

  // Thêm vòng lặp delay cho task này
	  uint32_t xLastWakeTime = osKernelGetTickCount();
 80016d0:	f004 fcfa 	bl	80060c8 <osKernelGetTickCount>
 80016d4:	6278      	str	r0, [r7, #36]	@ 0x24
	  const uint32_t xFrequency = 1000; // 1 giây
 80016d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016da:	623b      	str	r3, [r7, #32]

  for(;;)
  {
    // Giữ khóa, đọc cả 2 giá trị nhiệt độ và tần số
	    if (osMutexAcquire(tempMutexHandle, osWaitForever) == osOK)
 80016dc:	4b22      	ldr	r3, [pc, #136]	@ (8001768 <StartUpdateLcdTask+0xa0>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f04f 31ff 	mov.w	r1, #4294967295
 80016e4:	4618      	mov	r0, r3
 80016e6:	f004 fe49 	bl	800637c <osMutexAcquire>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d10a      	bne.n	8001706 <StartUpdateLcdTask+0x3e>
	    {
	        localTemp = g_currentTemperature;
 80016f0:	4b1e      	ldr	r3, [pc, #120]	@ (800176c <StartUpdateLcdTask+0xa4>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	        localFreq = g_currentFrequency;
 80016f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001770 <StartUpdateLcdTask+0xa8>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	62bb      	str	r3, [r7, #40]	@ 0x28
	        osMutexRelease(tempMutexHandle);
 80016fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001768 <StartUpdateLcdTask+0xa0>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f004 fe86 	bl	8006412 <osMutexRelease>
	    }

	    sprintf(lcdBuffer, "Temp: %.1fC", localTemp);
 8001706:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001708:	f7fe fe8e 	bl	8000428 <__aeabi_f2d>
 800170c:	4602      	mov	r2, r0
 800170e:	460b      	mov	r3, r1
 8001710:	f107 000c 	add.w	r0, r7, #12
 8001714:	4917      	ldr	r1, [pc, #92]	@ (8001774 <StartUpdateLcdTask+0xac>)
 8001716:	f008 fd53 	bl	800a1c0 <siprintf>
	    HD44780_SetCursor(0, 0);
 800171a:	2100      	movs	r1, #0
 800171c:	2000      	movs	r0, #0
 800171e:	f7ff fbab 	bl	8000e78 <HD44780_SetCursor>
	    HD44780_PrintStr(lcdBuffer);
 8001722:	f107 030c 	add.w	r3, r7, #12
 8001726:	4618      	mov	r0, r3
 8001728:	f7ff fc18 	bl	8000f5c <HD44780_PrintStr>
	    HD44780_PrintStr("    ");
 800172c:	4812      	ldr	r0, [pc, #72]	@ (8001778 <StartUpdateLcdTask+0xb0>)
 800172e:	f7ff fc15 	bl	8000f5c <HD44780_PrintStr>

	    sprintf(lcdBuffer, "Freq: %luHz", localFreq);
 8001732:	f107 030c 	add.w	r3, r7, #12
 8001736:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001738:	4910      	ldr	r1, [pc, #64]	@ (800177c <StartUpdateLcdTask+0xb4>)
 800173a:	4618      	mov	r0, r3
 800173c:	f008 fd40 	bl	800a1c0 <siprintf>
	    HD44780_SetCursor(0, 1);
 8001740:	2101      	movs	r1, #1
 8001742:	2000      	movs	r0, #0
 8001744:	f7ff fb98 	bl	8000e78 <HD44780_SetCursor>
	    HD44780_PrintStr(lcdBuffer);
 8001748:	f107 030c 	add.w	r3, r7, #12
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff fc05 	bl	8000f5c <HD44780_PrintStr>
	    HD44780_PrintStr("    ");
 8001752:	4809      	ldr	r0, [pc, #36]	@ (8001778 <StartUpdateLcdTask+0xb0>)
 8001754:	f7ff fc02 	bl	8000f5c <HD44780_PrintStr>

	    xLastWakeTime += xFrequency;
 8001758:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800175a:	6a3b      	ldr	r3, [r7, #32]
 800175c:	4413      	add	r3, r2
 800175e:	627b      	str	r3, [r7, #36]	@ 0x24
	    osDelayUntil(xLastWakeTime);
 8001760:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001762:	f004 fd58 	bl	8006216 <osDelayUntil>
	    if (osMutexAcquire(tempMutexHandle, osWaitForever) == osOK)
 8001766:	e7b9      	b.n	80016dc <StartUpdateLcdTask+0x14>
 8001768:	20000348 	.word	0x20000348
 800176c:	20000344 	.word	0x20000344
 8001770:	20000010 	.word	0x20000010
 8001774:	0800cee0 	.word	0x0800cee0
 8001778:	0800ceec 	.word	0x0800ceec
 800177c:	0800cef4 	.word	0x0800cef4

08001780 <StartSendTempTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSendTempTask */
void StartSendTempTask(void *argument)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b096      	sub	sp, #88	@ 0x58
 8001784:	af02      	add	r7, sp, #8
 8001786:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSendTempTask */
	  float localTemp;
	  uint32_t localFreq;
	  char txBuffer[50];

	  uint32_t xLastWakeTime = osKernelGetTickCount();
 8001788:	f004 fc9e 	bl	80060c8 <osKernelGetTickCount>
 800178c:	6478      	str	r0, [r7, #68]	@ 0x44
	  const uint32_t xFrequency = 1000;
 800178e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001792:	643b      	str	r3, [r7, #64]	@ 0x40

	  for(;;)
	  {
	    if (osMutexAcquire(tempMutexHandle, osWaitForever) == osOK)
 8001794:	4b22      	ldr	r3, [pc, #136]	@ (8001820 <StartSendTempTask+0xa0>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f04f 31ff 	mov.w	r1, #4294967295
 800179c:	4618      	mov	r0, r3
 800179e:	f004 fded 	bl	800637c <osMutexAcquire>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d10a      	bne.n	80017be <StartSendTempTask+0x3e>
	    {
	        localTemp = g_currentTemperature;
 80017a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001824 <StartSendTempTask+0xa4>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
	        localFreq = g_currentFrequency;
 80017ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001828 <StartSendTempTask+0xa8>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	64bb      	str	r3, [r7, #72]	@ 0x48
	        osMutexRelease(tempMutexHandle);
 80017b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001820 <StartSendTempTask+0xa0>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f004 fe2a 	bl	8006412 <osMutexRelease>
	    }

	    if (osMutexAcquire(uartMutexHandle, osWaitForever) == osOK)
 80017be:	4b1b      	ldr	r3, [pc, #108]	@ (800182c <StartSendTempTask+0xac>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f04f 31ff 	mov.w	r1, #4294967295
 80017c6:	4618      	mov	r0, r3
 80017c8:	f004 fdd8 	bl	800637c <osMutexAcquire>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d11d      	bne.n	800180e <StartSendTempTask+0x8e>
	    {
	      sprintf(txBuffer, "Temp: %.1f C, Freq: %lu Hz\r\n", localTemp, localFreq);
 80017d2:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80017d4:	f7fe fe28 	bl	8000428 <__aeabi_f2d>
 80017d8:	4602      	mov	r2, r0
 80017da:	460b      	mov	r3, r1
 80017dc:	f107 000c 	add.w	r0, r7, #12
 80017e0:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80017e2:	9100      	str	r1, [sp, #0]
 80017e4:	4912      	ldr	r1, [pc, #72]	@ (8001830 <StartSendTempTask+0xb0>)
 80017e6:	f008 fceb 	bl	800a1c0 <siprintf>
	      HAL_UART_Transmit(&huart1, (uint8_t*)txBuffer, strlen(txBuffer), 100);
 80017ea:	f107 030c 	add.w	r3, r7, #12
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7fe fcae 	bl	8000150 <strlen>
 80017f4:	4603      	mov	r3, r0
 80017f6:	b29a      	uxth	r2, r3
 80017f8:	f107 010c 	add.w	r1, r7, #12
 80017fc:	2364      	movs	r3, #100	@ 0x64
 80017fe:	480d      	ldr	r0, [pc, #52]	@ (8001834 <StartSendTempTask+0xb4>)
 8001800:	f003 fdbc 	bl	800537c <HAL_UART_Transmit>
	      osMutexRelease(uartMutexHandle);
 8001804:	4b09      	ldr	r3, [pc, #36]	@ (800182c <StartSendTempTask+0xac>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4618      	mov	r0, r3
 800180a:	f004 fe02 	bl	8006412 <osMutexRelease>
	    }

	    xLastWakeTime += xFrequency;
 800180e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001810:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001812:	4413      	add	r3, r2
 8001814:	647b      	str	r3, [r7, #68]	@ 0x44
	    osDelayUntil(xLastWakeTime);
 8001816:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001818:	f004 fcfd 	bl	8006216 <osDelayUntil>
	    if (osMutexAcquire(tempMutexHandle, osWaitForever) == osOK)
 800181c:	e7ba      	b.n	8001794 <StartSendTempTask+0x14>
 800181e:	bf00      	nop
 8001820:	20000348 	.word	0x20000348
 8001824:	20000344 	.word	0x20000344
 8001828:	20000010 	.word	0x20000010
 800182c:	2000033c 	.word	0x2000033c
 8001830:	0800cf00 	.word	0x0800cf00
 8001834:	200002dc 	.word	0x200002dc

08001838 <StartProcessCmdTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartProcessCmdTask */
void StartProcessCmdTask(void *argument)
{
 8001838:	b5b0      	push	{r4, r5, r7, lr}
 800183a:	b09c      	sub	sp, #112	@ 0x70
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  char cmdBuffer[32];
  uint8_t cmdIndex = 0;
 8001840:	2300      	movs	r3, #0
 8001842:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint8_t receivedChar;
  for(;;)
  {
    if (osMessageQueueGet(commandQueueHandle, &receivedChar, NULL, osWaitForever) == osOK)
 8001846:	4b74      	ldr	r3, [pc, #464]	@ (8001a18 <StartProcessCmdTask+0x1e0>)
 8001848:	6818      	ldr	r0, [r3, #0]
 800184a:	f107 0147 	add.w	r1, r7, #71	@ 0x47
 800184e:	f04f 33ff 	mov.w	r3, #4294967295
 8001852:	2200      	movs	r2, #0
 8001854:	f004 feee 	bl	8006634 <osMessageQueueGet>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d1f3      	bne.n	8001846 <StartProcessCmdTask+0xe>
    {

      if (receivedChar >= 32 && receivedChar <= 126 && cmdIndex < sizeof(cmdBuffer) - 1)
 800185e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001862:	2b1f      	cmp	r3, #31
 8001864:	d912      	bls.n	800188c <StartProcessCmdTask+0x54>
 8001866:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800186a:	2b7e      	cmp	r3, #126	@ 0x7e
 800186c:	d80e      	bhi.n	800188c <StartProcessCmdTask+0x54>
 800186e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001872:	2b1e      	cmp	r3, #30
 8001874:	d80a      	bhi.n	800188c <StartProcessCmdTask+0x54>
      {
        cmdBuffer[cmdIndex++] = receivedChar;
 8001876:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800187a:	1c5a      	adds	r2, r3, #1
 800187c:	f887 206f 	strb.w	r2, [r7, #111]	@ 0x6f
 8001880:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8001884:	3370      	adds	r3, #112	@ 0x70
 8001886:	443b      	add	r3, r7
 8001888:	f803 2c28 	strb.w	r2, [r3, #-40]
      }

      if (receivedChar == '\n' || receivedChar == '\r')
 800188c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001890:	2b0a      	cmp	r3, #10
 8001892:	d004      	beq.n	800189e <StartProcessCmdTask+0x66>
 8001894:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001898:	2b0d      	cmp	r3, #13
 800189a:	f040 80b3 	bne.w	8001a04 <StartProcessCmdTask+0x1cc>
      {
        if(cmdIndex > 0)
 800189e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	f000 80ab 	beq.w	80019fe <StartProcessCmdTask+0x1c6>
        {
          cmdBuffer[cmdIndex] = '\0';
 80018a8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80018ac:	3370      	adds	r3, #112	@ 0x70
 80018ae:	443b      	add	r3, r7
 80018b0:	2200      	movs	r2, #0
 80018b2:	f803 2c28 	strb.w	r2, [r3, #-40]
          int new_freq;
          if (sscanf(cmdBuffer, "FREQ=%d", &new_freq) == 1)
 80018b6:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80018ba:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80018be:	4957      	ldr	r1, [pc, #348]	@ (8001a1c <StartProcessCmdTask+0x1e4>)
 80018c0:	4618      	mov	r0, r3
 80018c2:	f008 fc9f 	bl	800a204 <siscanf>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d171      	bne.n	80019b0 <StartProcessCmdTask+0x178>
          {
            if (new_freq > 0 && new_freq <= 20000)
 80018cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	dd4d      	ble.n	800196e <StartProcessCmdTask+0x136>
 80018d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80018d4:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80018d8:	4293      	cmp	r3, r2
 80018da:	dc48      	bgt.n	800196e <StartProcessCmdTask+0x136>
            {
              uint32_t new_arr = 72000000 / (72 * new_freq) - 1;
 80018dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80018de:	4613      	mov	r3, r2
 80018e0:	00db      	lsls	r3, r3, #3
 80018e2:	4413      	add	r3, r2
 80018e4:	00db      	lsls	r3, r3, #3
 80018e6:	461a      	mov	r2, r3
 80018e8:	4b4d      	ldr	r3, [pc, #308]	@ (8001a20 <StartProcessCmdTask+0x1e8>)
 80018ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80018ee:	3b01      	subs	r3, #1
 80018f0:	66bb      	str	r3, [r7, #104]	@ 0x68
              __HAL_TIM_SET_AUTORELOAD(&htim2, new_arr);
 80018f2:	4b4c      	ldr	r3, [pc, #304]	@ (8001a24 <StartProcessCmdTask+0x1ec>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80018f8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80018fa:	4a4a      	ldr	r2, [pc, #296]	@ (8001a24 <StartProcessCmdTask+0x1ec>)
 80018fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80018fe:	60d3      	str	r3, [r2, #12]

              if (osMutexAcquire(tempMutexHandle, osWaitForever) == osOK)
 8001900:	4b49      	ldr	r3, [pc, #292]	@ (8001a28 <StartProcessCmdTask+0x1f0>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f04f 31ff 	mov.w	r1, #4294967295
 8001908:	4618      	mov	r0, r3
 800190a:	f004 fd37 	bl	800637c <osMutexAcquire>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d108      	bne.n	8001926 <StartProcessCmdTask+0xee>
              {
                  g_currentFrequency = new_freq;
 8001914:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001916:	461a      	mov	r2, r3
 8001918:	4b44      	ldr	r3, [pc, #272]	@ (8001a2c <StartProcessCmdTask+0x1f4>)
 800191a:	601a      	str	r2, [r3, #0]
                  osMutexRelease(tempMutexHandle);
 800191c:	4b42      	ldr	r3, [pc, #264]	@ (8001a28 <StartProcessCmdTask+0x1f0>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4618      	mov	r0, r3
 8001922:	f004 fd76 	bl	8006412 <osMutexRelease>
              }

              if (osMutexAcquire(uartMutexHandle, osWaitForever) == osOK)
 8001926:	4b42      	ldr	r3, [pc, #264]	@ (8001a30 <StartProcessCmdTask+0x1f8>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f04f 31ff 	mov.w	r1, #4294967295
 800192e:	4618      	mov	r0, r3
 8001930:	f004 fd24 	bl	800637c <osMutexAcquire>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d160      	bne.n	80019fc <StartProcessCmdTask+0x1c4>
              {
                char txBuffer[50];
                sprintf(txBuffer, "OK! Frequency set to %d Hz\r\n", new_freq);
 800193a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800193c:	f107 0308 	add.w	r3, r7, #8
 8001940:	493c      	ldr	r1, [pc, #240]	@ (8001a34 <StartProcessCmdTask+0x1fc>)
 8001942:	4618      	mov	r0, r3
 8001944:	f008 fc3c 	bl	800a1c0 <siprintf>
                HAL_UART_Transmit(&huart1, (uint8_t*)txBuffer, strlen(txBuffer), 100);
 8001948:	f107 0308 	add.w	r3, r7, #8
 800194c:	4618      	mov	r0, r3
 800194e:	f7fe fbff 	bl	8000150 <strlen>
 8001952:	4603      	mov	r3, r0
 8001954:	b29a      	uxth	r2, r3
 8001956:	f107 0108 	add.w	r1, r7, #8
 800195a:	2364      	movs	r3, #100	@ 0x64
 800195c:	4836      	ldr	r0, [pc, #216]	@ (8001a38 <StartProcessCmdTask+0x200>)
 800195e:	f003 fd0d 	bl	800537c <HAL_UART_Transmit>
                osMutexRelease(uartMutexHandle);
 8001962:	4b33      	ldr	r3, [pc, #204]	@ (8001a30 <StartProcessCmdTask+0x1f8>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4618      	mov	r0, r3
 8001968:	f004 fd53 	bl	8006412 <osMutexRelease>
            {
 800196c:	e046      	b.n	80019fc <StartProcessCmdTask+0x1c4>
              }
            }
            else
            {
              if (osMutexAcquire(uartMutexHandle, osWaitForever) == osOK)
 800196e:	4b30      	ldr	r3, [pc, #192]	@ (8001a30 <StartProcessCmdTask+0x1f8>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f04f 31ff 	mov.w	r1, #4294967295
 8001976:	4618      	mov	r0, r3
 8001978:	f004 fd00 	bl	800637c <osMutexAcquire>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d13d      	bne.n	80019fe <StartProcessCmdTask+0x1c6>
              {
                char txBuffer[] = "Error: Invalid frequency value.\r\n";
 8001982:	4b2e      	ldr	r3, [pc, #184]	@ (8001a3c <StartProcessCmdTask+0x204>)
 8001984:	f107 0408 	add.w	r4, r7, #8
 8001988:	461d      	mov	r5, r3
 800198a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800198c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800198e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001990:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001992:	682b      	ldr	r3, [r5, #0]
 8001994:	8023      	strh	r3, [r4, #0]
                HAL_UART_Transmit(&huart1, (uint8_t*)txBuffer, sizeof(txBuffer)-1, 100);
 8001996:	f107 0108 	add.w	r1, r7, #8
 800199a:	2364      	movs	r3, #100	@ 0x64
 800199c:	2221      	movs	r2, #33	@ 0x21
 800199e:	4826      	ldr	r0, [pc, #152]	@ (8001a38 <StartProcessCmdTask+0x200>)
 80019a0:	f003 fcec 	bl	800537c <HAL_UART_Transmit>
                osMutexRelease(uartMutexHandle);
 80019a4:	4b22      	ldr	r3, [pc, #136]	@ (8001a30 <StartProcessCmdTask+0x1f8>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f004 fd32 	bl	8006412 <osMutexRelease>
 80019ae:	e026      	b.n	80019fe <StartProcessCmdTask+0x1c6>
              }
            }
          }
          else
          {
            if (osMutexAcquire(uartMutexHandle, osWaitForever) == osOK)
 80019b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001a30 <StartProcessCmdTask+0x1f8>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f04f 31ff 	mov.w	r1, #4294967295
 80019b8:	4618      	mov	r0, r3
 80019ba:	f004 fcdf 	bl	800637c <osMutexAcquire>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d11c      	bne.n	80019fe <StartProcessCmdTask+0x1c6>
            {
              char txBuffer[] = "Error: Unknown command. Try 'FREQ=xxx' or 'STATUS'.\r\n";
 80019c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001a40 <StartProcessCmdTask+0x208>)
 80019c6:	f107 0408 	add.w	r4, r7, #8
 80019ca:	461d      	mov	r5, r3
 80019cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019d8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80019dc:	6020      	str	r0, [r4, #0]
 80019de:	3404      	adds	r4, #4
 80019e0:	8021      	strh	r1, [r4, #0]
              HAL_UART_Transmit(&huart1, (uint8_t*)txBuffer, sizeof(txBuffer)-1, 100);
 80019e2:	f107 0108 	add.w	r1, r7, #8
 80019e6:	2364      	movs	r3, #100	@ 0x64
 80019e8:	2235      	movs	r2, #53	@ 0x35
 80019ea:	4813      	ldr	r0, [pc, #76]	@ (8001a38 <StartProcessCmdTask+0x200>)
 80019ec:	f003 fcc6 	bl	800537c <HAL_UART_Transmit>
              osMutexRelease(uartMutexHandle);
 80019f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001a30 <StartProcessCmdTask+0x1f8>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f004 fd0c 	bl	8006412 <osMutexRelease>
 80019fa:	e000      	b.n	80019fe <StartProcessCmdTask+0x1c6>
            {
 80019fc:	bf00      	nop
            }
          }
        }
        cmdIndex = 0;
 80019fe:	2300      	movs	r3, #0
 8001a00:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      }
      if (cmdIndex >= sizeof(cmdBuffer) - 1)
 8001a04:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001a08:	2b1e      	cmp	r3, #30
 8001a0a:	f67f af1c 	bls.w	8001846 <StartProcessCmdTask+0xe>
      {
        cmdIndex = 0;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    if (osMessageQueueGet(commandQueueHandle, &receivedChar, NULL, osWaitForever) == osOK)
 8001a14:	e717      	b.n	8001846 <StartProcessCmdTask+0xe>
 8001a16:	bf00      	nop
 8001a18:	20000338 	.word	0x20000338
 8001a1c:	0800cf20 	.word	0x0800cf20
 8001a20:	044aa200 	.word	0x044aa200
 8001a24:	20000294 	.word	0x20000294
 8001a28:	20000348 	.word	0x20000348
 8001a2c:	20000010 	.word	0x20000010
 8001a30:	2000033c 	.word	0x2000033c
 8001a34:	0800cf28 	.word	0x0800cf28
 8001a38:	200002dc 	.word	0x200002dc
 8001a3c:	0800cf48 	.word	0x0800cf48
 8001a40:	0800cf6c 	.word	0x0800cf6c

08001a44 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a04      	ldr	r2, [pc, #16]	@ (8001a64 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d101      	bne.n	8001a5a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001a56:	f000 faf1 	bl	800203c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40000800 	.word	0x40000800

08001a68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a6c:	b672      	cpsid	i
}
 8001a6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a70:	bf00      	nop
 8001a72:	e7fd      	b.n	8001a70 <Error_Handler+0x8>

08001a74 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a7a:	4b18      	ldr	r3, [pc, #96]	@ (8001adc <HAL_MspInit+0x68>)
 8001a7c:	699b      	ldr	r3, [r3, #24]
 8001a7e:	4a17      	ldr	r2, [pc, #92]	@ (8001adc <HAL_MspInit+0x68>)
 8001a80:	f043 0301 	orr.w	r3, r3, #1
 8001a84:	6193      	str	r3, [r2, #24]
 8001a86:	4b15      	ldr	r3, [pc, #84]	@ (8001adc <HAL_MspInit+0x68>)
 8001a88:	699b      	ldr	r3, [r3, #24]
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	60bb      	str	r3, [r7, #8]
 8001a90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a92:	4b12      	ldr	r3, [pc, #72]	@ (8001adc <HAL_MspInit+0x68>)
 8001a94:	69db      	ldr	r3, [r3, #28]
 8001a96:	4a11      	ldr	r2, [pc, #68]	@ (8001adc <HAL_MspInit+0x68>)
 8001a98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a9c:	61d3      	str	r3, [r2, #28]
 8001a9e:	4b0f      	ldr	r3, [pc, #60]	@ (8001adc <HAL_MspInit+0x68>)
 8001aa0:	69db      	ldr	r3, [r3, #28]
 8001aa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aa6:	607b      	str	r3, [r7, #4]
 8001aa8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001aaa:	2200      	movs	r2, #0
 8001aac:	210f      	movs	r1, #15
 8001aae:	f06f 0001 	mvn.w	r0, #1
 8001ab2:	f001 f810 	bl	8002ad6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae0 <HAL_MspInit+0x6c>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	4a04      	ldr	r2, [pc, #16]	@ (8001ae0 <HAL_MspInit+0x6c>)
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	40010000 	.word	0x40010000

08001ae4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a09      	ldr	r2, [pc, #36]	@ (8001b18 <HAL_ADC_MspInit+0x34>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d10b      	bne.n	8001b0e <HAL_ADC_MspInit+0x2a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001af6:	4b09      	ldr	r3, [pc, #36]	@ (8001b1c <HAL_ADC_MspInit+0x38>)
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	4a08      	ldr	r2, [pc, #32]	@ (8001b1c <HAL_ADC_MspInit+0x38>)
 8001afc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b00:	6193      	str	r3, [r2, #24]
 8001b02:	4b06      	ldr	r3, [pc, #24]	@ (8001b1c <HAL_ADC_MspInit+0x38>)
 8001b04:	699b      	ldr	r3, [r3, #24]
 8001b06:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001b0e:	bf00      	nop
 8001b10:	3714      	adds	r7, #20
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bc80      	pop	{r7}
 8001b16:	4770      	bx	lr
 8001b18:	40012400 	.word	0x40012400
 8001b1c:	40021000 	.word	0x40021000

08001b20 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b088      	sub	sp, #32
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b28:	f107 0310 	add.w	r3, r7, #16
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	605a      	str	r2, [r3, #4]
 8001b32:	609a      	str	r2, [r3, #8]
 8001b34:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a15      	ldr	r2, [pc, #84]	@ (8001b90 <HAL_I2C_MspInit+0x70>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d123      	bne.n	8001b88 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b40:	4b14      	ldr	r3, [pc, #80]	@ (8001b94 <HAL_I2C_MspInit+0x74>)
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	4a13      	ldr	r2, [pc, #76]	@ (8001b94 <HAL_I2C_MspInit+0x74>)
 8001b46:	f043 0308 	orr.w	r3, r3, #8
 8001b4a:	6193      	str	r3, [r2, #24]
 8001b4c:	4b11      	ldr	r3, [pc, #68]	@ (8001b94 <HAL_I2C_MspInit+0x74>)
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	f003 0308 	and.w	r3, r3, #8
 8001b54:	60fb      	str	r3, [r7, #12]
 8001b56:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b58:	23c0      	movs	r3, #192	@ 0xc0
 8001b5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b5c:	2312      	movs	r3, #18
 8001b5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b60:	2303      	movs	r3, #3
 8001b62:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b64:	f107 0310 	add.w	r3, r7, #16
 8001b68:	4619      	mov	r1, r3
 8001b6a:	480b      	ldr	r0, [pc, #44]	@ (8001b98 <HAL_I2C_MspInit+0x78>)
 8001b6c:	f001 f890 	bl	8002c90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b70:	4b08      	ldr	r3, [pc, #32]	@ (8001b94 <HAL_I2C_MspInit+0x74>)
 8001b72:	69db      	ldr	r3, [r3, #28]
 8001b74:	4a07      	ldr	r2, [pc, #28]	@ (8001b94 <HAL_I2C_MspInit+0x74>)
 8001b76:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001b7a:	61d3      	str	r3, [r2, #28]
 8001b7c:	4b05      	ldr	r3, [pc, #20]	@ (8001b94 <HAL_I2C_MspInit+0x74>)
 8001b7e:	69db      	ldr	r3, [r3, #28]
 8001b80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b84:	60bb      	str	r3, [r7, #8]
 8001b86:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001b88:	bf00      	nop
 8001b8a:	3720      	adds	r7, #32
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40005400 	.word	0x40005400
 8001b94:	40021000 	.word	0x40021000
 8001b98:	40010c00 	.word	0x40010c00

08001b9c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b085      	sub	sp, #20
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bac:	d10b      	bne.n	8001bc6 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bae:	4b08      	ldr	r3, [pc, #32]	@ (8001bd0 <HAL_TIM_Base_MspInit+0x34>)
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	4a07      	ldr	r2, [pc, #28]	@ (8001bd0 <HAL_TIM_Base_MspInit+0x34>)
 8001bb4:	f043 0301 	orr.w	r3, r3, #1
 8001bb8:	61d3      	str	r3, [r2, #28]
 8001bba:	4b05      	ldr	r3, [pc, #20]	@ (8001bd0 <HAL_TIM_Base_MspInit+0x34>)
 8001bbc:	69db      	ldr	r3, [r3, #28]
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001bc6:	bf00      	nop
 8001bc8:	3714      	adds	r7, #20
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bc80      	pop	{r7}
 8001bce:	4770      	bx	lr
 8001bd0:	40021000 	.word	0x40021000

08001bd4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b088      	sub	sp, #32
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bdc:	f107 0310 	add.w	r3, r7, #16
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	605a      	str	r2, [r3, #4]
 8001be6:	609a      	str	r2, [r3, #8]
 8001be8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bf2:	d117      	bne.n	8001c24 <HAL_TIM_MspPostInit+0x50>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf4:	4b0d      	ldr	r3, [pc, #52]	@ (8001c2c <HAL_TIM_MspPostInit+0x58>)
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	4a0c      	ldr	r2, [pc, #48]	@ (8001c2c <HAL_TIM_MspPostInit+0x58>)
 8001bfa:	f043 0304 	orr.w	r3, r3, #4
 8001bfe:	6193      	str	r3, [r2, #24]
 8001c00:	4b0a      	ldr	r3, [pc, #40]	@ (8001c2c <HAL_TIM_MspPostInit+0x58>)
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	f003 0304 	and.w	r3, r3, #4
 8001c08:	60fb      	str	r3, [r7, #12]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c0c:	2308      	movs	r3, #8
 8001c0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c10:	2302      	movs	r3, #2
 8001c12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c14:	2302      	movs	r3, #2
 8001c16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c18:	f107 0310 	add.w	r3, r7, #16
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4804      	ldr	r0, [pc, #16]	@ (8001c30 <HAL_TIM_MspPostInit+0x5c>)
 8001c20:	f001 f836 	bl	8002c90 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001c24:	bf00      	nop
 8001c26:	3720      	adds	r7, #32
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	40010800 	.word	0x40010800

08001c34 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b088      	sub	sp, #32
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c3c:	f107 0310 	add.w	r3, r7, #16
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	609a      	str	r2, [r3, #8]
 8001c48:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a20      	ldr	r2, [pc, #128]	@ (8001cd0 <HAL_UART_MspInit+0x9c>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d139      	bne.n	8001cc8 <HAL_UART_MspInit+0x94>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c54:	4b1f      	ldr	r3, [pc, #124]	@ (8001cd4 <HAL_UART_MspInit+0xa0>)
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	4a1e      	ldr	r2, [pc, #120]	@ (8001cd4 <HAL_UART_MspInit+0xa0>)
 8001c5a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c5e:	6193      	str	r3, [r2, #24]
 8001c60:	4b1c      	ldr	r3, [pc, #112]	@ (8001cd4 <HAL_UART_MspInit+0xa0>)
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c68:	60fb      	str	r3, [r7, #12]
 8001c6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c6c:	4b19      	ldr	r3, [pc, #100]	@ (8001cd4 <HAL_UART_MspInit+0xa0>)
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	4a18      	ldr	r2, [pc, #96]	@ (8001cd4 <HAL_UART_MspInit+0xa0>)
 8001c72:	f043 0304 	orr.w	r3, r3, #4
 8001c76:	6193      	str	r3, [r2, #24]
 8001c78:	4b16      	ldr	r3, [pc, #88]	@ (8001cd4 <HAL_UART_MspInit+0xa0>)
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	f003 0304 	and.w	r3, r3, #4
 8001c80:	60bb      	str	r3, [r7, #8]
 8001c82:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c84:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c88:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c92:	f107 0310 	add.w	r3, r7, #16
 8001c96:	4619      	mov	r1, r3
 8001c98:	480f      	ldr	r0, [pc, #60]	@ (8001cd8 <HAL_UART_MspInit+0xa4>)
 8001c9a:	f000 fff9 	bl	8002c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ca2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cac:	f107 0310 	add.w	r3, r7, #16
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4809      	ldr	r0, [pc, #36]	@ (8001cd8 <HAL_UART_MspInit+0xa4>)
 8001cb4:	f000 ffec 	bl	8002c90 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001cb8:	2200      	movs	r2, #0
 8001cba:	2105      	movs	r1, #5
 8001cbc:	2025      	movs	r0, #37	@ 0x25
 8001cbe:	f000 ff0a 	bl	8002ad6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001cc2:	2025      	movs	r0, #37	@ 0x25
 8001cc4:	f000 ff23 	bl	8002b0e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001cc8:	bf00      	nop
 8001cca:	3720      	adds	r7, #32
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	40013800 	.word	0x40013800
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	40010800 	.word	0x40010800

08001cdc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b08e      	sub	sp, #56	@ 0x38
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8001cec:	2300      	movs	r3, #0
 8001cee:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001cf2:	4b34      	ldr	r3, [pc, #208]	@ (8001dc4 <HAL_InitTick+0xe8>)
 8001cf4:	69db      	ldr	r3, [r3, #28]
 8001cf6:	4a33      	ldr	r2, [pc, #204]	@ (8001dc4 <HAL_InitTick+0xe8>)
 8001cf8:	f043 0304 	orr.w	r3, r3, #4
 8001cfc:	61d3      	str	r3, [r2, #28]
 8001cfe:	4b31      	ldr	r3, [pc, #196]	@ (8001dc4 <HAL_InitTick+0xe8>)
 8001d00:	69db      	ldr	r3, [r3, #28]
 8001d02:	f003 0304 	and.w	r3, r3, #4
 8001d06:	60fb      	str	r3, [r7, #12]
 8001d08:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d0a:	f107 0210 	add.w	r2, r7, #16
 8001d0e:	f107 0314 	add.w	r3, r7, #20
 8001d12:	4611      	mov	r1, r2
 8001d14:	4618      	mov	r0, r3
 8001d16:	f002 f9cd 	bl	80040b4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001d1a:	6a3b      	ldr	r3, [r7, #32]
 8001d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001d1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d103      	bne.n	8001d2c <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001d24:	f002 f99e 	bl	8004064 <HAL_RCC_GetPCLK1Freq>
 8001d28:	6378      	str	r0, [r7, #52]	@ 0x34
 8001d2a:	e004      	b.n	8001d36 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001d2c:	f002 f99a 	bl	8004064 <HAL_RCC_GetPCLK1Freq>
 8001d30:	4603      	mov	r3, r0
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d38:	4a23      	ldr	r2, [pc, #140]	@ (8001dc8 <HAL_InitTick+0xec>)
 8001d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d3e:	0c9b      	lsrs	r3, r3, #18
 8001d40:	3b01      	subs	r3, #1
 8001d42:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001d44:	4b21      	ldr	r3, [pc, #132]	@ (8001dcc <HAL_InitTick+0xf0>)
 8001d46:	4a22      	ldr	r2, [pc, #136]	@ (8001dd0 <HAL_InitTick+0xf4>)
 8001d48:	601a      	str	r2, [r3, #0]
   * Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001d4a:	4b20      	ldr	r3, [pc, #128]	@ (8001dcc <HAL_InitTick+0xf0>)
 8001d4c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001d50:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001d52:	4a1e      	ldr	r2, [pc, #120]	@ (8001dcc <HAL_InitTick+0xf0>)
 8001d54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d56:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001d58:	4b1c      	ldr	r3, [pc, #112]	@ (8001dcc <HAL_InitTick+0xf0>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d5e:	4b1b      	ldr	r3, [pc, #108]	@ (8001dcc <HAL_InitTick+0xf0>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d64:	4b19      	ldr	r3, [pc, #100]	@ (8001dcc <HAL_InitTick+0xf0>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8001d6a:	4818      	ldr	r0, [pc, #96]	@ (8001dcc <HAL_InitTick+0xf0>)
 8001d6c:	f002 fb5c 	bl	8004428 <HAL_TIM_Base_Init>
 8001d70:	4603      	mov	r3, r0
 8001d72:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001d76:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d11b      	bne.n	8001db6 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8001d7e:	4813      	ldr	r0, [pc, #76]	@ (8001dcc <HAL_InitTick+0xf0>)
 8001d80:	f002 fba2 	bl	80044c8 <HAL_TIM_Base_Start_IT>
 8001d84:	4603      	mov	r3, r0
 8001d86:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001d8a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d111      	bne.n	8001db6 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001d92:	201e      	movs	r0, #30
 8001d94:	f000 febb 	bl	8002b0e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2b0f      	cmp	r3, #15
 8001d9c:	d808      	bhi.n	8001db0 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001d9e:	2200      	movs	r2, #0
 8001da0:	6879      	ldr	r1, [r7, #4]
 8001da2:	201e      	movs	r0, #30
 8001da4:	f000 fe97 	bl	8002ad6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001da8:	4a0a      	ldr	r2, [pc, #40]	@ (8001dd4 <HAL_InitTick+0xf8>)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6013      	str	r3, [r2, #0]
 8001dae:	e002      	b.n	8001db6 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001db6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3738      	adds	r7, #56	@ 0x38
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	431bde83 	.word	0x431bde83
 8001dcc:	2000034c 	.word	0x2000034c
 8001dd0:	40000800 	.word	0x40000800
 8001dd4:	20000018 	.word	0x20000018

08001dd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ddc:	bf00      	nop
 8001dde:	e7fd      	b.n	8001ddc <NMI_Handler+0x4>

08001de0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001de4:	bf00      	nop
 8001de6:	e7fd      	b.n	8001de4 <HardFault_Handler+0x4>

08001de8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dec:	bf00      	nop
 8001dee:	e7fd      	b.n	8001dec <MemManage_Handler+0x4>

08001df0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001df4:	bf00      	nop
 8001df6:	e7fd      	b.n	8001df4 <BusFault_Handler+0x4>

08001df8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dfc:	bf00      	nop
 8001dfe:	e7fd      	b.n	8001dfc <UsageFault_Handler+0x4>

08001e00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e04:	bf00      	nop
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bc80      	pop	{r7}
 8001e0a:	4770      	bx	lr

08001e0c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001e10:	4802      	ldr	r0, [pc, #8]	@ (8001e1c <TIM4_IRQHandler+0x10>)
 8001e12:	f002 fca5 	bl	8004760 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001e16:	bf00      	nop
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	2000034c 	.word	0x2000034c

08001e20 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e24:	4802      	ldr	r0, [pc, #8]	@ (8001e30 <USART1_IRQHandler+0x10>)
 8001e26:	f003 fb59 	bl	80054dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e2a:	bf00      	nop
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	200002dc 	.word	0x200002dc

08001e34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  return 1;
 8001e38:	2301      	movs	r3, #1
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bc80      	pop	{r7}
 8001e40:	4770      	bx	lr

08001e42 <_kill>:

int _kill(int pid, int sig)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b082      	sub	sp, #8
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
 8001e4a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e4c:	f008 fafc 	bl	800a448 <__errno>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2216      	movs	r2, #22
 8001e54:	601a      	str	r2, [r3, #0]
  return -1;
 8001e56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <_exit>:

void _exit (int status)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b082      	sub	sp, #8
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e6a:	f04f 31ff 	mov.w	r1, #4294967295
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f7ff ffe7 	bl	8001e42 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e74:	bf00      	nop
 8001e76:	e7fd      	b.n	8001e74 <_exit+0x12>

08001e78 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e84:	2300      	movs	r3, #0
 8001e86:	617b      	str	r3, [r7, #20]
 8001e88:	e00a      	b.n	8001ea0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e8a:	f3af 8000 	nop.w
 8001e8e:	4601      	mov	r1, r0
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	1c5a      	adds	r2, r3, #1
 8001e94:	60ba      	str	r2, [r7, #8]
 8001e96:	b2ca      	uxtb	r2, r1
 8001e98:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	617b      	str	r3, [r7, #20]
 8001ea0:	697a      	ldr	r2, [r7, #20]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	dbf0      	blt.n	8001e8a <_read+0x12>
  }

  return len;
 8001ea8:	687b      	ldr	r3, [r7, #4]
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3718      	adds	r7, #24
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b086      	sub	sp, #24
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	60f8      	str	r0, [r7, #12]
 8001eba:	60b9      	str	r1, [r7, #8]
 8001ebc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	617b      	str	r3, [r7, #20]
 8001ec2:	e009      	b.n	8001ed8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	1c5a      	adds	r2, r3, #1
 8001ec8:	60ba      	str	r2, [r7, #8]
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	617b      	str	r3, [r7, #20]
 8001ed8:	697a      	ldr	r2, [r7, #20]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	dbf1      	blt.n	8001ec4 <_write+0x12>
  }
  return len;
 8001ee0:	687b      	ldr	r3, [r7, #4]
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3718      	adds	r7, #24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <_close>:

int _close(int file)
{
 8001eea:	b480      	push	{r7}
 8001eec:	b083      	sub	sp, #12
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ef2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bc80      	pop	{r7}
 8001efe:	4770      	bx	lr

08001f00 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f10:	605a      	str	r2, [r3, #4]
  return 0;
 8001f12:	2300      	movs	r3, #0
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bc80      	pop	{r7}
 8001f1c:	4770      	bx	lr

08001f1e <_isatty>:

int _isatty(int file)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	b083      	sub	sp, #12
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f26:	2301      	movs	r3, #1
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bc80      	pop	{r7}
 8001f30:	4770      	bx	lr

08001f32 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f32:	b480      	push	{r7}
 8001f34:	b085      	sub	sp, #20
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	60f8      	str	r0, [r7, #12]
 8001f3a:	60b9      	str	r1, [r7, #8]
 8001f3c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3714      	adds	r7, #20
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bc80      	pop	{r7}
 8001f48:	4770      	bx	lr
	...

08001f4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f54:	4a14      	ldr	r2, [pc, #80]	@ (8001fa8 <_sbrk+0x5c>)
 8001f56:	4b15      	ldr	r3, [pc, #84]	@ (8001fac <_sbrk+0x60>)
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f60:	4b13      	ldr	r3, [pc, #76]	@ (8001fb0 <_sbrk+0x64>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d102      	bne.n	8001f6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f68:	4b11      	ldr	r3, [pc, #68]	@ (8001fb0 <_sbrk+0x64>)
 8001f6a:	4a12      	ldr	r2, [pc, #72]	@ (8001fb4 <_sbrk+0x68>)
 8001f6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f6e:	4b10      	ldr	r3, [pc, #64]	@ (8001fb0 <_sbrk+0x64>)
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4413      	add	r3, r2
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d207      	bcs.n	8001f8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f7c:	f008 fa64 	bl	800a448 <__errno>
 8001f80:	4603      	mov	r3, r0
 8001f82:	220c      	movs	r2, #12
 8001f84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f86:	f04f 33ff 	mov.w	r3, #4294967295
 8001f8a:	e009      	b.n	8001fa0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f8c:	4b08      	ldr	r3, [pc, #32]	@ (8001fb0 <_sbrk+0x64>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f92:	4b07      	ldr	r3, [pc, #28]	@ (8001fb0 <_sbrk+0x64>)
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4413      	add	r3, r2
 8001f9a:	4a05      	ldr	r2, [pc, #20]	@ (8001fb0 <_sbrk+0x64>)
 8001f9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3718      	adds	r7, #24
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	20005000 	.word	0x20005000
 8001fac:	00000400 	.word	0x00000400
 8001fb0:	20000394 	.word	0x20000394
 8001fb4:	20002ad0 	.word	0x20002ad0

08001fb8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fbc:	bf00      	nop
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bc80      	pop	{r7}
 8001fc2:	4770      	bx	lr

08001fc4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fc4:	f7ff fff8 	bl	8001fb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fc8:	480b      	ldr	r0, [pc, #44]	@ (8001ff8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001fca:	490c      	ldr	r1, [pc, #48]	@ (8001ffc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001fcc:	4a0c      	ldr	r2, [pc, #48]	@ (8002000 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001fce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fd0:	e002      	b.n	8001fd8 <LoopCopyDataInit>

08001fd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fd6:	3304      	adds	r3, #4

08001fd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fdc:	d3f9      	bcc.n	8001fd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fde:	4a09      	ldr	r2, [pc, #36]	@ (8002004 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001fe0:	4c09      	ldr	r4, [pc, #36]	@ (8002008 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fe2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fe4:	e001      	b.n	8001fea <LoopFillZerobss>

08001fe6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fe6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fe8:	3204      	adds	r2, #4

08001fea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fec:	d3fb      	bcc.n	8001fe6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fee:	f008 fa31 	bl	800a454 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ff2:	f7ff f89f 	bl	8001134 <main>
  bx lr
 8001ff6:	4770      	bx	lr
  ldr r0, =_sdata
 8001ff8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ffc:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002000:	0800d474 	.word	0x0800d474
  ldr r2, =_sbss
 8002004:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8002008:	20002ad0 	.word	0x20002ad0

0800200c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800200c:	e7fe      	b.n	800200c <ADC1_2_IRQHandler>
	...

08002010 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002014:	4b08      	ldr	r3, [pc, #32]	@ (8002038 <HAL_Init+0x28>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a07      	ldr	r2, [pc, #28]	@ (8002038 <HAL_Init+0x28>)
 800201a:	f043 0310 	orr.w	r3, r3, #16
 800201e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002020:	2003      	movs	r0, #3
 8002022:	f000 fd4d 	bl	8002ac0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002026:	200f      	movs	r0, #15
 8002028:	f7ff fe58 	bl	8001cdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800202c:	f7ff fd22 	bl	8001a74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40022000 	.word	0x40022000

0800203c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002040:	4b05      	ldr	r3, [pc, #20]	@ (8002058 <HAL_IncTick+0x1c>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	461a      	mov	r2, r3
 8002046:	4b05      	ldr	r3, [pc, #20]	@ (800205c <HAL_IncTick+0x20>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4413      	add	r3, r2
 800204c:	4a03      	ldr	r2, [pc, #12]	@ (800205c <HAL_IncTick+0x20>)
 800204e:	6013      	str	r3, [r2, #0]
}
 8002050:	bf00      	nop
 8002052:	46bd      	mov	sp, r7
 8002054:	bc80      	pop	{r7}
 8002056:	4770      	bx	lr
 8002058:	2000001c 	.word	0x2000001c
 800205c:	20000398 	.word	0x20000398

08002060 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  return uwTick;
 8002064:	4b02      	ldr	r3, [pc, #8]	@ (8002070 <HAL_GetTick+0x10>)
 8002066:	681b      	ldr	r3, [r3, #0]
}
 8002068:	4618      	mov	r0, r3
 800206a:	46bd      	mov	sp, r7
 800206c:	bc80      	pop	{r7}
 800206e:	4770      	bx	lr
 8002070:	20000398 	.word	0x20000398

08002074 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800207c:	f7ff fff0 	bl	8002060 <HAL_GetTick>
 8002080:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800208c:	d005      	beq.n	800209a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800208e:	4b0a      	ldr	r3, [pc, #40]	@ (80020b8 <HAL_Delay+0x44>)
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	461a      	mov	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	4413      	add	r3, r2
 8002098:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800209a:	bf00      	nop
 800209c:	f7ff ffe0 	bl	8002060 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d8f7      	bhi.n	800209c <HAL_Delay+0x28>
  {
  }
}
 80020ac:	bf00      	nop
 80020ae:	bf00      	nop
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	2000001c 	.word	0x2000001c

080020bc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020c4:	2300      	movs	r3, #0
 80020c6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80020c8:	2300      	movs	r3, #0
 80020ca:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80020cc:	2300      	movs	r3, #0
 80020ce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80020d0:	2300      	movs	r3, #0
 80020d2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e0be      	b.n	800225c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d109      	bne.n	8002100 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f7ff fcf2 	bl	8001ae4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f000 fbf1 	bl	80028e8 <ADC_ConversionStop_Disable>
 8002106:	4603      	mov	r3, r0
 8002108:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800210e:	f003 0310 	and.w	r3, r3, #16
 8002112:	2b00      	cmp	r3, #0
 8002114:	f040 8099 	bne.w	800224a <HAL_ADC_Init+0x18e>
 8002118:	7dfb      	ldrb	r3, [r7, #23]
 800211a:	2b00      	cmp	r3, #0
 800211c:	f040 8095 	bne.w	800224a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002124:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002128:	f023 0302 	bic.w	r3, r3, #2
 800212c:	f043 0202 	orr.w	r2, r3, #2
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800213c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	7b1b      	ldrb	r3, [r3, #12]
 8002142:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002144:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002146:	68ba      	ldr	r2, [r7, #8]
 8002148:	4313      	orrs	r3, r2
 800214a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002154:	d003      	beq.n	800215e <HAL_ADC_Init+0xa2>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d102      	bne.n	8002164 <HAL_ADC_Init+0xa8>
 800215e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002162:	e000      	b.n	8002166 <HAL_ADC_Init+0xaa>
 8002164:	2300      	movs	r3, #0
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	4313      	orrs	r3, r2
 800216a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	7d1b      	ldrb	r3, [r3, #20]
 8002170:	2b01      	cmp	r3, #1
 8002172:	d119      	bne.n	80021a8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	7b1b      	ldrb	r3, [r3, #12]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d109      	bne.n	8002190 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	3b01      	subs	r3, #1
 8002182:	035a      	lsls	r2, r3, #13
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	4313      	orrs	r3, r2
 8002188:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800218c:	613b      	str	r3, [r7, #16]
 800218e:	e00b      	b.n	80021a8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002194:	f043 0220 	orr.w	r2, r3, #32
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021a0:	f043 0201 	orr.w	r2, r3, #1
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	430a      	orrs	r2, r1
 80021ba:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	689a      	ldr	r2, [r3, #8]
 80021c2:	4b28      	ldr	r3, [pc, #160]	@ (8002264 <HAL_ADC_Init+0x1a8>)
 80021c4:	4013      	ands	r3, r2
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	6812      	ldr	r2, [r2, #0]
 80021ca:	68b9      	ldr	r1, [r7, #8]
 80021cc:	430b      	orrs	r3, r1
 80021ce:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80021d8:	d003      	beq.n	80021e2 <HAL_ADC_Init+0x126>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d104      	bne.n	80021ec <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	3b01      	subs	r3, #1
 80021e8:	051b      	lsls	r3, r3, #20
 80021ea:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021f2:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	68fa      	ldr	r2, [r7, #12]
 80021fc:	430a      	orrs	r2, r1
 80021fe:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	689a      	ldr	r2, [r3, #8]
 8002206:	4b18      	ldr	r3, [pc, #96]	@ (8002268 <HAL_ADC_Init+0x1ac>)
 8002208:	4013      	ands	r3, r2
 800220a:	68ba      	ldr	r2, [r7, #8]
 800220c:	429a      	cmp	r2, r3
 800220e:	d10b      	bne.n	8002228 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800221a:	f023 0303 	bic.w	r3, r3, #3
 800221e:	f043 0201 	orr.w	r2, r3, #1
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002226:	e018      	b.n	800225a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800222c:	f023 0312 	bic.w	r3, r3, #18
 8002230:	f043 0210 	orr.w	r2, r3, #16
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800223c:	f043 0201 	orr.w	r2, r3, #1
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002248:	e007      	b.n	800225a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800224e:	f043 0210 	orr.w	r2, r3, #16
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800225a:	7dfb      	ldrb	r3, [r7, #23]
}
 800225c:	4618      	mov	r0, r3
 800225e:	3718      	adds	r7, #24
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	ffe1f7fd 	.word	0xffe1f7fd
 8002268:	ff1f0efe 	.word	0xff1f0efe

0800226c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002274:	2300      	movs	r3, #0
 8002276:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800227e:	2b01      	cmp	r3, #1
 8002280:	d101      	bne.n	8002286 <HAL_ADC_Start+0x1a>
 8002282:	2302      	movs	r3, #2
 8002284:	e098      	b.n	80023b8 <HAL_ADC_Start+0x14c>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2201      	movs	r2, #1
 800228a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 fad0 	bl	8002834 <ADC_Enable>
 8002294:	4603      	mov	r3, r0
 8002296:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002298:	7bfb      	ldrb	r3, [r7, #15]
 800229a:	2b00      	cmp	r3, #0
 800229c:	f040 8087 	bne.w	80023ae <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80022a8:	f023 0301 	bic.w	r3, r3, #1
 80022ac:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a41      	ldr	r2, [pc, #260]	@ (80023c0 <HAL_ADC_Start+0x154>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d105      	bne.n	80022ca <HAL_ADC_Start+0x5e>
 80022be:	4b41      	ldr	r3, [pc, #260]	@ (80023c4 <HAL_ADC_Start+0x158>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d115      	bne.n	80022f6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ce:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d026      	beq.n	8002332 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022e8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80022ec:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80022f4:	e01d      	b.n	8002332 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022fa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a2f      	ldr	r2, [pc, #188]	@ (80023c4 <HAL_ADC_Start+0x158>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d004      	beq.n	8002316 <HAL_ADC_Start+0xaa>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a2b      	ldr	r2, [pc, #172]	@ (80023c0 <HAL_ADC_Start+0x154>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d10d      	bne.n	8002332 <HAL_ADC_Start+0xc6>
 8002316:	4b2b      	ldr	r3, [pc, #172]	@ (80023c4 <HAL_ADC_Start+0x158>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800231e:	2b00      	cmp	r3, #0
 8002320:	d007      	beq.n	8002332 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002326:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800232a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002336:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d006      	beq.n	800234c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002342:	f023 0206 	bic.w	r2, r3, #6
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	62da      	str	r2, [r3, #44]	@ 0x2c
 800234a:	e002      	b.n	8002352 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f06f 0202 	mvn.w	r2, #2
 8002362:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800236e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002372:	d113      	bne.n	800239c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002378:	4a11      	ldr	r2, [pc, #68]	@ (80023c0 <HAL_ADC_Start+0x154>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d105      	bne.n	800238a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800237e:	4b11      	ldr	r3, [pc, #68]	@ (80023c4 <HAL_ADC_Start+0x158>)
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002386:	2b00      	cmp	r3, #0
 8002388:	d108      	bne.n	800239c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	689a      	ldr	r2, [r3, #8]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002398:	609a      	str	r2, [r3, #8]
 800239a:	e00c      	b.n	80023b6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	689a      	ldr	r2, [r3, #8]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80023aa:	609a      	str	r2, [r3, #8]
 80023ac:	e003      	b.n	80023b6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80023b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3710      	adds	r7, #16
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	40012800 	.word	0x40012800
 80023c4:	40012400 	.word	0x40012400

080023c8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023d0:	2300      	movs	r3, #0
 80023d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d101      	bne.n	80023e2 <HAL_ADC_Stop+0x1a>
 80023de:	2302      	movs	r3, #2
 80023e0:	e01a      	b.n	8002418 <HAL_ADC_Stop+0x50>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2201      	movs	r2, #1
 80023e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f000 fa7c 	bl	80028e8 <ADC_ConversionStop_Disable>
 80023f0:	4603      	mov	r3, r0
 80023f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80023f4:	7bfb      	ldrb	r3, [r7, #15]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d109      	bne.n	800240e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023fe:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002402:	f023 0301 	bic.w	r3, r3, #1
 8002406:	f043 0201 	orr.w	r2, r3, #1
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002416:	7bfb      	ldrb	r3, [r7, #15]
}
 8002418:	4618      	mov	r0, r3
 800241a:	3710      	adds	r7, #16
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002420:	b590      	push	{r4, r7, lr}
 8002422:	b087      	sub	sp, #28
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800242a:	2300      	movs	r3, #0
 800242c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800242e:	2300      	movs	r3, #0
 8002430:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002432:	2300      	movs	r3, #0
 8002434:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002436:	f7ff fe13 	bl	8002060 <HAL_GetTick>
 800243a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002446:	2b00      	cmp	r3, #0
 8002448:	d00b      	beq.n	8002462 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800244e:	f043 0220 	orr.w	r2, r3, #32
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e0d3      	b.n	800260a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800246c:	2b00      	cmp	r3, #0
 800246e:	d131      	bne.n	80024d4 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002476:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800247a:	2b00      	cmp	r3, #0
 800247c:	d12a      	bne.n	80024d4 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800247e:	e021      	b.n	80024c4 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002486:	d01d      	beq.n	80024c4 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d007      	beq.n	800249e <HAL_ADC_PollForConversion+0x7e>
 800248e:	f7ff fde7 	bl	8002060 <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	429a      	cmp	r2, r3
 800249c:	d212      	bcs.n	80024c4 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d10b      	bne.n	80024c4 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024b0:	f043 0204 	orr.w	r2, r3, #4
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e0a2      	b.n	800260a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d0d6      	beq.n	8002480 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80024d2:	e070      	b.n	80025b6 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80024d4:	4b4f      	ldr	r3, [pc, #316]	@ (8002614 <HAL_ADC_PollForConversion+0x1f4>)
 80024d6:	681c      	ldr	r4, [r3, #0]
 80024d8:	2002      	movs	r0, #2
 80024da:	f001 feef 	bl	80042bc <HAL_RCCEx_GetPeriphCLKFreq>
 80024de:	4603      	mov	r3, r0
 80024e0:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	6919      	ldr	r1, [r3, #16]
 80024ea:	4b4b      	ldr	r3, [pc, #300]	@ (8002618 <HAL_ADC_PollForConversion+0x1f8>)
 80024ec:	400b      	ands	r3, r1
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d118      	bne.n	8002524 <HAL_ADC_PollForConversion+0x104>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68d9      	ldr	r1, [r3, #12]
 80024f8:	4b48      	ldr	r3, [pc, #288]	@ (800261c <HAL_ADC_PollForConversion+0x1fc>)
 80024fa:	400b      	ands	r3, r1
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d111      	bne.n	8002524 <HAL_ADC_PollForConversion+0x104>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	6919      	ldr	r1, [r3, #16]
 8002506:	4b46      	ldr	r3, [pc, #280]	@ (8002620 <HAL_ADC_PollForConversion+0x200>)
 8002508:	400b      	ands	r3, r1
 800250a:	2b00      	cmp	r3, #0
 800250c:	d108      	bne.n	8002520 <HAL_ADC_PollForConversion+0x100>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68d9      	ldr	r1, [r3, #12]
 8002514:	4b43      	ldr	r3, [pc, #268]	@ (8002624 <HAL_ADC_PollForConversion+0x204>)
 8002516:	400b      	ands	r3, r1
 8002518:	2b00      	cmp	r3, #0
 800251a:	d101      	bne.n	8002520 <HAL_ADC_PollForConversion+0x100>
 800251c:	2314      	movs	r3, #20
 800251e:	e020      	b.n	8002562 <HAL_ADC_PollForConversion+0x142>
 8002520:	2329      	movs	r3, #41	@ 0x29
 8002522:	e01e      	b.n	8002562 <HAL_ADC_PollForConversion+0x142>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	6919      	ldr	r1, [r3, #16]
 800252a:	4b3d      	ldr	r3, [pc, #244]	@ (8002620 <HAL_ADC_PollForConversion+0x200>)
 800252c:	400b      	ands	r3, r1
 800252e:	2b00      	cmp	r3, #0
 8002530:	d106      	bne.n	8002540 <HAL_ADC_PollForConversion+0x120>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68d9      	ldr	r1, [r3, #12]
 8002538:	4b3a      	ldr	r3, [pc, #232]	@ (8002624 <HAL_ADC_PollForConversion+0x204>)
 800253a:	400b      	ands	r3, r1
 800253c:	2b00      	cmp	r3, #0
 800253e:	d00d      	beq.n	800255c <HAL_ADC_PollForConversion+0x13c>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	6919      	ldr	r1, [r3, #16]
 8002546:	4b38      	ldr	r3, [pc, #224]	@ (8002628 <HAL_ADC_PollForConversion+0x208>)
 8002548:	400b      	ands	r3, r1
 800254a:	2b00      	cmp	r3, #0
 800254c:	d108      	bne.n	8002560 <HAL_ADC_PollForConversion+0x140>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68d9      	ldr	r1, [r3, #12]
 8002554:	4b34      	ldr	r3, [pc, #208]	@ (8002628 <HAL_ADC_PollForConversion+0x208>)
 8002556:	400b      	ands	r3, r1
 8002558:	2b00      	cmp	r3, #0
 800255a:	d101      	bne.n	8002560 <HAL_ADC_PollForConversion+0x140>
 800255c:	2354      	movs	r3, #84	@ 0x54
 800255e:	e000      	b.n	8002562 <HAL_ADC_PollForConversion+0x142>
 8002560:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002562:	fb02 f303 	mul.w	r3, r2, r3
 8002566:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002568:	e021      	b.n	80025ae <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002570:	d01a      	beq.n	80025a8 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d007      	beq.n	8002588 <HAL_ADC_PollForConversion+0x168>
 8002578:	f7ff fd72 	bl	8002060 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	683a      	ldr	r2, [r7, #0]
 8002584:	429a      	cmp	r2, r3
 8002586:	d20f      	bcs.n	80025a8 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	429a      	cmp	r2, r3
 800258e:	d90b      	bls.n	80025a8 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002594:	f043 0204 	orr.w	r2, r3, #4
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e030      	b.n	800260a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	3301      	adds	r3, #1
 80025ac:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	693a      	ldr	r2, [r7, #16]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d8d9      	bhi.n	800256a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f06f 0212 	mvn.w	r2, #18
 80025be:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025c4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80025d6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80025da:	d115      	bne.n	8002608 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d111      	bne.n	8002608 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d105      	bne.n	8002608 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002600:	f043 0201 	orr.w	r2, r3, #1
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	371c      	adds	r7, #28
 800260e:	46bd      	mov	sp, r7
 8002610:	bd90      	pop	{r4, r7, pc}
 8002612:	bf00      	nop
 8002614:	20000014 	.word	0x20000014
 8002618:	24924924 	.word	0x24924924
 800261c:	00924924 	.word	0x00924924
 8002620:	12492492 	.word	0x12492492
 8002624:	00492492 	.word	0x00492492
 8002628:	00249249 	.word	0x00249249

0800262c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800263a:	4618      	mov	r0, r3
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	bc80      	pop	{r7}
 8002642:	4770      	bx	lr

08002644 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002644:	b480      	push	{r7}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800264e:	2300      	movs	r3, #0
 8002650:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002652:	2300      	movs	r3, #0
 8002654:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800265c:	2b01      	cmp	r3, #1
 800265e:	d101      	bne.n	8002664 <HAL_ADC_ConfigChannel+0x20>
 8002660:	2302      	movs	r3, #2
 8002662:	e0dc      	b.n	800281e <HAL_ADC_ConfigChannel+0x1da>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	2b06      	cmp	r3, #6
 8002672:	d81c      	bhi.n	80026ae <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	685a      	ldr	r2, [r3, #4]
 800267e:	4613      	mov	r3, r2
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	4413      	add	r3, r2
 8002684:	3b05      	subs	r3, #5
 8002686:	221f      	movs	r2, #31
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	43db      	mvns	r3, r3
 800268e:	4019      	ands	r1, r3
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	6818      	ldr	r0, [r3, #0]
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685a      	ldr	r2, [r3, #4]
 8002698:	4613      	mov	r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	4413      	add	r3, r2
 800269e:	3b05      	subs	r3, #5
 80026a0:	fa00 f203 	lsl.w	r2, r0, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	430a      	orrs	r2, r1
 80026aa:	635a      	str	r2, [r3, #52]	@ 0x34
 80026ac:	e03c      	b.n	8002728 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	2b0c      	cmp	r3, #12
 80026b4:	d81c      	bhi.n	80026f0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685a      	ldr	r2, [r3, #4]
 80026c0:	4613      	mov	r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	4413      	add	r3, r2
 80026c6:	3b23      	subs	r3, #35	@ 0x23
 80026c8:	221f      	movs	r2, #31
 80026ca:	fa02 f303 	lsl.w	r3, r2, r3
 80026ce:	43db      	mvns	r3, r3
 80026d0:	4019      	ands	r1, r3
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	6818      	ldr	r0, [r3, #0]
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685a      	ldr	r2, [r3, #4]
 80026da:	4613      	mov	r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	4413      	add	r3, r2
 80026e0:	3b23      	subs	r3, #35	@ 0x23
 80026e2:	fa00 f203 	lsl.w	r2, r0, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	430a      	orrs	r2, r1
 80026ec:	631a      	str	r2, [r3, #48]	@ 0x30
 80026ee:	e01b      	b.n	8002728 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685a      	ldr	r2, [r3, #4]
 80026fa:	4613      	mov	r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	4413      	add	r3, r2
 8002700:	3b41      	subs	r3, #65	@ 0x41
 8002702:	221f      	movs	r2, #31
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	43db      	mvns	r3, r3
 800270a:	4019      	ands	r1, r3
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	6818      	ldr	r0, [r3, #0]
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685a      	ldr	r2, [r3, #4]
 8002714:	4613      	mov	r3, r2
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	4413      	add	r3, r2
 800271a:	3b41      	subs	r3, #65	@ 0x41
 800271c:	fa00 f203 	lsl.w	r2, r0, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	430a      	orrs	r2, r1
 8002726:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2b09      	cmp	r3, #9
 800272e:	d91c      	bls.n	800276a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	68d9      	ldr	r1, [r3, #12]
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	4613      	mov	r3, r2
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	4413      	add	r3, r2
 8002740:	3b1e      	subs	r3, #30
 8002742:	2207      	movs	r2, #7
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	43db      	mvns	r3, r3
 800274a:	4019      	ands	r1, r3
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	6898      	ldr	r0, [r3, #8]
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	4613      	mov	r3, r2
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	4413      	add	r3, r2
 800275a:	3b1e      	subs	r3, #30
 800275c:	fa00 f203 	lsl.w	r2, r0, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	430a      	orrs	r2, r1
 8002766:	60da      	str	r2, [r3, #12]
 8002768:	e019      	b.n	800279e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	6919      	ldr	r1, [r3, #16]
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	4613      	mov	r3, r2
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	4413      	add	r3, r2
 800277a:	2207      	movs	r2, #7
 800277c:	fa02 f303 	lsl.w	r3, r2, r3
 8002780:	43db      	mvns	r3, r3
 8002782:	4019      	ands	r1, r3
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	6898      	ldr	r0, [r3, #8]
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	4613      	mov	r3, r2
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	4413      	add	r3, r2
 8002792:	fa00 f203 	lsl.w	r2, r0, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	430a      	orrs	r2, r1
 800279c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2b10      	cmp	r3, #16
 80027a4:	d003      	beq.n	80027ae <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80027aa:	2b11      	cmp	r3, #17
 80027ac:	d132      	bne.n	8002814 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a1d      	ldr	r2, [pc, #116]	@ (8002828 <HAL_ADC_ConfigChannel+0x1e4>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d125      	bne.n	8002804 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d126      	bne.n	8002814 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	689a      	ldr	r2, [r3, #8]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80027d4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2b10      	cmp	r3, #16
 80027dc:	d11a      	bne.n	8002814 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80027de:	4b13      	ldr	r3, [pc, #76]	@ (800282c <HAL_ADC_ConfigChannel+0x1e8>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a13      	ldr	r2, [pc, #76]	@ (8002830 <HAL_ADC_ConfigChannel+0x1ec>)
 80027e4:	fba2 2303 	umull	r2, r3, r2, r3
 80027e8:	0c9a      	lsrs	r2, r3, #18
 80027ea:	4613      	mov	r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	4413      	add	r3, r2
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80027f4:	e002      	b.n	80027fc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	3b01      	subs	r3, #1
 80027fa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1f9      	bne.n	80027f6 <HAL_ADC_ConfigChannel+0x1b2>
 8002802:	e007      	b.n	8002814 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002808:	f043 0220 	orr.w	r2, r3, #32
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800281c:	7bfb      	ldrb	r3, [r7, #15]
}
 800281e:	4618      	mov	r0, r3
 8002820:	3714      	adds	r7, #20
 8002822:	46bd      	mov	sp, r7
 8002824:	bc80      	pop	{r7}
 8002826:	4770      	bx	lr
 8002828:	40012400 	.word	0x40012400
 800282c:	20000014 	.word	0x20000014
 8002830:	431bde83 	.word	0x431bde83

08002834 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800283c:	2300      	movs	r3, #0
 800283e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002840:	2300      	movs	r3, #0
 8002842:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	2b01      	cmp	r3, #1
 8002850:	d040      	beq.n	80028d4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	689a      	ldr	r2, [r3, #8]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f042 0201 	orr.w	r2, r2, #1
 8002860:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002862:	4b1f      	ldr	r3, [pc, #124]	@ (80028e0 <ADC_Enable+0xac>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a1f      	ldr	r2, [pc, #124]	@ (80028e4 <ADC_Enable+0xb0>)
 8002868:	fba2 2303 	umull	r2, r3, r2, r3
 800286c:	0c9b      	lsrs	r3, r3, #18
 800286e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002870:	e002      	b.n	8002878 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	3b01      	subs	r3, #1
 8002876:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1f9      	bne.n	8002872 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800287e:	f7ff fbef 	bl	8002060 <HAL_GetTick>
 8002882:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002884:	e01f      	b.n	80028c6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002886:	f7ff fbeb 	bl	8002060 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b02      	cmp	r3, #2
 8002892:	d918      	bls.n	80028c6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d011      	beq.n	80028c6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028a6:	f043 0210 	orr.w	r2, r3, #16
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028b2:	f043 0201 	orr.w	r2, r3, #1
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e007      	b.n	80028d6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d1d8      	bne.n	8002886 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	20000014 	.word	0x20000014
 80028e4:	431bde83 	.word	0x431bde83

080028e8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028f0:	2300      	movs	r3, #0
 80028f2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d12e      	bne.n	8002960 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	689a      	ldr	r2, [r3, #8]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f022 0201 	bic.w	r2, r2, #1
 8002910:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002912:	f7ff fba5 	bl	8002060 <HAL_GetTick>
 8002916:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002918:	e01b      	b.n	8002952 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800291a:	f7ff fba1 	bl	8002060 <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	2b02      	cmp	r3, #2
 8002926:	d914      	bls.n	8002952 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	2b01      	cmp	r3, #1
 8002934:	d10d      	bne.n	8002952 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800293a:	f043 0210 	orr.w	r2, r3, #16
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002946:	f043 0201 	orr.w	r2, r3, #1
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e007      	b.n	8002962 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	2b01      	cmp	r3, #1
 800295e:	d0dc      	beq.n	800291a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3710      	adds	r7, #16
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
	...

0800296c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f003 0307 	and.w	r3, r3, #7
 800297a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800297c:	4b0c      	ldr	r3, [pc, #48]	@ (80029b0 <__NVIC_SetPriorityGrouping+0x44>)
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002982:	68ba      	ldr	r2, [r7, #8]
 8002984:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002988:	4013      	ands	r3, r2
 800298a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002994:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002998:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800299c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800299e:	4a04      	ldr	r2, [pc, #16]	@ (80029b0 <__NVIC_SetPriorityGrouping+0x44>)
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	60d3      	str	r3, [r2, #12]
}
 80029a4:	bf00      	nop
 80029a6:	3714      	adds	r7, #20
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bc80      	pop	{r7}
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	e000ed00 	.word	0xe000ed00

080029b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029b8:	4b04      	ldr	r3, [pc, #16]	@ (80029cc <__NVIC_GetPriorityGrouping+0x18>)
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	0a1b      	lsrs	r3, r3, #8
 80029be:	f003 0307 	and.w	r3, r3, #7
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bc80      	pop	{r7}
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	e000ed00 	.word	0xe000ed00

080029d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	4603      	mov	r3, r0
 80029d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	db0b      	blt.n	80029fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029e2:	79fb      	ldrb	r3, [r7, #7]
 80029e4:	f003 021f 	and.w	r2, r3, #31
 80029e8:	4906      	ldr	r1, [pc, #24]	@ (8002a04 <__NVIC_EnableIRQ+0x34>)
 80029ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ee:	095b      	lsrs	r3, r3, #5
 80029f0:	2001      	movs	r0, #1
 80029f2:	fa00 f202 	lsl.w	r2, r0, r2
 80029f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029fa:	bf00      	nop
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bc80      	pop	{r7}
 8002a02:	4770      	bx	lr
 8002a04:	e000e100 	.word	0xe000e100

08002a08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	4603      	mov	r3, r0
 8002a10:	6039      	str	r1, [r7, #0]
 8002a12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	db0a      	blt.n	8002a32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	b2da      	uxtb	r2, r3
 8002a20:	490c      	ldr	r1, [pc, #48]	@ (8002a54 <__NVIC_SetPriority+0x4c>)
 8002a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a26:	0112      	lsls	r2, r2, #4
 8002a28:	b2d2      	uxtb	r2, r2
 8002a2a:	440b      	add	r3, r1
 8002a2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a30:	e00a      	b.n	8002a48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	b2da      	uxtb	r2, r3
 8002a36:	4908      	ldr	r1, [pc, #32]	@ (8002a58 <__NVIC_SetPriority+0x50>)
 8002a38:	79fb      	ldrb	r3, [r7, #7]
 8002a3a:	f003 030f 	and.w	r3, r3, #15
 8002a3e:	3b04      	subs	r3, #4
 8002a40:	0112      	lsls	r2, r2, #4
 8002a42:	b2d2      	uxtb	r2, r2
 8002a44:	440b      	add	r3, r1
 8002a46:	761a      	strb	r2, [r3, #24]
}
 8002a48:	bf00      	nop
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bc80      	pop	{r7}
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	e000e100 	.word	0xe000e100
 8002a58:	e000ed00 	.word	0xe000ed00

08002a5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b089      	sub	sp, #36	@ 0x24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f003 0307 	and.w	r3, r3, #7
 8002a6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	f1c3 0307 	rsb	r3, r3, #7
 8002a76:	2b04      	cmp	r3, #4
 8002a78:	bf28      	it	cs
 8002a7a:	2304      	movcs	r3, #4
 8002a7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	3304      	adds	r3, #4
 8002a82:	2b06      	cmp	r3, #6
 8002a84:	d902      	bls.n	8002a8c <NVIC_EncodePriority+0x30>
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	3b03      	subs	r3, #3
 8002a8a:	e000      	b.n	8002a8e <NVIC_EncodePriority+0x32>
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a90:	f04f 32ff 	mov.w	r2, #4294967295
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9a:	43da      	mvns	r2, r3
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	401a      	ands	r2, r3
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002aa4:	f04f 31ff 	mov.w	r1, #4294967295
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8002aae:	43d9      	mvns	r1, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ab4:	4313      	orrs	r3, r2
         );
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3724      	adds	r7, #36	@ 0x24
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bc80      	pop	{r7}
 8002abe:	4770      	bx	lr

08002ac0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f7ff ff4f 	bl	800296c <__NVIC_SetPriorityGrouping>
}
 8002ace:	bf00      	nop
 8002ad0:	3708      	adds	r7, #8
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	b086      	sub	sp, #24
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	4603      	mov	r3, r0
 8002ade:	60b9      	str	r1, [r7, #8]
 8002ae0:	607a      	str	r2, [r7, #4]
 8002ae2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ae8:	f7ff ff64 	bl	80029b4 <__NVIC_GetPriorityGrouping>
 8002aec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	68b9      	ldr	r1, [r7, #8]
 8002af2:	6978      	ldr	r0, [r7, #20]
 8002af4:	f7ff ffb2 	bl	8002a5c <NVIC_EncodePriority>
 8002af8:	4602      	mov	r2, r0
 8002afa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002afe:	4611      	mov	r1, r2
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7ff ff81 	bl	8002a08 <__NVIC_SetPriority>
}
 8002b06:	bf00      	nop
 8002b08:	3718      	adds	r7, #24
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b082      	sub	sp, #8
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	4603      	mov	r3, r0
 8002b16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7ff ff57 	bl	80029d0 <__NVIC_EnableIRQ>
}
 8002b22:	bf00      	nop
 8002b24:	3708      	adds	r7, #8
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	b085      	sub	sp, #20
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b32:	2300      	movs	r3, #0
 8002b34:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d008      	beq.n	8002b54 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2204      	movs	r2, #4
 8002b46:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e020      	b.n	8002b96 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f022 020e 	bic.w	r2, r2, #14
 8002b62:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f022 0201 	bic.w	r2, r2, #1
 8002b72:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b7c:	2101      	movs	r1, #1
 8002b7e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b82:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3714      	adds	r7, #20
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bc80      	pop	{r7}
 8002b9e:	4770      	bx	lr

08002ba0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d005      	beq.n	8002bc4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2204      	movs	r2, #4
 8002bbc:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	73fb      	strb	r3, [r7, #15]
 8002bc2:	e051      	b.n	8002c68 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 020e 	bic.w	r2, r2, #14
 8002bd2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f022 0201 	bic.w	r2, r2, #1
 8002be2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a22      	ldr	r2, [pc, #136]	@ (8002c74 <HAL_DMA_Abort_IT+0xd4>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d029      	beq.n	8002c42 <HAL_DMA_Abort_IT+0xa2>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a21      	ldr	r2, [pc, #132]	@ (8002c78 <HAL_DMA_Abort_IT+0xd8>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d022      	beq.n	8002c3e <HAL_DMA_Abort_IT+0x9e>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a1f      	ldr	r2, [pc, #124]	@ (8002c7c <HAL_DMA_Abort_IT+0xdc>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d01a      	beq.n	8002c38 <HAL_DMA_Abort_IT+0x98>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a1e      	ldr	r2, [pc, #120]	@ (8002c80 <HAL_DMA_Abort_IT+0xe0>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d012      	beq.n	8002c32 <HAL_DMA_Abort_IT+0x92>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a1c      	ldr	r2, [pc, #112]	@ (8002c84 <HAL_DMA_Abort_IT+0xe4>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d00a      	beq.n	8002c2c <HAL_DMA_Abort_IT+0x8c>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a1b      	ldr	r2, [pc, #108]	@ (8002c88 <HAL_DMA_Abort_IT+0xe8>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d102      	bne.n	8002c26 <HAL_DMA_Abort_IT+0x86>
 8002c20:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002c24:	e00e      	b.n	8002c44 <HAL_DMA_Abort_IT+0xa4>
 8002c26:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c2a:	e00b      	b.n	8002c44 <HAL_DMA_Abort_IT+0xa4>
 8002c2c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002c30:	e008      	b.n	8002c44 <HAL_DMA_Abort_IT+0xa4>
 8002c32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c36:	e005      	b.n	8002c44 <HAL_DMA_Abort_IT+0xa4>
 8002c38:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c3c:	e002      	b.n	8002c44 <HAL_DMA_Abort_IT+0xa4>
 8002c3e:	2310      	movs	r3, #16
 8002c40:	e000      	b.n	8002c44 <HAL_DMA_Abort_IT+0xa4>
 8002c42:	2301      	movs	r3, #1
 8002c44:	4a11      	ldr	r2, [pc, #68]	@ (8002c8c <HAL_DMA_Abort_IT+0xec>)
 8002c46:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d003      	beq.n	8002c68 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	4798      	blx	r3
    } 
  }
  return status;
 8002c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	40020008 	.word	0x40020008
 8002c78:	4002001c 	.word	0x4002001c
 8002c7c:	40020030 	.word	0x40020030
 8002c80:	40020044 	.word	0x40020044
 8002c84:	40020058 	.word	0x40020058
 8002c88:	4002006c 	.word	0x4002006c
 8002c8c:	40020000 	.word	0x40020000

08002c90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b08b      	sub	sp, #44	@ 0x2c
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ca2:	e169      	b.n	8002f78 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	69fa      	ldr	r2, [r7, #28]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	f040 8158 	bne.w	8002f72 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	4a9a      	ldr	r2, [pc, #616]	@ (8002f30 <HAL_GPIO_Init+0x2a0>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d05e      	beq.n	8002d8a <HAL_GPIO_Init+0xfa>
 8002ccc:	4a98      	ldr	r2, [pc, #608]	@ (8002f30 <HAL_GPIO_Init+0x2a0>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d875      	bhi.n	8002dbe <HAL_GPIO_Init+0x12e>
 8002cd2:	4a98      	ldr	r2, [pc, #608]	@ (8002f34 <HAL_GPIO_Init+0x2a4>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d058      	beq.n	8002d8a <HAL_GPIO_Init+0xfa>
 8002cd8:	4a96      	ldr	r2, [pc, #600]	@ (8002f34 <HAL_GPIO_Init+0x2a4>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d86f      	bhi.n	8002dbe <HAL_GPIO_Init+0x12e>
 8002cde:	4a96      	ldr	r2, [pc, #600]	@ (8002f38 <HAL_GPIO_Init+0x2a8>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d052      	beq.n	8002d8a <HAL_GPIO_Init+0xfa>
 8002ce4:	4a94      	ldr	r2, [pc, #592]	@ (8002f38 <HAL_GPIO_Init+0x2a8>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d869      	bhi.n	8002dbe <HAL_GPIO_Init+0x12e>
 8002cea:	4a94      	ldr	r2, [pc, #592]	@ (8002f3c <HAL_GPIO_Init+0x2ac>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d04c      	beq.n	8002d8a <HAL_GPIO_Init+0xfa>
 8002cf0:	4a92      	ldr	r2, [pc, #584]	@ (8002f3c <HAL_GPIO_Init+0x2ac>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d863      	bhi.n	8002dbe <HAL_GPIO_Init+0x12e>
 8002cf6:	4a92      	ldr	r2, [pc, #584]	@ (8002f40 <HAL_GPIO_Init+0x2b0>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d046      	beq.n	8002d8a <HAL_GPIO_Init+0xfa>
 8002cfc:	4a90      	ldr	r2, [pc, #576]	@ (8002f40 <HAL_GPIO_Init+0x2b0>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d85d      	bhi.n	8002dbe <HAL_GPIO_Init+0x12e>
 8002d02:	2b12      	cmp	r3, #18
 8002d04:	d82a      	bhi.n	8002d5c <HAL_GPIO_Init+0xcc>
 8002d06:	2b12      	cmp	r3, #18
 8002d08:	d859      	bhi.n	8002dbe <HAL_GPIO_Init+0x12e>
 8002d0a:	a201      	add	r2, pc, #4	@ (adr r2, 8002d10 <HAL_GPIO_Init+0x80>)
 8002d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d10:	08002d8b 	.word	0x08002d8b
 8002d14:	08002d65 	.word	0x08002d65
 8002d18:	08002d77 	.word	0x08002d77
 8002d1c:	08002db9 	.word	0x08002db9
 8002d20:	08002dbf 	.word	0x08002dbf
 8002d24:	08002dbf 	.word	0x08002dbf
 8002d28:	08002dbf 	.word	0x08002dbf
 8002d2c:	08002dbf 	.word	0x08002dbf
 8002d30:	08002dbf 	.word	0x08002dbf
 8002d34:	08002dbf 	.word	0x08002dbf
 8002d38:	08002dbf 	.word	0x08002dbf
 8002d3c:	08002dbf 	.word	0x08002dbf
 8002d40:	08002dbf 	.word	0x08002dbf
 8002d44:	08002dbf 	.word	0x08002dbf
 8002d48:	08002dbf 	.word	0x08002dbf
 8002d4c:	08002dbf 	.word	0x08002dbf
 8002d50:	08002dbf 	.word	0x08002dbf
 8002d54:	08002d6d 	.word	0x08002d6d
 8002d58:	08002d81 	.word	0x08002d81
 8002d5c:	4a79      	ldr	r2, [pc, #484]	@ (8002f44 <HAL_GPIO_Init+0x2b4>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d013      	beq.n	8002d8a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002d62:	e02c      	b.n	8002dbe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	623b      	str	r3, [r7, #32]
          break;
 8002d6a:	e029      	b.n	8002dc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	3304      	adds	r3, #4
 8002d72:	623b      	str	r3, [r7, #32]
          break;
 8002d74:	e024      	b.n	8002dc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	3308      	adds	r3, #8
 8002d7c:	623b      	str	r3, [r7, #32]
          break;
 8002d7e:	e01f      	b.n	8002dc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	330c      	adds	r3, #12
 8002d86:	623b      	str	r3, [r7, #32]
          break;
 8002d88:	e01a      	b.n	8002dc0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d102      	bne.n	8002d98 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002d92:	2304      	movs	r3, #4
 8002d94:	623b      	str	r3, [r7, #32]
          break;
 8002d96:	e013      	b.n	8002dc0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d105      	bne.n	8002dac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002da0:	2308      	movs	r3, #8
 8002da2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	69fa      	ldr	r2, [r7, #28]
 8002da8:	611a      	str	r2, [r3, #16]
          break;
 8002daa:	e009      	b.n	8002dc0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002dac:	2308      	movs	r3, #8
 8002dae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	69fa      	ldr	r2, [r7, #28]
 8002db4:	615a      	str	r2, [r3, #20]
          break;
 8002db6:	e003      	b.n	8002dc0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002db8:	2300      	movs	r3, #0
 8002dba:	623b      	str	r3, [r7, #32]
          break;
 8002dbc:	e000      	b.n	8002dc0 <HAL_GPIO_Init+0x130>
          break;
 8002dbe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	2bff      	cmp	r3, #255	@ 0xff
 8002dc4:	d801      	bhi.n	8002dca <HAL_GPIO_Init+0x13a>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	e001      	b.n	8002dce <HAL_GPIO_Init+0x13e>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	3304      	adds	r3, #4
 8002dce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	2bff      	cmp	r3, #255	@ 0xff
 8002dd4:	d802      	bhi.n	8002ddc <HAL_GPIO_Init+0x14c>
 8002dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	e002      	b.n	8002de2 <HAL_GPIO_Init+0x152>
 8002ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dde:	3b08      	subs	r3, #8
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	210f      	movs	r1, #15
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	fa01 f303 	lsl.w	r3, r1, r3
 8002df0:	43db      	mvns	r3, r3
 8002df2:	401a      	ands	r2, r3
 8002df4:	6a39      	ldr	r1, [r7, #32]
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dfc:	431a      	orrs	r2, r3
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	f000 80b1 	beq.w	8002f72 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002e10:	4b4d      	ldr	r3, [pc, #308]	@ (8002f48 <HAL_GPIO_Init+0x2b8>)
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	4a4c      	ldr	r2, [pc, #304]	@ (8002f48 <HAL_GPIO_Init+0x2b8>)
 8002e16:	f043 0301 	orr.w	r3, r3, #1
 8002e1a:	6193      	str	r3, [r2, #24]
 8002e1c:	4b4a      	ldr	r3, [pc, #296]	@ (8002f48 <HAL_GPIO_Init+0x2b8>)
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	f003 0301 	and.w	r3, r3, #1
 8002e24:	60bb      	str	r3, [r7, #8]
 8002e26:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002e28:	4a48      	ldr	r2, [pc, #288]	@ (8002f4c <HAL_GPIO_Init+0x2bc>)
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e2c:	089b      	lsrs	r3, r3, #2
 8002e2e:	3302      	adds	r3, #2
 8002e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e34:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e38:	f003 0303 	and.w	r3, r3, #3
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	220f      	movs	r2, #15
 8002e40:	fa02 f303 	lsl.w	r3, r2, r3
 8002e44:	43db      	mvns	r3, r3
 8002e46:	68fa      	ldr	r2, [r7, #12]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a40      	ldr	r2, [pc, #256]	@ (8002f50 <HAL_GPIO_Init+0x2c0>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d013      	beq.n	8002e7c <HAL_GPIO_Init+0x1ec>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a3f      	ldr	r2, [pc, #252]	@ (8002f54 <HAL_GPIO_Init+0x2c4>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d00d      	beq.n	8002e78 <HAL_GPIO_Init+0x1e8>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4a3e      	ldr	r2, [pc, #248]	@ (8002f58 <HAL_GPIO_Init+0x2c8>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d007      	beq.n	8002e74 <HAL_GPIO_Init+0x1e4>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a3d      	ldr	r2, [pc, #244]	@ (8002f5c <HAL_GPIO_Init+0x2cc>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d101      	bne.n	8002e70 <HAL_GPIO_Init+0x1e0>
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e006      	b.n	8002e7e <HAL_GPIO_Init+0x1ee>
 8002e70:	2304      	movs	r3, #4
 8002e72:	e004      	b.n	8002e7e <HAL_GPIO_Init+0x1ee>
 8002e74:	2302      	movs	r3, #2
 8002e76:	e002      	b.n	8002e7e <HAL_GPIO_Init+0x1ee>
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e000      	b.n	8002e7e <HAL_GPIO_Init+0x1ee>
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e80:	f002 0203 	and.w	r2, r2, #3
 8002e84:	0092      	lsls	r2, r2, #2
 8002e86:	4093      	lsls	r3, r2
 8002e88:	68fa      	ldr	r2, [r7, #12]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002e8e:	492f      	ldr	r1, [pc, #188]	@ (8002f4c <HAL_GPIO_Init+0x2bc>)
 8002e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e92:	089b      	lsrs	r3, r3, #2
 8002e94:	3302      	adds	r3, #2
 8002e96:	68fa      	ldr	r2, [r7, #12]
 8002e98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d006      	beq.n	8002eb6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002ea8:	4b2d      	ldr	r3, [pc, #180]	@ (8002f60 <HAL_GPIO_Init+0x2d0>)
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	492c      	ldr	r1, [pc, #176]	@ (8002f60 <HAL_GPIO_Init+0x2d0>)
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	608b      	str	r3, [r1, #8]
 8002eb4:	e006      	b.n	8002ec4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002eb6:	4b2a      	ldr	r3, [pc, #168]	@ (8002f60 <HAL_GPIO_Init+0x2d0>)
 8002eb8:	689a      	ldr	r2, [r3, #8]
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	4928      	ldr	r1, [pc, #160]	@ (8002f60 <HAL_GPIO_Init+0x2d0>)
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d006      	beq.n	8002ede <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002ed0:	4b23      	ldr	r3, [pc, #140]	@ (8002f60 <HAL_GPIO_Init+0x2d0>)
 8002ed2:	68da      	ldr	r2, [r3, #12]
 8002ed4:	4922      	ldr	r1, [pc, #136]	@ (8002f60 <HAL_GPIO_Init+0x2d0>)
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	60cb      	str	r3, [r1, #12]
 8002edc:	e006      	b.n	8002eec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002ede:	4b20      	ldr	r3, [pc, #128]	@ (8002f60 <HAL_GPIO_Init+0x2d0>)
 8002ee0:	68da      	ldr	r2, [r3, #12]
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	43db      	mvns	r3, r3
 8002ee6:	491e      	ldr	r1, [pc, #120]	@ (8002f60 <HAL_GPIO_Init+0x2d0>)
 8002ee8:	4013      	ands	r3, r2
 8002eea:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d006      	beq.n	8002f06 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ef8:	4b19      	ldr	r3, [pc, #100]	@ (8002f60 <HAL_GPIO_Init+0x2d0>)
 8002efa:	685a      	ldr	r2, [r3, #4]
 8002efc:	4918      	ldr	r1, [pc, #96]	@ (8002f60 <HAL_GPIO_Init+0x2d0>)
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	604b      	str	r3, [r1, #4]
 8002f04:	e006      	b.n	8002f14 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002f06:	4b16      	ldr	r3, [pc, #88]	@ (8002f60 <HAL_GPIO_Init+0x2d0>)
 8002f08:	685a      	ldr	r2, [r3, #4]
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	43db      	mvns	r3, r3
 8002f0e:	4914      	ldr	r1, [pc, #80]	@ (8002f60 <HAL_GPIO_Init+0x2d0>)
 8002f10:	4013      	ands	r3, r2
 8002f12:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d021      	beq.n	8002f64 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002f20:	4b0f      	ldr	r3, [pc, #60]	@ (8002f60 <HAL_GPIO_Init+0x2d0>)
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	490e      	ldr	r1, [pc, #56]	@ (8002f60 <HAL_GPIO_Init+0x2d0>)
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	600b      	str	r3, [r1, #0]
 8002f2c:	e021      	b.n	8002f72 <HAL_GPIO_Init+0x2e2>
 8002f2e:	bf00      	nop
 8002f30:	10320000 	.word	0x10320000
 8002f34:	10310000 	.word	0x10310000
 8002f38:	10220000 	.word	0x10220000
 8002f3c:	10210000 	.word	0x10210000
 8002f40:	10120000 	.word	0x10120000
 8002f44:	10110000 	.word	0x10110000
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	40010000 	.word	0x40010000
 8002f50:	40010800 	.word	0x40010800
 8002f54:	40010c00 	.word	0x40010c00
 8002f58:	40011000 	.word	0x40011000
 8002f5c:	40011400 	.word	0x40011400
 8002f60:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002f64:	4b0b      	ldr	r3, [pc, #44]	@ (8002f94 <HAL_GPIO_Init+0x304>)
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	43db      	mvns	r3, r3
 8002f6c:	4909      	ldr	r1, [pc, #36]	@ (8002f94 <HAL_GPIO_Init+0x304>)
 8002f6e:	4013      	ands	r3, r2
 8002f70:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f74:	3301      	adds	r3, #1
 8002f76:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	f47f ae8e 	bne.w	8002ca4 <HAL_GPIO_Init+0x14>
  }
}
 8002f88:	bf00      	nop
 8002f8a:	bf00      	nop
 8002f8c:	372c      	adds	r7, #44	@ 0x2c
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bc80      	pop	{r7}
 8002f92:	4770      	bx	lr
 8002f94:	40010400 	.word	0x40010400

08002f98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d101      	bne.n	8002faa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e12b      	b.n	8003202 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d106      	bne.n	8002fc4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f7fe fdae 	bl	8001b20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2224      	movs	r2, #36	@ 0x24
 8002fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f022 0201 	bic.w	r2, r2, #1
 8002fda:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002fea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ffa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ffc:	f001 f832 	bl	8004064 <HAL_RCC_GetPCLK1Freq>
 8003000:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	4a81      	ldr	r2, [pc, #516]	@ (800320c <HAL_I2C_Init+0x274>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d807      	bhi.n	800301c <HAL_I2C_Init+0x84>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	4a80      	ldr	r2, [pc, #512]	@ (8003210 <HAL_I2C_Init+0x278>)
 8003010:	4293      	cmp	r3, r2
 8003012:	bf94      	ite	ls
 8003014:	2301      	movls	r3, #1
 8003016:	2300      	movhi	r3, #0
 8003018:	b2db      	uxtb	r3, r3
 800301a:	e006      	b.n	800302a <HAL_I2C_Init+0x92>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	4a7d      	ldr	r2, [pc, #500]	@ (8003214 <HAL_I2C_Init+0x27c>)
 8003020:	4293      	cmp	r3, r2
 8003022:	bf94      	ite	ls
 8003024:	2301      	movls	r3, #1
 8003026:	2300      	movhi	r3, #0
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e0e7      	b.n	8003202 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	4a78      	ldr	r2, [pc, #480]	@ (8003218 <HAL_I2C_Init+0x280>)
 8003036:	fba2 2303 	umull	r2, r3, r2, r3
 800303a:	0c9b      	lsrs	r3, r3, #18
 800303c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68ba      	ldr	r2, [r7, #8]
 800304e:	430a      	orrs	r2, r1
 8003050:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	6a1b      	ldr	r3, [r3, #32]
 8003058:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	4a6a      	ldr	r2, [pc, #424]	@ (800320c <HAL_I2C_Init+0x274>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d802      	bhi.n	800306c <HAL_I2C_Init+0xd4>
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	3301      	adds	r3, #1
 800306a:	e009      	b.n	8003080 <HAL_I2C_Init+0xe8>
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003072:	fb02 f303 	mul.w	r3, r2, r3
 8003076:	4a69      	ldr	r2, [pc, #420]	@ (800321c <HAL_I2C_Init+0x284>)
 8003078:	fba2 2303 	umull	r2, r3, r2, r3
 800307c:	099b      	lsrs	r3, r3, #6
 800307e:	3301      	adds	r3, #1
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	6812      	ldr	r2, [r2, #0]
 8003084:	430b      	orrs	r3, r1
 8003086:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	69db      	ldr	r3, [r3, #28]
 800308e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003092:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	495c      	ldr	r1, [pc, #368]	@ (800320c <HAL_I2C_Init+0x274>)
 800309c:	428b      	cmp	r3, r1
 800309e:	d819      	bhi.n	80030d4 <HAL_I2C_Init+0x13c>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	1e59      	subs	r1, r3, #1
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80030ae:	1c59      	adds	r1, r3, #1
 80030b0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80030b4:	400b      	ands	r3, r1
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00a      	beq.n	80030d0 <HAL_I2C_Init+0x138>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	1e59      	subs	r1, r3, #1
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80030c8:	3301      	adds	r3, #1
 80030ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030ce:	e051      	b.n	8003174 <HAL_I2C_Init+0x1dc>
 80030d0:	2304      	movs	r3, #4
 80030d2:	e04f      	b.n	8003174 <HAL_I2C_Init+0x1dc>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d111      	bne.n	8003100 <HAL_I2C_Init+0x168>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	1e58      	subs	r0, r3, #1
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6859      	ldr	r1, [r3, #4]
 80030e4:	460b      	mov	r3, r1
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	440b      	add	r3, r1
 80030ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80030ee:	3301      	adds	r3, #1
 80030f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	bf0c      	ite	eq
 80030f8:	2301      	moveq	r3, #1
 80030fa:	2300      	movne	r3, #0
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	e012      	b.n	8003126 <HAL_I2C_Init+0x18e>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	1e58      	subs	r0, r3, #1
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6859      	ldr	r1, [r3, #4]
 8003108:	460b      	mov	r3, r1
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	440b      	add	r3, r1
 800310e:	0099      	lsls	r1, r3, #2
 8003110:	440b      	add	r3, r1
 8003112:	fbb0 f3f3 	udiv	r3, r0, r3
 8003116:	3301      	adds	r3, #1
 8003118:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800311c:	2b00      	cmp	r3, #0
 800311e:	bf0c      	ite	eq
 8003120:	2301      	moveq	r3, #1
 8003122:	2300      	movne	r3, #0
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <HAL_I2C_Init+0x196>
 800312a:	2301      	movs	r3, #1
 800312c:	e022      	b.n	8003174 <HAL_I2C_Init+0x1dc>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d10e      	bne.n	8003154 <HAL_I2C_Init+0x1bc>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	1e58      	subs	r0, r3, #1
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6859      	ldr	r1, [r3, #4]
 800313e:	460b      	mov	r3, r1
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	440b      	add	r3, r1
 8003144:	fbb0 f3f3 	udiv	r3, r0, r3
 8003148:	3301      	adds	r3, #1
 800314a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800314e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003152:	e00f      	b.n	8003174 <HAL_I2C_Init+0x1dc>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	1e58      	subs	r0, r3, #1
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6859      	ldr	r1, [r3, #4]
 800315c:	460b      	mov	r3, r1
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	440b      	add	r3, r1
 8003162:	0099      	lsls	r1, r3, #2
 8003164:	440b      	add	r3, r1
 8003166:	fbb0 f3f3 	udiv	r3, r0, r3
 800316a:	3301      	adds	r3, #1
 800316c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003170:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003174:	6879      	ldr	r1, [r7, #4]
 8003176:	6809      	ldr	r1, [r1, #0]
 8003178:	4313      	orrs	r3, r2
 800317a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	69da      	ldr	r2, [r3, #28]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	431a      	orrs	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	430a      	orrs	r2, r1
 8003196:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80031a2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	6911      	ldr	r1, [r2, #16]
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	68d2      	ldr	r2, [r2, #12]
 80031ae:	4311      	orrs	r1, r2
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	6812      	ldr	r2, [r2, #0]
 80031b4:	430b      	orrs	r3, r1
 80031b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	695a      	ldr	r2, [r3, #20]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	431a      	orrs	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	430a      	orrs	r2, r1
 80031d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f042 0201 	orr.w	r2, r2, #1
 80031e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2220      	movs	r2, #32
 80031ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	000186a0 	.word	0x000186a0
 8003210:	001e847f 	.word	0x001e847f
 8003214:	003d08ff 	.word	0x003d08ff
 8003218:	431bde83 	.word	0x431bde83
 800321c:	10624dd3 	.word	0x10624dd3

08003220 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b088      	sub	sp, #32
 8003224:	af02      	add	r7, sp, #8
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	607a      	str	r2, [r7, #4]
 800322a:	461a      	mov	r2, r3
 800322c:	460b      	mov	r3, r1
 800322e:	817b      	strh	r3, [r7, #10]
 8003230:	4613      	mov	r3, r2
 8003232:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003234:	f7fe ff14 	bl	8002060 <HAL_GetTick>
 8003238:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b20      	cmp	r3, #32
 8003244:	f040 80e0 	bne.w	8003408 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	9300      	str	r3, [sp, #0]
 800324c:	2319      	movs	r3, #25
 800324e:	2201      	movs	r2, #1
 8003250:	4970      	ldr	r1, [pc, #448]	@ (8003414 <HAL_I2C_Master_Transmit+0x1f4>)
 8003252:	68f8      	ldr	r0, [r7, #12]
 8003254:	f000 f964 	bl	8003520 <I2C_WaitOnFlagUntilTimeout>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800325e:	2302      	movs	r3, #2
 8003260:	e0d3      	b.n	800340a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003268:	2b01      	cmp	r3, #1
 800326a:	d101      	bne.n	8003270 <HAL_I2C_Master_Transmit+0x50>
 800326c:	2302      	movs	r3, #2
 800326e:	e0cc      	b.n	800340a <HAL_I2C_Master_Transmit+0x1ea>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	2b01      	cmp	r3, #1
 8003284:	d007      	beq.n	8003296 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f042 0201 	orr.w	r2, r2, #1
 8003294:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032a4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2221      	movs	r2, #33	@ 0x21
 80032aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2210      	movs	r2, #16
 80032b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	893a      	ldrh	r2, [r7, #8]
 80032c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032cc:	b29a      	uxth	r2, r3
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	4a50      	ldr	r2, [pc, #320]	@ (8003418 <HAL_I2C_Master_Transmit+0x1f8>)
 80032d6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80032d8:	8979      	ldrh	r1, [r7, #10]
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	6a3a      	ldr	r2, [r7, #32]
 80032de:	68f8      	ldr	r0, [r7, #12]
 80032e0:	f000 f89c 	bl	800341c <I2C_MasterRequestWrite>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e08d      	b.n	800340a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032ee:	2300      	movs	r3, #0
 80032f0:	613b      	str	r3, [r7, #16]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	695b      	ldr	r3, [r3, #20]
 80032f8:	613b      	str	r3, [r7, #16]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	613b      	str	r3, [r7, #16]
 8003302:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003304:	e066      	b.n	80033d4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003306:	697a      	ldr	r2, [r7, #20]
 8003308:	6a39      	ldr	r1, [r7, #32]
 800330a:	68f8      	ldr	r0, [r7, #12]
 800330c:	f000 fa22 	bl	8003754 <I2C_WaitOnTXEFlagUntilTimeout>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00d      	beq.n	8003332 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800331a:	2b04      	cmp	r3, #4
 800331c:	d107      	bne.n	800332e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800332c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e06b      	b.n	800340a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003336:	781a      	ldrb	r2, [r3, #0]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003342:	1c5a      	adds	r2, r3, #1
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800334c:	b29b      	uxth	r3, r3
 800334e:	3b01      	subs	r3, #1
 8003350:	b29a      	uxth	r2, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800335a:	3b01      	subs	r3, #1
 800335c:	b29a      	uxth	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	695b      	ldr	r3, [r3, #20]
 8003368:	f003 0304 	and.w	r3, r3, #4
 800336c:	2b04      	cmp	r3, #4
 800336e:	d11b      	bne.n	80033a8 <HAL_I2C_Master_Transmit+0x188>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003374:	2b00      	cmp	r3, #0
 8003376:	d017      	beq.n	80033a8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800337c:	781a      	ldrb	r2, [r3, #0]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003388:	1c5a      	adds	r2, r3, #1
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003392:	b29b      	uxth	r3, r3
 8003394:	3b01      	subs	r3, #1
 8003396:	b29a      	uxth	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033a0:	3b01      	subs	r3, #1
 80033a2:	b29a      	uxth	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033a8:	697a      	ldr	r2, [r7, #20]
 80033aa:	6a39      	ldr	r1, [r7, #32]
 80033ac:	68f8      	ldr	r0, [r7, #12]
 80033ae:	f000 fa19 	bl	80037e4 <I2C_WaitOnBTFFlagUntilTimeout>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00d      	beq.n	80033d4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033bc:	2b04      	cmp	r3, #4
 80033be:	d107      	bne.n	80033d0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033ce:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e01a      	b.n	800340a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d194      	bne.n	8003306 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2220      	movs	r2, #32
 80033f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003404:	2300      	movs	r3, #0
 8003406:	e000      	b.n	800340a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003408:	2302      	movs	r3, #2
  }
}
 800340a:	4618      	mov	r0, r3
 800340c:	3718      	adds	r7, #24
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	00100002 	.word	0x00100002
 8003418:	ffff0000 	.word	0xffff0000

0800341c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b088      	sub	sp, #32
 8003420:	af02      	add	r7, sp, #8
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	607a      	str	r2, [r7, #4]
 8003426:	603b      	str	r3, [r7, #0]
 8003428:	460b      	mov	r3, r1
 800342a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003430:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	2b08      	cmp	r3, #8
 8003436:	d006      	beq.n	8003446 <I2C_MasterRequestWrite+0x2a>
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	2b01      	cmp	r3, #1
 800343c:	d003      	beq.n	8003446 <I2C_MasterRequestWrite+0x2a>
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003444:	d108      	bne.n	8003458 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003454:	601a      	str	r2, [r3, #0]
 8003456:	e00b      	b.n	8003470 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800345c:	2b12      	cmp	r3, #18
 800345e:	d107      	bne.n	8003470 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800346e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	9300      	str	r3, [sp, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800347c:	68f8      	ldr	r0, [r7, #12]
 800347e:	f000 f84f 	bl	8003520 <I2C_WaitOnFlagUntilTimeout>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d00d      	beq.n	80034a4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003492:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003496:	d103      	bne.n	80034a0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800349e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e035      	b.n	8003510 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80034ac:	d108      	bne.n	80034c0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80034ae:	897b      	ldrh	r3, [r7, #10]
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	461a      	mov	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80034bc:	611a      	str	r2, [r3, #16]
 80034be:	e01b      	b.n	80034f8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80034c0:	897b      	ldrh	r3, [r7, #10]
 80034c2:	11db      	asrs	r3, r3, #7
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	f003 0306 	and.w	r3, r3, #6
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	f063 030f 	orn	r3, r3, #15
 80034d0:	b2da      	uxtb	r2, r3
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	490e      	ldr	r1, [pc, #56]	@ (8003518 <I2C_MasterRequestWrite+0xfc>)
 80034de:	68f8      	ldr	r0, [r7, #12]
 80034e0:	f000 f898 	bl	8003614 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d001      	beq.n	80034ee <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e010      	b.n	8003510 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80034ee:	897b      	ldrh	r3, [r7, #10]
 80034f0:	b2da      	uxtb	r2, r3
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	4907      	ldr	r1, [pc, #28]	@ (800351c <I2C_MasterRequestWrite+0x100>)
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	f000 f888 	bl	8003614 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d001      	beq.n	800350e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e000      	b.n	8003510 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800350e:	2300      	movs	r3, #0
}
 8003510:	4618      	mov	r0, r3
 8003512:	3718      	adds	r7, #24
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	00010008 	.word	0x00010008
 800351c:	00010002 	.word	0x00010002

08003520 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	603b      	str	r3, [r7, #0]
 800352c:	4613      	mov	r3, r2
 800352e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003530:	e048      	b.n	80035c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003538:	d044      	beq.n	80035c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800353a:	f7fe fd91 	bl	8002060 <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	683a      	ldr	r2, [r7, #0]
 8003546:	429a      	cmp	r2, r3
 8003548:	d302      	bcc.n	8003550 <I2C_WaitOnFlagUntilTimeout+0x30>
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d139      	bne.n	80035c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	0c1b      	lsrs	r3, r3, #16
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b01      	cmp	r3, #1
 8003558:	d10d      	bne.n	8003576 <I2C_WaitOnFlagUntilTimeout+0x56>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	695b      	ldr	r3, [r3, #20]
 8003560:	43da      	mvns	r2, r3
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	4013      	ands	r3, r2
 8003566:	b29b      	uxth	r3, r3
 8003568:	2b00      	cmp	r3, #0
 800356a:	bf0c      	ite	eq
 800356c:	2301      	moveq	r3, #1
 800356e:	2300      	movne	r3, #0
 8003570:	b2db      	uxtb	r3, r3
 8003572:	461a      	mov	r2, r3
 8003574:	e00c      	b.n	8003590 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	699b      	ldr	r3, [r3, #24]
 800357c:	43da      	mvns	r2, r3
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	4013      	ands	r3, r2
 8003582:	b29b      	uxth	r3, r3
 8003584:	2b00      	cmp	r3, #0
 8003586:	bf0c      	ite	eq
 8003588:	2301      	moveq	r3, #1
 800358a:	2300      	movne	r3, #0
 800358c:	b2db      	uxtb	r3, r3
 800358e:	461a      	mov	r2, r3
 8003590:	79fb      	ldrb	r3, [r7, #7]
 8003592:	429a      	cmp	r2, r3
 8003594:	d116      	bne.n	80035c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2220      	movs	r2, #32
 80035a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b0:	f043 0220 	orr.w	r2, r3, #32
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e023      	b.n	800360c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	0c1b      	lsrs	r3, r3, #16
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d10d      	bne.n	80035ea <I2C_WaitOnFlagUntilTimeout+0xca>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	695b      	ldr	r3, [r3, #20]
 80035d4:	43da      	mvns	r2, r3
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	4013      	ands	r3, r2
 80035da:	b29b      	uxth	r3, r3
 80035dc:	2b00      	cmp	r3, #0
 80035de:	bf0c      	ite	eq
 80035e0:	2301      	moveq	r3, #1
 80035e2:	2300      	movne	r3, #0
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	461a      	mov	r2, r3
 80035e8:	e00c      	b.n	8003604 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	43da      	mvns	r2, r3
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	4013      	ands	r3, r2
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	bf0c      	ite	eq
 80035fc:	2301      	moveq	r3, #1
 80035fe:	2300      	movne	r3, #0
 8003600:	b2db      	uxtb	r3, r3
 8003602:	461a      	mov	r2, r3
 8003604:	79fb      	ldrb	r3, [r7, #7]
 8003606:	429a      	cmp	r2, r3
 8003608:	d093      	beq.n	8003532 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	3710      	adds	r7, #16
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	607a      	str	r2, [r7, #4]
 8003620:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003622:	e071      	b.n	8003708 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800362e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003632:	d123      	bne.n	800367c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003642:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800364c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2220      	movs	r2, #32
 8003658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003668:	f043 0204 	orr.w	r2, r3, #4
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e067      	b.n	800374c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003682:	d041      	beq.n	8003708 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003684:	f7fe fcec 	bl	8002060 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	429a      	cmp	r2, r3
 8003692:	d302      	bcc.n	800369a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d136      	bne.n	8003708 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	0c1b      	lsrs	r3, r3, #16
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d10c      	bne.n	80036be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	43da      	mvns	r2, r3
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	4013      	ands	r3, r2
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	bf14      	ite	ne
 80036b6:	2301      	movne	r3, #1
 80036b8:	2300      	moveq	r3, #0
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	e00b      	b.n	80036d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	699b      	ldr	r3, [r3, #24]
 80036c4:	43da      	mvns	r2, r3
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	4013      	ands	r3, r2
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	bf14      	ite	ne
 80036d0:	2301      	movne	r3, #1
 80036d2:	2300      	moveq	r3, #0
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d016      	beq.n	8003708 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2220      	movs	r2, #32
 80036e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f4:	f043 0220 	orr.w	r2, r3, #32
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e021      	b.n	800374c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	0c1b      	lsrs	r3, r3, #16
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b01      	cmp	r3, #1
 8003710:	d10c      	bne.n	800372c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	695b      	ldr	r3, [r3, #20]
 8003718:	43da      	mvns	r2, r3
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	4013      	ands	r3, r2
 800371e:	b29b      	uxth	r3, r3
 8003720:	2b00      	cmp	r3, #0
 8003722:	bf14      	ite	ne
 8003724:	2301      	movne	r3, #1
 8003726:	2300      	moveq	r3, #0
 8003728:	b2db      	uxtb	r3, r3
 800372a:	e00b      	b.n	8003744 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	43da      	mvns	r2, r3
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	4013      	ands	r3, r2
 8003738:	b29b      	uxth	r3, r3
 800373a:	2b00      	cmp	r3, #0
 800373c:	bf14      	ite	ne
 800373e:	2301      	movne	r3, #1
 8003740:	2300      	moveq	r3, #0
 8003742:	b2db      	uxtb	r3, r3
 8003744:	2b00      	cmp	r3, #0
 8003746:	f47f af6d 	bne.w	8003624 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	3710      	adds	r7, #16
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003760:	e034      	b.n	80037cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003762:	68f8      	ldr	r0, [r7, #12]
 8003764:	f000 f886 	bl	8003874 <I2C_IsAcknowledgeFailed>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e034      	b.n	80037dc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003778:	d028      	beq.n	80037cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800377a:	f7fe fc71 	bl	8002060 <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	68ba      	ldr	r2, [r7, #8]
 8003786:	429a      	cmp	r2, r3
 8003788:	d302      	bcc.n	8003790 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d11d      	bne.n	80037cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800379a:	2b80      	cmp	r3, #128	@ 0x80
 800379c:	d016      	beq.n	80037cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2220      	movs	r2, #32
 80037a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b8:	f043 0220 	orr.w	r2, r3, #32
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e007      	b.n	80037dc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037d6:	2b80      	cmp	r3, #128	@ 0x80
 80037d8:	d1c3      	bne.n	8003762 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3710      	adds	r7, #16
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037f0:	e034      	b.n	800385c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037f2:	68f8      	ldr	r0, [r7, #12]
 80037f4:	f000 f83e 	bl	8003874 <I2C_IsAcknowledgeFailed>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e034      	b.n	800386c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003808:	d028      	beq.n	800385c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800380a:	f7fe fc29 	bl	8002060 <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	68ba      	ldr	r2, [r7, #8]
 8003816:	429a      	cmp	r2, r3
 8003818:	d302      	bcc.n	8003820 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d11d      	bne.n	800385c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	f003 0304 	and.w	r3, r3, #4
 800382a:	2b04      	cmp	r3, #4
 800382c:	d016      	beq.n	800385c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2220      	movs	r2, #32
 8003838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003848:	f043 0220 	orr.w	r2, r3, #32
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e007      	b.n	800386c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	f003 0304 	and.w	r3, r3, #4
 8003866:	2b04      	cmp	r3, #4
 8003868:	d1c3      	bne.n	80037f2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	3710      	adds	r7, #16
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003886:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800388a:	d11b      	bne.n	80038c4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003894:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2220      	movs	r2, #32
 80038a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b0:	f043 0204 	orr.w	r2, r3, #4
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e000      	b.n	80038c6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	370c      	adds	r7, #12
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bc80      	pop	{r7}
 80038ce:	4770      	bx	lr

080038d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b086      	sub	sp, #24
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d101      	bne.n	80038e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e272      	b.n	8003dc8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	f000 8087 	beq.w	80039fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80038f0:	4b92      	ldr	r3, [pc, #584]	@ (8003b3c <HAL_RCC_OscConfig+0x26c>)
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f003 030c 	and.w	r3, r3, #12
 80038f8:	2b04      	cmp	r3, #4
 80038fa:	d00c      	beq.n	8003916 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80038fc:	4b8f      	ldr	r3, [pc, #572]	@ (8003b3c <HAL_RCC_OscConfig+0x26c>)
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f003 030c 	and.w	r3, r3, #12
 8003904:	2b08      	cmp	r3, #8
 8003906:	d112      	bne.n	800392e <HAL_RCC_OscConfig+0x5e>
 8003908:	4b8c      	ldr	r3, [pc, #560]	@ (8003b3c <HAL_RCC_OscConfig+0x26c>)
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003910:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003914:	d10b      	bne.n	800392e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003916:	4b89      	ldr	r3, [pc, #548]	@ (8003b3c <HAL_RCC_OscConfig+0x26c>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d06c      	beq.n	80039fc <HAL_RCC_OscConfig+0x12c>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d168      	bne.n	80039fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e24c      	b.n	8003dc8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003936:	d106      	bne.n	8003946 <HAL_RCC_OscConfig+0x76>
 8003938:	4b80      	ldr	r3, [pc, #512]	@ (8003b3c <HAL_RCC_OscConfig+0x26c>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a7f      	ldr	r2, [pc, #508]	@ (8003b3c <HAL_RCC_OscConfig+0x26c>)
 800393e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003942:	6013      	str	r3, [r2, #0]
 8003944:	e02e      	b.n	80039a4 <HAL_RCC_OscConfig+0xd4>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d10c      	bne.n	8003968 <HAL_RCC_OscConfig+0x98>
 800394e:	4b7b      	ldr	r3, [pc, #492]	@ (8003b3c <HAL_RCC_OscConfig+0x26c>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a7a      	ldr	r2, [pc, #488]	@ (8003b3c <HAL_RCC_OscConfig+0x26c>)
 8003954:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003958:	6013      	str	r3, [r2, #0]
 800395a:	4b78      	ldr	r3, [pc, #480]	@ (8003b3c <HAL_RCC_OscConfig+0x26c>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a77      	ldr	r2, [pc, #476]	@ (8003b3c <HAL_RCC_OscConfig+0x26c>)
 8003960:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003964:	6013      	str	r3, [r2, #0]
 8003966:	e01d      	b.n	80039a4 <HAL_RCC_OscConfig+0xd4>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003970:	d10c      	bne.n	800398c <HAL_RCC_OscConfig+0xbc>
 8003972:	4b72      	ldr	r3, [pc, #456]	@ (8003b3c <HAL_RCC_OscConfig+0x26c>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a71      	ldr	r2, [pc, #452]	@ (8003b3c <HAL_RCC_OscConfig+0x26c>)
 8003978:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800397c:	6013      	str	r3, [r2, #0]
 800397e:	4b6f      	ldr	r3, [pc, #444]	@ (8003b3c <HAL_RCC_OscConfig+0x26c>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a6e      	ldr	r2, [pc, #440]	@ (8003b3c <HAL_RCC_OscConfig+0x26c>)
 8003984:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003988:	6013      	str	r3, [r2, #0]
 800398a:	e00b      	b.n	80039a4 <HAL_RCC_OscConfig+0xd4>
 800398c:	4b6b      	ldr	r3, [pc, #428]	@ (8003b3c <HAL_RCC_OscConfig+0x26c>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a6a      	ldr	r2, [pc, #424]	@ (8003b3c <HAL_RCC_OscConfig+0x26c>)
 8003992:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003996:	6013      	str	r3, [r2, #0]
 8003998:	4b68      	ldr	r3, [pc, #416]	@ (8003b3c <HAL_RCC_OscConfig+0x26c>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a67      	ldr	r2, [pc, #412]	@ (8003b3c <HAL_RCC_OscConfig+0x26c>)
 800399e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d013      	beq.n	80039d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ac:	f7fe fb58 	bl	8002060 <HAL_GetTick>
 80039b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039b2:	e008      	b.n	80039c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039b4:	f7fe fb54 	bl	8002060 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b64      	cmp	r3, #100	@ 0x64
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e200      	b.n	8003dc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039c6:	4b5d      	ldr	r3, [pc, #372]	@ (8003b3c <HAL_RCC_OscConfig+0x26c>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d0f0      	beq.n	80039b4 <HAL_RCC_OscConfig+0xe4>
 80039d2:	e014      	b.n	80039fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d4:	f7fe fb44 	bl	8002060 <HAL_GetTick>
 80039d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039da:	e008      	b.n	80039ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039dc:	f7fe fb40 	bl	8002060 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b64      	cmp	r3, #100	@ 0x64
 80039e8:	d901      	bls.n	80039ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e1ec      	b.n	8003dc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ee:	4b53      	ldr	r3, [pc, #332]	@ (8003b3c <HAL_RCC_OscConfig+0x26c>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1f0      	bne.n	80039dc <HAL_RCC_OscConfig+0x10c>
 80039fa:	e000      	b.n	80039fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0302 	and.w	r3, r3, #2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d063      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a0a:	4b4c      	ldr	r3, [pc, #304]	@ (8003b3c <HAL_RCC_OscConfig+0x26c>)
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f003 030c 	and.w	r3, r3, #12
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00b      	beq.n	8003a2e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003a16:	4b49      	ldr	r3, [pc, #292]	@ (8003b3c <HAL_RCC_OscConfig+0x26c>)
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	f003 030c 	and.w	r3, r3, #12
 8003a1e:	2b08      	cmp	r3, #8
 8003a20:	d11c      	bne.n	8003a5c <HAL_RCC_OscConfig+0x18c>
 8003a22:	4b46      	ldr	r3, [pc, #280]	@ (8003b3c <HAL_RCC_OscConfig+0x26c>)
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d116      	bne.n	8003a5c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a2e:	4b43      	ldr	r3, [pc, #268]	@ (8003b3c <HAL_RCC_OscConfig+0x26c>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0302 	and.w	r3, r3, #2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d005      	beq.n	8003a46 <HAL_RCC_OscConfig+0x176>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d001      	beq.n	8003a46 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e1c0      	b.n	8003dc8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a46:	4b3d      	ldr	r3, [pc, #244]	@ (8003b3c <HAL_RCC_OscConfig+0x26c>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	4939      	ldr	r1, [pc, #228]	@ (8003b3c <HAL_RCC_OscConfig+0x26c>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a5a:	e03a      	b.n	8003ad2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	691b      	ldr	r3, [r3, #16]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d020      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a64:	4b36      	ldr	r3, [pc, #216]	@ (8003b40 <HAL_RCC_OscConfig+0x270>)
 8003a66:	2201      	movs	r2, #1
 8003a68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a6a:	f7fe faf9 	bl	8002060 <HAL_GetTick>
 8003a6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a70:	e008      	b.n	8003a84 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a72:	f7fe faf5 	bl	8002060 <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d901      	bls.n	8003a84 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e1a1      	b.n	8003dc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a84:	4b2d      	ldr	r3, [pc, #180]	@ (8003b3c <HAL_RCC_OscConfig+0x26c>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0302 	and.w	r3, r3, #2
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d0f0      	beq.n	8003a72 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a90:	4b2a      	ldr	r3, [pc, #168]	@ (8003b3c <HAL_RCC_OscConfig+0x26c>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	695b      	ldr	r3, [r3, #20]
 8003a9c:	00db      	lsls	r3, r3, #3
 8003a9e:	4927      	ldr	r1, [pc, #156]	@ (8003b3c <HAL_RCC_OscConfig+0x26c>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	600b      	str	r3, [r1, #0]
 8003aa4:	e015      	b.n	8003ad2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003aa6:	4b26      	ldr	r3, [pc, #152]	@ (8003b40 <HAL_RCC_OscConfig+0x270>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aac:	f7fe fad8 	bl	8002060 <HAL_GetTick>
 8003ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ab2:	e008      	b.n	8003ac6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ab4:	f7fe fad4 	bl	8002060 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e180      	b.n	8003dc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ac6:	4b1d      	ldr	r3, [pc, #116]	@ (8003b3c <HAL_RCC_OscConfig+0x26c>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1f0      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0308 	and.w	r3, r3, #8
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d03a      	beq.n	8003b54 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d019      	beq.n	8003b1a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ae6:	4b17      	ldr	r3, [pc, #92]	@ (8003b44 <HAL_RCC_OscConfig+0x274>)
 8003ae8:	2201      	movs	r2, #1
 8003aea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aec:	f7fe fab8 	bl	8002060 <HAL_GetTick>
 8003af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003af2:	e008      	b.n	8003b06 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003af4:	f7fe fab4 	bl	8002060 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e160      	b.n	8003dc8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b06:	4b0d      	ldr	r3, [pc, #52]	@ (8003b3c <HAL_RCC_OscConfig+0x26c>)
 8003b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d0f0      	beq.n	8003af4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003b12:	2001      	movs	r0, #1
 8003b14:	f000 fafe 	bl	8004114 <RCC_Delay>
 8003b18:	e01c      	b.n	8003b54 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b1a:	4b0a      	ldr	r3, [pc, #40]	@ (8003b44 <HAL_RCC_OscConfig+0x274>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b20:	f7fe fa9e 	bl	8002060 <HAL_GetTick>
 8003b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b26:	e00f      	b.n	8003b48 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b28:	f7fe fa9a 	bl	8002060 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d908      	bls.n	8003b48 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e146      	b.n	8003dc8 <HAL_RCC_OscConfig+0x4f8>
 8003b3a:	bf00      	nop
 8003b3c:	40021000 	.word	0x40021000
 8003b40:	42420000 	.word	0x42420000
 8003b44:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b48:	4b92      	ldr	r3, [pc, #584]	@ (8003d94 <HAL_RCC_OscConfig+0x4c4>)
 8003b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b4c:	f003 0302 	and.w	r3, r3, #2
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d1e9      	bne.n	8003b28 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0304 	and.w	r3, r3, #4
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	f000 80a6 	beq.w	8003cae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b62:	2300      	movs	r3, #0
 8003b64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b66:	4b8b      	ldr	r3, [pc, #556]	@ (8003d94 <HAL_RCC_OscConfig+0x4c4>)
 8003b68:	69db      	ldr	r3, [r3, #28]
 8003b6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d10d      	bne.n	8003b8e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b72:	4b88      	ldr	r3, [pc, #544]	@ (8003d94 <HAL_RCC_OscConfig+0x4c4>)
 8003b74:	69db      	ldr	r3, [r3, #28]
 8003b76:	4a87      	ldr	r2, [pc, #540]	@ (8003d94 <HAL_RCC_OscConfig+0x4c4>)
 8003b78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b7c:	61d3      	str	r3, [r2, #28]
 8003b7e:	4b85      	ldr	r3, [pc, #532]	@ (8003d94 <HAL_RCC_OscConfig+0x4c4>)
 8003b80:	69db      	ldr	r3, [r3, #28]
 8003b82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b86:	60bb      	str	r3, [r7, #8]
 8003b88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b8e:	4b82      	ldr	r3, [pc, #520]	@ (8003d98 <HAL_RCC_OscConfig+0x4c8>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d118      	bne.n	8003bcc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b9a:	4b7f      	ldr	r3, [pc, #508]	@ (8003d98 <HAL_RCC_OscConfig+0x4c8>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a7e      	ldr	r2, [pc, #504]	@ (8003d98 <HAL_RCC_OscConfig+0x4c8>)
 8003ba0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ba4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ba6:	f7fe fa5b 	bl	8002060 <HAL_GetTick>
 8003baa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bac:	e008      	b.n	8003bc0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bae:	f7fe fa57 	bl	8002060 <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	2b64      	cmp	r3, #100	@ 0x64
 8003bba:	d901      	bls.n	8003bc0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e103      	b.n	8003dc8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bc0:	4b75      	ldr	r3, [pc, #468]	@ (8003d98 <HAL_RCC_OscConfig+0x4c8>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d0f0      	beq.n	8003bae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d106      	bne.n	8003be2 <HAL_RCC_OscConfig+0x312>
 8003bd4:	4b6f      	ldr	r3, [pc, #444]	@ (8003d94 <HAL_RCC_OscConfig+0x4c4>)
 8003bd6:	6a1b      	ldr	r3, [r3, #32]
 8003bd8:	4a6e      	ldr	r2, [pc, #440]	@ (8003d94 <HAL_RCC_OscConfig+0x4c4>)
 8003bda:	f043 0301 	orr.w	r3, r3, #1
 8003bde:	6213      	str	r3, [r2, #32]
 8003be0:	e02d      	b.n	8003c3e <HAL_RCC_OscConfig+0x36e>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10c      	bne.n	8003c04 <HAL_RCC_OscConfig+0x334>
 8003bea:	4b6a      	ldr	r3, [pc, #424]	@ (8003d94 <HAL_RCC_OscConfig+0x4c4>)
 8003bec:	6a1b      	ldr	r3, [r3, #32]
 8003bee:	4a69      	ldr	r2, [pc, #420]	@ (8003d94 <HAL_RCC_OscConfig+0x4c4>)
 8003bf0:	f023 0301 	bic.w	r3, r3, #1
 8003bf4:	6213      	str	r3, [r2, #32]
 8003bf6:	4b67      	ldr	r3, [pc, #412]	@ (8003d94 <HAL_RCC_OscConfig+0x4c4>)
 8003bf8:	6a1b      	ldr	r3, [r3, #32]
 8003bfa:	4a66      	ldr	r2, [pc, #408]	@ (8003d94 <HAL_RCC_OscConfig+0x4c4>)
 8003bfc:	f023 0304 	bic.w	r3, r3, #4
 8003c00:	6213      	str	r3, [r2, #32]
 8003c02:	e01c      	b.n	8003c3e <HAL_RCC_OscConfig+0x36e>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	2b05      	cmp	r3, #5
 8003c0a:	d10c      	bne.n	8003c26 <HAL_RCC_OscConfig+0x356>
 8003c0c:	4b61      	ldr	r3, [pc, #388]	@ (8003d94 <HAL_RCC_OscConfig+0x4c4>)
 8003c0e:	6a1b      	ldr	r3, [r3, #32]
 8003c10:	4a60      	ldr	r2, [pc, #384]	@ (8003d94 <HAL_RCC_OscConfig+0x4c4>)
 8003c12:	f043 0304 	orr.w	r3, r3, #4
 8003c16:	6213      	str	r3, [r2, #32]
 8003c18:	4b5e      	ldr	r3, [pc, #376]	@ (8003d94 <HAL_RCC_OscConfig+0x4c4>)
 8003c1a:	6a1b      	ldr	r3, [r3, #32]
 8003c1c:	4a5d      	ldr	r2, [pc, #372]	@ (8003d94 <HAL_RCC_OscConfig+0x4c4>)
 8003c1e:	f043 0301 	orr.w	r3, r3, #1
 8003c22:	6213      	str	r3, [r2, #32]
 8003c24:	e00b      	b.n	8003c3e <HAL_RCC_OscConfig+0x36e>
 8003c26:	4b5b      	ldr	r3, [pc, #364]	@ (8003d94 <HAL_RCC_OscConfig+0x4c4>)
 8003c28:	6a1b      	ldr	r3, [r3, #32]
 8003c2a:	4a5a      	ldr	r2, [pc, #360]	@ (8003d94 <HAL_RCC_OscConfig+0x4c4>)
 8003c2c:	f023 0301 	bic.w	r3, r3, #1
 8003c30:	6213      	str	r3, [r2, #32]
 8003c32:	4b58      	ldr	r3, [pc, #352]	@ (8003d94 <HAL_RCC_OscConfig+0x4c4>)
 8003c34:	6a1b      	ldr	r3, [r3, #32]
 8003c36:	4a57      	ldr	r2, [pc, #348]	@ (8003d94 <HAL_RCC_OscConfig+0x4c4>)
 8003c38:	f023 0304 	bic.w	r3, r3, #4
 8003c3c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d015      	beq.n	8003c72 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c46:	f7fe fa0b 	bl	8002060 <HAL_GetTick>
 8003c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c4c:	e00a      	b.n	8003c64 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c4e:	f7fe fa07 	bl	8002060 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d901      	bls.n	8003c64 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e0b1      	b.n	8003dc8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c64:	4b4b      	ldr	r3, [pc, #300]	@ (8003d94 <HAL_RCC_OscConfig+0x4c4>)
 8003c66:	6a1b      	ldr	r3, [r3, #32]
 8003c68:	f003 0302 	and.w	r3, r3, #2
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d0ee      	beq.n	8003c4e <HAL_RCC_OscConfig+0x37e>
 8003c70:	e014      	b.n	8003c9c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c72:	f7fe f9f5 	bl	8002060 <HAL_GetTick>
 8003c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c78:	e00a      	b.n	8003c90 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c7a:	f7fe f9f1 	bl	8002060 <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d901      	bls.n	8003c90 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e09b      	b.n	8003dc8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c90:	4b40      	ldr	r3, [pc, #256]	@ (8003d94 <HAL_RCC_OscConfig+0x4c4>)
 8003c92:	6a1b      	ldr	r3, [r3, #32]
 8003c94:	f003 0302 	and.w	r3, r3, #2
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d1ee      	bne.n	8003c7a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c9c:	7dfb      	ldrb	r3, [r7, #23]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d105      	bne.n	8003cae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ca2:	4b3c      	ldr	r3, [pc, #240]	@ (8003d94 <HAL_RCC_OscConfig+0x4c4>)
 8003ca4:	69db      	ldr	r3, [r3, #28]
 8003ca6:	4a3b      	ldr	r2, [pc, #236]	@ (8003d94 <HAL_RCC_OscConfig+0x4c4>)
 8003ca8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	69db      	ldr	r3, [r3, #28]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	f000 8087 	beq.w	8003dc6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cb8:	4b36      	ldr	r3, [pc, #216]	@ (8003d94 <HAL_RCC_OscConfig+0x4c4>)
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f003 030c 	and.w	r3, r3, #12
 8003cc0:	2b08      	cmp	r3, #8
 8003cc2:	d061      	beq.n	8003d88 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	69db      	ldr	r3, [r3, #28]
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d146      	bne.n	8003d5a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ccc:	4b33      	ldr	r3, [pc, #204]	@ (8003d9c <HAL_RCC_OscConfig+0x4cc>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd2:	f7fe f9c5 	bl	8002060 <HAL_GetTick>
 8003cd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cd8:	e008      	b.n	8003cec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cda:	f7fe f9c1 	bl	8002060 <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d901      	bls.n	8003cec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e06d      	b.n	8003dc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cec:	4b29      	ldr	r3, [pc, #164]	@ (8003d94 <HAL_RCC_OscConfig+0x4c4>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d1f0      	bne.n	8003cda <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a1b      	ldr	r3, [r3, #32]
 8003cfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d00:	d108      	bne.n	8003d14 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003d02:	4b24      	ldr	r3, [pc, #144]	@ (8003d94 <HAL_RCC_OscConfig+0x4c4>)
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	4921      	ldr	r1, [pc, #132]	@ (8003d94 <HAL_RCC_OscConfig+0x4c4>)
 8003d10:	4313      	orrs	r3, r2
 8003d12:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d14:	4b1f      	ldr	r3, [pc, #124]	@ (8003d94 <HAL_RCC_OscConfig+0x4c4>)
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6a19      	ldr	r1, [r3, #32]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d24:	430b      	orrs	r3, r1
 8003d26:	491b      	ldr	r1, [pc, #108]	@ (8003d94 <HAL_RCC_OscConfig+0x4c4>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d2c:	4b1b      	ldr	r3, [pc, #108]	@ (8003d9c <HAL_RCC_OscConfig+0x4cc>)
 8003d2e:	2201      	movs	r2, #1
 8003d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d32:	f7fe f995 	bl	8002060 <HAL_GetTick>
 8003d36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d38:	e008      	b.n	8003d4c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d3a:	f7fe f991 	bl	8002060 <HAL_GetTick>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d901      	bls.n	8003d4c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	e03d      	b.n	8003dc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d4c:	4b11      	ldr	r3, [pc, #68]	@ (8003d94 <HAL_RCC_OscConfig+0x4c4>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d0f0      	beq.n	8003d3a <HAL_RCC_OscConfig+0x46a>
 8003d58:	e035      	b.n	8003dc6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d5a:	4b10      	ldr	r3, [pc, #64]	@ (8003d9c <HAL_RCC_OscConfig+0x4cc>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d60:	f7fe f97e 	bl	8002060 <HAL_GetTick>
 8003d64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d66:	e008      	b.n	8003d7a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d68:	f7fe f97a 	bl	8002060 <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d901      	bls.n	8003d7a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e026      	b.n	8003dc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d7a:	4b06      	ldr	r3, [pc, #24]	@ (8003d94 <HAL_RCC_OscConfig+0x4c4>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1f0      	bne.n	8003d68 <HAL_RCC_OscConfig+0x498>
 8003d86:	e01e      	b.n	8003dc6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	69db      	ldr	r3, [r3, #28]
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d107      	bne.n	8003da0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e019      	b.n	8003dc8 <HAL_RCC_OscConfig+0x4f8>
 8003d94:	40021000 	.word	0x40021000
 8003d98:	40007000 	.word	0x40007000
 8003d9c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003da0:	4b0b      	ldr	r3, [pc, #44]	@ (8003dd0 <HAL_RCC_OscConfig+0x500>)
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a1b      	ldr	r3, [r3, #32]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d106      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d001      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e000      	b.n	8003dc8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3718      	adds	r7, #24
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	40021000 	.word	0x40021000

08003dd4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d101      	bne.n	8003de8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e0d0      	b.n	8003f8a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003de8:	4b6a      	ldr	r3, [pc, #424]	@ (8003f94 <HAL_RCC_ClockConfig+0x1c0>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0307 	and.w	r3, r3, #7
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d910      	bls.n	8003e18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003df6:	4b67      	ldr	r3, [pc, #412]	@ (8003f94 <HAL_RCC_ClockConfig+0x1c0>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f023 0207 	bic.w	r2, r3, #7
 8003dfe:	4965      	ldr	r1, [pc, #404]	@ (8003f94 <HAL_RCC_ClockConfig+0x1c0>)
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e06:	4b63      	ldr	r3, [pc, #396]	@ (8003f94 <HAL_RCC_ClockConfig+0x1c0>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0307 	and.w	r3, r3, #7
 8003e0e:	683a      	ldr	r2, [r7, #0]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d001      	beq.n	8003e18 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e0b8      	b.n	8003f8a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0302 	and.w	r3, r3, #2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d020      	beq.n	8003e66 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0304 	and.w	r3, r3, #4
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d005      	beq.n	8003e3c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e30:	4b59      	ldr	r3, [pc, #356]	@ (8003f98 <HAL_RCC_ClockConfig+0x1c4>)
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	4a58      	ldr	r2, [pc, #352]	@ (8003f98 <HAL_RCC_ClockConfig+0x1c4>)
 8003e36:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003e3a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0308 	and.w	r3, r3, #8
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d005      	beq.n	8003e54 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e48:	4b53      	ldr	r3, [pc, #332]	@ (8003f98 <HAL_RCC_ClockConfig+0x1c4>)
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	4a52      	ldr	r2, [pc, #328]	@ (8003f98 <HAL_RCC_ClockConfig+0x1c4>)
 8003e4e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003e52:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e54:	4b50      	ldr	r3, [pc, #320]	@ (8003f98 <HAL_RCC_ClockConfig+0x1c4>)
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	494d      	ldr	r1, [pc, #308]	@ (8003f98 <HAL_RCC_ClockConfig+0x1c4>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d040      	beq.n	8003ef4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d107      	bne.n	8003e8a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e7a:	4b47      	ldr	r3, [pc, #284]	@ (8003f98 <HAL_RCC_ClockConfig+0x1c4>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d115      	bne.n	8003eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e07f      	b.n	8003f8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d107      	bne.n	8003ea2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e92:	4b41      	ldr	r3, [pc, #260]	@ (8003f98 <HAL_RCC_ClockConfig+0x1c4>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d109      	bne.n	8003eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e073      	b.n	8003f8a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ea2:	4b3d      	ldr	r3, [pc, #244]	@ (8003f98 <HAL_RCC_ClockConfig+0x1c4>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d101      	bne.n	8003eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e06b      	b.n	8003f8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003eb2:	4b39      	ldr	r3, [pc, #228]	@ (8003f98 <HAL_RCC_ClockConfig+0x1c4>)
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f023 0203 	bic.w	r2, r3, #3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	4936      	ldr	r1, [pc, #216]	@ (8003f98 <HAL_RCC_ClockConfig+0x1c4>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ec4:	f7fe f8cc 	bl	8002060 <HAL_GetTick>
 8003ec8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eca:	e00a      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ecc:	f7fe f8c8 	bl	8002060 <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e053      	b.n	8003f8a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ee2:	4b2d      	ldr	r3, [pc, #180]	@ (8003f98 <HAL_RCC_ClockConfig+0x1c4>)
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f003 020c 	and.w	r2, r3, #12
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d1eb      	bne.n	8003ecc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ef4:	4b27      	ldr	r3, [pc, #156]	@ (8003f94 <HAL_RCC_ClockConfig+0x1c0>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0307 	and.w	r3, r3, #7
 8003efc:	683a      	ldr	r2, [r7, #0]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d210      	bcs.n	8003f24 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f02:	4b24      	ldr	r3, [pc, #144]	@ (8003f94 <HAL_RCC_ClockConfig+0x1c0>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f023 0207 	bic.w	r2, r3, #7
 8003f0a:	4922      	ldr	r1, [pc, #136]	@ (8003f94 <HAL_RCC_ClockConfig+0x1c0>)
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f12:	4b20      	ldr	r3, [pc, #128]	@ (8003f94 <HAL_RCC_ClockConfig+0x1c0>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0307 	and.w	r3, r3, #7
 8003f1a:	683a      	ldr	r2, [r7, #0]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d001      	beq.n	8003f24 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e032      	b.n	8003f8a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0304 	and.w	r3, r3, #4
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d008      	beq.n	8003f42 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f30:	4b19      	ldr	r3, [pc, #100]	@ (8003f98 <HAL_RCC_ClockConfig+0x1c4>)
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	4916      	ldr	r1, [pc, #88]	@ (8003f98 <HAL_RCC_ClockConfig+0x1c4>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0308 	and.w	r3, r3, #8
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d009      	beq.n	8003f62 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f4e:	4b12      	ldr	r3, [pc, #72]	@ (8003f98 <HAL_RCC_ClockConfig+0x1c4>)
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	00db      	lsls	r3, r3, #3
 8003f5c:	490e      	ldr	r1, [pc, #56]	@ (8003f98 <HAL_RCC_ClockConfig+0x1c4>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f62:	f000 f821 	bl	8003fa8 <HAL_RCC_GetSysClockFreq>
 8003f66:	4602      	mov	r2, r0
 8003f68:	4b0b      	ldr	r3, [pc, #44]	@ (8003f98 <HAL_RCC_ClockConfig+0x1c4>)
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	091b      	lsrs	r3, r3, #4
 8003f6e:	f003 030f 	and.w	r3, r3, #15
 8003f72:	490a      	ldr	r1, [pc, #40]	@ (8003f9c <HAL_RCC_ClockConfig+0x1c8>)
 8003f74:	5ccb      	ldrb	r3, [r1, r3]
 8003f76:	fa22 f303 	lsr.w	r3, r2, r3
 8003f7a:	4a09      	ldr	r2, [pc, #36]	@ (8003fa0 <HAL_RCC_ClockConfig+0x1cc>)
 8003f7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003f7e:	4b09      	ldr	r3, [pc, #36]	@ (8003fa4 <HAL_RCC_ClockConfig+0x1d0>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7fd feaa 	bl	8001cdc <HAL_InitTick>

  return HAL_OK;
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3710      	adds	r7, #16
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	40022000 	.word	0x40022000
 8003f98:	40021000 	.word	0x40021000
 8003f9c:	0800d098 	.word	0x0800d098
 8003fa0:	20000014 	.word	0x20000014
 8003fa4:	20000018 	.word	0x20000018

08003fa8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b087      	sub	sp, #28
 8003fac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	60fb      	str	r3, [r7, #12]
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	60bb      	str	r3, [r7, #8]
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	617b      	str	r3, [r7, #20]
 8003fba:	2300      	movs	r3, #0
 8003fbc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003fc2:	4b1e      	ldr	r3, [pc, #120]	@ (800403c <HAL_RCC_GetSysClockFreq+0x94>)
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f003 030c 	and.w	r3, r3, #12
 8003fce:	2b04      	cmp	r3, #4
 8003fd0:	d002      	beq.n	8003fd8 <HAL_RCC_GetSysClockFreq+0x30>
 8003fd2:	2b08      	cmp	r3, #8
 8003fd4:	d003      	beq.n	8003fde <HAL_RCC_GetSysClockFreq+0x36>
 8003fd6:	e027      	b.n	8004028 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003fd8:	4b19      	ldr	r3, [pc, #100]	@ (8004040 <HAL_RCC_GetSysClockFreq+0x98>)
 8003fda:	613b      	str	r3, [r7, #16]
      break;
 8003fdc:	e027      	b.n	800402e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	0c9b      	lsrs	r3, r3, #18
 8003fe2:	f003 030f 	and.w	r3, r3, #15
 8003fe6:	4a17      	ldr	r2, [pc, #92]	@ (8004044 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003fe8:	5cd3      	ldrb	r3, [r2, r3]
 8003fea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d010      	beq.n	8004018 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003ff6:	4b11      	ldr	r3, [pc, #68]	@ (800403c <HAL_RCC_GetSysClockFreq+0x94>)
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	0c5b      	lsrs	r3, r3, #17
 8003ffc:	f003 0301 	and.w	r3, r3, #1
 8004000:	4a11      	ldr	r2, [pc, #68]	@ (8004048 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004002:	5cd3      	ldrb	r3, [r2, r3]
 8004004:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a0d      	ldr	r2, [pc, #52]	@ (8004040 <HAL_RCC_GetSysClockFreq+0x98>)
 800400a:	fb03 f202 	mul.w	r2, r3, r2
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	fbb2 f3f3 	udiv	r3, r2, r3
 8004014:	617b      	str	r3, [r7, #20]
 8004016:	e004      	b.n	8004022 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a0c      	ldr	r2, [pc, #48]	@ (800404c <HAL_RCC_GetSysClockFreq+0xa4>)
 800401c:	fb02 f303 	mul.w	r3, r2, r3
 8004020:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	613b      	str	r3, [r7, #16]
      break;
 8004026:	e002      	b.n	800402e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004028:	4b05      	ldr	r3, [pc, #20]	@ (8004040 <HAL_RCC_GetSysClockFreq+0x98>)
 800402a:	613b      	str	r3, [r7, #16]
      break;
 800402c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800402e:	693b      	ldr	r3, [r7, #16]
}
 8004030:	4618      	mov	r0, r3
 8004032:	371c      	adds	r7, #28
 8004034:	46bd      	mov	sp, r7
 8004036:	bc80      	pop	{r7}
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	40021000 	.word	0x40021000
 8004040:	007a1200 	.word	0x007a1200
 8004044:	0800d0b0 	.word	0x0800d0b0
 8004048:	0800d0c0 	.word	0x0800d0c0
 800404c:	003d0900 	.word	0x003d0900

08004050 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004050:	b480      	push	{r7}
 8004052:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004054:	4b02      	ldr	r3, [pc, #8]	@ (8004060 <HAL_RCC_GetHCLKFreq+0x10>)
 8004056:	681b      	ldr	r3, [r3, #0]
}
 8004058:	4618      	mov	r0, r3
 800405a:	46bd      	mov	sp, r7
 800405c:	bc80      	pop	{r7}
 800405e:	4770      	bx	lr
 8004060:	20000014 	.word	0x20000014

08004064 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004068:	f7ff fff2 	bl	8004050 <HAL_RCC_GetHCLKFreq>
 800406c:	4602      	mov	r2, r0
 800406e:	4b05      	ldr	r3, [pc, #20]	@ (8004084 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	0a1b      	lsrs	r3, r3, #8
 8004074:	f003 0307 	and.w	r3, r3, #7
 8004078:	4903      	ldr	r1, [pc, #12]	@ (8004088 <HAL_RCC_GetPCLK1Freq+0x24>)
 800407a:	5ccb      	ldrb	r3, [r1, r3]
 800407c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004080:	4618      	mov	r0, r3
 8004082:	bd80      	pop	{r7, pc}
 8004084:	40021000 	.word	0x40021000
 8004088:	0800d0a8 	.word	0x0800d0a8

0800408c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004090:	f7ff ffde 	bl	8004050 <HAL_RCC_GetHCLKFreq>
 8004094:	4602      	mov	r2, r0
 8004096:	4b05      	ldr	r3, [pc, #20]	@ (80040ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	0adb      	lsrs	r3, r3, #11
 800409c:	f003 0307 	and.w	r3, r3, #7
 80040a0:	4903      	ldr	r1, [pc, #12]	@ (80040b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040a2:	5ccb      	ldrb	r3, [r1, r3]
 80040a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	40021000 	.word	0x40021000
 80040b0:	0800d0a8 	.word	0x0800d0a8

080040b4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	220f      	movs	r2, #15
 80040c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80040c4:	4b11      	ldr	r3, [pc, #68]	@ (800410c <HAL_RCC_GetClockConfig+0x58>)
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f003 0203 	and.w	r2, r3, #3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80040d0:	4b0e      	ldr	r3, [pc, #56]	@ (800410c <HAL_RCC_GetClockConfig+0x58>)
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80040dc:	4b0b      	ldr	r3, [pc, #44]	@ (800410c <HAL_RCC_GetClockConfig+0x58>)
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80040e8:	4b08      	ldr	r3, [pc, #32]	@ (800410c <HAL_RCC_GetClockConfig+0x58>)
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	08db      	lsrs	r3, r3, #3
 80040ee:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80040f6:	4b06      	ldr	r3, [pc, #24]	@ (8004110 <HAL_RCC_GetClockConfig+0x5c>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0207 	and.w	r2, r3, #7
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004102:	bf00      	nop
 8004104:	370c      	adds	r7, #12
 8004106:	46bd      	mov	sp, r7
 8004108:	bc80      	pop	{r7}
 800410a:	4770      	bx	lr
 800410c:	40021000 	.word	0x40021000
 8004110:	40022000 	.word	0x40022000

08004114 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004114:	b480      	push	{r7}
 8004116:	b085      	sub	sp, #20
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800411c:	4b0a      	ldr	r3, [pc, #40]	@ (8004148 <RCC_Delay+0x34>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a0a      	ldr	r2, [pc, #40]	@ (800414c <RCC_Delay+0x38>)
 8004122:	fba2 2303 	umull	r2, r3, r2, r3
 8004126:	0a5b      	lsrs	r3, r3, #9
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	fb02 f303 	mul.w	r3, r2, r3
 800412e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004130:	bf00      	nop
  }
  while (Delay --);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	1e5a      	subs	r2, r3, #1
 8004136:	60fa      	str	r2, [r7, #12]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d1f9      	bne.n	8004130 <RCC_Delay+0x1c>
}
 800413c:	bf00      	nop
 800413e:	bf00      	nop
 8004140:	3714      	adds	r7, #20
 8004142:	46bd      	mov	sp, r7
 8004144:	bc80      	pop	{r7}
 8004146:	4770      	bx	lr
 8004148:	20000014 	.word	0x20000014
 800414c:	10624dd3 	.word	0x10624dd3

08004150 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b086      	sub	sp, #24
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004158:	2300      	movs	r3, #0
 800415a:	613b      	str	r3, [r7, #16]
 800415c:	2300      	movs	r3, #0
 800415e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0301 	and.w	r3, r3, #1
 8004168:	2b00      	cmp	r3, #0
 800416a:	d07d      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800416c:	2300      	movs	r3, #0
 800416e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004170:	4b4f      	ldr	r3, [pc, #316]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004172:	69db      	ldr	r3, [r3, #28]
 8004174:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d10d      	bne.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800417c:	4b4c      	ldr	r3, [pc, #304]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800417e:	69db      	ldr	r3, [r3, #28]
 8004180:	4a4b      	ldr	r2, [pc, #300]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004182:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004186:	61d3      	str	r3, [r2, #28]
 8004188:	4b49      	ldr	r3, [pc, #292]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800418a:	69db      	ldr	r3, [r3, #28]
 800418c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004190:	60bb      	str	r3, [r7, #8]
 8004192:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004194:	2301      	movs	r3, #1
 8004196:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004198:	4b46      	ldr	r3, [pc, #280]	@ (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d118      	bne.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041a4:	4b43      	ldr	r3, [pc, #268]	@ (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a42      	ldr	r2, [pc, #264]	@ (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041b0:	f7fd ff56 	bl	8002060 <HAL_GetTick>
 80041b4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041b6:	e008      	b.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041b8:	f7fd ff52 	bl	8002060 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	2b64      	cmp	r3, #100	@ 0x64
 80041c4:	d901      	bls.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e06d      	b.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041ca:	4b3a      	ldr	r3, [pc, #232]	@ (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d0f0      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80041d6:	4b36      	ldr	r3, [pc, #216]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041d8:	6a1b      	ldr	r3, [r3, #32]
 80041da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041de:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d02e      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d027      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041f4:	4b2e      	ldr	r3, [pc, #184]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041f6:	6a1b      	ldr	r3, [r3, #32]
 80041f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041fc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80041fe:	4b2e      	ldr	r3, [pc, #184]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004200:	2201      	movs	r2, #1
 8004202:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004204:	4b2c      	ldr	r3, [pc, #176]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004206:	2200      	movs	r2, #0
 8004208:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800420a:	4a29      	ldr	r2, [pc, #164]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f003 0301 	and.w	r3, r3, #1
 8004216:	2b00      	cmp	r3, #0
 8004218:	d014      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800421a:	f7fd ff21 	bl	8002060 <HAL_GetTick>
 800421e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004220:	e00a      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004222:	f7fd ff1d 	bl	8002060 <HAL_GetTick>
 8004226:	4602      	mov	r2, r0
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004230:	4293      	cmp	r3, r2
 8004232:	d901      	bls.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	e036      	b.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004238:	4b1d      	ldr	r3, [pc, #116]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800423a:	6a1b      	ldr	r3, [r3, #32]
 800423c:	f003 0302 	and.w	r3, r3, #2
 8004240:	2b00      	cmp	r3, #0
 8004242:	d0ee      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004244:	4b1a      	ldr	r3, [pc, #104]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004246:	6a1b      	ldr	r3, [r3, #32]
 8004248:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	4917      	ldr	r1, [pc, #92]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004252:	4313      	orrs	r3, r2
 8004254:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004256:	7dfb      	ldrb	r3, [r7, #23]
 8004258:	2b01      	cmp	r3, #1
 800425a:	d105      	bne.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800425c:	4b14      	ldr	r3, [pc, #80]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800425e:	69db      	ldr	r3, [r3, #28]
 8004260:	4a13      	ldr	r2, [pc, #76]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004262:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004266:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0302 	and.w	r3, r3, #2
 8004270:	2b00      	cmp	r3, #0
 8004272:	d008      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004274:	4b0e      	ldr	r3, [pc, #56]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	490b      	ldr	r1, [pc, #44]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004282:	4313      	orrs	r3, r2
 8004284:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0310 	and.w	r3, r3, #16
 800428e:	2b00      	cmp	r3, #0
 8004290:	d008      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004292:	4b07      	ldr	r3, [pc, #28]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	4904      	ldr	r1, [pc, #16]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3718      	adds	r7, #24
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	40021000 	.word	0x40021000
 80042b4:	40007000 	.word	0x40007000
 80042b8:	42420440 	.word	0x42420440

080042bc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b088      	sub	sp, #32
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80042c4:	2300      	movs	r3, #0
 80042c6:	617b      	str	r3, [r7, #20]
 80042c8:	2300      	movs	r3, #0
 80042ca:	61fb      	str	r3, [r7, #28]
 80042cc:	2300      	movs	r3, #0
 80042ce:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80042d0:	2300      	movs	r3, #0
 80042d2:	60fb      	str	r3, [r7, #12]
 80042d4:	2300      	movs	r3, #0
 80042d6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2b10      	cmp	r3, #16
 80042dc:	d00a      	beq.n	80042f4 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2b10      	cmp	r3, #16
 80042e2:	f200 808a 	bhi.w	80043fa <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d045      	beq.n	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d075      	beq.n	80043de <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80042f2:	e082      	b.n	80043fa <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80042f4:	4b46      	ldr	r3, [pc, #280]	@ (8004410 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80042fa:	4b45      	ldr	r3, [pc, #276]	@ (8004410 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d07b      	beq.n	80043fe <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	0c9b      	lsrs	r3, r3, #18
 800430a:	f003 030f 	and.w	r3, r3, #15
 800430e:	4a41      	ldr	r2, [pc, #260]	@ (8004414 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004310:	5cd3      	ldrb	r3, [r2, r3]
 8004312:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d015      	beq.n	800434a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800431e:	4b3c      	ldr	r3, [pc, #240]	@ (8004410 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	0c5b      	lsrs	r3, r3, #17
 8004324:	f003 0301 	and.w	r3, r3, #1
 8004328:	4a3b      	ldr	r2, [pc, #236]	@ (8004418 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800432a:	5cd3      	ldrb	r3, [r2, r3]
 800432c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d00d      	beq.n	8004354 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004338:	4a38      	ldr	r2, [pc, #224]	@ (800441c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	fb02 f303 	mul.w	r3, r2, r3
 8004346:	61fb      	str	r3, [r7, #28]
 8004348:	e004      	b.n	8004354 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	4a34      	ldr	r2, [pc, #208]	@ (8004420 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800434e:	fb02 f303 	mul.w	r3, r2, r3
 8004352:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004354:	4b2e      	ldr	r3, [pc, #184]	@ (8004410 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800435c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004360:	d102      	bne.n	8004368 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	61bb      	str	r3, [r7, #24]
      break;
 8004366:	e04a      	b.n	80043fe <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	005b      	lsls	r3, r3, #1
 800436c:	4a2d      	ldr	r2, [pc, #180]	@ (8004424 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800436e:	fba2 2303 	umull	r2, r3, r2, r3
 8004372:	085b      	lsrs	r3, r3, #1
 8004374:	61bb      	str	r3, [r7, #24]
      break;
 8004376:	e042      	b.n	80043fe <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004378:	4b25      	ldr	r3, [pc, #148]	@ (8004410 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800437a:	6a1b      	ldr	r3, [r3, #32]
 800437c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004384:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004388:	d108      	bne.n	800439c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f003 0302 	and.w	r3, r3, #2
 8004390:	2b00      	cmp	r3, #0
 8004392:	d003      	beq.n	800439c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004394:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004398:	61bb      	str	r3, [r7, #24]
 800439a:	e01f      	b.n	80043dc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043a6:	d109      	bne.n	80043bc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80043a8:	4b19      	ldr	r3, [pc, #100]	@ (8004410 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80043aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d003      	beq.n	80043bc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80043b4:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80043b8:	61bb      	str	r3, [r7, #24]
 80043ba:	e00f      	b.n	80043dc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043c6:	d11c      	bne.n	8004402 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80043c8:	4b11      	ldr	r3, [pc, #68]	@ (8004410 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d016      	beq.n	8004402 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80043d4:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80043d8:	61bb      	str	r3, [r7, #24]
      break;
 80043da:	e012      	b.n	8004402 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80043dc:	e011      	b.n	8004402 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80043de:	f7ff fe55 	bl	800408c <HAL_RCC_GetPCLK2Freq>
 80043e2:	4602      	mov	r2, r0
 80043e4:	4b0a      	ldr	r3, [pc, #40]	@ (8004410 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	0b9b      	lsrs	r3, r3, #14
 80043ea:	f003 0303 	and.w	r3, r3, #3
 80043ee:	3301      	adds	r3, #1
 80043f0:	005b      	lsls	r3, r3, #1
 80043f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f6:	61bb      	str	r3, [r7, #24]
      break;
 80043f8:	e004      	b.n	8004404 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80043fa:	bf00      	nop
 80043fc:	e002      	b.n	8004404 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80043fe:	bf00      	nop
 8004400:	e000      	b.n	8004404 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004402:	bf00      	nop
    }
  }
  return (frequency);
 8004404:	69bb      	ldr	r3, [r7, #24]
}
 8004406:	4618      	mov	r0, r3
 8004408:	3720      	adds	r7, #32
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	40021000 	.word	0x40021000
 8004414:	0800d0c4 	.word	0x0800d0c4
 8004418:	0800d0d4 	.word	0x0800d0d4
 800441c:	007a1200 	.word	0x007a1200
 8004420:	003d0900 	.word	0x003d0900
 8004424:	aaaaaaab 	.word	0xaaaaaaab

08004428 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e041      	b.n	80044be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b00      	cmp	r3, #0
 8004444:	d106      	bne.n	8004454 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f7fd fba4 	bl	8001b9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2202      	movs	r2, #2
 8004458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	3304      	adds	r3, #4
 8004464:	4619      	mov	r1, r3
 8004466:	4610      	mov	r0, r2
 8004468:	f000 fc18 	bl	8004c9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3708      	adds	r7, #8
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
	...

080044c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b085      	sub	sp, #20
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d001      	beq.n	80044e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e03a      	b.n	8004556 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2202      	movs	r2, #2
 80044e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68da      	ldr	r2, [r3, #12]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f042 0201 	orr.w	r2, r2, #1
 80044f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a18      	ldr	r2, [pc, #96]	@ (8004560 <HAL_TIM_Base_Start_IT+0x98>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d00e      	beq.n	8004520 <HAL_TIM_Base_Start_IT+0x58>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800450a:	d009      	beq.n	8004520 <HAL_TIM_Base_Start_IT+0x58>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a14      	ldr	r2, [pc, #80]	@ (8004564 <HAL_TIM_Base_Start_IT+0x9c>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d004      	beq.n	8004520 <HAL_TIM_Base_Start_IT+0x58>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a13      	ldr	r2, [pc, #76]	@ (8004568 <HAL_TIM_Base_Start_IT+0xa0>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d111      	bne.n	8004544 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f003 0307 	and.w	r3, r3, #7
 800452a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2b06      	cmp	r3, #6
 8004530:	d010      	beq.n	8004554 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f042 0201 	orr.w	r2, r2, #1
 8004540:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004542:	e007      	b.n	8004554 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f042 0201 	orr.w	r2, r2, #1
 8004552:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	3714      	adds	r7, #20
 800455a:	46bd      	mov	sp, r7
 800455c:	bc80      	pop	{r7}
 800455e:	4770      	bx	lr
 8004560:	40012c00 	.word	0x40012c00
 8004564:	40000400 	.word	0x40000400
 8004568:	40000800 	.word	0x40000800

0800456c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d101      	bne.n	800457e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e041      	b.n	8004602 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004584:	b2db      	uxtb	r3, r3
 8004586:	2b00      	cmp	r3, #0
 8004588:	d106      	bne.n	8004598 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 f839 	bl	800460a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2202      	movs	r2, #2
 800459c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	3304      	adds	r3, #4
 80045a8:	4619      	mov	r1, r3
 80045aa:	4610      	mov	r0, r2
 80045ac:	f000 fb76 	bl	8004c9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3708      	adds	r7, #8
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}

0800460a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800460a:	b480      	push	{r7}
 800460c:	b083      	sub	sp, #12
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004612:	bf00      	nop
 8004614:	370c      	adds	r7, #12
 8004616:	46bd      	mov	sp, r7
 8004618:	bc80      	pop	{r7}
 800461a:	4770      	bx	lr

0800461c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d109      	bne.n	8004640 <HAL_TIM_PWM_Start+0x24>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004632:	b2db      	uxtb	r3, r3
 8004634:	2b01      	cmp	r3, #1
 8004636:	bf14      	ite	ne
 8004638:	2301      	movne	r3, #1
 800463a:	2300      	moveq	r3, #0
 800463c:	b2db      	uxtb	r3, r3
 800463e:	e022      	b.n	8004686 <HAL_TIM_PWM_Start+0x6a>
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	2b04      	cmp	r3, #4
 8004644:	d109      	bne.n	800465a <HAL_TIM_PWM_Start+0x3e>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800464c:	b2db      	uxtb	r3, r3
 800464e:	2b01      	cmp	r3, #1
 8004650:	bf14      	ite	ne
 8004652:	2301      	movne	r3, #1
 8004654:	2300      	moveq	r3, #0
 8004656:	b2db      	uxtb	r3, r3
 8004658:	e015      	b.n	8004686 <HAL_TIM_PWM_Start+0x6a>
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	2b08      	cmp	r3, #8
 800465e:	d109      	bne.n	8004674 <HAL_TIM_PWM_Start+0x58>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004666:	b2db      	uxtb	r3, r3
 8004668:	2b01      	cmp	r3, #1
 800466a:	bf14      	ite	ne
 800466c:	2301      	movne	r3, #1
 800466e:	2300      	moveq	r3, #0
 8004670:	b2db      	uxtb	r3, r3
 8004672:	e008      	b.n	8004686 <HAL_TIM_PWM_Start+0x6a>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800467a:	b2db      	uxtb	r3, r3
 800467c:	2b01      	cmp	r3, #1
 800467e:	bf14      	ite	ne
 8004680:	2301      	movne	r3, #1
 8004682:	2300      	moveq	r3, #0
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b00      	cmp	r3, #0
 8004688:	d001      	beq.n	800468e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e05e      	b.n	800474c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d104      	bne.n	800469e <HAL_TIM_PWM_Start+0x82>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2202      	movs	r2, #2
 8004698:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800469c:	e013      	b.n	80046c6 <HAL_TIM_PWM_Start+0xaa>
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	2b04      	cmp	r3, #4
 80046a2:	d104      	bne.n	80046ae <HAL_TIM_PWM_Start+0x92>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2202      	movs	r2, #2
 80046a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046ac:	e00b      	b.n	80046c6 <HAL_TIM_PWM_Start+0xaa>
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	2b08      	cmp	r3, #8
 80046b2:	d104      	bne.n	80046be <HAL_TIM_PWM_Start+0xa2>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2202      	movs	r2, #2
 80046b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046bc:	e003      	b.n	80046c6 <HAL_TIM_PWM_Start+0xaa>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2202      	movs	r2, #2
 80046c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2201      	movs	r2, #1
 80046cc:	6839      	ldr	r1, [r7, #0]
 80046ce:	4618      	mov	r0, r3
 80046d0:	f000 fd70 	bl	80051b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a1e      	ldr	r2, [pc, #120]	@ (8004754 <HAL_TIM_PWM_Start+0x138>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d107      	bne.n	80046ee <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80046ec:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a18      	ldr	r2, [pc, #96]	@ (8004754 <HAL_TIM_PWM_Start+0x138>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d00e      	beq.n	8004716 <HAL_TIM_PWM_Start+0xfa>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004700:	d009      	beq.n	8004716 <HAL_TIM_PWM_Start+0xfa>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a14      	ldr	r2, [pc, #80]	@ (8004758 <HAL_TIM_PWM_Start+0x13c>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d004      	beq.n	8004716 <HAL_TIM_PWM_Start+0xfa>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a12      	ldr	r2, [pc, #72]	@ (800475c <HAL_TIM_PWM_Start+0x140>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d111      	bne.n	800473a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	f003 0307 	and.w	r3, r3, #7
 8004720:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2b06      	cmp	r3, #6
 8004726:	d010      	beq.n	800474a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f042 0201 	orr.w	r2, r2, #1
 8004736:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004738:	e007      	b.n	800474a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f042 0201 	orr.w	r2, r2, #1
 8004748:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800474a:	2300      	movs	r3, #0
}
 800474c:	4618      	mov	r0, r3
 800474e:	3710      	adds	r7, #16
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	40012c00 	.word	0x40012c00
 8004758:	40000400 	.word	0x40000400
 800475c:	40000800 	.word	0x40000800

08004760 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b084      	sub	sp, #16
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	f003 0302 	and.w	r3, r3, #2
 800477e:	2b00      	cmp	r3, #0
 8004780:	d020      	beq.n	80047c4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f003 0302 	and.w	r3, r3, #2
 8004788:	2b00      	cmp	r3, #0
 800478a:	d01b      	beq.n	80047c4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f06f 0202 	mvn.w	r2, #2
 8004794:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2201      	movs	r2, #1
 800479a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	f003 0303 	and.w	r3, r3, #3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d003      	beq.n	80047b2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 fa5a 	bl	8004c64 <HAL_TIM_IC_CaptureCallback>
 80047b0:	e005      	b.n	80047be <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 fa4d 	bl	8004c52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f000 fa5c 	bl	8004c76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	f003 0304 	and.w	r3, r3, #4
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d020      	beq.n	8004810 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f003 0304 	and.w	r3, r3, #4
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d01b      	beq.n	8004810 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f06f 0204 	mvn.w	r2, #4
 80047e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2202      	movs	r2, #2
 80047e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d003      	beq.n	80047fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 fa34 	bl	8004c64 <HAL_TIM_IC_CaptureCallback>
 80047fc:	e005      	b.n	800480a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 fa27 	bl	8004c52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f000 fa36 	bl	8004c76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	f003 0308 	and.w	r3, r3, #8
 8004816:	2b00      	cmp	r3, #0
 8004818:	d020      	beq.n	800485c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f003 0308 	and.w	r3, r3, #8
 8004820:	2b00      	cmp	r3, #0
 8004822:	d01b      	beq.n	800485c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f06f 0208 	mvn.w	r2, #8
 800482c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2204      	movs	r2, #4
 8004832:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	69db      	ldr	r3, [r3, #28]
 800483a:	f003 0303 	and.w	r3, r3, #3
 800483e:	2b00      	cmp	r3, #0
 8004840:	d003      	beq.n	800484a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 fa0e 	bl	8004c64 <HAL_TIM_IC_CaptureCallback>
 8004848:	e005      	b.n	8004856 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 fa01 	bl	8004c52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 fa10 	bl	8004c76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	f003 0310 	and.w	r3, r3, #16
 8004862:	2b00      	cmp	r3, #0
 8004864:	d020      	beq.n	80048a8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f003 0310 	and.w	r3, r3, #16
 800486c:	2b00      	cmp	r3, #0
 800486e:	d01b      	beq.n	80048a8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f06f 0210 	mvn.w	r2, #16
 8004878:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2208      	movs	r2, #8
 800487e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	69db      	ldr	r3, [r3, #28]
 8004886:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800488a:	2b00      	cmp	r3, #0
 800488c:	d003      	beq.n	8004896 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 f9e8 	bl	8004c64 <HAL_TIM_IC_CaptureCallback>
 8004894:	e005      	b.n	80048a2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 f9db 	bl	8004c52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 f9ea 	bl	8004c76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	f003 0301 	and.w	r3, r3, #1
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d00c      	beq.n	80048cc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f003 0301 	and.w	r3, r3, #1
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d007      	beq.n	80048cc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f06f 0201 	mvn.w	r2, #1
 80048c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f7fd f8bc 	bl	8001a44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d00c      	beq.n	80048f0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d007      	beq.n	80048f0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80048e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 fced 	bl	80052ca <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00c      	beq.n	8004914 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004900:	2b00      	cmp	r3, #0
 8004902:	d007      	beq.n	8004914 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800490c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 f9ba 	bl	8004c88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	f003 0320 	and.w	r3, r3, #32
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00c      	beq.n	8004938 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f003 0320 	and.w	r3, r3, #32
 8004924:	2b00      	cmp	r3, #0
 8004926:	d007      	beq.n	8004938 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f06f 0220 	mvn.w	r2, #32
 8004930:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 fcc0 	bl	80052b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004938:	bf00      	nop
 800493a:	3710      	adds	r7, #16
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}

08004940 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b086      	sub	sp, #24
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800494c:	2300      	movs	r3, #0
 800494e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004956:	2b01      	cmp	r3, #1
 8004958:	d101      	bne.n	800495e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800495a:	2302      	movs	r3, #2
 800495c:	e0ae      	b.n	8004abc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2201      	movs	r2, #1
 8004962:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2b0c      	cmp	r3, #12
 800496a:	f200 809f 	bhi.w	8004aac <HAL_TIM_PWM_ConfigChannel+0x16c>
 800496e:	a201      	add	r2, pc, #4	@ (adr r2, 8004974 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004974:	080049a9 	.word	0x080049a9
 8004978:	08004aad 	.word	0x08004aad
 800497c:	08004aad 	.word	0x08004aad
 8004980:	08004aad 	.word	0x08004aad
 8004984:	080049e9 	.word	0x080049e9
 8004988:	08004aad 	.word	0x08004aad
 800498c:	08004aad 	.word	0x08004aad
 8004990:	08004aad 	.word	0x08004aad
 8004994:	08004a2b 	.word	0x08004a2b
 8004998:	08004aad 	.word	0x08004aad
 800499c:	08004aad 	.word	0x08004aad
 80049a0:	08004aad 	.word	0x08004aad
 80049a4:	08004a6b 	.word	0x08004a6b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68b9      	ldr	r1, [r7, #8]
 80049ae:	4618      	mov	r0, r3
 80049b0:	f000 f9e2 	bl	8004d78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	699a      	ldr	r2, [r3, #24]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f042 0208 	orr.w	r2, r2, #8
 80049c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	699a      	ldr	r2, [r3, #24]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f022 0204 	bic.w	r2, r2, #4
 80049d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	6999      	ldr	r1, [r3, #24]
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	691a      	ldr	r2, [r3, #16]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	430a      	orrs	r2, r1
 80049e4:	619a      	str	r2, [r3, #24]
      break;
 80049e6:	e064      	b.n	8004ab2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68b9      	ldr	r1, [r7, #8]
 80049ee:	4618      	mov	r0, r3
 80049f0:	f000 fa28 	bl	8004e44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	699a      	ldr	r2, [r3, #24]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	699a      	ldr	r2, [r3, #24]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	6999      	ldr	r1, [r3, #24]
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	021a      	lsls	r2, r3, #8
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	430a      	orrs	r2, r1
 8004a26:	619a      	str	r2, [r3, #24]
      break;
 8004a28:	e043      	b.n	8004ab2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	68b9      	ldr	r1, [r7, #8]
 8004a30:	4618      	mov	r0, r3
 8004a32:	f000 fa71 	bl	8004f18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	69da      	ldr	r2, [r3, #28]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f042 0208 	orr.w	r2, r2, #8
 8004a44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	69da      	ldr	r2, [r3, #28]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f022 0204 	bic.w	r2, r2, #4
 8004a54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	69d9      	ldr	r1, [r3, #28]
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	691a      	ldr	r2, [r3, #16]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	430a      	orrs	r2, r1
 8004a66:	61da      	str	r2, [r3, #28]
      break;
 8004a68:	e023      	b.n	8004ab2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	68b9      	ldr	r1, [r7, #8]
 8004a70:	4618      	mov	r0, r3
 8004a72:	f000 fabb 	bl	8004fec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	69da      	ldr	r2, [r3, #28]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	69da      	ldr	r2, [r3, #28]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	69d9      	ldr	r1, [r3, #28]
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	691b      	ldr	r3, [r3, #16]
 8004aa0:	021a      	lsls	r2, r3, #8
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	61da      	str	r2, [r3, #28]
      break;
 8004aaa:	e002      	b.n	8004ab2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	75fb      	strb	r3, [r7, #23]
      break;
 8004ab0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004aba:	7dfb      	ldrb	r3, [r7, #23]
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3718      	adds	r7, #24
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d101      	bne.n	8004ae0 <HAL_TIM_ConfigClockSource+0x1c>
 8004adc:	2302      	movs	r3, #2
 8004ade:	e0b4      	b.n	8004c4a <HAL_TIM_ConfigClockSource+0x186>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2202      	movs	r2, #2
 8004aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004afe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68ba      	ldr	r2, [r7, #8]
 8004b0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b18:	d03e      	beq.n	8004b98 <HAL_TIM_ConfigClockSource+0xd4>
 8004b1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b1e:	f200 8087 	bhi.w	8004c30 <HAL_TIM_ConfigClockSource+0x16c>
 8004b22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b26:	f000 8086 	beq.w	8004c36 <HAL_TIM_ConfigClockSource+0x172>
 8004b2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b2e:	d87f      	bhi.n	8004c30 <HAL_TIM_ConfigClockSource+0x16c>
 8004b30:	2b70      	cmp	r3, #112	@ 0x70
 8004b32:	d01a      	beq.n	8004b6a <HAL_TIM_ConfigClockSource+0xa6>
 8004b34:	2b70      	cmp	r3, #112	@ 0x70
 8004b36:	d87b      	bhi.n	8004c30 <HAL_TIM_ConfigClockSource+0x16c>
 8004b38:	2b60      	cmp	r3, #96	@ 0x60
 8004b3a:	d050      	beq.n	8004bde <HAL_TIM_ConfigClockSource+0x11a>
 8004b3c:	2b60      	cmp	r3, #96	@ 0x60
 8004b3e:	d877      	bhi.n	8004c30 <HAL_TIM_ConfigClockSource+0x16c>
 8004b40:	2b50      	cmp	r3, #80	@ 0x50
 8004b42:	d03c      	beq.n	8004bbe <HAL_TIM_ConfigClockSource+0xfa>
 8004b44:	2b50      	cmp	r3, #80	@ 0x50
 8004b46:	d873      	bhi.n	8004c30 <HAL_TIM_ConfigClockSource+0x16c>
 8004b48:	2b40      	cmp	r3, #64	@ 0x40
 8004b4a:	d058      	beq.n	8004bfe <HAL_TIM_ConfigClockSource+0x13a>
 8004b4c:	2b40      	cmp	r3, #64	@ 0x40
 8004b4e:	d86f      	bhi.n	8004c30 <HAL_TIM_ConfigClockSource+0x16c>
 8004b50:	2b30      	cmp	r3, #48	@ 0x30
 8004b52:	d064      	beq.n	8004c1e <HAL_TIM_ConfigClockSource+0x15a>
 8004b54:	2b30      	cmp	r3, #48	@ 0x30
 8004b56:	d86b      	bhi.n	8004c30 <HAL_TIM_ConfigClockSource+0x16c>
 8004b58:	2b20      	cmp	r3, #32
 8004b5a:	d060      	beq.n	8004c1e <HAL_TIM_ConfigClockSource+0x15a>
 8004b5c:	2b20      	cmp	r3, #32
 8004b5e:	d867      	bhi.n	8004c30 <HAL_TIM_ConfigClockSource+0x16c>
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d05c      	beq.n	8004c1e <HAL_TIM_ConfigClockSource+0x15a>
 8004b64:	2b10      	cmp	r3, #16
 8004b66:	d05a      	beq.n	8004c1e <HAL_TIM_ConfigClockSource+0x15a>
 8004b68:	e062      	b.n	8004c30 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b7a:	f000 fafc 	bl	8005176 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004b8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	68ba      	ldr	r2, [r7, #8]
 8004b94:	609a      	str	r2, [r3, #8]
      break;
 8004b96:	e04f      	b.n	8004c38 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ba8:	f000 fae5 	bl	8005176 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	689a      	ldr	r2, [r3, #8]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004bba:	609a      	str	r2, [r3, #8]
      break;
 8004bbc:	e03c      	b.n	8004c38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bca:	461a      	mov	r2, r3
 8004bcc:	f000 fa5c 	bl	8005088 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2150      	movs	r1, #80	@ 0x50
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f000 fab3 	bl	8005142 <TIM_ITRx_SetConfig>
      break;
 8004bdc:	e02c      	b.n	8004c38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bea:	461a      	mov	r2, r3
 8004bec:	f000 fa7a 	bl	80050e4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2160      	movs	r1, #96	@ 0x60
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f000 faa3 	bl	8005142 <TIM_ITRx_SetConfig>
      break;
 8004bfc:	e01c      	b.n	8004c38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	f000 fa3c 	bl	8005088 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2140      	movs	r1, #64	@ 0x40
 8004c16:	4618      	mov	r0, r3
 8004c18:	f000 fa93 	bl	8005142 <TIM_ITRx_SetConfig>
      break;
 8004c1c:	e00c      	b.n	8004c38 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4619      	mov	r1, r3
 8004c28:	4610      	mov	r0, r2
 8004c2a:	f000 fa8a 	bl	8005142 <TIM_ITRx_SetConfig>
      break;
 8004c2e:	e003      	b.n	8004c38 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	73fb      	strb	r3, [r7, #15]
      break;
 8004c34:	e000      	b.n	8004c38 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3710      	adds	r7, #16
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}

08004c52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c52:	b480      	push	{r7}
 8004c54:	b083      	sub	sp, #12
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c5a:	bf00      	nop
 8004c5c:	370c      	adds	r7, #12
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bc80      	pop	{r7}
 8004c62:	4770      	bx	lr

08004c64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c6c:	bf00      	nop
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bc80      	pop	{r7}
 8004c74:	4770      	bx	lr

08004c76 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c76:	b480      	push	{r7}
 8004c78:	b083      	sub	sp, #12
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c7e:	bf00      	nop
 8004c80:	370c      	adds	r7, #12
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bc80      	pop	{r7}
 8004c86:	4770      	bx	lr

08004c88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c90:	bf00      	nop
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bc80      	pop	{r7}
 8004c98:	4770      	bx	lr
	...

08004c9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b085      	sub	sp, #20
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4a2f      	ldr	r2, [pc, #188]	@ (8004d6c <TIM_Base_SetConfig+0xd0>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d00b      	beq.n	8004ccc <TIM_Base_SetConfig+0x30>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cba:	d007      	beq.n	8004ccc <TIM_Base_SetConfig+0x30>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a2c      	ldr	r2, [pc, #176]	@ (8004d70 <TIM_Base_SetConfig+0xd4>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d003      	beq.n	8004ccc <TIM_Base_SetConfig+0x30>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a2b      	ldr	r2, [pc, #172]	@ (8004d74 <TIM_Base_SetConfig+0xd8>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d108      	bne.n	8004cde <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	68fa      	ldr	r2, [r7, #12]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a22      	ldr	r2, [pc, #136]	@ (8004d6c <TIM_Base_SetConfig+0xd0>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d00b      	beq.n	8004cfe <TIM_Base_SetConfig+0x62>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cec:	d007      	beq.n	8004cfe <TIM_Base_SetConfig+0x62>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a1f      	ldr	r2, [pc, #124]	@ (8004d70 <TIM_Base_SetConfig+0xd4>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d003      	beq.n	8004cfe <TIM_Base_SetConfig+0x62>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a1e      	ldr	r2, [pc, #120]	@ (8004d74 <TIM_Base_SetConfig+0xd8>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d108      	bne.n	8004d10 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	695b      	ldr	r3, [r3, #20]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	68fa      	ldr	r2, [r7, #12]
 8004d22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	689a      	ldr	r2, [r3, #8]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4a0d      	ldr	r2, [pc, #52]	@ (8004d6c <TIM_Base_SetConfig+0xd0>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d103      	bne.n	8004d44 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	691a      	ldr	r2, [r3, #16]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	f003 0301 	and.w	r3, r3, #1
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d005      	beq.n	8004d62 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	f023 0201 	bic.w	r2, r3, #1
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	611a      	str	r2, [r3, #16]
  }
}
 8004d62:	bf00      	nop
 8004d64:	3714      	adds	r7, #20
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bc80      	pop	{r7}
 8004d6a:	4770      	bx	lr
 8004d6c:	40012c00 	.word	0x40012c00
 8004d70:	40000400 	.word	0x40000400
 8004d74:	40000800 	.word	0x40000800

08004d78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b087      	sub	sp, #28
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a1b      	ldr	r3, [r3, #32]
 8004d86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6a1b      	ldr	r3, [r3, #32]
 8004d8c:	f023 0201 	bic.w	r2, r3, #1
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	699b      	ldr	r3, [r3, #24]
 8004d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004da6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f023 0303 	bic.w	r3, r3, #3
 8004dae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	68fa      	ldr	r2, [r7, #12]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	f023 0302 	bic.w	r3, r3, #2
 8004dc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	697a      	ldr	r2, [r7, #20]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4a1c      	ldr	r2, [pc, #112]	@ (8004e40 <TIM_OC1_SetConfig+0xc8>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d10c      	bne.n	8004dee <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	f023 0308 	bic.w	r3, r3, #8
 8004dda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	697a      	ldr	r2, [r7, #20]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	f023 0304 	bic.w	r3, r3, #4
 8004dec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a13      	ldr	r2, [pc, #76]	@ (8004e40 <TIM_OC1_SetConfig+0xc8>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d111      	bne.n	8004e1a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004dfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004e04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	693a      	ldr	r2, [r7, #16]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	699b      	ldr	r3, [r3, #24]
 8004e14:	693a      	ldr	r2, [r7, #16]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	693a      	ldr	r2, [r7, #16]
 8004e1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	68fa      	ldr	r2, [r7, #12]
 8004e24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	685a      	ldr	r2, [r3, #4]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	697a      	ldr	r2, [r7, #20]
 8004e32:	621a      	str	r2, [r3, #32]
}
 8004e34:	bf00      	nop
 8004e36:	371c      	adds	r7, #28
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bc80      	pop	{r7}
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	40012c00 	.word	0x40012c00

08004e44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b087      	sub	sp, #28
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a1b      	ldr	r3, [r3, #32]
 8004e52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6a1b      	ldr	r3, [r3, #32]
 8004e58:	f023 0210 	bic.w	r2, r3, #16
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	699b      	ldr	r3, [r3, #24]
 8004e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	021b      	lsls	r3, r3, #8
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	f023 0320 	bic.w	r3, r3, #32
 8004e8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	011b      	lsls	r3, r3, #4
 8004e96:	697a      	ldr	r2, [r7, #20]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a1d      	ldr	r2, [pc, #116]	@ (8004f14 <TIM_OC2_SetConfig+0xd0>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d10d      	bne.n	8004ec0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004eaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	011b      	lsls	r3, r3, #4
 8004eb2:	697a      	ldr	r2, [r7, #20]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ebe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4a14      	ldr	r2, [pc, #80]	@ (8004f14 <TIM_OC2_SetConfig+0xd0>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d113      	bne.n	8004ef0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ece:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004ed6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	695b      	ldr	r3, [r3, #20]
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	693a      	ldr	r2, [r7, #16]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	699b      	ldr	r3, [r3, #24]
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	693a      	ldr	r2, [r7, #16]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	693a      	ldr	r2, [r7, #16]
 8004ef4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	685a      	ldr	r2, [r3, #4]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	697a      	ldr	r2, [r7, #20]
 8004f08:	621a      	str	r2, [r3, #32]
}
 8004f0a:	bf00      	nop
 8004f0c:	371c      	adds	r7, #28
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bc80      	pop	{r7}
 8004f12:	4770      	bx	lr
 8004f14:	40012c00 	.word	0x40012c00

08004f18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b087      	sub	sp, #28
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a1b      	ldr	r3, [r3, #32]
 8004f26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a1b      	ldr	r3, [r3, #32]
 8004f2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	69db      	ldr	r3, [r3, #28]
 8004f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f023 0303 	bic.w	r3, r3, #3
 8004f4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	021b      	lsls	r3, r3, #8
 8004f68:	697a      	ldr	r2, [r7, #20]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a1d      	ldr	r2, [pc, #116]	@ (8004fe8 <TIM_OC3_SetConfig+0xd0>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d10d      	bne.n	8004f92 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004f7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	021b      	lsls	r3, r3, #8
 8004f84:	697a      	ldr	r2, [r7, #20]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004f90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a14      	ldr	r2, [pc, #80]	@ (8004fe8 <TIM_OC3_SetConfig+0xd0>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d113      	bne.n	8004fc2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004fa0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004fa8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	695b      	ldr	r3, [r3, #20]
 8004fae:	011b      	lsls	r3, r3, #4
 8004fb0:	693a      	ldr	r2, [r7, #16]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	699b      	ldr	r3, [r3, #24]
 8004fba:	011b      	lsls	r3, r3, #4
 8004fbc:	693a      	ldr	r2, [r7, #16]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	693a      	ldr	r2, [r7, #16]
 8004fc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	68fa      	ldr	r2, [r7, #12]
 8004fcc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	685a      	ldr	r2, [r3, #4]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	697a      	ldr	r2, [r7, #20]
 8004fda:	621a      	str	r2, [r3, #32]
}
 8004fdc:	bf00      	nop
 8004fde:	371c      	adds	r7, #28
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bc80      	pop	{r7}
 8004fe4:	4770      	bx	lr
 8004fe6:	bf00      	nop
 8004fe8:	40012c00 	.word	0x40012c00

08004fec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b087      	sub	sp, #28
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a1b      	ldr	r3, [r3, #32]
 8004ffa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6a1b      	ldr	r3, [r3, #32]
 8005000:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	69db      	ldr	r3, [r3, #28]
 8005012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800501a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005022:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	021b      	lsls	r3, r3, #8
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	4313      	orrs	r3, r2
 800502e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005036:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	031b      	lsls	r3, r3, #12
 800503e:	693a      	ldr	r2, [r7, #16]
 8005040:	4313      	orrs	r3, r2
 8005042:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4a0f      	ldr	r2, [pc, #60]	@ (8005084 <TIM_OC4_SetConfig+0x98>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d109      	bne.n	8005060 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005052:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	695b      	ldr	r3, [r3, #20]
 8005058:	019b      	lsls	r3, r3, #6
 800505a:	697a      	ldr	r2, [r7, #20]
 800505c:	4313      	orrs	r3, r2
 800505e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	697a      	ldr	r2, [r7, #20]
 8005064:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	68fa      	ldr	r2, [r7, #12]
 800506a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	685a      	ldr	r2, [r3, #4]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	693a      	ldr	r2, [r7, #16]
 8005078:	621a      	str	r2, [r3, #32]
}
 800507a:	bf00      	nop
 800507c:	371c      	adds	r7, #28
 800507e:	46bd      	mov	sp, r7
 8005080:	bc80      	pop	{r7}
 8005082:	4770      	bx	lr
 8005084:	40012c00 	.word	0x40012c00

08005088 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005088:	b480      	push	{r7}
 800508a:	b087      	sub	sp, #28
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6a1b      	ldr	r3, [r3, #32]
 8005098:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6a1b      	ldr	r3, [r3, #32]
 800509e:	f023 0201 	bic.w	r2, r3, #1
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80050b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	011b      	lsls	r3, r3, #4
 80050b8:	693a      	ldr	r2, [r7, #16]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	f023 030a 	bic.w	r3, r3, #10
 80050c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050c6:	697a      	ldr	r2, [r7, #20]
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	693a      	ldr	r2, [r7, #16]
 80050d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	697a      	ldr	r2, [r7, #20]
 80050d8:	621a      	str	r2, [r3, #32]
}
 80050da:	bf00      	nop
 80050dc:	371c      	adds	r7, #28
 80050de:	46bd      	mov	sp, r7
 80050e0:	bc80      	pop	{r7}
 80050e2:	4770      	bx	lr

080050e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b087      	sub	sp, #28
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6a1b      	ldr	r3, [r3, #32]
 80050f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6a1b      	ldr	r3, [r3, #32]
 80050fa:	f023 0210 	bic.w	r2, r3, #16
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	699b      	ldr	r3, [r3, #24]
 8005106:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800510e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	031b      	lsls	r3, r3, #12
 8005114:	693a      	ldr	r2, [r7, #16]
 8005116:	4313      	orrs	r3, r2
 8005118:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005120:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	011b      	lsls	r3, r3, #4
 8005126:	697a      	ldr	r2, [r7, #20]
 8005128:	4313      	orrs	r3, r2
 800512a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	693a      	ldr	r2, [r7, #16]
 8005130:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	697a      	ldr	r2, [r7, #20]
 8005136:	621a      	str	r2, [r3, #32]
}
 8005138:	bf00      	nop
 800513a:	371c      	adds	r7, #28
 800513c:	46bd      	mov	sp, r7
 800513e:	bc80      	pop	{r7}
 8005140:	4770      	bx	lr

08005142 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005142:	b480      	push	{r7}
 8005144:	b085      	sub	sp, #20
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
 800514a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005158:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800515a:	683a      	ldr	r2, [r7, #0]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	4313      	orrs	r3, r2
 8005160:	f043 0307 	orr.w	r3, r3, #7
 8005164:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	609a      	str	r2, [r3, #8]
}
 800516c:	bf00      	nop
 800516e:	3714      	adds	r7, #20
 8005170:	46bd      	mov	sp, r7
 8005172:	bc80      	pop	{r7}
 8005174:	4770      	bx	lr

08005176 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005176:	b480      	push	{r7}
 8005178:	b087      	sub	sp, #28
 800517a:	af00      	add	r7, sp, #0
 800517c:	60f8      	str	r0, [r7, #12]
 800517e:	60b9      	str	r1, [r7, #8]
 8005180:	607a      	str	r2, [r7, #4]
 8005182:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005190:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	021a      	lsls	r2, r3, #8
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	431a      	orrs	r2, r3
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	4313      	orrs	r3, r2
 800519e:	697a      	ldr	r2, [r7, #20]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	697a      	ldr	r2, [r7, #20]
 80051a8:	609a      	str	r2, [r3, #8]
}
 80051aa:	bf00      	nop
 80051ac:	371c      	adds	r7, #28
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bc80      	pop	{r7}
 80051b2:	4770      	bx	lr

080051b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b087      	sub	sp, #28
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	f003 031f 	and.w	r3, r3, #31
 80051c6:	2201      	movs	r2, #1
 80051c8:	fa02 f303 	lsl.w	r3, r2, r3
 80051cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6a1a      	ldr	r2, [r3, #32]
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	43db      	mvns	r3, r3
 80051d6:	401a      	ands	r2, r3
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6a1a      	ldr	r2, [r3, #32]
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	f003 031f 	and.w	r3, r3, #31
 80051e6:	6879      	ldr	r1, [r7, #4]
 80051e8:	fa01 f303 	lsl.w	r3, r1, r3
 80051ec:	431a      	orrs	r2, r3
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	621a      	str	r2, [r3, #32]
}
 80051f2:	bf00      	nop
 80051f4:	371c      	adds	r7, #28
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bc80      	pop	{r7}
 80051fa:	4770      	bx	lr

080051fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b085      	sub	sp, #20
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800520c:	2b01      	cmp	r3, #1
 800520e:	d101      	bne.n	8005214 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005210:	2302      	movs	r3, #2
 8005212:	e046      	b.n	80052a2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2202      	movs	r2, #2
 8005220:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800523a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68fa      	ldr	r2, [r7, #12]
 8005242:	4313      	orrs	r3, r2
 8005244:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a16      	ldr	r2, [pc, #88]	@ (80052ac <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d00e      	beq.n	8005276 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005260:	d009      	beq.n	8005276 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a12      	ldr	r2, [pc, #72]	@ (80052b0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d004      	beq.n	8005276 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a10      	ldr	r2, [pc, #64]	@ (80052b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d10c      	bne.n	8005290 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800527c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	68ba      	ldr	r2, [r7, #8]
 8005284:	4313      	orrs	r3, r2
 8005286:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68ba      	ldr	r2, [r7, #8]
 800528e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3714      	adds	r7, #20
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bc80      	pop	{r7}
 80052aa:	4770      	bx	lr
 80052ac:	40012c00 	.word	0x40012c00
 80052b0:	40000400 	.word	0x40000400
 80052b4:	40000800 	.word	0x40000800

080052b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052c0:	bf00      	nop
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bc80      	pop	{r7}
 80052c8:	4770      	bx	lr

080052ca <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052ca:	b480      	push	{r7}
 80052cc:	b083      	sub	sp, #12
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052d2:	bf00      	nop
 80052d4:	370c      	adds	r7, #12
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bc80      	pop	{r7}
 80052da:	4770      	bx	lr

080052dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b082      	sub	sp, #8
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d101      	bne.n	80052ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e042      	b.n	8005374 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d106      	bne.n	8005308 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f7fc fc96 	bl	8001c34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2224      	movs	r2, #36	@ 0x24
 800530c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	68da      	ldr	r2, [r3, #12]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800531e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f000 fdb7 	bl	8005e94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	691a      	ldr	r2, [r3, #16]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005334:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	695a      	ldr	r2, [r3, #20]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005344:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	68da      	ldr	r2, [r3, #12]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005354:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2220      	movs	r2, #32
 8005360:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2220      	movs	r2, #32
 8005368:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005372:	2300      	movs	r3, #0
}
 8005374:	4618      	mov	r0, r3
 8005376:	3708      	adds	r7, #8
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b08a      	sub	sp, #40	@ 0x28
 8005380:	af02      	add	r7, sp, #8
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	603b      	str	r3, [r7, #0]
 8005388:	4613      	mov	r3, r2
 800538a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800538c:	2300      	movs	r3, #0
 800538e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005396:	b2db      	uxtb	r3, r3
 8005398:	2b20      	cmp	r3, #32
 800539a:	d175      	bne.n	8005488 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d002      	beq.n	80053a8 <HAL_UART_Transmit+0x2c>
 80053a2:	88fb      	ldrh	r3, [r7, #6]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d101      	bne.n	80053ac <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e06e      	b.n	800548a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2200      	movs	r2, #0
 80053b0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2221      	movs	r2, #33	@ 0x21
 80053b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80053ba:	f7fc fe51 	bl	8002060 <HAL_GetTick>
 80053be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	88fa      	ldrh	r2, [r7, #6]
 80053c4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	88fa      	ldrh	r2, [r7, #6]
 80053ca:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053d4:	d108      	bne.n	80053e8 <HAL_UART_Transmit+0x6c>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d104      	bne.n	80053e8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80053de:	2300      	movs	r3, #0
 80053e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	61bb      	str	r3, [r7, #24]
 80053e6:	e003      	b.n	80053f0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053ec:	2300      	movs	r3, #0
 80053ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80053f0:	e02e      	b.n	8005450 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	9300      	str	r3, [sp, #0]
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	2200      	movs	r2, #0
 80053fa:	2180      	movs	r1, #128	@ 0x80
 80053fc:	68f8      	ldr	r0, [r7, #12]
 80053fe:	f000 fb1c 	bl	8005a3a <UART_WaitOnFlagUntilTimeout>
 8005402:	4603      	mov	r3, r0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d005      	beq.n	8005414 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2220      	movs	r2, #32
 800540c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005410:	2303      	movs	r3, #3
 8005412:	e03a      	b.n	800548a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005414:	69fb      	ldr	r3, [r7, #28]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d10b      	bne.n	8005432 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	881b      	ldrh	r3, [r3, #0]
 800541e:	461a      	mov	r2, r3
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005428:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	3302      	adds	r3, #2
 800542e:	61bb      	str	r3, [r7, #24]
 8005430:	e007      	b.n	8005442 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	781a      	ldrb	r2, [r3, #0]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800543c:	69fb      	ldr	r3, [r7, #28]
 800543e:	3301      	adds	r3, #1
 8005440:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005446:	b29b      	uxth	r3, r3
 8005448:	3b01      	subs	r3, #1
 800544a:	b29a      	uxth	r2, r3
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005454:	b29b      	uxth	r3, r3
 8005456:	2b00      	cmp	r3, #0
 8005458:	d1cb      	bne.n	80053f2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	9300      	str	r3, [sp, #0]
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	2200      	movs	r2, #0
 8005462:	2140      	movs	r1, #64	@ 0x40
 8005464:	68f8      	ldr	r0, [r7, #12]
 8005466:	f000 fae8 	bl	8005a3a <UART_WaitOnFlagUntilTimeout>
 800546a:	4603      	mov	r3, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d005      	beq.n	800547c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2220      	movs	r2, #32
 8005474:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005478:	2303      	movs	r3, #3
 800547a:	e006      	b.n	800548a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2220      	movs	r2, #32
 8005480:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005484:	2300      	movs	r3, #0
 8005486:	e000      	b.n	800548a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005488:	2302      	movs	r3, #2
  }
}
 800548a:	4618      	mov	r0, r3
 800548c:	3720      	adds	r7, #32
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}

08005492 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005492:	b580      	push	{r7, lr}
 8005494:	b084      	sub	sp, #16
 8005496:	af00      	add	r7, sp, #0
 8005498:	60f8      	str	r0, [r7, #12]
 800549a:	60b9      	str	r1, [r7, #8]
 800549c:	4613      	mov	r3, r2
 800549e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	2b20      	cmp	r3, #32
 80054aa:	d112      	bne.n	80054d2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d002      	beq.n	80054b8 <HAL_UART_Receive_IT+0x26>
 80054b2:	88fb      	ldrh	r3, [r7, #6]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d101      	bne.n	80054bc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e00b      	b.n	80054d4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2200      	movs	r2, #0
 80054c0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80054c2:	88fb      	ldrh	r3, [r7, #6]
 80054c4:	461a      	mov	r2, r3
 80054c6:	68b9      	ldr	r1, [r7, #8]
 80054c8:	68f8      	ldr	r0, [r7, #12]
 80054ca:	f000 fb0f 	bl	8005aec <UART_Start_Receive_IT>
 80054ce:	4603      	mov	r3, r0
 80054d0:	e000      	b.n	80054d4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80054d2:	2302      	movs	r3, #2
  }
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3710      	adds	r7, #16
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}

080054dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b0ba      	sub	sp, #232	@ 0xe8
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	695b      	ldr	r3, [r3, #20]
 80054fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005502:	2300      	movs	r3, #0
 8005504:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005508:	2300      	movs	r3, #0
 800550a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800550e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005512:	f003 030f 	and.w	r3, r3, #15
 8005516:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800551a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800551e:	2b00      	cmp	r3, #0
 8005520:	d10f      	bne.n	8005542 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005522:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005526:	f003 0320 	and.w	r3, r3, #32
 800552a:	2b00      	cmp	r3, #0
 800552c:	d009      	beq.n	8005542 <HAL_UART_IRQHandler+0x66>
 800552e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005532:	f003 0320 	and.w	r3, r3, #32
 8005536:	2b00      	cmp	r3, #0
 8005538:	d003      	beq.n	8005542 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f000 fbec 	bl	8005d18 <UART_Receive_IT>
      return;
 8005540:	e25b      	b.n	80059fa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005542:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005546:	2b00      	cmp	r3, #0
 8005548:	f000 80de 	beq.w	8005708 <HAL_UART_IRQHandler+0x22c>
 800554c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005550:	f003 0301 	and.w	r3, r3, #1
 8005554:	2b00      	cmp	r3, #0
 8005556:	d106      	bne.n	8005566 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005558:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800555c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005560:	2b00      	cmp	r3, #0
 8005562:	f000 80d1 	beq.w	8005708 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800556a:	f003 0301 	and.w	r3, r3, #1
 800556e:	2b00      	cmp	r3, #0
 8005570:	d00b      	beq.n	800558a <HAL_UART_IRQHandler+0xae>
 8005572:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005576:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800557a:	2b00      	cmp	r3, #0
 800557c:	d005      	beq.n	800558a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005582:	f043 0201 	orr.w	r2, r3, #1
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800558a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800558e:	f003 0304 	and.w	r3, r3, #4
 8005592:	2b00      	cmp	r3, #0
 8005594:	d00b      	beq.n	80055ae <HAL_UART_IRQHandler+0xd2>
 8005596:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800559a:	f003 0301 	and.w	r3, r3, #1
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d005      	beq.n	80055ae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055a6:	f043 0202 	orr.w	r2, r3, #2
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055b2:	f003 0302 	and.w	r3, r3, #2
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d00b      	beq.n	80055d2 <HAL_UART_IRQHandler+0xf6>
 80055ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055be:	f003 0301 	and.w	r3, r3, #1
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d005      	beq.n	80055d2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055ca:	f043 0204 	orr.w	r2, r3, #4
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80055d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055d6:	f003 0308 	and.w	r3, r3, #8
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d011      	beq.n	8005602 <HAL_UART_IRQHandler+0x126>
 80055de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055e2:	f003 0320 	and.w	r3, r3, #32
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d105      	bne.n	80055f6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80055ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055ee:	f003 0301 	and.w	r3, r3, #1
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d005      	beq.n	8005602 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055fa:	f043 0208 	orr.w	r2, r3, #8
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005606:	2b00      	cmp	r3, #0
 8005608:	f000 81f2 	beq.w	80059f0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800560c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005610:	f003 0320 	and.w	r3, r3, #32
 8005614:	2b00      	cmp	r3, #0
 8005616:	d008      	beq.n	800562a <HAL_UART_IRQHandler+0x14e>
 8005618:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800561c:	f003 0320 	and.w	r3, r3, #32
 8005620:	2b00      	cmp	r3, #0
 8005622:	d002      	beq.n	800562a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f000 fb77 	bl	8005d18 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	695b      	ldr	r3, [r3, #20]
 8005630:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005634:	2b00      	cmp	r3, #0
 8005636:	bf14      	ite	ne
 8005638:	2301      	movne	r3, #1
 800563a:	2300      	moveq	r3, #0
 800563c:	b2db      	uxtb	r3, r3
 800563e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005646:	f003 0308 	and.w	r3, r3, #8
 800564a:	2b00      	cmp	r3, #0
 800564c:	d103      	bne.n	8005656 <HAL_UART_IRQHandler+0x17a>
 800564e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005652:	2b00      	cmp	r3, #0
 8005654:	d04f      	beq.n	80056f6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 fa81 	bl	8005b5e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	695b      	ldr	r3, [r3, #20]
 8005662:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005666:	2b00      	cmp	r3, #0
 8005668:	d041      	beq.n	80056ee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	3314      	adds	r3, #20
 8005670:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005674:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005678:	e853 3f00 	ldrex	r3, [r3]
 800567c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005680:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005684:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005688:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	3314      	adds	r3, #20
 8005692:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005696:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800569a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800569e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80056a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80056a6:	e841 2300 	strex	r3, r2, [r1]
 80056aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80056ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d1d9      	bne.n	800566a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d013      	beq.n	80056e6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056c2:	4a7e      	ldr	r2, [pc, #504]	@ (80058bc <HAL_UART_IRQHandler+0x3e0>)
 80056c4:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056ca:	4618      	mov	r0, r3
 80056cc:	f7fd fa68 	bl	8002ba0 <HAL_DMA_Abort_IT>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d016      	beq.n	8005704 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80056e0:	4610      	mov	r0, r2
 80056e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056e4:	e00e      	b.n	8005704 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f000 f993 	bl	8005a12 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056ec:	e00a      	b.n	8005704 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 f98f 	bl	8005a12 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056f4:	e006      	b.n	8005704 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 f98b 	bl	8005a12 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005702:	e175      	b.n	80059f0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005704:	bf00      	nop
    return;
 8005706:	e173      	b.n	80059f0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800570c:	2b01      	cmp	r3, #1
 800570e:	f040 814f 	bne.w	80059b0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005716:	f003 0310 	and.w	r3, r3, #16
 800571a:	2b00      	cmp	r3, #0
 800571c:	f000 8148 	beq.w	80059b0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005720:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005724:	f003 0310 	and.w	r3, r3, #16
 8005728:	2b00      	cmp	r3, #0
 800572a:	f000 8141 	beq.w	80059b0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800572e:	2300      	movs	r3, #0
 8005730:	60bb      	str	r3, [r7, #8]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	60bb      	str	r3, [r7, #8]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	60bb      	str	r3, [r7, #8]
 8005742:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	695b      	ldr	r3, [r3, #20]
 800574a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800574e:	2b00      	cmp	r3, #0
 8005750:	f000 80b6 	beq.w	80058c0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005760:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005764:	2b00      	cmp	r3, #0
 8005766:	f000 8145 	beq.w	80059f4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800576e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005772:	429a      	cmp	r2, r3
 8005774:	f080 813e 	bcs.w	80059f4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800577e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005784:	699b      	ldr	r3, [r3, #24]
 8005786:	2b20      	cmp	r3, #32
 8005788:	f000 8088 	beq.w	800589c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	330c      	adds	r3, #12
 8005792:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005796:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800579a:	e853 3f00 	ldrex	r3, [r3]
 800579e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80057a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80057a6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057aa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	330c      	adds	r3, #12
 80057b4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80057b8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80057bc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80057c4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80057c8:	e841 2300 	strex	r3, r2, [r1]
 80057cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80057d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d1d9      	bne.n	800578c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	3314      	adds	r3, #20
 80057de:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80057e2:	e853 3f00 	ldrex	r3, [r3]
 80057e6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80057e8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80057ea:	f023 0301 	bic.w	r3, r3, #1
 80057ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	3314      	adds	r3, #20
 80057f8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80057fc:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005800:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005802:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005804:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005808:	e841 2300 	strex	r3, r2, [r1]
 800580c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800580e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005810:	2b00      	cmp	r3, #0
 8005812:	d1e1      	bne.n	80057d8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	3314      	adds	r3, #20
 800581a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800581c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800581e:	e853 3f00 	ldrex	r3, [r3]
 8005822:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005824:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005826:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800582a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	3314      	adds	r3, #20
 8005834:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005838:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800583a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800583c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800583e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005840:	e841 2300 	strex	r3, r2, [r1]
 8005844:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005846:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005848:	2b00      	cmp	r3, #0
 800584a:	d1e3      	bne.n	8005814 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2220      	movs	r2, #32
 8005850:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	330c      	adds	r3, #12
 8005860:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005862:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005864:	e853 3f00 	ldrex	r3, [r3]
 8005868:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800586a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800586c:	f023 0310 	bic.w	r3, r3, #16
 8005870:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	330c      	adds	r3, #12
 800587a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800587e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005880:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005882:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005884:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005886:	e841 2300 	strex	r3, r2, [r1]
 800588a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800588c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800588e:	2b00      	cmp	r3, #0
 8005890:	d1e3      	bne.n	800585a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005896:	4618      	mov	r0, r3
 8005898:	f7fd f947 	bl	8002b2a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2202      	movs	r2, #2
 80058a0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	4619      	mov	r1, r3
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 f8b6 	bl	8005a24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80058b8:	e09c      	b.n	80059f4 <HAL_UART_IRQHandler+0x518>
 80058ba:	bf00      	nop
 80058bc:	08005c23 	.word	0x08005c23
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	1ad3      	subs	r3, r2, r3
 80058cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	f000 808e 	beq.w	80059f8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80058dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	f000 8089 	beq.w	80059f8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	330c      	adds	r3, #12
 80058ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058f0:	e853 3f00 	ldrex	r3, [r3]
 80058f4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80058f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80058fc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	330c      	adds	r3, #12
 8005906:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800590a:	647a      	str	r2, [r7, #68]	@ 0x44
 800590c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800590e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005910:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005912:	e841 2300 	strex	r3, r2, [r1]
 8005916:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005918:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800591a:	2b00      	cmp	r3, #0
 800591c:	d1e3      	bne.n	80058e6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	3314      	adds	r3, #20
 8005924:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005928:	e853 3f00 	ldrex	r3, [r3]
 800592c:	623b      	str	r3, [r7, #32]
   return(result);
 800592e:	6a3b      	ldr	r3, [r7, #32]
 8005930:	f023 0301 	bic.w	r3, r3, #1
 8005934:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	3314      	adds	r3, #20
 800593e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005942:	633a      	str	r2, [r7, #48]	@ 0x30
 8005944:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005946:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005948:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800594a:	e841 2300 	strex	r3, r2, [r1]
 800594e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005952:	2b00      	cmp	r3, #0
 8005954:	d1e3      	bne.n	800591e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2220      	movs	r2, #32
 800595a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	330c      	adds	r3, #12
 800596a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	e853 3f00 	ldrex	r3, [r3]
 8005972:	60fb      	str	r3, [r7, #12]
   return(result);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f023 0310 	bic.w	r3, r3, #16
 800597a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	330c      	adds	r3, #12
 8005984:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005988:	61fa      	str	r2, [r7, #28]
 800598a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800598c:	69b9      	ldr	r1, [r7, #24]
 800598e:	69fa      	ldr	r2, [r7, #28]
 8005990:	e841 2300 	strex	r3, r2, [r1]
 8005994:	617b      	str	r3, [r7, #20]
   return(result);
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d1e3      	bne.n	8005964 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2202      	movs	r2, #2
 80059a0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80059a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80059a6:	4619      	mov	r1, r3
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f000 f83b 	bl	8005a24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80059ae:	e023      	b.n	80059f8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80059b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d009      	beq.n	80059d0 <HAL_UART_IRQHandler+0x4f4>
 80059bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d003      	beq.n	80059d0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f000 f93e 	bl	8005c4a <UART_Transmit_IT>
    return;
 80059ce:	e014      	b.n	80059fa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80059d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d00e      	beq.n	80059fa <HAL_UART_IRQHandler+0x51e>
 80059dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d008      	beq.n	80059fa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 f97d 	bl	8005ce8 <UART_EndTransmit_IT>
    return;
 80059ee:	e004      	b.n	80059fa <HAL_UART_IRQHandler+0x51e>
    return;
 80059f0:	bf00      	nop
 80059f2:	e002      	b.n	80059fa <HAL_UART_IRQHandler+0x51e>
      return;
 80059f4:	bf00      	nop
 80059f6:	e000      	b.n	80059fa <HAL_UART_IRQHandler+0x51e>
      return;
 80059f8:	bf00      	nop
  }
}
 80059fa:	37e8      	adds	r7, #232	@ 0xe8
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005a08:	bf00      	nop
 8005a0a:	370c      	adds	r7, #12
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bc80      	pop	{r7}
 8005a10:	4770      	bx	lr

08005a12 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a12:	b480      	push	{r7}
 8005a14:	b083      	sub	sp, #12
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005a1a:	bf00      	nop
 8005a1c:	370c      	adds	r7, #12
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bc80      	pop	{r7}
 8005a22:	4770      	bx	lr

08005a24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	460b      	mov	r3, r1
 8005a2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a30:	bf00      	nop
 8005a32:	370c      	adds	r7, #12
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bc80      	pop	{r7}
 8005a38:	4770      	bx	lr

08005a3a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005a3a:	b580      	push	{r7, lr}
 8005a3c:	b086      	sub	sp, #24
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	60f8      	str	r0, [r7, #12]
 8005a42:	60b9      	str	r1, [r7, #8]
 8005a44:	603b      	str	r3, [r7, #0]
 8005a46:	4613      	mov	r3, r2
 8005a48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a4a:	e03b      	b.n	8005ac4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a4c:	6a3b      	ldr	r3, [r7, #32]
 8005a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a52:	d037      	beq.n	8005ac4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a54:	f7fc fb04 	bl	8002060 <HAL_GetTick>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	1ad3      	subs	r3, r2, r3
 8005a5e:	6a3a      	ldr	r2, [r7, #32]
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d302      	bcc.n	8005a6a <UART_WaitOnFlagUntilTimeout+0x30>
 8005a64:	6a3b      	ldr	r3, [r7, #32]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d101      	bne.n	8005a6e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	e03a      	b.n	8005ae4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	f003 0304 	and.w	r3, r3, #4
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d023      	beq.n	8005ac4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	2b80      	cmp	r3, #128	@ 0x80
 8005a80:	d020      	beq.n	8005ac4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	2b40      	cmp	r3, #64	@ 0x40
 8005a86:	d01d      	beq.n	8005ac4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 0308 	and.w	r3, r3, #8
 8005a92:	2b08      	cmp	r3, #8
 8005a94:	d116      	bne.n	8005ac4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005a96:	2300      	movs	r3, #0
 8005a98:	617b      	str	r3, [r7, #20]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	617b      	str	r3, [r7, #20]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	617b      	str	r3, [r7, #20]
 8005aaa:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005aac:	68f8      	ldr	r0, [r7, #12]
 8005aae:	f000 f856 	bl	8005b5e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2208      	movs	r2, #8
 8005ab6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e00f      	b.n	8005ae4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	4013      	ands	r3, r2
 8005ace:	68ba      	ldr	r2, [r7, #8]
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	bf0c      	ite	eq
 8005ad4:	2301      	moveq	r3, #1
 8005ad6:	2300      	movne	r3, #0
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	461a      	mov	r2, r3
 8005adc:	79fb      	ldrb	r3, [r7, #7]
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d0b4      	beq.n	8005a4c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ae2:	2300      	movs	r3, #0
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3718      	adds	r7, #24
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}

08005aec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b085      	sub	sp, #20
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	60f8      	str	r0, [r7, #12]
 8005af4:	60b9      	str	r1, [r7, #8]
 8005af6:	4613      	mov	r3, r2
 8005af8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	68ba      	ldr	r2, [r7, #8]
 8005afe:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	88fa      	ldrh	r2, [r7, #6]
 8005b04:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	88fa      	ldrh	r2, [r7, #6]
 8005b0a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2222      	movs	r2, #34	@ 0x22
 8005b16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d007      	beq.n	8005b32 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	68da      	ldr	r2, [r3, #12]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005b30:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	695a      	ldr	r2, [r3, #20]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f042 0201 	orr.w	r2, r2, #1
 8005b40:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68da      	ldr	r2, [r3, #12]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f042 0220 	orr.w	r2, r2, #32
 8005b50:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005b52:	2300      	movs	r3, #0
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3714      	adds	r7, #20
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bc80      	pop	{r7}
 8005b5c:	4770      	bx	lr

08005b5e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b5e:	b480      	push	{r7}
 8005b60:	b095      	sub	sp, #84	@ 0x54
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	330c      	adds	r3, #12
 8005b6c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b70:	e853 3f00 	ldrex	r3, [r3]
 8005b74:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	330c      	adds	r3, #12
 8005b84:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005b86:	643a      	str	r2, [r7, #64]	@ 0x40
 8005b88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b8a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005b8c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b8e:	e841 2300 	strex	r3, r2, [r1]
 8005b92:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005b94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d1e5      	bne.n	8005b66 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	3314      	adds	r3, #20
 8005ba0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba2:	6a3b      	ldr	r3, [r7, #32]
 8005ba4:	e853 3f00 	ldrex	r3, [r3]
 8005ba8:	61fb      	str	r3, [r7, #28]
   return(result);
 8005baa:	69fb      	ldr	r3, [r7, #28]
 8005bac:	f023 0301 	bic.w	r3, r3, #1
 8005bb0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	3314      	adds	r3, #20
 8005bb8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005bba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005bbc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bbe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005bc0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005bc2:	e841 2300 	strex	r3, r2, [r1]
 8005bc6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d1e5      	bne.n	8005b9a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d119      	bne.n	8005c0a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	330c      	adds	r3, #12
 8005bdc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	e853 3f00 	ldrex	r3, [r3]
 8005be4:	60bb      	str	r3, [r7, #8]
   return(result);
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	f023 0310 	bic.w	r3, r3, #16
 8005bec:	647b      	str	r3, [r7, #68]	@ 0x44
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	330c      	adds	r3, #12
 8005bf4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005bf6:	61ba      	str	r2, [r7, #24]
 8005bf8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bfa:	6979      	ldr	r1, [r7, #20]
 8005bfc:	69ba      	ldr	r2, [r7, #24]
 8005bfe:	e841 2300 	strex	r3, r2, [r1]
 8005c02:	613b      	str	r3, [r7, #16]
   return(result);
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d1e5      	bne.n	8005bd6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2220      	movs	r2, #32
 8005c0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005c18:	bf00      	nop
 8005c1a:	3754      	adds	r7, #84	@ 0x54
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bc80      	pop	{r7}
 8005c20:	4770      	bx	lr

08005c22 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c22:	b580      	push	{r7, lr}
 8005c24:	b084      	sub	sp, #16
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c2e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2200      	movs	r2, #0
 8005c34:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c3c:	68f8      	ldr	r0, [r7, #12]
 8005c3e:	f7ff fee8 	bl	8005a12 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c42:	bf00      	nop
 8005c44:	3710      	adds	r7, #16
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}

08005c4a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005c4a:	b480      	push	{r7}
 8005c4c:	b085      	sub	sp, #20
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	2b21      	cmp	r3, #33	@ 0x21
 8005c5c:	d13e      	bne.n	8005cdc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c66:	d114      	bne.n	8005c92 <UART_Transmit_IT+0x48>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d110      	bne.n	8005c92 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6a1b      	ldr	r3, [r3, #32]
 8005c74:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	881b      	ldrh	r3, [r3, #0]
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c84:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a1b      	ldr	r3, [r3, #32]
 8005c8a:	1c9a      	adds	r2, r3, #2
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	621a      	str	r2, [r3, #32]
 8005c90:	e008      	b.n	8005ca4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a1b      	ldr	r3, [r3, #32]
 8005c96:	1c59      	adds	r1, r3, #1
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	6211      	str	r1, [r2, #32]
 8005c9c:	781a      	ldrb	r2, [r3, #0]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	3b01      	subs	r3, #1
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	4619      	mov	r1, r3
 8005cb2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d10f      	bne.n	8005cd8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	68da      	ldr	r2, [r3, #12]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005cc6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	68da      	ldr	r2, [r3, #12]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005cd6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	e000      	b.n	8005cde <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005cdc:	2302      	movs	r3, #2
  }
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3714      	adds	r7, #20
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bc80      	pop	{r7}
 8005ce6:	4770      	bx	lr

08005ce8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68da      	ldr	r2, [r3, #12]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005cfe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2220      	movs	r2, #32
 8005d04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f7ff fe79 	bl	8005a00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005d0e:	2300      	movs	r3, #0
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3708      	adds	r7, #8
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b08c      	sub	sp, #48	@ 0x30
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	2b22      	cmp	r3, #34	@ 0x22
 8005d2a:	f040 80ae 	bne.w	8005e8a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d36:	d117      	bne.n	8005d68 <UART_Receive_IT+0x50>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	691b      	ldr	r3, [r3, #16]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d113      	bne.n	8005d68 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005d40:	2300      	movs	r3, #0
 8005d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d48:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d56:	b29a      	uxth	r2, r3
 8005d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d5a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d60:	1c9a      	adds	r2, r3, #2
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	629a      	str	r2, [r3, #40]	@ 0x28
 8005d66:	e026      	b.n	8005db6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d7a:	d007      	beq.n	8005d8c <UART_Receive_IT+0x74>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d10a      	bne.n	8005d9a <UART_Receive_IT+0x82>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	691b      	ldr	r3, [r3, #16]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d106      	bne.n	8005d9a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	b2da      	uxtb	r2, r3
 8005d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d96:	701a      	strb	r2, [r3, #0]
 8005d98:	e008      	b.n	8005dac <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005da6:	b2da      	uxtb	r2, r3
 8005da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005daa:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005db0:	1c5a      	adds	r2, r3, #1
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	3b01      	subs	r3, #1
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d15d      	bne.n	8005e86 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	68da      	ldr	r2, [r3, #12]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f022 0220 	bic.w	r2, r2, #32
 8005dd8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	68da      	ldr	r2, [r3, #12]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005de8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	695a      	ldr	r2, [r3, #20]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f022 0201 	bic.w	r2, r2, #1
 8005df8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2220      	movs	r2, #32
 8005dfe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d135      	bne.n	8005e7c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	330c      	adds	r3, #12
 8005e1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	e853 3f00 	ldrex	r3, [r3]
 8005e24:	613b      	str	r3, [r7, #16]
   return(result);
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	f023 0310 	bic.w	r3, r3, #16
 8005e2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	330c      	adds	r3, #12
 8005e34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e36:	623a      	str	r2, [r7, #32]
 8005e38:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e3a:	69f9      	ldr	r1, [r7, #28]
 8005e3c:	6a3a      	ldr	r2, [r7, #32]
 8005e3e:	e841 2300 	strex	r3, r2, [r1]
 8005e42:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e44:	69bb      	ldr	r3, [r7, #24]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d1e5      	bne.n	8005e16 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 0310 	and.w	r3, r3, #16
 8005e54:	2b10      	cmp	r3, #16
 8005e56:	d10a      	bne.n	8005e6e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e58:	2300      	movs	r3, #0
 8005e5a:	60fb      	str	r3, [r7, #12]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	60fb      	str	r3, [r7, #12]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	60fb      	str	r3, [r7, #12]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005e72:	4619      	mov	r1, r3
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f7ff fdd5 	bl	8005a24 <HAL_UARTEx_RxEventCallback>
 8005e7a:	e002      	b.n	8005e82 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f7fb fb7f 	bl	8001580 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005e82:	2300      	movs	r3, #0
 8005e84:	e002      	b.n	8005e8c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005e86:	2300      	movs	r3, #0
 8005e88:	e000      	b.n	8005e8c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005e8a:	2302      	movs	r3, #2
  }
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3730      	adds	r7, #48	@ 0x30
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b084      	sub	sp, #16
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	68da      	ldr	r2, [r3, #12]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	430a      	orrs	r2, r1
 8005eb0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	689a      	ldr	r2, [r3, #8]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	691b      	ldr	r3, [r3, #16]
 8005eba:	431a      	orrs	r2, r3
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	695b      	ldr	r3, [r3, #20]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	68db      	ldr	r3, [r3, #12]
 8005eca:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005ece:	f023 030c 	bic.w	r3, r3, #12
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	6812      	ldr	r2, [r2, #0]
 8005ed6:	68b9      	ldr	r1, [r7, #8]
 8005ed8:	430b      	orrs	r3, r1
 8005eda:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	695b      	ldr	r3, [r3, #20]
 8005ee2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	699a      	ldr	r2, [r3, #24]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	430a      	orrs	r2, r1
 8005ef0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a2c      	ldr	r2, [pc, #176]	@ (8005fa8 <UART_SetConfig+0x114>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d103      	bne.n	8005f04 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005efc:	f7fe f8c6 	bl	800408c <HAL_RCC_GetPCLK2Freq>
 8005f00:	60f8      	str	r0, [r7, #12]
 8005f02:	e002      	b.n	8005f0a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005f04:	f7fe f8ae 	bl	8004064 <HAL_RCC_GetPCLK1Freq>
 8005f08:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f0a:	68fa      	ldr	r2, [r7, #12]
 8005f0c:	4613      	mov	r3, r2
 8005f0e:	009b      	lsls	r3, r3, #2
 8005f10:	4413      	add	r3, r2
 8005f12:	009a      	lsls	r2, r3, #2
 8005f14:	441a      	add	r2, r3
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f20:	4a22      	ldr	r2, [pc, #136]	@ (8005fac <UART_SetConfig+0x118>)
 8005f22:	fba2 2303 	umull	r2, r3, r2, r3
 8005f26:	095b      	lsrs	r3, r3, #5
 8005f28:	0119      	lsls	r1, r3, #4
 8005f2a:	68fa      	ldr	r2, [r7, #12]
 8005f2c:	4613      	mov	r3, r2
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	4413      	add	r3, r2
 8005f32:	009a      	lsls	r2, r3, #2
 8005f34:	441a      	add	r2, r3
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f40:	4b1a      	ldr	r3, [pc, #104]	@ (8005fac <UART_SetConfig+0x118>)
 8005f42:	fba3 0302 	umull	r0, r3, r3, r2
 8005f46:	095b      	lsrs	r3, r3, #5
 8005f48:	2064      	movs	r0, #100	@ 0x64
 8005f4a:	fb00 f303 	mul.w	r3, r0, r3
 8005f4e:	1ad3      	subs	r3, r2, r3
 8005f50:	011b      	lsls	r3, r3, #4
 8005f52:	3332      	adds	r3, #50	@ 0x32
 8005f54:	4a15      	ldr	r2, [pc, #84]	@ (8005fac <UART_SetConfig+0x118>)
 8005f56:	fba2 2303 	umull	r2, r3, r2, r3
 8005f5a:	095b      	lsrs	r3, r3, #5
 8005f5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005f60:	4419      	add	r1, r3
 8005f62:	68fa      	ldr	r2, [r7, #12]
 8005f64:	4613      	mov	r3, r2
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	4413      	add	r3, r2
 8005f6a:	009a      	lsls	r2, r3, #2
 8005f6c:	441a      	add	r2, r3
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f78:	4b0c      	ldr	r3, [pc, #48]	@ (8005fac <UART_SetConfig+0x118>)
 8005f7a:	fba3 0302 	umull	r0, r3, r3, r2
 8005f7e:	095b      	lsrs	r3, r3, #5
 8005f80:	2064      	movs	r0, #100	@ 0x64
 8005f82:	fb00 f303 	mul.w	r3, r0, r3
 8005f86:	1ad3      	subs	r3, r2, r3
 8005f88:	011b      	lsls	r3, r3, #4
 8005f8a:	3332      	adds	r3, #50	@ 0x32
 8005f8c:	4a07      	ldr	r2, [pc, #28]	@ (8005fac <UART_SetConfig+0x118>)
 8005f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f92:	095b      	lsrs	r3, r3, #5
 8005f94:	f003 020f 	and.w	r2, r3, #15
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	440a      	add	r2, r1
 8005f9e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005fa0:	bf00      	nop
 8005fa2:	3710      	adds	r7, #16
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	40013800 	.word	0x40013800
 8005fac:	51eb851f 	.word	0x51eb851f

08005fb0 <__NVIC_SetPriority>:
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	6039      	str	r1, [r7, #0]
 8005fba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	db0a      	blt.n	8005fda <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	b2da      	uxtb	r2, r3
 8005fc8:	490c      	ldr	r1, [pc, #48]	@ (8005ffc <__NVIC_SetPriority+0x4c>)
 8005fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fce:	0112      	lsls	r2, r2, #4
 8005fd0:	b2d2      	uxtb	r2, r2
 8005fd2:	440b      	add	r3, r1
 8005fd4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005fd8:	e00a      	b.n	8005ff0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	b2da      	uxtb	r2, r3
 8005fde:	4908      	ldr	r1, [pc, #32]	@ (8006000 <__NVIC_SetPriority+0x50>)
 8005fe0:	79fb      	ldrb	r3, [r7, #7]
 8005fe2:	f003 030f 	and.w	r3, r3, #15
 8005fe6:	3b04      	subs	r3, #4
 8005fe8:	0112      	lsls	r2, r2, #4
 8005fea:	b2d2      	uxtb	r2, r2
 8005fec:	440b      	add	r3, r1
 8005fee:	761a      	strb	r2, [r3, #24]
}
 8005ff0:	bf00      	nop
 8005ff2:	370c      	adds	r7, #12
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bc80      	pop	{r7}
 8005ff8:	4770      	bx	lr
 8005ffa:	bf00      	nop
 8005ffc:	e000e100 	.word	0xe000e100
 8006000:	e000ed00 	.word	0xe000ed00

08006004 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006004:	b580      	push	{r7, lr}
 8006006:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006008:	4b05      	ldr	r3, [pc, #20]	@ (8006020 <SysTick_Handler+0x1c>)
 800600a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800600c:	f002 faa6 	bl	800855c <xTaskGetSchedulerState>
 8006010:	4603      	mov	r3, r0
 8006012:	2b01      	cmp	r3, #1
 8006014:	d001      	beq.n	800601a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006016:	f003 f947 	bl	80092a8 <xPortSysTickHandler>
  }
}
 800601a:	bf00      	nop
 800601c:	bd80      	pop	{r7, pc}
 800601e:	bf00      	nop
 8006020:	e000e010 	.word	0xe000e010

08006024 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006024:	b580      	push	{r7, lr}
 8006026:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006028:	2100      	movs	r1, #0
 800602a:	f06f 0004 	mvn.w	r0, #4
 800602e:	f7ff ffbf 	bl	8005fb0 <__NVIC_SetPriority>
#endif
}
 8006032:	bf00      	nop
 8006034:	bd80      	pop	{r7, pc}
	...

08006038 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800603e:	f3ef 8305 	mrs	r3, IPSR
 8006042:	603b      	str	r3, [r7, #0]
  return(result);
 8006044:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006046:	2b00      	cmp	r3, #0
 8006048:	d003      	beq.n	8006052 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800604a:	f06f 0305 	mvn.w	r3, #5
 800604e:	607b      	str	r3, [r7, #4]
 8006050:	e00c      	b.n	800606c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006052:	4b09      	ldr	r3, [pc, #36]	@ (8006078 <osKernelInitialize+0x40>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d105      	bne.n	8006066 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800605a:	4b07      	ldr	r3, [pc, #28]	@ (8006078 <osKernelInitialize+0x40>)
 800605c:	2201      	movs	r2, #1
 800605e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006060:	2300      	movs	r3, #0
 8006062:	607b      	str	r3, [r7, #4]
 8006064:	e002      	b.n	800606c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006066:	f04f 33ff 	mov.w	r3, #4294967295
 800606a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800606c:	687b      	ldr	r3, [r7, #4]
}
 800606e:	4618      	mov	r0, r3
 8006070:	370c      	adds	r7, #12
 8006072:	46bd      	mov	sp, r7
 8006074:	bc80      	pop	{r7}
 8006076:	4770      	bx	lr
 8006078:	2000039c 	.word	0x2000039c

0800607c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800607c:	b580      	push	{r7, lr}
 800607e:	b082      	sub	sp, #8
 8006080:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006082:	f3ef 8305 	mrs	r3, IPSR
 8006086:	603b      	str	r3, [r7, #0]
  return(result);
 8006088:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800608a:	2b00      	cmp	r3, #0
 800608c:	d003      	beq.n	8006096 <osKernelStart+0x1a>
    stat = osErrorISR;
 800608e:	f06f 0305 	mvn.w	r3, #5
 8006092:	607b      	str	r3, [r7, #4]
 8006094:	e010      	b.n	80060b8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006096:	4b0b      	ldr	r3, [pc, #44]	@ (80060c4 <osKernelStart+0x48>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	2b01      	cmp	r3, #1
 800609c:	d109      	bne.n	80060b2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800609e:	f7ff ffc1 	bl	8006024 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80060a2:	4b08      	ldr	r3, [pc, #32]	@ (80060c4 <osKernelStart+0x48>)
 80060a4:	2202      	movs	r2, #2
 80060a6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80060a8:	f001 fdd8 	bl	8007c5c <vTaskStartScheduler>
      stat = osOK;
 80060ac:	2300      	movs	r3, #0
 80060ae:	607b      	str	r3, [r7, #4]
 80060b0:	e002      	b.n	80060b8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80060b2:	f04f 33ff 	mov.w	r3, #4294967295
 80060b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80060b8:	687b      	ldr	r3, [r7, #4]
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3708      	adds	r7, #8
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	2000039c 	.word	0x2000039c

080060c8 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b082      	sub	sp, #8
 80060cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060ce:	f3ef 8305 	mrs	r3, IPSR
 80060d2:	603b      	str	r3, [r7, #0]
  return(result);
 80060d4:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d003      	beq.n	80060e2 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 80060da:	f001 fee9 	bl	8007eb0 <xTaskGetTickCountFromISR>
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	e002      	b.n	80060e8 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 80060e2:	f001 fed7 	bl	8007e94 <xTaskGetTickCount>
 80060e6:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 80060e8:	687b      	ldr	r3, [r7, #4]
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3708      	adds	r7, #8
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}

080060f2 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80060f2:	b580      	push	{r7, lr}
 80060f4:	b08e      	sub	sp, #56	@ 0x38
 80060f6:	af04      	add	r7, sp, #16
 80060f8:	60f8      	str	r0, [r7, #12]
 80060fa:	60b9      	str	r1, [r7, #8]
 80060fc:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80060fe:	2300      	movs	r3, #0
 8006100:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006102:	f3ef 8305 	mrs	r3, IPSR
 8006106:	617b      	str	r3, [r7, #20]
  return(result);
 8006108:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800610a:	2b00      	cmp	r3, #0
 800610c:	d17e      	bne.n	800620c <osThreadNew+0x11a>
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d07b      	beq.n	800620c <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006114:	2380      	movs	r3, #128	@ 0x80
 8006116:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006118:	2318      	movs	r3, #24
 800611a:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800611c:	2300      	movs	r3, #0
 800611e:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8006120:	f04f 33ff 	mov.w	r3, #4294967295
 8006124:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d045      	beq.n	80061b8 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d002      	beq.n	800613a <osThreadNew+0x48>
        name = attr->name;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d002      	beq.n	8006148 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	699b      	ldr	r3, [r3, #24]
 8006146:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d008      	beq.n	8006160 <osThreadNew+0x6e>
 800614e:	69fb      	ldr	r3, [r7, #28]
 8006150:	2b38      	cmp	r3, #56	@ 0x38
 8006152:	d805      	bhi.n	8006160 <osThreadNew+0x6e>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	f003 0301 	and.w	r3, r3, #1
 800615c:	2b00      	cmp	r3, #0
 800615e:	d001      	beq.n	8006164 <osThreadNew+0x72>
        return (NULL);
 8006160:	2300      	movs	r3, #0
 8006162:	e054      	b.n	800620e <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	695b      	ldr	r3, [r3, #20]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d003      	beq.n	8006174 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	695b      	ldr	r3, [r3, #20]
 8006170:	089b      	lsrs	r3, r3, #2
 8006172:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d00e      	beq.n	800619a <osThreadNew+0xa8>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	2ba7      	cmp	r3, #167	@ 0xa7
 8006182:	d90a      	bls.n	800619a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006188:	2b00      	cmp	r3, #0
 800618a:	d006      	beq.n	800619a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	695b      	ldr	r3, [r3, #20]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d002      	beq.n	800619a <osThreadNew+0xa8>
        mem = 1;
 8006194:	2301      	movs	r3, #1
 8006196:	61bb      	str	r3, [r7, #24]
 8006198:	e010      	b.n	80061bc <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d10c      	bne.n	80061bc <osThreadNew+0xca>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	68db      	ldr	r3, [r3, #12]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d108      	bne.n	80061bc <osThreadNew+0xca>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	691b      	ldr	r3, [r3, #16]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d104      	bne.n	80061bc <osThreadNew+0xca>
          mem = 0;
 80061b2:	2300      	movs	r3, #0
 80061b4:	61bb      	str	r3, [r7, #24]
 80061b6:	e001      	b.n	80061bc <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80061b8:	2300      	movs	r3, #0
 80061ba:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d110      	bne.n	80061e4 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80061ca:	9202      	str	r2, [sp, #8]
 80061cc:	9301      	str	r3, [sp, #4]
 80061ce:	69fb      	ldr	r3, [r7, #28]
 80061d0:	9300      	str	r3, [sp, #0]
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	6a3a      	ldr	r2, [r7, #32]
 80061d6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80061d8:	68f8      	ldr	r0, [r7, #12]
 80061da:	f001 fb01 	bl	80077e0 <xTaskCreateStatic>
 80061de:	4603      	mov	r3, r0
 80061e0:	613b      	str	r3, [r7, #16]
 80061e2:	e013      	b.n	800620c <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80061e4:	69bb      	ldr	r3, [r7, #24]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d110      	bne.n	800620c <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80061ea:	6a3b      	ldr	r3, [r7, #32]
 80061ec:	b29a      	uxth	r2, r3
 80061ee:	f107 0310 	add.w	r3, r7, #16
 80061f2:	9301      	str	r3, [sp, #4]
 80061f4:	69fb      	ldr	r3, [r7, #28]
 80061f6:	9300      	str	r3, [sp, #0]
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80061fc:	68f8      	ldr	r0, [r7, #12]
 80061fe:	f001 fb4f 	bl	80078a0 <xTaskCreate>
 8006202:	4603      	mov	r3, r0
 8006204:	2b01      	cmp	r3, #1
 8006206:	d001      	beq.n	800620c <osThreadNew+0x11a>
            hTask = NULL;
 8006208:	2300      	movs	r3, #0
 800620a:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800620c:	693b      	ldr	r3, [r7, #16]
}
 800620e:	4618      	mov	r0, r3
 8006210:	3728      	adds	r7, #40	@ 0x28
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}

08006216 <osDelayUntil>:
  }

  return (stat);
}

osStatus_t osDelayUntil (uint32_t ticks) {
 8006216:	b580      	push	{r7, lr}
 8006218:	b086      	sub	sp, #24
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800621e:	f3ef 8305 	mrs	r3, IPSR
 8006222:	60fb      	str	r3, [r7, #12]
  return(result);
 8006224:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8006226:	2b00      	cmp	r3, #0
 8006228:	d003      	beq.n	8006232 <osDelayUntil+0x1c>
    stat = osErrorISR;
 800622a:	f06f 0305 	mvn.w	r3, #5
 800622e:	617b      	str	r3, [r7, #20]
 8006230:	e019      	b.n	8006266 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 8006232:	2300      	movs	r3, #0
 8006234:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 8006236:	f001 fe2d 	bl	8007e94 <xTaskGetTickCount>
 800623a:	4603      	mov	r3, r0
 800623c:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	1ad3      	subs	r3, r2, r3
 8006244:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d009      	beq.n	8006260 <osDelayUntil+0x4a>
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	2b00      	cmp	r3, #0
 8006250:	db06      	blt.n	8006260 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 8006252:	f107 0308 	add.w	r3, r7, #8
 8006256:	6939      	ldr	r1, [r7, #16]
 8006258:	4618      	mov	r0, r3
 800625a:	f001 fc7f 	bl	8007b5c <vTaskDelayUntil>
 800625e:	e002      	b.n	8006266 <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8006260:	f06f 0303 	mvn.w	r3, #3
 8006264:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8006266:	697b      	ldr	r3, [r7, #20]
}
 8006268:	4618      	mov	r0, r3
 800626a:	3718      	adds	r7, #24
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006270:	b580      	push	{r7, lr}
 8006272:	b088      	sub	sp, #32
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8006278:	2300      	movs	r3, #0
 800627a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800627c:	f3ef 8305 	mrs	r3, IPSR
 8006280:	60bb      	str	r3, [r7, #8]
  return(result);
 8006282:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8006284:	2b00      	cmp	r3, #0
 8006286:	d174      	bne.n	8006372 <osMutexNew+0x102>
    if (attr != NULL) {
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d003      	beq.n	8006296 <osMutexNew+0x26>
      type = attr->attr_bits;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	61bb      	str	r3, [r7, #24]
 8006294:	e001      	b.n	800629a <osMutexNew+0x2a>
    } else {
      type = 0U;
 8006296:	2300      	movs	r3, #0
 8006298:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800629a:	69bb      	ldr	r3, [r7, #24]
 800629c:	f003 0301 	and.w	r3, r3, #1
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d002      	beq.n	80062aa <osMutexNew+0x3a>
      rmtx = 1U;
 80062a4:	2301      	movs	r3, #1
 80062a6:	617b      	str	r3, [r7, #20]
 80062a8:	e001      	b.n	80062ae <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80062aa:	2300      	movs	r3, #0
 80062ac:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80062ae:	69bb      	ldr	r3, [r7, #24]
 80062b0:	f003 0308 	and.w	r3, r3, #8
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d15c      	bne.n	8006372 <osMutexNew+0x102>
      mem = -1;
 80062b8:	f04f 33ff 	mov.w	r3, #4294967295
 80062bc:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d015      	beq.n	80062f0 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d006      	beq.n	80062da <osMutexNew+0x6a>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	2b4f      	cmp	r3, #79	@ 0x4f
 80062d2:	d902      	bls.n	80062da <osMutexNew+0x6a>
          mem = 1;
 80062d4:	2301      	movs	r3, #1
 80062d6:	613b      	str	r3, [r7, #16]
 80062d8:	e00c      	b.n	80062f4 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d108      	bne.n	80062f4 <osMutexNew+0x84>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	68db      	ldr	r3, [r3, #12]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d104      	bne.n	80062f4 <osMutexNew+0x84>
            mem = 0;
 80062ea:	2300      	movs	r3, #0
 80062ec:	613b      	str	r3, [r7, #16]
 80062ee:	e001      	b.n	80062f4 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80062f0:	2300      	movs	r3, #0
 80062f2:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d112      	bne.n	8006320 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d007      	beq.n	8006310 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	4619      	mov	r1, r3
 8006306:	2004      	movs	r0, #4
 8006308:	f000 fc4b 	bl	8006ba2 <xQueueCreateMutexStatic>
 800630c:	61f8      	str	r0, [r7, #28]
 800630e:	e016      	b.n	800633e <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	4619      	mov	r1, r3
 8006316:	2001      	movs	r0, #1
 8006318:	f000 fc43 	bl	8006ba2 <xQueueCreateMutexStatic>
 800631c:	61f8      	str	r0, [r7, #28]
 800631e:	e00e      	b.n	800633e <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d10b      	bne.n	800633e <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d004      	beq.n	8006336 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800632c:	2004      	movs	r0, #4
 800632e:	f000 fc20 	bl	8006b72 <xQueueCreateMutex>
 8006332:	61f8      	str	r0, [r7, #28]
 8006334:	e003      	b.n	800633e <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8006336:	2001      	movs	r0, #1
 8006338:	f000 fc1b 	bl	8006b72 <xQueueCreateMutex>
 800633c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d00c      	beq.n	800635e <osMutexNew+0xee>
        if (attr != NULL) {
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d003      	beq.n	8006352 <osMutexNew+0xe2>
          name = attr->name;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	60fb      	str	r3, [r7, #12]
 8006350:	e001      	b.n	8006356 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8006352:	2300      	movs	r3, #0
 8006354:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8006356:	68f9      	ldr	r1, [r7, #12]
 8006358:	69f8      	ldr	r0, [r7, #28]
 800635a:	f001 f9e5 	bl	8007728 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800635e:	69fb      	ldr	r3, [r7, #28]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d006      	beq.n	8006372 <osMutexNew+0x102>
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d003      	beq.n	8006372 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	f043 0301 	orr.w	r3, r3, #1
 8006370:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8006372:	69fb      	ldr	r3, [r7, #28]
}
 8006374:	4618      	mov	r0, r3
 8006376:	3720      	adds	r7, #32
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}

0800637c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800637c:	b580      	push	{r7, lr}
 800637e:	b086      	sub	sp, #24
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f023 0301 	bic.w	r3, r3, #1
 800638c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f003 0301 	and.w	r3, r3, #1
 8006394:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8006396:	2300      	movs	r3, #0
 8006398:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800639a:	f3ef 8305 	mrs	r3, IPSR
 800639e:	60bb      	str	r3, [r7, #8]
  return(result);
 80063a0:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d003      	beq.n	80063ae <osMutexAcquire+0x32>
    stat = osErrorISR;
 80063a6:	f06f 0305 	mvn.w	r3, #5
 80063aa:	617b      	str	r3, [r7, #20]
 80063ac:	e02c      	b.n	8006408 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d103      	bne.n	80063bc <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80063b4:	f06f 0303 	mvn.w	r3, #3
 80063b8:	617b      	str	r3, [r7, #20]
 80063ba:	e025      	b.n	8006408 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d011      	beq.n	80063e6 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80063c2:	6839      	ldr	r1, [r7, #0]
 80063c4:	6938      	ldr	r0, [r7, #16]
 80063c6:	f000 fc3c 	bl	8006c42 <xQueueTakeMutexRecursive>
 80063ca:	4603      	mov	r3, r0
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d01b      	beq.n	8006408 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d003      	beq.n	80063de <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80063d6:	f06f 0301 	mvn.w	r3, #1
 80063da:	617b      	str	r3, [r7, #20]
 80063dc:	e014      	b.n	8006408 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80063de:	f06f 0302 	mvn.w	r3, #2
 80063e2:	617b      	str	r3, [r7, #20]
 80063e4:	e010      	b.n	8006408 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80063e6:	6839      	ldr	r1, [r7, #0]
 80063e8:	6938      	ldr	r0, [r7, #16]
 80063ea:	f000 fee3 	bl	80071b4 <xQueueSemaphoreTake>
 80063ee:	4603      	mov	r3, r0
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d009      	beq.n	8006408 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d003      	beq.n	8006402 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80063fa:	f06f 0301 	mvn.w	r3, #1
 80063fe:	617b      	str	r3, [r7, #20]
 8006400:	e002      	b.n	8006408 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006402:	f06f 0302 	mvn.w	r3, #2
 8006406:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8006408:	697b      	ldr	r3, [r7, #20]
}
 800640a:	4618      	mov	r0, r3
 800640c:	3718      	adds	r7, #24
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}

08006412 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006412:	b580      	push	{r7, lr}
 8006414:	b086      	sub	sp, #24
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f023 0301 	bic.w	r3, r3, #1
 8006420:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f003 0301 	and.w	r3, r3, #1
 8006428:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800642a:	2300      	movs	r3, #0
 800642c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800642e:	f3ef 8305 	mrs	r3, IPSR
 8006432:	60bb      	str	r3, [r7, #8]
  return(result);
 8006434:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8006436:	2b00      	cmp	r3, #0
 8006438:	d003      	beq.n	8006442 <osMutexRelease+0x30>
    stat = osErrorISR;
 800643a:	f06f 0305 	mvn.w	r3, #5
 800643e:	617b      	str	r3, [r7, #20]
 8006440:	e01f      	b.n	8006482 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d103      	bne.n	8006450 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8006448:	f06f 0303 	mvn.w	r3, #3
 800644c:	617b      	str	r3, [r7, #20]
 800644e:	e018      	b.n	8006482 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d009      	beq.n	800646a <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8006456:	6938      	ldr	r0, [r7, #16]
 8006458:	f000 fbbe 	bl	8006bd8 <xQueueGiveMutexRecursive>
 800645c:	4603      	mov	r3, r0
 800645e:	2b01      	cmp	r3, #1
 8006460:	d00f      	beq.n	8006482 <osMutexRelease+0x70>
        stat = osErrorResource;
 8006462:	f06f 0302 	mvn.w	r3, #2
 8006466:	617b      	str	r3, [r7, #20]
 8006468:	e00b      	b.n	8006482 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800646a:	2300      	movs	r3, #0
 800646c:	2200      	movs	r2, #0
 800646e:	2100      	movs	r1, #0
 8006470:	6938      	ldr	r0, [r7, #16]
 8006472:	f000 fc1d 	bl	8006cb0 <xQueueGenericSend>
 8006476:	4603      	mov	r3, r0
 8006478:	2b01      	cmp	r3, #1
 800647a:	d002      	beq.n	8006482 <osMutexRelease+0x70>
        stat = osErrorResource;
 800647c:	f06f 0302 	mvn.w	r3, #2
 8006480:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006482:	697b      	ldr	r3, [r7, #20]
}
 8006484:	4618      	mov	r0, r3
 8006486:	3718      	adds	r7, #24
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}

0800648c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800648c:	b580      	push	{r7, lr}
 800648e:	b08a      	sub	sp, #40	@ 0x28
 8006490:	af02      	add	r7, sp, #8
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006498:	2300      	movs	r3, #0
 800649a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800649c:	f3ef 8305 	mrs	r3, IPSR
 80064a0:	613b      	str	r3, [r7, #16]
  return(result);
 80064a2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d15f      	bne.n	8006568 <osMessageQueueNew+0xdc>
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d05c      	beq.n	8006568 <osMessageQueueNew+0xdc>
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d059      	beq.n	8006568 <osMessageQueueNew+0xdc>
    mem = -1;
 80064b4:	f04f 33ff 	mov.w	r3, #4294967295
 80064b8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d029      	beq.n	8006514 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d012      	beq.n	80064ee <osMessageQueueNew+0x62>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	2b4f      	cmp	r3, #79	@ 0x4f
 80064ce:	d90e      	bls.n	80064ee <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d00a      	beq.n	80064ee <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	695a      	ldr	r2, [r3, #20]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	68b9      	ldr	r1, [r7, #8]
 80064e0:	fb01 f303 	mul.w	r3, r1, r3
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d302      	bcc.n	80064ee <osMessageQueueNew+0x62>
        mem = 1;
 80064e8:	2301      	movs	r3, #1
 80064ea:	61bb      	str	r3, [r7, #24]
 80064ec:	e014      	b.n	8006518 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d110      	bne.n	8006518 <osMessageQueueNew+0x8c>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	68db      	ldr	r3, [r3, #12]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d10c      	bne.n	8006518 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006502:	2b00      	cmp	r3, #0
 8006504:	d108      	bne.n	8006518 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	695b      	ldr	r3, [r3, #20]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d104      	bne.n	8006518 <osMessageQueueNew+0x8c>
          mem = 0;
 800650e:	2300      	movs	r3, #0
 8006510:	61bb      	str	r3, [r7, #24]
 8006512:	e001      	b.n	8006518 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8006514:	2300      	movs	r3, #0
 8006516:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006518:	69bb      	ldr	r3, [r7, #24]
 800651a:	2b01      	cmp	r3, #1
 800651c:	d10b      	bne.n	8006536 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	691a      	ldr	r2, [r3, #16]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	2100      	movs	r1, #0
 8006528:	9100      	str	r1, [sp, #0]
 800652a:	68b9      	ldr	r1, [r7, #8]
 800652c:	68f8      	ldr	r0, [r7, #12]
 800652e:	f000 fa2b 	bl	8006988 <xQueueGenericCreateStatic>
 8006532:	61f8      	str	r0, [r7, #28]
 8006534:	e008      	b.n	8006548 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8006536:	69bb      	ldr	r3, [r7, #24]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d105      	bne.n	8006548 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800653c:	2200      	movs	r2, #0
 800653e:	68b9      	ldr	r1, [r7, #8]
 8006540:	68f8      	ldr	r0, [r7, #12]
 8006542:	f000 fa9e 	bl	8006a82 <xQueueGenericCreate>
 8006546:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006548:	69fb      	ldr	r3, [r7, #28]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d00c      	beq.n	8006568 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d003      	beq.n	800655c <osMessageQueueNew+0xd0>
        name = attr->name;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	617b      	str	r3, [r7, #20]
 800655a:	e001      	b.n	8006560 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800655c:	2300      	movs	r3, #0
 800655e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8006560:	6979      	ldr	r1, [r7, #20]
 8006562:	69f8      	ldr	r0, [r7, #28]
 8006564:	f001 f8e0 	bl	8007728 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006568:	69fb      	ldr	r3, [r7, #28]
}
 800656a:	4618      	mov	r0, r3
 800656c:	3720      	adds	r7, #32
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
	...

08006574 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006574:	b580      	push	{r7, lr}
 8006576:	b088      	sub	sp, #32
 8006578:	af00      	add	r7, sp, #0
 800657a:	60f8      	str	r0, [r7, #12]
 800657c:	60b9      	str	r1, [r7, #8]
 800657e:	603b      	str	r3, [r7, #0]
 8006580:	4613      	mov	r3, r2
 8006582:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006588:	2300      	movs	r3, #0
 800658a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800658c:	f3ef 8305 	mrs	r3, IPSR
 8006590:	617b      	str	r3, [r7, #20]
  return(result);
 8006592:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006594:	2b00      	cmp	r3, #0
 8006596:	d028      	beq.n	80065ea <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006598:	69bb      	ldr	r3, [r7, #24]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d005      	beq.n	80065aa <osMessageQueuePut+0x36>
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d002      	beq.n	80065aa <osMessageQueuePut+0x36>
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d003      	beq.n	80065b2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80065aa:	f06f 0303 	mvn.w	r3, #3
 80065ae:	61fb      	str	r3, [r7, #28]
 80065b0:	e038      	b.n	8006624 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80065b2:	2300      	movs	r3, #0
 80065b4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80065b6:	f107 0210 	add.w	r2, r7, #16
 80065ba:	2300      	movs	r3, #0
 80065bc:	68b9      	ldr	r1, [r7, #8]
 80065be:	69b8      	ldr	r0, [r7, #24]
 80065c0:	f000 fc78 	bl	8006eb4 <xQueueGenericSendFromISR>
 80065c4:	4603      	mov	r3, r0
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d003      	beq.n	80065d2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80065ca:	f06f 0302 	mvn.w	r3, #2
 80065ce:	61fb      	str	r3, [r7, #28]
 80065d0:	e028      	b.n	8006624 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d025      	beq.n	8006624 <osMessageQueuePut+0xb0>
 80065d8:	4b15      	ldr	r3, [pc, #84]	@ (8006630 <osMessageQueuePut+0xbc>)
 80065da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065de:	601a      	str	r2, [r3, #0]
 80065e0:	f3bf 8f4f 	dsb	sy
 80065e4:	f3bf 8f6f 	isb	sy
 80065e8:	e01c      	b.n	8006624 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80065ea:	69bb      	ldr	r3, [r7, #24]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d002      	beq.n	80065f6 <osMessageQueuePut+0x82>
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d103      	bne.n	80065fe <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80065f6:	f06f 0303 	mvn.w	r3, #3
 80065fa:	61fb      	str	r3, [r7, #28]
 80065fc:	e012      	b.n	8006624 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80065fe:	2300      	movs	r3, #0
 8006600:	683a      	ldr	r2, [r7, #0]
 8006602:	68b9      	ldr	r1, [r7, #8]
 8006604:	69b8      	ldr	r0, [r7, #24]
 8006606:	f000 fb53 	bl	8006cb0 <xQueueGenericSend>
 800660a:	4603      	mov	r3, r0
 800660c:	2b01      	cmp	r3, #1
 800660e:	d009      	beq.n	8006624 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d003      	beq.n	800661e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8006616:	f06f 0301 	mvn.w	r3, #1
 800661a:	61fb      	str	r3, [r7, #28]
 800661c:	e002      	b.n	8006624 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800661e:	f06f 0302 	mvn.w	r3, #2
 8006622:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006624:	69fb      	ldr	r3, [r7, #28]
}
 8006626:	4618      	mov	r0, r3
 8006628:	3720      	adds	r7, #32
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}
 800662e:	bf00      	nop
 8006630:	e000ed04 	.word	0xe000ed04

08006634 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006634:	b580      	push	{r7, lr}
 8006636:	b088      	sub	sp, #32
 8006638:	af00      	add	r7, sp, #0
 800663a:	60f8      	str	r0, [r7, #12]
 800663c:	60b9      	str	r1, [r7, #8]
 800663e:	607a      	str	r2, [r7, #4]
 8006640:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006646:	2300      	movs	r3, #0
 8006648:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800664a:	f3ef 8305 	mrs	r3, IPSR
 800664e:	617b      	str	r3, [r7, #20]
  return(result);
 8006650:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006652:	2b00      	cmp	r3, #0
 8006654:	d028      	beq.n	80066a8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006656:	69bb      	ldr	r3, [r7, #24]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d005      	beq.n	8006668 <osMessageQueueGet+0x34>
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d002      	beq.n	8006668 <osMessageQueueGet+0x34>
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d003      	beq.n	8006670 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8006668:	f06f 0303 	mvn.w	r3, #3
 800666c:	61fb      	str	r3, [r7, #28]
 800666e:	e037      	b.n	80066e0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8006670:	2300      	movs	r3, #0
 8006672:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006674:	f107 0310 	add.w	r3, r7, #16
 8006678:	461a      	mov	r2, r3
 800667a:	68b9      	ldr	r1, [r7, #8]
 800667c:	69b8      	ldr	r0, [r7, #24]
 800667e:	f000 fea9 	bl	80073d4 <xQueueReceiveFromISR>
 8006682:	4603      	mov	r3, r0
 8006684:	2b01      	cmp	r3, #1
 8006686:	d003      	beq.n	8006690 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8006688:	f06f 0302 	mvn.w	r3, #2
 800668c:	61fb      	str	r3, [r7, #28]
 800668e:	e027      	b.n	80066e0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d024      	beq.n	80066e0 <osMessageQueueGet+0xac>
 8006696:	4b15      	ldr	r3, [pc, #84]	@ (80066ec <osMessageQueueGet+0xb8>)
 8006698:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800669c:	601a      	str	r2, [r3, #0]
 800669e:	f3bf 8f4f 	dsb	sy
 80066a2:	f3bf 8f6f 	isb	sy
 80066a6:	e01b      	b.n	80066e0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80066a8:	69bb      	ldr	r3, [r7, #24]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d002      	beq.n	80066b4 <osMessageQueueGet+0x80>
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d103      	bne.n	80066bc <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80066b4:	f06f 0303 	mvn.w	r3, #3
 80066b8:	61fb      	str	r3, [r7, #28]
 80066ba:	e011      	b.n	80066e0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80066bc:	683a      	ldr	r2, [r7, #0]
 80066be:	68b9      	ldr	r1, [r7, #8]
 80066c0:	69b8      	ldr	r0, [r7, #24]
 80066c2:	f000 fc95 	bl	8006ff0 <xQueueReceive>
 80066c6:	4603      	mov	r3, r0
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d009      	beq.n	80066e0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d003      	beq.n	80066da <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80066d2:	f06f 0301 	mvn.w	r3, #1
 80066d6:	61fb      	str	r3, [r7, #28]
 80066d8:	e002      	b.n	80066e0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80066da:	f06f 0302 	mvn.w	r3, #2
 80066de:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80066e0:	69fb      	ldr	r3, [r7, #28]
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3720      	adds	r7, #32
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}
 80066ea:	bf00      	nop
 80066ec:	e000ed04 	.word	0xe000ed04

080066f0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80066f0:	b480      	push	{r7}
 80066f2:	b085      	sub	sp, #20
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	60f8      	str	r0, [r7, #12]
 80066f8:	60b9      	str	r1, [r7, #8]
 80066fa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	4a06      	ldr	r2, [pc, #24]	@ (8006718 <vApplicationGetIdleTaskMemory+0x28>)
 8006700:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	4a05      	ldr	r2, [pc, #20]	@ (800671c <vApplicationGetIdleTaskMemory+0x2c>)
 8006706:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2280      	movs	r2, #128	@ 0x80
 800670c:	601a      	str	r2, [r3, #0]
}
 800670e:	bf00      	nop
 8006710:	3714      	adds	r7, #20
 8006712:	46bd      	mov	sp, r7
 8006714:	bc80      	pop	{r7}
 8006716:	4770      	bx	lr
 8006718:	200003a0 	.word	0x200003a0
 800671c:	20000448 	.word	0x20000448

08006720 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006720:	b480      	push	{r7}
 8006722:	b085      	sub	sp, #20
 8006724:	af00      	add	r7, sp, #0
 8006726:	60f8      	str	r0, [r7, #12]
 8006728:	60b9      	str	r1, [r7, #8]
 800672a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	4a07      	ldr	r2, [pc, #28]	@ (800674c <vApplicationGetTimerTaskMemory+0x2c>)
 8006730:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	4a06      	ldr	r2, [pc, #24]	@ (8006750 <vApplicationGetTimerTaskMemory+0x30>)
 8006736:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800673e:	601a      	str	r2, [r3, #0]
}
 8006740:	bf00      	nop
 8006742:	3714      	adds	r7, #20
 8006744:	46bd      	mov	sp, r7
 8006746:	bc80      	pop	{r7}
 8006748:	4770      	bx	lr
 800674a:	bf00      	nop
 800674c:	20000648 	.word	0x20000648
 8006750:	200006f0 	.word	0x200006f0

08006754 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f103 0208 	add.w	r2, r3, #8
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f04f 32ff 	mov.w	r2, #4294967295
 800676c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f103 0208 	add.w	r2, r3, #8
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f103 0208 	add.w	r2, r3, #8
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006788:	bf00      	nop
 800678a:	370c      	adds	r7, #12
 800678c:	46bd      	mov	sp, r7
 800678e:	bc80      	pop	{r7}
 8006790:	4770      	bx	lr

08006792 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006792:	b480      	push	{r7}
 8006794:	b083      	sub	sp, #12
 8006796:	af00      	add	r7, sp, #0
 8006798:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2200      	movs	r2, #0
 800679e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80067a0:	bf00      	nop
 80067a2:	370c      	adds	r7, #12
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bc80      	pop	{r7}
 80067a8:	4770      	bx	lr

080067aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80067aa:	b480      	push	{r7}
 80067ac:	b085      	sub	sp, #20
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	6078      	str	r0, [r7, #4]
 80067b2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	68fa      	ldr	r2, [r7, #12]
 80067be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	689a      	ldr	r2, [r3, #8]
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	683a      	ldr	r2, [r7, #0]
 80067ce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	683a      	ldr	r2, [r7, #0]
 80067d4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	1c5a      	adds	r2, r3, #1
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	601a      	str	r2, [r3, #0]
}
 80067e6:	bf00      	nop
 80067e8:	3714      	adds	r7, #20
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bc80      	pop	{r7}
 80067ee:	4770      	bx	lr

080067f0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80067f0:	b480      	push	{r7}
 80067f2:	b085      	sub	sp, #20
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006806:	d103      	bne.n	8006810 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	691b      	ldr	r3, [r3, #16]
 800680c:	60fb      	str	r3, [r7, #12]
 800680e:	e00c      	b.n	800682a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	3308      	adds	r3, #8
 8006814:	60fb      	str	r3, [r7, #12]
 8006816:	e002      	b.n	800681e <vListInsert+0x2e>
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	60fb      	str	r3, [r7, #12]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	68ba      	ldr	r2, [r7, #8]
 8006826:	429a      	cmp	r2, r3
 8006828:	d2f6      	bcs.n	8006818 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	685a      	ldr	r2, [r3, #4]
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	683a      	ldr	r2, [r7, #0]
 8006838:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	68fa      	ldr	r2, [r7, #12]
 800683e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	683a      	ldr	r2, [r7, #0]
 8006844:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	1c5a      	adds	r2, r3, #1
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	601a      	str	r2, [r3, #0]
}
 8006856:	bf00      	nop
 8006858:	3714      	adds	r7, #20
 800685a:	46bd      	mov	sp, r7
 800685c:	bc80      	pop	{r7}
 800685e:	4770      	bx	lr

08006860 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006860:	b480      	push	{r7}
 8006862:	b085      	sub	sp, #20
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	691b      	ldr	r3, [r3, #16]
 800686c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	687a      	ldr	r2, [r7, #4]
 8006874:	6892      	ldr	r2, [r2, #8]
 8006876:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	6852      	ldr	r2, [r2, #4]
 8006880:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	429a      	cmp	r2, r3
 800688a:	d103      	bne.n	8006894 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	689a      	ldr	r2, [r3, #8]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	1e5a      	subs	r2, r3, #1
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3714      	adds	r7, #20
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bc80      	pop	{r7}
 80068b0:	4770      	bx	lr
	...

080068b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d10b      	bne.n	80068e0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80068c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068cc:	f383 8811 	msr	BASEPRI, r3
 80068d0:	f3bf 8f6f 	isb	sy
 80068d4:	f3bf 8f4f 	dsb	sy
 80068d8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80068da:	bf00      	nop
 80068dc:	bf00      	nop
 80068de:	e7fd      	b.n	80068dc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80068e0:	f002 fc64 	bl	80091ac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068ec:	68f9      	ldr	r1, [r7, #12]
 80068ee:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80068f0:	fb01 f303 	mul.w	r3, r1, r3
 80068f4:	441a      	add	r2, r3
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2200      	movs	r2, #0
 80068fe:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006910:	3b01      	subs	r3, #1
 8006912:	68f9      	ldr	r1, [r7, #12]
 8006914:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006916:	fb01 f303 	mul.w	r3, r1, r3
 800691a:	441a      	add	r2, r3
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	22ff      	movs	r2, #255	@ 0xff
 8006924:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	22ff      	movs	r2, #255	@ 0xff
 800692c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d114      	bne.n	8006960 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	691b      	ldr	r3, [r3, #16]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d01a      	beq.n	8006974 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	3310      	adds	r3, #16
 8006942:	4618      	mov	r0, r3
 8006944:	f001 fc36 	bl	80081b4 <xTaskRemoveFromEventList>
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d012      	beq.n	8006974 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800694e:	4b0d      	ldr	r3, [pc, #52]	@ (8006984 <xQueueGenericReset+0xd0>)
 8006950:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006954:	601a      	str	r2, [r3, #0]
 8006956:	f3bf 8f4f 	dsb	sy
 800695a:	f3bf 8f6f 	isb	sy
 800695e:	e009      	b.n	8006974 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	3310      	adds	r3, #16
 8006964:	4618      	mov	r0, r3
 8006966:	f7ff fef5 	bl	8006754 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	3324      	adds	r3, #36	@ 0x24
 800696e:	4618      	mov	r0, r3
 8006970:	f7ff fef0 	bl	8006754 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006974:	f002 fc4a 	bl	800920c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006978:	2301      	movs	r3, #1
}
 800697a:	4618      	mov	r0, r3
 800697c:	3710      	adds	r7, #16
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	e000ed04 	.word	0xe000ed04

08006988 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006988:	b580      	push	{r7, lr}
 800698a:	b08e      	sub	sp, #56	@ 0x38
 800698c:	af02      	add	r7, sp, #8
 800698e:	60f8      	str	r0, [r7, #12]
 8006990:	60b9      	str	r1, [r7, #8]
 8006992:	607a      	str	r2, [r7, #4]
 8006994:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d10b      	bne.n	80069b4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800699c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069a0:	f383 8811 	msr	BASEPRI, r3
 80069a4:	f3bf 8f6f 	isb	sy
 80069a8:	f3bf 8f4f 	dsb	sy
 80069ac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80069ae:	bf00      	nop
 80069b0:	bf00      	nop
 80069b2:	e7fd      	b.n	80069b0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d10b      	bne.n	80069d2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80069ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069be:	f383 8811 	msr	BASEPRI, r3
 80069c2:	f3bf 8f6f 	isb	sy
 80069c6:	f3bf 8f4f 	dsb	sy
 80069ca:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80069cc:	bf00      	nop
 80069ce:	bf00      	nop
 80069d0:	e7fd      	b.n	80069ce <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d002      	beq.n	80069de <xQueueGenericCreateStatic+0x56>
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d001      	beq.n	80069e2 <xQueueGenericCreateStatic+0x5a>
 80069de:	2301      	movs	r3, #1
 80069e0:	e000      	b.n	80069e4 <xQueueGenericCreateStatic+0x5c>
 80069e2:	2300      	movs	r3, #0
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d10b      	bne.n	8006a00 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80069e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069ec:	f383 8811 	msr	BASEPRI, r3
 80069f0:	f3bf 8f6f 	isb	sy
 80069f4:	f3bf 8f4f 	dsb	sy
 80069f8:	623b      	str	r3, [r7, #32]
}
 80069fa:	bf00      	nop
 80069fc:	bf00      	nop
 80069fe:	e7fd      	b.n	80069fc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d102      	bne.n	8006a0c <xQueueGenericCreateStatic+0x84>
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d101      	bne.n	8006a10 <xQueueGenericCreateStatic+0x88>
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e000      	b.n	8006a12 <xQueueGenericCreateStatic+0x8a>
 8006a10:	2300      	movs	r3, #0
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d10b      	bne.n	8006a2e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a1a:	f383 8811 	msr	BASEPRI, r3
 8006a1e:	f3bf 8f6f 	isb	sy
 8006a22:	f3bf 8f4f 	dsb	sy
 8006a26:	61fb      	str	r3, [r7, #28]
}
 8006a28:	bf00      	nop
 8006a2a:	bf00      	nop
 8006a2c:	e7fd      	b.n	8006a2a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006a2e:	2350      	movs	r3, #80	@ 0x50
 8006a30:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	2b50      	cmp	r3, #80	@ 0x50
 8006a36:	d00b      	beq.n	8006a50 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006a38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a3c:	f383 8811 	msr	BASEPRI, r3
 8006a40:	f3bf 8f6f 	isb	sy
 8006a44:	f3bf 8f4f 	dsb	sy
 8006a48:	61bb      	str	r3, [r7, #24]
}
 8006a4a:	bf00      	nop
 8006a4c:	bf00      	nop
 8006a4e:	e7fd      	b.n	8006a4c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006a50:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006a56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d00d      	beq.n	8006a78 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006a5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a5e:	2201      	movs	r2, #1
 8006a60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006a64:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006a68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a6a:	9300      	str	r3, [sp, #0]
 8006a6c:	4613      	mov	r3, r2
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	68b9      	ldr	r1, [r7, #8]
 8006a72:	68f8      	ldr	r0, [r7, #12]
 8006a74:	f000 f840 	bl	8006af8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006a78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3730      	adds	r7, #48	@ 0x30
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}

08006a82 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006a82:	b580      	push	{r7, lr}
 8006a84:	b08a      	sub	sp, #40	@ 0x28
 8006a86:	af02      	add	r7, sp, #8
 8006a88:	60f8      	str	r0, [r7, #12]
 8006a8a:	60b9      	str	r1, [r7, #8]
 8006a8c:	4613      	mov	r3, r2
 8006a8e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d10b      	bne.n	8006aae <xQueueGenericCreate+0x2c>
	__asm volatile
 8006a96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a9a:	f383 8811 	msr	BASEPRI, r3
 8006a9e:	f3bf 8f6f 	isb	sy
 8006aa2:	f3bf 8f4f 	dsb	sy
 8006aa6:	613b      	str	r3, [r7, #16]
}
 8006aa8:	bf00      	nop
 8006aaa:	bf00      	nop
 8006aac:	e7fd      	b.n	8006aaa <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	68ba      	ldr	r2, [r7, #8]
 8006ab2:	fb02 f303 	mul.w	r3, r2, r3
 8006ab6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	3350      	adds	r3, #80	@ 0x50
 8006abc:	4618      	mov	r0, r3
 8006abe:	f002 fc77 	bl	80093b0 <pvPortMalloc>
 8006ac2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006ac4:	69bb      	ldr	r3, [r7, #24]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d011      	beq.n	8006aee <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006aca:	69bb      	ldr	r3, [r7, #24]
 8006acc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	3350      	adds	r3, #80	@ 0x50
 8006ad2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006ad4:	69bb      	ldr	r3, [r7, #24]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006adc:	79fa      	ldrb	r2, [r7, #7]
 8006ade:	69bb      	ldr	r3, [r7, #24]
 8006ae0:	9300      	str	r3, [sp, #0]
 8006ae2:	4613      	mov	r3, r2
 8006ae4:	697a      	ldr	r2, [r7, #20]
 8006ae6:	68b9      	ldr	r1, [r7, #8]
 8006ae8:	68f8      	ldr	r0, [r7, #12]
 8006aea:	f000 f805 	bl	8006af8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006aee:	69bb      	ldr	r3, [r7, #24]
	}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3720      	adds	r7, #32
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b084      	sub	sp, #16
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	60f8      	str	r0, [r7, #12]
 8006b00:	60b9      	str	r1, [r7, #8]
 8006b02:	607a      	str	r2, [r7, #4]
 8006b04:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d103      	bne.n	8006b14 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006b0c:	69bb      	ldr	r3, [r7, #24]
 8006b0e:	69ba      	ldr	r2, [r7, #24]
 8006b10:	601a      	str	r2, [r3, #0]
 8006b12:	e002      	b.n	8006b1a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006b14:	69bb      	ldr	r3, [r7, #24]
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006b1a:	69bb      	ldr	r3, [r7, #24]
 8006b1c:	68fa      	ldr	r2, [r7, #12]
 8006b1e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006b20:	69bb      	ldr	r3, [r7, #24]
 8006b22:	68ba      	ldr	r2, [r7, #8]
 8006b24:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006b26:	2101      	movs	r1, #1
 8006b28:	69b8      	ldr	r0, [r7, #24]
 8006b2a:	f7ff fec3 	bl	80068b4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006b2e:	69bb      	ldr	r3, [r7, #24]
 8006b30:	78fa      	ldrb	r2, [r7, #3]
 8006b32:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006b36:	bf00      	nop
 8006b38:	3710      	adds	r7, #16
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006b3e:	b580      	push	{r7, lr}
 8006b40:	b082      	sub	sp, #8
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00e      	beq.n	8006b6a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2200      	movs	r2, #0
 8006b56:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006b5e:	2300      	movs	r3, #0
 8006b60:	2200      	movs	r2, #0
 8006b62:	2100      	movs	r1, #0
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 f8a3 	bl	8006cb0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006b6a:	bf00      	nop
 8006b6c:	3708      	adds	r7, #8
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}

08006b72 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006b72:	b580      	push	{r7, lr}
 8006b74:	b086      	sub	sp, #24
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	4603      	mov	r3, r0
 8006b7a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	617b      	str	r3, [r7, #20]
 8006b80:	2300      	movs	r3, #0
 8006b82:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006b84:	79fb      	ldrb	r3, [r7, #7]
 8006b86:	461a      	mov	r2, r3
 8006b88:	6939      	ldr	r1, [r7, #16]
 8006b8a:	6978      	ldr	r0, [r7, #20]
 8006b8c:	f7ff ff79 	bl	8006a82 <xQueueGenericCreate>
 8006b90:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006b92:	68f8      	ldr	r0, [r7, #12]
 8006b94:	f7ff ffd3 	bl	8006b3e <prvInitialiseMutex>

		return xNewQueue;
 8006b98:	68fb      	ldr	r3, [r7, #12]
	}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3718      	adds	r7, #24
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}

08006ba2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006ba2:	b580      	push	{r7, lr}
 8006ba4:	b088      	sub	sp, #32
 8006ba6:	af02      	add	r7, sp, #8
 8006ba8:	4603      	mov	r3, r0
 8006baa:	6039      	str	r1, [r7, #0]
 8006bac:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	617b      	str	r3, [r7, #20]
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006bb6:	79fb      	ldrb	r3, [r7, #7]
 8006bb8:	9300      	str	r3, [sp, #0]
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	6939      	ldr	r1, [r7, #16]
 8006bc0:	6978      	ldr	r0, [r7, #20]
 8006bc2:	f7ff fee1 	bl	8006988 <xQueueGenericCreateStatic>
 8006bc6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006bc8:	68f8      	ldr	r0, [r7, #12]
 8006bca:	f7ff ffb8 	bl	8006b3e <prvInitialiseMutex>

		return xNewQueue;
 8006bce:	68fb      	ldr	r3, [r7, #12]
	}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3718      	adds	r7, #24
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8006bd8:	b590      	push	{r4, r7, lr}
 8006bda:	b087      	sub	sp, #28
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d10b      	bne.n	8006c02 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8006bea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bee:	f383 8811 	msr	BASEPRI, r3
 8006bf2:	f3bf 8f6f 	isb	sy
 8006bf6:	f3bf 8f4f 	dsb	sy
 8006bfa:	60fb      	str	r3, [r7, #12]
}
 8006bfc:	bf00      	nop
 8006bfe:	bf00      	nop
 8006c00:	e7fd      	b.n	8006bfe <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	689c      	ldr	r4, [r3, #8]
 8006c06:	f001 fc9b 	bl	8008540 <xTaskGetCurrentTaskHandle>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	429c      	cmp	r4, r3
 8006c0e:	d111      	bne.n	8006c34 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	68db      	ldr	r3, [r3, #12]
 8006c14:	1e5a      	subs	r2, r3, #1
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	68db      	ldr	r3, [r3, #12]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d105      	bne.n	8006c2e <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8006c22:	2300      	movs	r3, #0
 8006c24:	2200      	movs	r2, #0
 8006c26:	2100      	movs	r1, #0
 8006c28:	6938      	ldr	r0, [r7, #16]
 8006c2a:	f000 f841 	bl	8006cb0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	617b      	str	r3, [r7, #20]
 8006c32:	e001      	b.n	8006c38 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8006c34:	2300      	movs	r3, #0
 8006c36:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8006c38:	697b      	ldr	r3, [r7, #20]
	}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	371c      	adds	r7, #28
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd90      	pop	{r4, r7, pc}

08006c42 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8006c42:	b590      	push	{r4, r7, lr}
 8006c44:	b087      	sub	sp, #28
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]
 8006c4a:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d10b      	bne.n	8006c6e <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8006c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c5a:	f383 8811 	msr	BASEPRI, r3
 8006c5e:	f3bf 8f6f 	isb	sy
 8006c62:	f3bf 8f4f 	dsb	sy
 8006c66:	60fb      	str	r3, [r7, #12]
}
 8006c68:	bf00      	nop
 8006c6a:	bf00      	nop
 8006c6c:	e7fd      	b.n	8006c6a <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	689c      	ldr	r4, [r3, #8]
 8006c72:	f001 fc65 	bl	8008540 <xTaskGetCurrentTaskHandle>
 8006c76:	4603      	mov	r3, r0
 8006c78:	429c      	cmp	r4, r3
 8006c7a:	d107      	bne.n	8006c8c <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	68db      	ldr	r3, [r3, #12]
 8006c80:	1c5a      	adds	r2, r3, #1
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8006c86:	2301      	movs	r3, #1
 8006c88:	617b      	str	r3, [r7, #20]
 8006c8a:	e00c      	b.n	8006ca6 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8006c8c:	6839      	ldr	r1, [r7, #0]
 8006c8e:	6938      	ldr	r0, [r7, #16]
 8006c90:	f000 fa90 	bl	80071b4 <xQueueSemaphoreTake>
 8006c94:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d004      	beq.n	8006ca6 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	68db      	ldr	r3, [r3, #12]
 8006ca0:	1c5a      	adds	r2, r3, #1
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8006ca6:	697b      	ldr	r3, [r7, #20]
	}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	371c      	adds	r7, #28
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd90      	pop	{r4, r7, pc}

08006cb0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b08e      	sub	sp, #56	@ 0x38
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	60f8      	str	r0, [r7, #12]
 8006cb8:	60b9      	str	r1, [r7, #8]
 8006cba:	607a      	str	r2, [r7, #4]
 8006cbc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d10b      	bne.n	8006ce4 <xQueueGenericSend+0x34>
	__asm volatile
 8006ccc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cd0:	f383 8811 	msr	BASEPRI, r3
 8006cd4:	f3bf 8f6f 	isb	sy
 8006cd8:	f3bf 8f4f 	dsb	sy
 8006cdc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006cde:	bf00      	nop
 8006ce0:	bf00      	nop
 8006ce2:	e7fd      	b.n	8006ce0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d103      	bne.n	8006cf2 <xQueueGenericSend+0x42>
 8006cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d101      	bne.n	8006cf6 <xQueueGenericSend+0x46>
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	e000      	b.n	8006cf8 <xQueueGenericSend+0x48>
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d10b      	bne.n	8006d14 <xQueueGenericSend+0x64>
	__asm volatile
 8006cfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d00:	f383 8811 	msr	BASEPRI, r3
 8006d04:	f3bf 8f6f 	isb	sy
 8006d08:	f3bf 8f4f 	dsb	sy
 8006d0c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006d0e:	bf00      	nop
 8006d10:	bf00      	nop
 8006d12:	e7fd      	b.n	8006d10 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	2b02      	cmp	r3, #2
 8006d18:	d103      	bne.n	8006d22 <xQueueGenericSend+0x72>
 8006d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d1e:	2b01      	cmp	r3, #1
 8006d20:	d101      	bne.n	8006d26 <xQueueGenericSend+0x76>
 8006d22:	2301      	movs	r3, #1
 8006d24:	e000      	b.n	8006d28 <xQueueGenericSend+0x78>
 8006d26:	2300      	movs	r3, #0
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d10b      	bne.n	8006d44 <xQueueGenericSend+0x94>
	__asm volatile
 8006d2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d30:	f383 8811 	msr	BASEPRI, r3
 8006d34:	f3bf 8f6f 	isb	sy
 8006d38:	f3bf 8f4f 	dsb	sy
 8006d3c:	623b      	str	r3, [r7, #32]
}
 8006d3e:	bf00      	nop
 8006d40:	bf00      	nop
 8006d42:	e7fd      	b.n	8006d40 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d44:	f001 fc0a 	bl	800855c <xTaskGetSchedulerState>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d102      	bne.n	8006d54 <xQueueGenericSend+0xa4>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d101      	bne.n	8006d58 <xQueueGenericSend+0xa8>
 8006d54:	2301      	movs	r3, #1
 8006d56:	e000      	b.n	8006d5a <xQueueGenericSend+0xaa>
 8006d58:	2300      	movs	r3, #0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d10b      	bne.n	8006d76 <xQueueGenericSend+0xc6>
	__asm volatile
 8006d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d62:	f383 8811 	msr	BASEPRI, r3
 8006d66:	f3bf 8f6f 	isb	sy
 8006d6a:	f3bf 8f4f 	dsb	sy
 8006d6e:	61fb      	str	r3, [r7, #28]
}
 8006d70:	bf00      	nop
 8006d72:	bf00      	nop
 8006d74:	e7fd      	b.n	8006d72 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006d76:	f002 fa19 	bl	80091ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d302      	bcc.n	8006d8c <xQueueGenericSend+0xdc>
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	2b02      	cmp	r3, #2
 8006d8a:	d129      	bne.n	8006de0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006d8c:	683a      	ldr	r2, [r7, #0]
 8006d8e:	68b9      	ldr	r1, [r7, #8]
 8006d90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006d92:	f000 fbb8 	bl	8007506 <prvCopyDataToQueue>
 8006d96:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d010      	beq.n	8006dc2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006da2:	3324      	adds	r3, #36	@ 0x24
 8006da4:	4618      	mov	r0, r3
 8006da6:	f001 fa05 	bl	80081b4 <xTaskRemoveFromEventList>
 8006daa:	4603      	mov	r3, r0
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d013      	beq.n	8006dd8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006db0:	4b3f      	ldr	r3, [pc, #252]	@ (8006eb0 <xQueueGenericSend+0x200>)
 8006db2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006db6:	601a      	str	r2, [r3, #0]
 8006db8:	f3bf 8f4f 	dsb	sy
 8006dbc:	f3bf 8f6f 	isb	sy
 8006dc0:	e00a      	b.n	8006dd8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006dc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d007      	beq.n	8006dd8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006dc8:	4b39      	ldr	r3, [pc, #228]	@ (8006eb0 <xQueueGenericSend+0x200>)
 8006dca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006dce:	601a      	str	r2, [r3, #0]
 8006dd0:	f3bf 8f4f 	dsb	sy
 8006dd4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006dd8:	f002 fa18 	bl	800920c <vPortExitCritical>
				return pdPASS;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	e063      	b.n	8006ea8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d103      	bne.n	8006dee <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006de6:	f002 fa11 	bl	800920c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006dea:	2300      	movs	r3, #0
 8006dec:	e05c      	b.n	8006ea8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006dee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d106      	bne.n	8006e02 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006df4:	f107 0314 	add.w	r3, r7, #20
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f001 fa3f 	bl	800827c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006e02:	f002 fa03 	bl	800920c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006e06:	f000 ff99 	bl	8007d3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e0a:	f002 f9cf 	bl	80091ac <vPortEnterCritical>
 8006e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e10:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006e14:	b25b      	sxtb	r3, r3
 8006e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e1a:	d103      	bne.n	8006e24 <xQueueGenericSend+0x174>
 8006e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e1e:	2200      	movs	r2, #0
 8006e20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e26:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006e2a:	b25b      	sxtb	r3, r3
 8006e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e30:	d103      	bne.n	8006e3a <xQueueGenericSend+0x18a>
 8006e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e34:	2200      	movs	r2, #0
 8006e36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006e3a:	f002 f9e7 	bl	800920c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e3e:	1d3a      	adds	r2, r7, #4
 8006e40:	f107 0314 	add.w	r3, r7, #20
 8006e44:	4611      	mov	r1, r2
 8006e46:	4618      	mov	r0, r3
 8006e48:	f001 fa2e 	bl	80082a8 <xTaskCheckForTimeOut>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d124      	bne.n	8006e9c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006e52:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006e54:	f000 fc4f 	bl	80076f6 <prvIsQueueFull>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d018      	beq.n	8006e90 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e60:	3310      	adds	r3, #16
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	4611      	mov	r1, r2
 8006e66:	4618      	mov	r0, r3
 8006e68:	f001 f952 	bl	8008110 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006e6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006e6e:	f000 fbda 	bl	8007626 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006e72:	f000 ff71 	bl	8007d58 <xTaskResumeAll>
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	f47f af7c 	bne.w	8006d76 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006e7e:	4b0c      	ldr	r3, [pc, #48]	@ (8006eb0 <xQueueGenericSend+0x200>)
 8006e80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e84:	601a      	str	r2, [r3, #0]
 8006e86:	f3bf 8f4f 	dsb	sy
 8006e8a:	f3bf 8f6f 	isb	sy
 8006e8e:	e772      	b.n	8006d76 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006e90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006e92:	f000 fbc8 	bl	8007626 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006e96:	f000 ff5f 	bl	8007d58 <xTaskResumeAll>
 8006e9a:	e76c      	b.n	8006d76 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006e9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006e9e:	f000 fbc2 	bl	8007626 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ea2:	f000 ff59 	bl	8007d58 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006ea6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3738      	adds	r7, #56	@ 0x38
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}
 8006eb0:	e000ed04 	.word	0xe000ed04

08006eb4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b090      	sub	sp, #64	@ 0x40
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	60f8      	str	r0, [r7, #12]
 8006ebc:	60b9      	str	r1, [r7, #8]
 8006ebe:	607a      	str	r2, [r7, #4]
 8006ec0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006ec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d10b      	bne.n	8006ee4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006ecc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ed0:	f383 8811 	msr	BASEPRI, r3
 8006ed4:	f3bf 8f6f 	isb	sy
 8006ed8:	f3bf 8f4f 	dsb	sy
 8006edc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006ede:	bf00      	nop
 8006ee0:	bf00      	nop
 8006ee2:	e7fd      	b.n	8006ee0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d103      	bne.n	8006ef2 <xQueueGenericSendFromISR+0x3e>
 8006eea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d101      	bne.n	8006ef6 <xQueueGenericSendFromISR+0x42>
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	e000      	b.n	8006ef8 <xQueueGenericSendFromISR+0x44>
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d10b      	bne.n	8006f14 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006efc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f00:	f383 8811 	msr	BASEPRI, r3
 8006f04:	f3bf 8f6f 	isb	sy
 8006f08:	f3bf 8f4f 	dsb	sy
 8006f0c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006f0e:	bf00      	nop
 8006f10:	bf00      	nop
 8006f12:	e7fd      	b.n	8006f10 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	2b02      	cmp	r3, #2
 8006f18:	d103      	bne.n	8006f22 <xQueueGenericSendFromISR+0x6e>
 8006f1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d101      	bne.n	8006f26 <xQueueGenericSendFromISR+0x72>
 8006f22:	2301      	movs	r3, #1
 8006f24:	e000      	b.n	8006f28 <xQueueGenericSendFromISR+0x74>
 8006f26:	2300      	movs	r3, #0
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d10b      	bne.n	8006f44 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006f2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f30:	f383 8811 	msr	BASEPRI, r3
 8006f34:	f3bf 8f6f 	isb	sy
 8006f38:	f3bf 8f4f 	dsb	sy
 8006f3c:	623b      	str	r3, [r7, #32]
}
 8006f3e:	bf00      	nop
 8006f40:	bf00      	nop
 8006f42:	e7fd      	b.n	8006f40 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006f44:	f002 f9f4 	bl	8009330 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006f48:	f3ef 8211 	mrs	r2, BASEPRI
 8006f4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f50:	f383 8811 	msr	BASEPRI, r3
 8006f54:	f3bf 8f6f 	isb	sy
 8006f58:	f3bf 8f4f 	dsb	sy
 8006f5c:	61fa      	str	r2, [r7, #28]
 8006f5e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006f60:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006f62:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006f64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d302      	bcc.n	8006f76 <xQueueGenericSendFromISR+0xc2>
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	2b02      	cmp	r3, #2
 8006f74:	d12f      	bne.n	8006fd6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006f76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f78:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006f7c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006f86:	683a      	ldr	r2, [r7, #0]
 8006f88:	68b9      	ldr	r1, [r7, #8]
 8006f8a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006f8c:	f000 fabb 	bl	8007506 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006f90:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f98:	d112      	bne.n	8006fc0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d016      	beq.n	8006fd0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fa4:	3324      	adds	r3, #36	@ 0x24
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f001 f904 	bl	80081b4 <xTaskRemoveFromEventList>
 8006fac:	4603      	mov	r3, r0
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d00e      	beq.n	8006fd0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d00b      	beq.n	8006fd0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	601a      	str	r2, [r3, #0]
 8006fbe:	e007      	b.n	8006fd0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006fc0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	b25a      	sxtb	r2, r3
 8006fca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fcc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006fd4:	e001      	b.n	8006fda <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006fda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fdc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006fe4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006fe6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3740      	adds	r7, #64	@ 0x40
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}

08006ff0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b08c      	sub	sp, #48	@ 0x30
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	60f8      	str	r0, [r7, #12]
 8006ff8:	60b9      	str	r1, [r7, #8]
 8006ffa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007006:	2b00      	cmp	r3, #0
 8007008:	d10b      	bne.n	8007022 <xQueueReceive+0x32>
	__asm volatile
 800700a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800700e:	f383 8811 	msr	BASEPRI, r3
 8007012:	f3bf 8f6f 	isb	sy
 8007016:	f3bf 8f4f 	dsb	sy
 800701a:	623b      	str	r3, [r7, #32]
}
 800701c:	bf00      	nop
 800701e:	bf00      	nop
 8007020:	e7fd      	b.n	800701e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d103      	bne.n	8007030 <xQueueReceive+0x40>
 8007028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800702a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800702c:	2b00      	cmp	r3, #0
 800702e:	d101      	bne.n	8007034 <xQueueReceive+0x44>
 8007030:	2301      	movs	r3, #1
 8007032:	e000      	b.n	8007036 <xQueueReceive+0x46>
 8007034:	2300      	movs	r3, #0
 8007036:	2b00      	cmp	r3, #0
 8007038:	d10b      	bne.n	8007052 <xQueueReceive+0x62>
	__asm volatile
 800703a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800703e:	f383 8811 	msr	BASEPRI, r3
 8007042:	f3bf 8f6f 	isb	sy
 8007046:	f3bf 8f4f 	dsb	sy
 800704a:	61fb      	str	r3, [r7, #28]
}
 800704c:	bf00      	nop
 800704e:	bf00      	nop
 8007050:	e7fd      	b.n	800704e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007052:	f001 fa83 	bl	800855c <xTaskGetSchedulerState>
 8007056:	4603      	mov	r3, r0
 8007058:	2b00      	cmp	r3, #0
 800705a:	d102      	bne.n	8007062 <xQueueReceive+0x72>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d101      	bne.n	8007066 <xQueueReceive+0x76>
 8007062:	2301      	movs	r3, #1
 8007064:	e000      	b.n	8007068 <xQueueReceive+0x78>
 8007066:	2300      	movs	r3, #0
 8007068:	2b00      	cmp	r3, #0
 800706a:	d10b      	bne.n	8007084 <xQueueReceive+0x94>
	__asm volatile
 800706c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007070:	f383 8811 	msr	BASEPRI, r3
 8007074:	f3bf 8f6f 	isb	sy
 8007078:	f3bf 8f4f 	dsb	sy
 800707c:	61bb      	str	r3, [r7, #24]
}
 800707e:	bf00      	nop
 8007080:	bf00      	nop
 8007082:	e7fd      	b.n	8007080 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007084:	f002 f892 	bl	80091ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800708a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800708c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800708e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007090:	2b00      	cmp	r3, #0
 8007092:	d01f      	beq.n	80070d4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007094:	68b9      	ldr	r1, [r7, #8]
 8007096:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007098:	f000 fa9f 	bl	80075da <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800709c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800709e:	1e5a      	subs	r2, r3, #1
 80070a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070a2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80070a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070a6:	691b      	ldr	r3, [r3, #16]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d00f      	beq.n	80070cc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80070ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ae:	3310      	adds	r3, #16
 80070b0:	4618      	mov	r0, r3
 80070b2:	f001 f87f 	bl	80081b4 <xTaskRemoveFromEventList>
 80070b6:	4603      	mov	r3, r0
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d007      	beq.n	80070cc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80070bc:	4b3c      	ldr	r3, [pc, #240]	@ (80071b0 <xQueueReceive+0x1c0>)
 80070be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070c2:	601a      	str	r2, [r3, #0]
 80070c4:	f3bf 8f4f 	dsb	sy
 80070c8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80070cc:	f002 f89e 	bl	800920c <vPortExitCritical>
				return pdPASS;
 80070d0:	2301      	movs	r3, #1
 80070d2:	e069      	b.n	80071a8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d103      	bne.n	80070e2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80070da:	f002 f897 	bl	800920c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80070de:	2300      	movs	r3, #0
 80070e0:	e062      	b.n	80071a8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80070e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d106      	bne.n	80070f6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80070e8:	f107 0310 	add.w	r3, r7, #16
 80070ec:	4618      	mov	r0, r3
 80070ee:	f001 f8c5 	bl	800827c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80070f2:	2301      	movs	r3, #1
 80070f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80070f6:	f002 f889 	bl	800920c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80070fa:	f000 fe1f 	bl	8007d3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80070fe:	f002 f855 	bl	80091ac <vPortEnterCritical>
 8007102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007104:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007108:	b25b      	sxtb	r3, r3
 800710a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800710e:	d103      	bne.n	8007118 <xQueueReceive+0x128>
 8007110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007112:	2200      	movs	r2, #0
 8007114:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800711a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800711e:	b25b      	sxtb	r3, r3
 8007120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007124:	d103      	bne.n	800712e <xQueueReceive+0x13e>
 8007126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007128:	2200      	movs	r2, #0
 800712a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800712e:	f002 f86d 	bl	800920c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007132:	1d3a      	adds	r2, r7, #4
 8007134:	f107 0310 	add.w	r3, r7, #16
 8007138:	4611      	mov	r1, r2
 800713a:	4618      	mov	r0, r3
 800713c:	f001 f8b4 	bl	80082a8 <xTaskCheckForTimeOut>
 8007140:	4603      	mov	r3, r0
 8007142:	2b00      	cmp	r3, #0
 8007144:	d123      	bne.n	800718e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007146:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007148:	f000 fabf 	bl	80076ca <prvIsQueueEmpty>
 800714c:	4603      	mov	r3, r0
 800714e:	2b00      	cmp	r3, #0
 8007150:	d017      	beq.n	8007182 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007154:	3324      	adds	r3, #36	@ 0x24
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	4611      	mov	r1, r2
 800715a:	4618      	mov	r0, r3
 800715c:	f000 ffd8 	bl	8008110 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007160:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007162:	f000 fa60 	bl	8007626 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007166:	f000 fdf7 	bl	8007d58 <xTaskResumeAll>
 800716a:	4603      	mov	r3, r0
 800716c:	2b00      	cmp	r3, #0
 800716e:	d189      	bne.n	8007084 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007170:	4b0f      	ldr	r3, [pc, #60]	@ (80071b0 <xQueueReceive+0x1c0>)
 8007172:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007176:	601a      	str	r2, [r3, #0]
 8007178:	f3bf 8f4f 	dsb	sy
 800717c:	f3bf 8f6f 	isb	sy
 8007180:	e780      	b.n	8007084 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007182:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007184:	f000 fa4f 	bl	8007626 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007188:	f000 fde6 	bl	8007d58 <xTaskResumeAll>
 800718c:	e77a      	b.n	8007084 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800718e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007190:	f000 fa49 	bl	8007626 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007194:	f000 fde0 	bl	8007d58 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007198:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800719a:	f000 fa96 	bl	80076ca <prvIsQueueEmpty>
 800719e:	4603      	mov	r3, r0
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	f43f af6f 	beq.w	8007084 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80071a6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3730      	adds	r7, #48	@ 0x30
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}
 80071b0:	e000ed04 	.word	0xe000ed04

080071b4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b08e      	sub	sp, #56	@ 0x38
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80071be:	2300      	movs	r3, #0
 80071c0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80071c6:	2300      	movs	r3, #0
 80071c8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80071ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d10b      	bne.n	80071e8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80071d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071d4:	f383 8811 	msr	BASEPRI, r3
 80071d8:	f3bf 8f6f 	isb	sy
 80071dc:	f3bf 8f4f 	dsb	sy
 80071e0:	623b      	str	r3, [r7, #32]
}
 80071e2:	bf00      	nop
 80071e4:	bf00      	nop
 80071e6:	e7fd      	b.n	80071e4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80071e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d00b      	beq.n	8007208 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80071f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071f4:	f383 8811 	msr	BASEPRI, r3
 80071f8:	f3bf 8f6f 	isb	sy
 80071fc:	f3bf 8f4f 	dsb	sy
 8007200:	61fb      	str	r3, [r7, #28]
}
 8007202:	bf00      	nop
 8007204:	bf00      	nop
 8007206:	e7fd      	b.n	8007204 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007208:	f001 f9a8 	bl	800855c <xTaskGetSchedulerState>
 800720c:	4603      	mov	r3, r0
 800720e:	2b00      	cmp	r3, #0
 8007210:	d102      	bne.n	8007218 <xQueueSemaphoreTake+0x64>
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d101      	bne.n	800721c <xQueueSemaphoreTake+0x68>
 8007218:	2301      	movs	r3, #1
 800721a:	e000      	b.n	800721e <xQueueSemaphoreTake+0x6a>
 800721c:	2300      	movs	r3, #0
 800721e:	2b00      	cmp	r3, #0
 8007220:	d10b      	bne.n	800723a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8007222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007226:	f383 8811 	msr	BASEPRI, r3
 800722a:	f3bf 8f6f 	isb	sy
 800722e:	f3bf 8f4f 	dsb	sy
 8007232:	61bb      	str	r3, [r7, #24]
}
 8007234:	bf00      	nop
 8007236:	bf00      	nop
 8007238:	e7fd      	b.n	8007236 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800723a:	f001 ffb7 	bl	80091ac <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800723e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007240:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007242:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007246:	2b00      	cmp	r3, #0
 8007248:	d024      	beq.n	8007294 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800724a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800724c:	1e5a      	subs	r2, r3, #1
 800724e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007250:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007252:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d104      	bne.n	8007264 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800725a:	f001 faf9 	bl	8008850 <pvTaskIncrementMutexHeldCount>
 800725e:	4602      	mov	r2, r0
 8007260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007262:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007266:	691b      	ldr	r3, [r3, #16]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d00f      	beq.n	800728c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800726c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800726e:	3310      	adds	r3, #16
 8007270:	4618      	mov	r0, r3
 8007272:	f000 ff9f 	bl	80081b4 <xTaskRemoveFromEventList>
 8007276:	4603      	mov	r3, r0
 8007278:	2b00      	cmp	r3, #0
 800727a:	d007      	beq.n	800728c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800727c:	4b54      	ldr	r3, [pc, #336]	@ (80073d0 <xQueueSemaphoreTake+0x21c>)
 800727e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007282:	601a      	str	r2, [r3, #0]
 8007284:	f3bf 8f4f 	dsb	sy
 8007288:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800728c:	f001 ffbe 	bl	800920c <vPortExitCritical>
				return pdPASS;
 8007290:	2301      	movs	r3, #1
 8007292:	e098      	b.n	80073c6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d112      	bne.n	80072c0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800729a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800729c:	2b00      	cmp	r3, #0
 800729e:	d00b      	beq.n	80072b8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80072a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072a4:	f383 8811 	msr	BASEPRI, r3
 80072a8:	f3bf 8f6f 	isb	sy
 80072ac:	f3bf 8f4f 	dsb	sy
 80072b0:	617b      	str	r3, [r7, #20]
}
 80072b2:	bf00      	nop
 80072b4:	bf00      	nop
 80072b6:	e7fd      	b.n	80072b4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80072b8:	f001 ffa8 	bl	800920c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80072bc:	2300      	movs	r3, #0
 80072be:	e082      	b.n	80073c6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80072c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d106      	bne.n	80072d4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80072c6:	f107 030c 	add.w	r3, r7, #12
 80072ca:	4618      	mov	r0, r3
 80072cc:	f000 ffd6 	bl	800827c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80072d0:	2301      	movs	r3, #1
 80072d2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80072d4:	f001 ff9a 	bl	800920c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80072d8:	f000 fd30 	bl	8007d3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80072dc:	f001 ff66 	bl	80091ac <vPortEnterCritical>
 80072e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072e2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80072e6:	b25b      	sxtb	r3, r3
 80072e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ec:	d103      	bne.n	80072f6 <xQueueSemaphoreTake+0x142>
 80072ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072f0:	2200      	movs	r2, #0
 80072f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80072f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80072fc:	b25b      	sxtb	r3, r3
 80072fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007302:	d103      	bne.n	800730c <xQueueSemaphoreTake+0x158>
 8007304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007306:	2200      	movs	r2, #0
 8007308:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800730c:	f001 ff7e 	bl	800920c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007310:	463a      	mov	r2, r7
 8007312:	f107 030c 	add.w	r3, r7, #12
 8007316:	4611      	mov	r1, r2
 8007318:	4618      	mov	r0, r3
 800731a:	f000 ffc5 	bl	80082a8 <xTaskCheckForTimeOut>
 800731e:	4603      	mov	r3, r0
 8007320:	2b00      	cmp	r3, #0
 8007322:	d132      	bne.n	800738a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007324:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007326:	f000 f9d0 	bl	80076ca <prvIsQueueEmpty>
 800732a:	4603      	mov	r3, r0
 800732c:	2b00      	cmp	r3, #0
 800732e:	d026      	beq.n	800737e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d109      	bne.n	800734c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8007338:	f001 ff38 	bl	80091ac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800733c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	4618      	mov	r0, r3
 8007342:	f001 f929 	bl	8008598 <xTaskPriorityInherit>
 8007346:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8007348:	f001 ff60 	bl	800920c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800734c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800734e:	3324      	adds	r3, #36	@ 0x24
 8007350:	683a      	ldr	r2, [r7, #0]
 8007352:	4611      	mov	r1, r2
 8007354:	4618      	mov	r0, r3
 8007356:	f000 fedb 	bl	8008110 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800735a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800735c:	f000 f963 	bl	8007626 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007360:	f000 fcfa 	bl	8007d58 <xTaskResumeAll>
 8007364:	4603      	mov	r3, r0
 8007366:	2b00      	cmp	r3, #0
 8007368:	f47f af67 	bne.w	800723a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800736c:	4b18      	ldr	r3, [pc, #96]	@ (80073d0 <xQueueSemaphoreTake+0x21c>)
 800736e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007372:	601a      	str	r2, [r3, #0]
 8007374:	f3bf 8f4f 	dsb	sy
 8007378:	f3bf 8f6f 	isb	sy
 800737c:	e75d      	b.n	800723a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800737e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007380:	f000 f951 	bl	8007626 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007384:	f000 fce8 	bl	8007d58 <xTaskResumeAll>
 8007388:	e757      	b.n	800723a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800738a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800738c:	f000 f94b 	bl	8007626 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007390:	f000 fce2 	bl	8007d58 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007394:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007396:	f000 f998 	bl	80076ca <prvIsQueueEmpty>
 800739a:	4603      	mov	r3, r0
 800739c:	2b00      	cmp	r3, #0
 800739e:	f43f af4c 	beq.w	800723a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80073a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d00d      	beq.n	80073c4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80073a8:	f001 ff00 	bl	80091ac <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80073ac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80073ae:	f000 f893 	bl	80074d8 <prvGetDisinheritPriorityAfterTimeout>
 80073b2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80073b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80073ba:	4618      	mov	r0, r3
 80073bc:	f001 f9c4 	bl	8008748 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80073c0:	f001 ff24 	bl	800920c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80073c4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3738      	adds	r7, #56	@ 0x38
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}
 80073ce:	bf00      	nop
 80073d0:	e000ed04 	.word	0xe000ed04

080073d4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b08e      	sub	sp, #56	@ 0x38
 80073d8:	af00      	add	r7, sp, #0
 80073da:	60f8      	str	r0, [r7, #12]
 80073dc:	60b9      	str	r1, [r7, #8]
 80073de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80073e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d10b      	bne.n	8007402 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80073ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073ee:	f383 8811 	msr	BASEPRI, r3
 80073f2:	f3bf 8f6f 	isb	sy
 80073f6:	f3bf 8f4f 	dsb	sy
 80073fa:	623b      	str	r3, [r7, #32]
}
 80073fc:	bf00      	nop
 80073fe:	bf00      	nop
 8007400:	e7fd      	b.n	80073fe <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d103      	bne.n	8007410 <xQueueReceiveFromISR+0x3c>
 8007408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800740a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800740c:	2b00      	cmp	r3, #0
 800740e:	d101      	bne.n	8007414 <xQueueReceiveFromISR+0x40>
 8007410:	2301      	movs	r3, #1
 8007412:	e000      	b.n	8007416 <xQueueReceiveFromISR+0x42>
 8007414:	2300      	movs	r3, #0
 8007416:	2b00      	cmp	r3, #0
 8007418:	d10b      	bne.n	8007432 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800741a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800741e:	f383 8811 	msr	BASEPRI, r3
 8007422:	f3bf 8f6f 	isb	sy
 8007426:	f3bf 8f4f 	dsb	sy
 800742a:	61fb      	str	r3, [r7, #28]
}
 800742c:	bf00      	nop
 800742e:	bf00      	nop
 8007430:	e7fd      	b.n	800742e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007432:	f001 ff7d 	bl	8009330 <vPortValidateInterruptPriority>
	__asm volatile
 8007436:	f3ef 8211 	mrs	r2, BASEPRI
 800743a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800743e:	f383 8811 	msr	BASEPRI, r3
 8007442:	f3bf 8f6f 	isb	sy
 8007446:	f3bf 8f4f 	dsb	sy
 800744a:	61ba      	str	r2, [r7, #24]
 800744c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800744e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007450:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007456:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800745a:	2b00      	cmp	r3, #0
 800745c:	d02f      	beq.n	80074be <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800745e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007460:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007464:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007468:	68b9      	ldr	r1, [r7, #8]
 800746a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800746c:	f000 f8b5 	bl	80075da <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007472:	1e5a      	subs	r2, r3, #1
 8007474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007476:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007478:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800747c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007480:	d112      	bne.n	80074a8 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007484:	691b      	ldr	r3, [r3, #16]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d016      	beq.n	80074b8 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800748a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800748c:	3310      	adds	r3, #16
 800748e:	4618      	mov	r0, r3
 8007490:	f000 fe90 	bl	80081b4 <xTaskRemoveFromEventList>
 8007494:	4603      	mov	r3, r0
 8007496:	2b00      	cmp	r3, #0
 8007498:	d00e      	beq.n	80074b8 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d00b      	beq.n	80074b8 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2201      	movs	r2, #1
 80074a4:	601a      	str	r2, [r3, #0]
 80074a6:	e007      	b.n	80074b8 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80074a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80074ac:	3301      	adds	r3, #1
 80074ae:	b2db      	uxtb	r3, r3
 80074b0:	b25a      	sxtb	r2, r3
 80074b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80074b8:	2301      	movs	r3, #1
 80074ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80074bc:	e001      	b.n	80074c2 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80074be:	2300      	movs	r3, #0
 80074c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80074c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074c4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	f383 8811 	msr	BASEPRI, r3
}
 80074cc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80074ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3738      	adds	r7, #56	@ 0x38
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80074d8:	b480      	push	{r7}
 80074da:	b085      	sub	sp, #20
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d006      	beq.n	80074f6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80074f2:	60fb      	str	r3, [r7, #12]
 80074f4:	e001      	b.n	80074fa <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80074f6:	2300      	movs	r3, #0
 80074f8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80074fa:	68fb      	ldr	r3, [r7, #12]
	}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3714      	adds	r7, #20
 8007500:	46bd      	mov	sp, r7
 8007502:	bc80      	pop	{r7}
 8007504:	4770      	bx	lr

08007506 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007506:	b580      	push	{r7, lr}
 8007508:	b086      	sub	sp, #24
 800750a:	af00      	add	r7, sp, #0
 800750c:	60f8      	str	r0, [r7, #12]
 800750e:	60b9      	str	r1, [r7, #8]
 8007510:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007512:	2300      	movs	r3, #0
 8007514:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800751a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007520:	2b00      	cmp	r3, #0
 8007522:	d10d      	bne.n	8007540 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d14d      	bne.n	80075c8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	689b      	ldr	r3, [r3, #8]
 8007530:	4618      	mov	r0, r3
 8007532:	f001 f899 	bl	8008668 <xTaskPriorityDisinherit>
 8007536:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2200      	movs	r2, #0
 800753c:	609a      	str	r2, [r3, #8]
 800753e:	e043      	b.n	80075c8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d119      	bne.n	800757a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	6858      	ldr	r0, [r3, #4]
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800754e:	461a      	mov	r2, r3
 8007550:	68b9      	ldr	r1, [r7, #8]
 8007552:	f002 ffb4 	bl	800a4be <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	685a      	ldr	r2, [r3, #4]
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800755e:	441a      	add	r2, r3
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	685a      	ldr	r2, [r3, #4]
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	429a      	cmp	r2, r3
 800756e:	d32b      	bcc.n	80075c8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681a      	ldr	r2, [r3, #0]
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	605a      	str	r2, [r3, #4]
 8007578:	e026      	b.n	80075c8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	68d8      	ldr	r0, [r3, #12]
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007582:	461a      	mov	r2, r3
 8007584:	68b9      	ldr	r1, [r7, #8]
 8007586:	f002 ff9a 	bl	800a4be <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	68da      	ldr	r2, [r3, #12]
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007592:	425b      	negs	r3, r3
 8007594:	441a      	add	r2, r3
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	68da      	ldr	r2, [r3, #12]
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d207      	bcs.n	80075b6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	689a      	ldr	r2, [r3, #8]
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075ae:	425b      	negs	r3, r3
 80075b0:	441a      	add	r2, r3
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2b02      	cmp	r3, #2
 80075ba:	d105      	bne.n	80075c8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d002      	beq.n	80075c8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	3b01      	subs	r3, #1
 80075c6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	1c5a      	adds	r2, r3, #1
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80075d0:	697b      	ldr	r3, [r7, #20]
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3718      	adds	r7, #24
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}

080075da <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80075da:	b580      	push	{r7, lr}
 80075dc:	b082      	sub	sp, #8
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
 80075e2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d018      	beq.n	800761e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	68da      	ldr	r2, [r3, #12]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075f4:	441a      	add	r2, r3
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	68da      	ldr	r2, [r3, #12]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	429a      	cmp	r2, r3
 8007604:	d303      	bcc.n	800760e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	68d9      	ldr	r1, [r3, #12]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007616:	461a      	mov	r2, r3
 8007618:	6838      	ldr	r0, [r7, #0]
 800761a:	f002 ff50 	bl	800a4be <memcpy>
	}
}
 800761e:	bf00      	nop
 8007620:	3708      	adds	r7, #8
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}

08007626 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007626:	b580      	push	{r7, lr}
 8007628:	b084      	sub	sp, #16
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800762e:	f001 fdbd 	bl	80091ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007638:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800763a:	e011      	b.n	8007660 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007640:	2b00      	cmp	r3, #0
 8007642:	d012      	beq.n	800766a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	3324      	adds	r3, #36	@ 0x24
 8007648:	4618      	mov	r0, r3
 800764a:	f000 fdb3 	bl	80081b4 <xTaskRemoveFromEventList>
 800764e:	4603      	mov	r3, r0
 8007650:	2b00      	cmp	r3, #0
 8007652:	d001      	beq.n	8007658 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007654:	f000 fe8c 	bl	8008370 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007658:	7bfb      	ldrb	r3, [r7, #15]
 800765a:	3b01      	subs	r3, #1
 800765c:	b2db      	uxtb	r3, r3
 800765e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007660:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007664:	2b00      	cmp	r3, #0
 8007666:	dce9      	bgt.n	800763c <prvUnlockQueue+0x16>
 8007668:	e000      	b.n	800766c <prvUnlockQueue+0x46>
					break;
 800766a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	22ff      	movs	r2, #255	@ 0xff
 8007670:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007674:	f001 fdca 	bl	800920c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007678:	f001 fd98 	bl	80091ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007682:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007684:	e011      	b.n	80076aa <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	691b      	ldr	r3, [r3, #16]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d012      	beq.n	80076b4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	3310      	adds	r3, #16
 8007692:	4618      	mov	r0, r3
 8007694:	f000 fd8e 	bl	80081b4 <xTaskRemoveFromEventList>
 8007698:	4603      	mov	r3, r0
 800769a:	2b00      	cmp	r3, #0
 800769c:	d001      	beq.n	80076a2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800769e:	f000 fe67 	bl	8008370 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80076a2:	7bbb      	ldrb	r3, [r7, #14]
 80076a4:	3b01      	subs	r3, #1
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80076aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	dce9      	bgt.n	8007686 <prvUnlockQueue+0x60>
 80076b2:	e000      	b.n	80076b6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80076b4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	22ff      	movs	r2, #255	@ 0xff
 80076ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80076be:	f001 fda5 	bl	800920c <vPortExitCritical>
}
 80076c2:	bf00      	nop
 80076c4:	3710      	adds	r7, #16
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}

080076ca <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80076ca:	b580      	push	{r7, lr}
 80076cc:	b084      	sub	sp, #16
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80076d2:	f001 fd6b 	bl	80091ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d102      	bne.n	80076e4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80076de:	2301      	movs	r3, #1
 80076e0:	60fb      	str	r3, [r7, #12]
 80076e2:	e001      	b.n	80076e8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80076e4:	2300      	movs	r3, #0
 80076e6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80076e8:	f001 fd90 	bl	800920c <vPortExitCritical>

	return xReturn;
 80076ec:	68fb      	ldr	r3, [r7, #12]
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3710      	adds	r7, #16
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}

080076f6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80076f6:	b580      	push	{r7, lr}
 80076f8:	b084      	sub	sp, #16
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80076fe:	f001 fd55 	bl	80091ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800770a:	429a      	cmp	r2, r3
 800770c:	d102      	bne.n	8007714 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800770e:	2301      	movs	r3, #1
 8007710:	60fb      	str	r3, [r7, #12]
 8007712:	e001      	b.n	8007718 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007714:	2300      	movs	r3, #0
 8007716:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007718:	f001 fd78 	bl	800920c <vPortExitCritical>

	return xReturn;
 800771c:	68fb      	ldr	r3, [r7, #12]
}
 800771e:	4618      	mov	r0, r3
 8007720:	3710      	adds	r7, #16
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
	...

08007728 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007728:	b480      	push	{r7}
 800772a:	b085      	sub	sp, #20
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
 8007730:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007732:	2300      	movs	r3, #0
 8007734:	60fb      	str	r3, [r7, #12]
 8007736:	e014      	b.n	8007762 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007738:	4a0e      	ldr	r2, [pc, #56]	@ (8007774 <vQueueAddToRegistry+0x4c>)
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d10b      	bne.n	800775c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007744:	490b      	ldr	r1, [pc, #44]	@ (8007774 <vQueueAddToRegistry+0x4c>)
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	683a      	ldr	r2, [r7, #0]
 800774a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800774e:	4a09      	ldr	r2, [pc, #36]	@ (8007774 <vQueueAddToRegistry+0x4c>)
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	00db      	lsls	r3, r3, #3
 8007754:	4413      	add	r3, r2
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800775a:	e006      	b.n	800776a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	3301      	adds	r3, #1
 8007760:	60fb      	str	r3, [r7, #12]
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2b07      	cmp	r3, #7
 8007766:	d9e7      	bls.n	8007738 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007768:	bf00      	nop
 800776a:	bf00      	nop
 800776c:	3714      	adds	r7, #20
 800776e:	46bd      	mov	sp, r7
 8007770:	bc80      	pop	{r7}
 8007772:	4770      	bx	lr
 8007774:	20000af0 	.word	0x20000af0

08007778 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007778:	b580      	push	{r7, lr}
 800777a:	b086      	sub	sp, #24
 800777c:	af00      	add	r7, sp, #0
 800777e:	60f8      	str	r0, [r7, #12]
 8007780:	60b9      	str	r1, [r7, #8]
 8007782:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007788:	f001 fd10 	bl	80091ac <vPortEnterCritical>
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007792:	b25b      	sxtb	r3, r3
 8007794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007798:	d103      	bne.n	80077a2 <vQueueWaitForMessageRestricted+0x2a>
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	2200      	movs	r2, #0
 800779e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80077a8:	b25b      	sxtb	r3, r3
 80077aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077ae:	d103      	bne.n	80077b8 <vQueueWaitForMessageRestricted+0x40>
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	2200      	movs	r2, #0
 80077b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80077b8:	f001 fd28 	bl	800920c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d106      	bne.n	80077d2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	3324      	adds	r3, #36	@ 0x24
 80077c8:	687a      	ldr	r2, [r7, #4]
 80077ca:	68b9      	ldr	r1, [r7, #8]
 80077cc:	4618      	mov	r0, r3
 80077ce:	f000 fcc5 	bl	800815c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80077d2:	6978      	ldr	r0, [r7, #20]
 80077d4:	f7ff ff27 	bl	8007626 <prvUnlockQueue>
	}
 80077d8:	bf00      	nop
 80077da:	3718      	adds	r7, #24
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}

080077e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b08e      	sub	sp, #56	@ 0x38
 80077e4:	af04      	add	r7, sp, #16
 80077e6:	60f8      	str	r0, [r7, #12]
 80077e8:	60b9      	str	r1, [r7, #8]
 80077ea:	607a      	str	r2, [r7, #4]
 80077ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80077ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d10b      	bne.n	800780c <xTaskCreateStatic+0x2c>
	__asm volatile
 80077f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077f8:	f383 8811 	msr	BASEPRI, r3
 80077fc:	f3bf 8f6f 	isb	sy
 8007800:	f3bf 8f4f 	dsb	sy
 8007804:	623b      	str	r3, [r7, #32]
}
 8007806:	bf00      	nop
 8007808:	bf00      	nop
 800780a:	e7fd      	b.n	8007808 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800780c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800780e:	2b00      	cmp	r3, #0
 8007810:	d10b      	bne.n	800782a <xTaskCreateStatic+0x4a>
	__asm volatile
 8007812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007816:	f383 8811 	msr	BASEPRI, r3
 800781a:	f3bf 8f6f 	isb	sy
 800781e:	f3bf 8f4f 	dsb	sy
 8007822:	61fb      	str	r3, [r7, #28]
}
 8007824:	bf00      	nop
 8007826:	bf00      	nop
 8007828:	e7fd      	b.n	8007826 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800782a:	23a8      	movs	r3, #168	@ 0xa8
 800782c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	2ba8      	cmp	r3, #168	@ 0xa8
 8007832:	d00b      	beq.n	800784c <xTaskCreateStatic+0x6c>
	__asm volatile
 8007834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007838:	f383 8811 	msr	BASEPRI, r3
 800783c:	f3bf 8f6f 	isb	sy
 8007840:	f3bf 8f4f 	dsb	sy
 8007844:	61bb      	str	r3, [r7, #24]
}
 8007846:	bf00      	nop
 8007848:	bf00      	nop
 800784a:	e7fd      	b.n	8007848 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800784c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800784e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007850:	2b00      	cmp	r3, #0
 8007852:	d01e      	beq.n	8007892 <xTaskCreateStatic+0xb2>
 8007854:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007856:	2b00      	cmp	r3, #0
 8007858:	d01b      	beq.n	8007892 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800785a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800785c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800785e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007860:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007862:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007866:	2202      	movs	r2, #2
 8007868:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800786c:	2300      	movs	r3, #0
 800786e:	9303      	str	r3, [sp, #12]
 8007870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007872:	9302      	str	r3, [sp, #8]
 8007874:	f107 0314 	add.w	r3, r7, #20
 8007878:	9301      	str	r3, [sp, #4]
 800787a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800787c:	9300      	str	r3, [sp, #0]
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	687a      	ldr	r2, [r7, #4]
 8007882:	68b9      	ldr	r1, [r7, #8]
 8007884:	68f8      	ldr	r0, [r7, #12]
 8007886:	f000 f851 	bl	800792c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800788a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800788c:	f000 f8f6 	bl	8007a7c <prvAddNewTaskToReadyList>
 8007890:	e001      	b.n	8007896 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007892:	2300      	movs	r3, #0
 8007894:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007896:	697b      	ldr	r3, [r7, #20]
	}
 8007898:	4618      	mov	r0, r3
 800789a:	3728      	adds	r7, #40	@ 0x28
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}

080078a0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b08c      	sub	sp, #48	@ 0x30
 80078a4:	af04      	add	r7, sp, #16
 80078a6:	60f8      	str	r0, [r7, #12]
 80078a8:	60b9      	str	r1, [r7, #8]
 80078aa:	603b      	str	r3, [r7, #0]
 80078ac:	4613      	mov	r3, r2
 80078ae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80078b0:	88fb      	ldrh	r3, [r7, #6]
 80078b2:	009b      	lsls	r3, r3, #2
 80078b4:	4618      	mov	r0, r3
 80078b6:	f001 fd7b 	bl	80093b0 <pvPortMalloc>
 80078ba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d00e      	beq.n	80078e0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80078c2:	20a8      	movs	r0, #168	@ 0xa8
 80078c4:	f001 fd74 	bl	80093b0 <pvPortMalloc>
 80078c8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80078ca:	69fb      	ldr	r3, [r7, #28]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d003      	beq.n	80078d8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80078d0:	69fb      	ldr	r3, [r7, #28]
 80078d2:	697a      	ldr	r2, [r7, #20]
 80078d4:	631a      	str	r2, [r3, #48]	@ 0x30
 80078d6:	e005      	b.n	80078e4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80078d8:	6978      	ldr	r0, [r7, #20]
 80078da:	f001 fe37 	bl	800954c <vPortFree>
 80078de:	e001      	b.n	80078e4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80078e0:	2300      	movs	r3, #0
 80078e2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80078e4:	69fb      	ldr	r3, [r7, #28]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d017      	beq.n	800791a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80078ea:	69fb      	ldr	r3, [r7, #28]
 80078ec:	2200      	movs	r2, #0
 80078ee:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80078f2:	88fa      	ldrh	r2, [r7, #6]
 80078f4:	2300      	movs	r3, #0
 80078f6:	9303      	str	r3, [sp, #12]
 80078f8:	69fb      	ldr	r3, [r7, #28]
 80078fa:	9302      	str	r3, [sp, #8]
 80078fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078fe:	9301      	str	r3, [sp, #4]
 8007900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007902:	9300      	str	r3, [sp, #0]
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	68b9      	ldr	r1, [r7, #8]
 8007908:	68f8      	ldr	r0, [r7, #12]
 800790a:	f000 f80f 	bl	800792c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800790e:	69f8      	ldr	r0, [r7, #28]
 8007910:	f000 f8b4 	bl	8007a7c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007914:	2301      	movs	r3, #1
 8007916:	61bb      	str	r3, [r7, #24]
 8007918:	e002      	b.n	8007920 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800791a:	f04f 33ff 	mov.w	r3, #4294967295
 800791e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007920:	69bb      	ldr	r3, [r7, #24]
	}
 8007922:	4618      	mov	r0, r3
 8007924:	3720      	adds	r7, #32
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
	...

0800792c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b088      	sub	sp, #32
 8007930:	af00      	add	r7, sp, #0
 8007932:	60f8      	str	r0, [r7, #12]
 8007934:	60b9      	str	r1, [r7, #8]
 8007936:	607a      	str	r2, [r7, #4]
 8007938:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800793a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800793c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	009b      	lsls	r3, r3, #2
 8007942:	461a      	mov	r2, r3
 8007944:	21a5      	movs	r1, #165	@ 0xa5
 8007946:	f002 fcce 	bl	800a2e6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800794a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800794c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007954:	3b01      	subs	r3, #1
 8007956:	009b      	lsls	r3, r3, #2
 8007958:	4413      	add	r3, r2
 800795a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800795c:	69bb      	ldr	r3, [r7, #24]
 800795e:	f023 0307 	bic.w	r3, r3, #7
 8007962:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007964:	69bb      	ldr	r3, [r7, #24]
 8007966:	f003 0307 	and.w	r3, r3, #7
 800796a:	2b00      	cmp	r3, #0
 800796c:	d00b      	beq.n	8007986 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800796e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007972:	f383 8811 	msr	BASEPRI, r3
 8007976:	f3bf 8f6f 	isb	sy
 800797a:	f3bf 8f4f 	dsb	sy
 800797e:	617b      	str	r3, [r7, #20]
}
 8007980:	bf00      	nop
 8007982:	bf00      	nop
 8007984:	e7fd      	b.n	8007982 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d01f      	beq.n	80079cc <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800798c:	2300      	movs	r3, #0
 800798e:	61fb      	str	r3, [r7, #28]
 8007990:	e012      	b.n	80079b8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007992:	68ba      	ldr	r2, [r7, #8]
 8007994:	69fb      	ldr	r3, [r7, #28]
 8007996:	4413      	add	r3, r2
 8007998:	7819      	ldrb	r1, [r3, #0]
 800799a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800799c:	69fb      	ldr	r3, [r7, #28]
 800799e:	4413      	add	r3, r2
 80079a0:	3334      	adds	r3, #52	@ 0x34
 80079a2:	460a      	mov	r2, r1
 80079a4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80079a6:	68ba      	ldr	r2, [r7, #8]
 80079a8:	69fb      	ldr	r3, [r7, #28]
 80079aa:	4413      	add	r3, r2
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d006      	beq.n	80079c0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80079b2:	69fb      	ldr	r3, [r7, #28]
 80079b4:	3301      	adds	r3, #1
 80079b6:	61fb      	str	r3, [r7, #28]
 80079b8:	69fb      	ldr	r3, [r7, #28]
 80079ba:	2b0f      	cmp	r3, #15
 80079bc:	d9e9      	bls.n	8007992 <prvInitialiseNewTask+0x66>
 80079be:	e000      	b.n	80079c2 <prvInitialiseNewTask+0x96>
			{
				break;
 80079c0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80079c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079c4:	2200      	movs	r2, #0
 80079c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80079ca:	e003      	b.n	80079d4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80079cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ce:	2200      	movs	r2, #0
 80079d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80079d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079d6:	2b37      	cmp	r3, #55	@ 0x37
 80079d8:	d901      	bls.n	80079de <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80079da:	2337      	movs	r3, #55	@ 0x37
 80079dc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80079de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80079e2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80079e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80079e8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80079ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ec:	2200      	movs	r2, #0
 80079ee:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80079f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079f2:	3304      	adds	r3, #4
 80079f4:	4618      	mov	r0, r3
 80079f6:	f7fe fecc 	bl	8006792 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80079fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079fc:	3318      	adds	r3, #24
 80079fe:	4618      	mov	r0, r3
 8007a00:	f7fe fec7 	bl	8006792 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a08:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a0c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a12:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a18:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a24:	2200      	movs	r2, #0
 8007a26:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a2c:	3354      	adds	r3, #84	@ 0x54
 8007a2e:	224c      	movs	r2, #76	@ 0x4c
 8007a30:	2100      	movs	r1, #0
 8007a32:	4618      	mov	r0, r3
 8007a34:	f002 fc57 	bl	800a2e6 <memset>
 8007a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a3a:	4a0d      	ldr	r2, [pc, #52]	@ (8007a70 <prvInitialiseNewTask+0x144>)
 8007a3c:	659a      	str	r2, [r3, #88]	@ 0x58
 8007a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a40:	4a0c      	ldr	r2, [pc, #48]	@ (8007a74 <prvInitialiseNewTask+0x148>)
 8007a42:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a46:	4a0c      	ldr	r2, [pc, #48]	@ (8007a78 <prvInitialiseNewTask+0x14c>)
 8007a48:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007a4a:	683a      	ldr	r2, [r7, #0]
 8007a4c:	68f9      	ldr	r1, [r7, #12]
 8007a4e:	69b8      	ldr	r0, [r7, #24]
 8007a50:	f001 fabe 	bl	8008fd0 <pxPortInitialiseStack>
 8007a54:	4602      	mov	r2, r0
 8007a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a58:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007a5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d002      	beq.n	8007a66 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007a60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a66:	bf00      	nop
 8007a68:	3720      	adds	r7, #32
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}
 8007a6e:	bf00      	nop
 8007a70:	20002984 	.word	0x20002984
 8007a74:	200029ec 	.word	0x200029ec
 8007a78:	20002a54 	.word	0x20002a54

08007a7c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b082      	sub	sp, #8
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007a84:	f001 fb92 	bl	80091ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007a88:	4b2d      	ldr	r3, [pc, #180]	@ (8007b40 <prvAddNewTaskToReadyList+0xc4>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	3301      	adds	r3, #1
 8007a8e:	4a2c      	ldr	r2, [pc, #176]	@ (8007b40 <prvAddNewTaskToReadyList+0xc4>)
 8007a90:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007a92:	4b2c      	ldr	r3, [pc, #176]	@ (8007b44 <prvAddNewTaskToReadyList+0xc8>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d109      	bne.n	8007aae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007a9a:	4a2a      	ldr	r2, [pc, #168]	@ (8007b44 <prvAddNewTaskToReadyList+0xc8>)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007aa0:	4b27      	ldr	r3, [pc, #156]	@ (8007b40 <prvAddNewTaskToReadyList+0xc4>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d110      	bne.n	8007aca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007aa8:	f000 fc86 	bl	80083b8 <prvInitialiseTaskLists>
 8007aac:	e00d      	b.n	8007aca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007aae:	4b26      	ldr	r3, [pc, #152]	@ (8007b48 <prvAddNewTaskToReadyList+0xcc>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d109      	bne.n	8007aca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007ab6:	4b23      	ldr	r3, [pc, #140]	@ (8007b44 <prvAddNewTaskToReadyList+0xc8>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d802      	bhi.n	8007aca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007ac4:	4a1f      	ldr	r2, [pc, #124]	@ (8007b44 <prvAddNewTaskToReadyList+0xc8>)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007aca:	4b20      	ldr	r3, [pc, #128]	@ (8007b4c <prvAddNewTaskToReadyList+0xd0>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	3301      	adds	r3, #1
 8007ad0:	4a1e      	ldr	r2, [pc, #120]	@ (8007b4c <prvAddNewTaskToReadyList+0xd0>)
 8007ad2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007ad4:	4b1d      	ldr	r3, [pc, #116]	@ (8007b4c <prvAddNewTaskToReadyList+0xd0>)
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ae0:	4b1b      	ldr	r3, [pc, #108]	@ (8007b50 <prvAddNewTaskToReadyList+0xd4>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d903      	bls.n	8007af0 <prvAddNewTaskToReadyList+0x74>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aec:	4a18      	ldr	r2, [pc, #96]	@ (8007b50 <prvAddNewTaskToReadyList+0xd4>)
 8007aee:	6013      	str	r3, [r2, #0]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007af4:	4613      	mov	r3, r2
 8007af6:	009b      	lsls	r3, r3, #2
 8007af8:	4413      	add	r3, r2
 8007afa:	009b      	lsls	r3, r3, #2
 8007afc:	4a15      	ldr	r2, [pc, #84]	@ (8007b54 <prvAddNewTaskToReadyList+0xd8>)
 8007afe:	441a      	add	r2, r3
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	3304      	adds	r3, #4
 8007b04:	4619      	mov	r1, r3
 8007b06:	4610      	mov	r0, r2
 8007b08:	f7fe fe4f 	bl	80067aa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007b0c:	f001 fb7e 	bl	800920c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007b10:	4b0d      	ldr	r3, [pc, #52]	@ (8007b48 <prvAddNewTaskToReadyList+0xcc>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d00e      	beq.n	8007b36 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007b18:	4b0a      	ldr	r3, [pc, #40]	@ (8007b44 <prvAddNewTaskToReadyList+0xc8>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d207      	bcs.n	8007b36 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007b26:	4b0c      	ldr	r3, [pc, #48]	@ (8007b58 <prvAddNewTaskToReadyList+0xdc>)
 8007b28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b2c:	601a      	str	r2, [r3, #0]
 8007b2e:	f3bf 8f4f 	dsb	sy
 8007b32:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b36:	bf00      	nop
 8007b38:	3708      	adds	r7, #8
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
 8007b3e:	bf00      	nop
 8007b40:	20001004 	.word	0x20001004
 8007b44:	20000b30 	.word	0x20000b30
 8007b48:	20001010 	.word	0x20001010
 8007b4c:	20001020 	.word	0x20001020
 8007b50:	2000100c 	.word	0x2000100c
 8007b54:	20000b34 	.word	0x20000b34
 8007b58:	e000ed04 	.word	0xe000ed04

08007b5c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b08a      	sub	sp, #40	@ 0x28
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8007b66:	2300      	movs	r3, #0
 8007b68:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d10b      	bne.n	8007b88 <vTaskDelayUntil+0x2c>
	__asm volatile
 8007b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b74:	f383 8811 	msr	BASEPRI, r3
 8007b78:	f3bf 8f6f 	isb	sy
 8007b7c:	f3bf 8f4f 	dsb	sy
 8007b80:	617b      	str	r3, [r7, #20]
}
 8007b82:	bf00      	nop
 8007b84:	bf00      	nop
 8007b86:	e7fd      	b.n	8007b84 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d10b      	bne.n	8007ba6 <vTaskDelayUntil+0x4a>
	__asm volatile
 8007b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b92:	f383 8811 	msr	BASEPRI, r3
 8007b96:	f3bf 8f6f 	isb	sy
 8007b9a:	f3bf 8f4f 	dsb	sy
 8007b9e:	613b      	str	r3, [r7, #16]
}
 8007ba0:	bf00      	nop
 8007ba2:	bf00      	nop
 8007ba4:	e7fd      	b.n	8007ba2 <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 8007ba6:	4b2a      	ldr	r3, [pc, #168]	@ (8007c50 <vTaskDelayUntil+0xf4>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d00b      	beq.n	8007bc6 <vTaskDelayUntil+0x6a>
	__asm volatile
 8007bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bb2:	f383 8811 	msr	BASEPRI, r3
 8007bb6:	f3bf 8f6f 	isb	sy
 8007bba:	f3bf 8f4f 	dsb	sy
 8007bbe:	60fb      	str	r3, [r7, #12]
}
 8007bc0:	bf00      	nop
 8007bc2:	bf00      	nop
 8007bc4:	e7fd      	b.n	8007bc2 <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 8007bc6:	f000 f8b9 	bl	8007d3c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8007bca:	4b22      	ldr	r3, [pc, #136]	@ (8007c54 <vTaskDelayUntil+0xf8>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	683a      	ldr	r2, [r7, #0]
 8007bd6:	4413      	add	r3, r2
 8007bd8:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	6a3a      	ldr	r2, [r7, #32]
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d20b      	bcs.n	8007bfc <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	69fa      	ldr	r2, [r7, #28]
 8007bea:	429a      	cmp	r2, r3
 8007bec:	d211      	bcs.n	8007c12 <vTaskDelayUntil+0xb6>
 8007bee:	69fa      	ldr	r2, [r7, #28]
 8007bf0:	6a3b      	ldr	r3, [r7, #32]
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	d90d      	bls.n	8007c12 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	627b      	str	r3, [r7, #36]	@ 0x24
 8007bfa:	e00a      	b.n	8007c12 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	69fa      	ldr	r2, [r7, #28]
 8007c02:	429a      	cmp	r2, r3
 8007c04:	d303      	bcc.n	8007c0e <vTaskDelayUntil+0xb2>
 8007c06:	69fa      	ldr	r2, [r7, #28]
 8007c08:	6a3b      	ldr	r3, [r7, #32]
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	d901      	bls.n	8007c12 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	69fa      	ldr	r2, [r7, #28]
 8007c16:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8007c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d006      	beq.n	8007c2c <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8007c1e:	69fa      	ldr	r2, [r7, #28]
 8007c20:	6a3b      	ldr	r3, [r7, #32]
 8007c22:	1ad3      	subs	r3, r2, r3
 8007c24:	2100      	movs	r1, #0
 8007c26:	4618      	mov	r0, r3
 8007c28:	f000 fe26 	bl	8008878 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8007c2c:	f000 f894 	bl	8007d58 <xTaskResumeAll>
 8007c30:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007c32:	69bb      	ldr	r3, [r7, #24]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d107      	bne.n	8007c48 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8007c38:	4b07      	ldr	r3, [pc, #28]	@ (8007c58 <vTaskDelayUntil+0xfc>)
 8007c3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c3e:	601a      	str	r2, [r3, #0]
 8007c40:	f3bf 8f4f 	dsb	sy
 8007c44:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007c48:	bf00      	nop
 8007c4a:	3728      	adds	r7, #40	@ 0x28
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}
 8007c50:	2000102c 	.word	0x2000102c
 8007c54:	20001008 	.word	0x20001008
 8007c58:	e000ed04 	.word	0xe000ed04

08007c5c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b08a      	sub	sp, #40	@ 0x28
 8007c60:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007c62:	2300      	movs	r3, #0
 8007c64:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007c66:	2300      	movs	r3, #0
 8007c68:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007c6a:	463a      	mov	r2, r7
 8007c6c:	1d39      	adds	r1, r7, #4
 8007c6e:	f107 0308 	add.w	r3, r7, #8
 8007c72:	4618      	mov	r0, r3
 8007c74:	f7fe fd3c 	bl	80066f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007c78:	6839      	ldr	r1, [r7, #0]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	68ba      	ldr	r2, [r7, #8]
 8007c7e:	9202      	str	r2, [sp, #8]
 8007c80:	9301      	str	r3, [sp, #4]
 8007c82:	2300      	movs	r3, #0
 8007c84:	9300      	str	r3, [sp, #0]
 8007c86:	2300      	movs	r3, #0
 8007c88:	460a      	mov	r2, r1
 8007c8a:	4924      	ldr	r1, [pc, #144]	@ (8007d1c <vTaskStartScheduler+0xc0>)
 8007c8c:	4824      	ldr	r0, [pc, #144]	@ (8007d20 <vTaskStartScheduler+0xc4>)
 8007c8e:	f7ff fda7 	bl	80077e0 <xTaskCreateStatic>
 8007c92:	4603      	mov	r3, r0
 8007c94:	4a23      	ldr	r2, [pc, #140]	@ (8007d24 <vTaskStartScheduler+0xc8>)
 8007c96:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007c98:	4b22      	ldr	r3, [pc, #136]	@ (8007d24 <vTaskStartScheduler+0xc8>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d002      	beq.n	8007ca6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	617b      	str	r3, [r7, #20]
 8007ca4:	e001      	b.n	8007caa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	d102      	bne.n	8007cb6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007cb0:	f000 fe36 	bl	8008920 <xTimerCreateTimerTask>
 8007cb4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	d11b      	bne.n	8007cf4 <vTaskStartScheduler+0x98>
	__asm volatile
 8007cbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cc0:	f383 8811 	msr	BASEPRI, r3
 8007cc4:	f3bf 8f6f 	isb	sy
 8007cc8:	f3bf 8f4f 	dsb	sy
 8007ccc:	613b      	str	r3, [r7, #16]
}
 8007cce:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007cd0:	4b15      	ldr	r3, [pc, #84]	@ (8007d28 <vTaskStartScheduler+0xcc>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	3354      	adds	r3, #84	@ 0x54
 8007cd6:	4a15      	ldr	r2, [pc, #84]	@ (8007d2c <vTaskStartScheduler+0xd0>)
 8007cd8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007cda:	4b15      	ldr	r3, [pc, #84]	@ (8007d30 <vTaskStartScheduler+0xd4>)
 8007cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8007ce0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007ce2:	4b14      	ldr	r3, [pc, #80]	@ (8007d34 <vTaskStartScheduler+0xd8>)
 8007ce4:	2201      	movs	r2, #1
 8007ce6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007ce8:	4b13      	ldr	r3, [pc, #76]	@ (8007d38 <vTaskStartScheduler+0xdc>)
 8007cea:	2200      	movs	r2, #0
 8007cec:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007cee:	f001 f9eb 	bl	80090c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007cf2:	e00f      	b.n	8007d14 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cfa:	d10b      	bne.n	8007d14 <vTaskStartScheduler+0xb8>
	__asm volatile
 8007cfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d00:	f383 8811 	msr	BASEPRI, r3
 8007d04:	f3bf 8f6f 	isb	sy
 8007d08:	f3bf 8f4f 	dsb	sy
 8007d0c:	60fb      	str	r3, [r7, #12]
}
 8007d0e:	bf00      	nop
 8007d10:	bf00      	nop
 8007d12:	e7fd      	b.n	8007d10 <vTaskStartScheduler+0xb4>
}
 8007d14:	bf00      	nop
 8007d16:	3718      	adds	r7, #24
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}
 8007d1c:	0800cfa4 	.word	0x0800cfa4
 8007d20:	08008389 	.word	0x08008389
 8007d24:	20001028 	.word	0x20001028
 8007d28:	20000b30 	.word	0x20000b30
 8007d2c:	20000030 	.word	0x20000030
 8007d30:	20001024 	.word	0x20001024
 8007d34:	20001010 	.word	0x20001010
 8007d38:	20001008 	.word	0x20001008

08007d3c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007d40:	4b04      	ldr	r3, [pc, #16]	@ (8007d54 <vTaskSuspendAll+0x18>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	3301      	adds	r3, #1
 8007d46:	4a03      	ldr	r2, [pc, #12]	@ (8007d54 <vTaskSuspendAll+0x18>)
 8007d48:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007d4a:	bf00      	nop
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bc80      	pop	{r7}
 8007d50:	4770      	bx	lr
 8007d52:	bf00      	nop
 8007d54:	2000102c 	.word	0x2000102c

08007d58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b084      	sub	sp, #16
 8007d5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007d62:	2300      	movs	r3, #0
 8007d64:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007d66:	4b42      	ldr	r3, [pc, #264]	@ (8007e70 <xTaskResumeAll+0x118>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d10b      	bne.n	8007d86 <xTaskResumeAll+0x2e>
	__asm volatile
 8007d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d72:	f383 8811 	msr	BASEPRI, r3
 8007d76:	f3bf 8f6f 	isb	sy
 8007d7a:	f3bf 8f4f 	dsb	sy
 8007d7e:	603b      	str	r3, [r7, #0]
}
 8007d80:	bf00      	nop
 8007d82:	bf00      	nop
 8007d84:	e7fd      	b.n	8007d82 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007d86:	f001 fa11 	bl	80091ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007d8a:	4b39      	ldr	r3, [pc, #228]	@ (8007e70 <xTaskResumeAll+0x118>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	3b01      	subs	r3, #1
 8007d90:	4a37      	ldr	r2, [pc, #220]	@ (8007e70 <xTaskResumeAll+0x118>)
 8007d92:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d94:	4b36      	ldr	r3, [pc, #216]	@ (8007e70 <xTaskResumeAll+0x118>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d162      	bne.n	8007e62 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007d9c:	4b35      	ldr	r3, [pc, #212]	@ (8007e74 <xTaskResumeAll+0x11c>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d05e      	beq.n	8007e62 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007da4:	e02f      	b.n	8007e06 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007da6:	4b34      	ldr	r3, [pc, #208]	@ (8007e78 <xTaskResumeAll+0x120>)
 8007da8:	68db      	ldr	r3, [r3, #12]
 8007daa:	68db      	ldr	r3, [r3, #12]
 8007dac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	3318      	adds	r3, #24
 8007db2:	4618      	mov	r0, r3
 8007db4:	f7fe fd54 	bl	8006860 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	3304      	adds	r3, #4
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f7fe fd4f 	bl	8006860 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dc6:	4b2d      	ldr	r3, [pc, #180]	@ (8007e7c <xTaskResumeAll+0x124>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	429a      	cmp	r2, r3
 8007dcc:	d903      	bls.n	8007dd6 <xTaskResumeAll+0x7e>
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dd2:	4a2a      	ldr	r2, [pc, #168]	@ (8007e7c <xTaskResumeAll+0x124>)
 8007dd4:	6013      	str	r3, [r2, #0]
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dda:	4613      	mov	r3, r2
 8007ddc:	009b      	lsls	r3, r3, #2
 8007dde:	4413      	add	r3, r2
 8007de0:	009b      	lsls	r3, r3, #2
 8007de2:	4a27      	ldr	r2, [pc, #156]	@ (8007e80 <xTaskResumeAll+0x128>)
 8007de4:	441a      	add	r2, r3
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	3304      	adds	r3, #4
 8007dea:	4619      	mov	r1, r3
 8007dec:	4610      	mov	r0, r2
 8007dee:	f7fe fcdc 	bl	80067aa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007df6:	4b23      	ldr	r3, [pc, #140]	@ (8007e84 <xTaskResumeAll+0x12c>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d302      	bcc.n	8007e06 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007e00:	4b21      	ldr	r3, [pc, #132]	@ (8007e88 <xTaskResumeAll+0x130>)
 8007e02:	2201      	movs	r2, #1
 8007e04:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007e06:	4b1c      	ldr	r3, [pc, #112]	@ (8007e78 <xTaskResumeAll+0x120>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d1cb      	bne.n	8007da6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d001      	beq.n	8007e18 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007e14:	f000 fb74 	bl	8008500 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007e18:	4b1c      	ldr	r3, [pc, #112]	@ (8007e8c <xTaskResumeAll+0x134>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d010      	beq.n	8007e46 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007e24:	f000 f856 	bl	8007ed4 <xTaskIncrementTick>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d002      	beq.n	8007e34 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007e2e:	4b16      	ldr	r3, [pc, #88]	@ (8007e88 <xTaskResumeAll+0x130>)
 8007e30:	2201      	movs	r2, #1
 8007e32:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	3b01      	subs	r3, #1
 8007e38:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d1f1      	bne.n	8007e24 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007e40:	4b12      	ldr	r3, [pc, #72]	@ (8007e8c <xTaskResumeAll+0x134>)
 8007e42:	2200      	movs	r2, #0
 8007e44:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007e46:	4b10      	ldr	r3, [pc, #64]	@ (8007e88 <xTaskResumeAll+0x130>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d009      	beq.n	8007e62 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007e4e:	2301      	movs	r3, #1
 8007e50:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007e52:	4b0f      	ldr	r3, [pc, #60]	@ (8007e90 <xTaskResumeAll+0x138>)
 8007e54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e58:	601a      	str	r2, [r3, #0]
 8007e5a:	f3bf 8f4f 	dsb	sy
 8007e5e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007e62:	f001 f9d3 	bl	800920c <vPortExitCritical>

	return xAlreadyYielded;
 8007e66:	68bb      	ldr	r3, [r7, #8]
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3710      	adds	r7, #16
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}
 8007e70:	2000102c 	.word	0x2000102c
 8007e74:	20001004 	.word	0x20001004
 8007e78:	20000fc4 	.word	0x20000fc4
 8007e7c:	2000100c 	.word	0x2000100c
 8007e80:	20000b34 	.word	0x20000b34
 8007e84:	20000b30 	.word	0x20000b30
 8007e88:	20001018 	.word	0x20001018
 8007e8c:	20001014 	.word	0x20001014
 8007e90:	e000ed04 	.word	0xe000ed04

08007e94 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007e94:	b480      	push	{r7}
 8007e96:	b083      	sub	sp, #12
 8007e98:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007e9a:	4b04      	ldr	r3, [pc, #16]	@ (8007eac <xTaskGetTickCount+0x18>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007ea0:	687b      	ldr	r3, [r7, #4]
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	370c      	adds	r7, #12
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bc80      	pop	{r7}
 8007eaa:	4770      	bx	lr
 8007eac:	20001008 	.word	0x20001008

08007eb0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b082      	sub	sp, #8
 8007eb4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007eb6:	f001 fa3b 	bl	8009330 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8007eba:	2300      	movs	r3, #0
 8007ebc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007ebe:	4b04      	ldr	r3, [pc, #16]	@ (8007ed0 <xTaskGetTickCountFromISR+0x20>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007ec4:	683b      	ldr	r3, [r7, #0]
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3708      	adds	r7, #8
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	bf00      	nop
 8007ed0:	20001008 	.word	0x20001008

08007ed4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b086      	sub	sp, #24
 8007ed8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007eda:	2300      	movs	r3, #0
 8007edc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ede:	4b4f      	ldr	r3, [pc, #316]	@ (800801c <xTaskIncrementTick+0x148>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	f040 8090 	bne.w	8008008 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007ee8:	4b4d      	ldr	r3, [pc, #308]	@ (8008020 <xTaskIncrementTick+0x14c>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	3301      	adds	r3, #1
 8007eee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007ef0:	4a4b      	ldr	r2, [pc, #300]	@ (8008020 <xTaskIncrementTick+0x14c>)
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d121      	bne.n	8007f40 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007efc:	4b49      	ldr	r3, [pc, #292]	@ (8008024 <xTaskIncrementTick+0x150>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d00b      	beq.n	8007f1e <xTaskIncrementTick+0x4a>
	__asm volatile
 8007f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f0a:	f383 8811 	msr	BASEPRI, r3
 8007f0e:	f3bf 8f6f 	isb	sy
 8007f12:	f3bf 8f4f 	dsb	sy
 8007f16:	603b      	str	r3, [r7, #0]
}
 8007f18:	bf00      	nop
 8007f1a:	bf00      	nop
 8007f1c:	e7fd      	b.n	8007f1a <xTaskIncrementTick+0x46>
 8007f1e:	4b41      	ldr	r3, [pc, #260]	@ (8008024 <xTaskIncrementTick+0x150>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	60fb      	str	r3, [r7, #12]
 8007f24:	4b40      	ldr	r3, [pc, #256]	@ (8008028 <xTaskIncrementTick+0x154>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4a3e      	ldr	r2, [pc, #248]	@ (8008024 <xTaskIncrementTick+0x150>)
 8007f2a:	6013      	str	r3, [r2, #0]
 8007f2c:	4a3e      	ldr	r2, [pc, #248]	@ (8008028 <xTaskIncrementTick+0x154>)
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	6013      	str	r3, [r2, #0]
 8007f32:	4b3e      	ldr	r3, [pc, #248]	@ (800802c <xTaskIncrementTick+0x158>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	3301      	adds	r3, #1
 8007f38:	4a3c      	ldr	r2, [pc, #240]	@ (800802c <xTaskIncrementTick+0x158>)
 8007f3a:	6013      	str	r3, [r2, #0]
 8007f3c:	f000 fae0 	bl	8008500 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007f40:	4b3b      	ldr	r3, [pc, #236]	@ (8008030 <xTaskIncrementTick+0x15c>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	693a      	ldr	r2, [r7, #16]
 8007f46:	429a      	cmp	r2, r3
 8007f48:	d349      	bcc.n	8007fde <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f4a:	4b36      	ldr	r3, [pc, #216]	@ (8008024 <xTaskIncrementTick+0x150>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d104      	bne.n	8007f5e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f54:	4b36      	ldr	r3, [pc, #216]	@ (8008030 <xTaskIncrementTick+0x15c>)
 8007f56:	f04f 32ff 	mov.w	r2, #4294967295
 8007f5a:	601a      	str	r2, [r3, #0]
					break;
 8007f5c:	e03f      	b.n	8007fde <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f5e:	4b31      	ldr	r3, [pc, #196]	@ (8008024 <xTaskIncrementTick+0x150>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	68db      	ldr	r3, [r3, #12]
 8007f64:	68db      	ldr	r3, [r3, #12]
 8007f66:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007f6e:	693a      	ldr	r2, [r7, #16]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	429a      	cmp	r2, r3
 8007f74:	d203      	bcs.n	8007f7e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007f76:	4a2e      	ldr	r2, [pc, #184]	@ (8008030 <xTaskIncrementTick+0x15c>)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007f7c:	e02f      	b.n	8007fde <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	3304      	adds	r3, #4
 8007f82:	4618      	mov	r0, r3
 8007f84:	f7fe fc6c 	bl	8006860 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d004      	beq.n	8007f9a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	3318      	adds	r3, #24
 8007f94:	4618      	mov	r0, r3
 8007f96:	f7fe fc63 	bl	8006860 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f9e:	4b25      	ldr	r3, [pc, #148]	@ (8008034 <xTaskIncrementTick+0x160>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d903      	bls.n	8007fae <xTaskIncrementTick+0xda>
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007faa:	4a22      	ldr	r2, [pc, #136]	@ (8008034 <xTaskIncrementTick+0x160>)
 8007fac:	6013      	str	r3, [r2, #0]
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fb2:	4613      	mov	r3, r2
 8007fb4:	009b      	lsls	r3, r3, #2
 8007fb6:	4413      	add	r3, r2
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	4a1f      	ldr	r2, [pc, #124]	@ (8008038 <xTaskIncrementTick+0x164>)
 8007fbc:	441a      	add	r2, r3
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	3304      	adds	r3, #4
 8007fc2:	4619      	mov	r1, r3
 8007fc4:	4610      	mov	r0, r2
 8007fc6:	f7fe fbf0 	bl	80067aa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fce:	4b1b      	ldr	r3, [pc, #108]	@ (800803c <xTaskIncrementTick+0x168>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fd4:	429a      	cmp	r2, r3
 8007fd6:	d3b8      	bcc.n	8007f4a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007fdc:	e7b5      	b.n	8007f4a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007fde:	4b17      	ldr	r3, [pc, #92]	@ (800803c <xTaskIncrementTick+0x168>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fe4:	4914      	ldr	r1, [pc, #80]	@ (8008038 <xTaskIncrementTick+0x164>)
 8007fe6:	4613      	mov	r3, r2
 8007fe8:	009b      	lsls	r3, r3, #2
 8007fea:	4413      	add	r3, r2
 8007fec:	009b      	lsls	r3, r3, #2
 8007fee:	440b      	add	r3, r1
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	2b01      	cmp	r3, #1
 8007ff4:	d901      	bls.n	8007ffa <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007ffa:	4b11      	ldr	r3, [pc, #68]	@ (8008040 <xTaskIncrementTick+0x16c>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d007      	beq.n	8008012 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008002:	2301      	movs	r3, #1
 8008004:	617b      	str	r3, [r7, #20]
 8008006:	e004      	b.n	8008012 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008008:	4b0e      	ldr	r3, [pc, #56]	@ (8008044 <xTaskIncrementTick+0x170>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	3301      	adds	r3, #1
 800800e:	4a0d      	ldr	r2, [pc, #52]	@ (8008044 <xTaskIncrementTick+0x170>)
 8008010:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008012:	697b      	ldr	r3, [r7, #20]
}
 8008014:	4618      	mov	r0, r3
 8008016:	3718      	adds	r7, #24
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}
 800801c:	2000102c 	.word	0x2000102c
 8008020:	20001008 	.word	0x20001008
 8008024:	20000fbc 	.word	0x20000fbc
 8008028:	20000fc0 	.word	0x20000fc0
 800802c:	2000101c 	.word	0x2000101c
 8008030:	20001024 	.word	0x20001024
 8008034:	2000100c 	.word	0x2000100c
 8008038:	20000b34 	.word	0x20000b34
 800803c:	20000b30 	.word	0x20000b30
 8008040:	20001018 	.word	0x20001018
 8008044:	20001014 	.word	0x20001014

08008048 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008048:	b480      	push	{r7}
 800804a:	b085      	sub	sp, #20
 800804c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800804e:	4b2a      	ldr	r3, [pc, #168]	@ (80080f8 <vTaskSwitchContext+0xb0>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d003      	beq.n	800805e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008056:	4b29      	ldr	r3, [pc, #164]	@ (80080fc <vTaskSwitchContext+0xb4>)
 8008058:	2201      	movs	r2, #1
 800805a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800805c:	e047      	b.n	80080ee <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800805e:	4b27      	ldr	r3, [pc, #156]	@ (80080fc <vTaskSwitchContext+0xb4>)
 8008060:	2200      	movs	r2, #0
 8008062:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008064:	4b26      	ldr	r3, [pc, #152]	@ (8008100 <vTaskSwitchContext+0xb8>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	60fb      	str	r3, [r7, #12]
 800806a:	e011      	b.n	8008090 <vTaskSwitchContext+0x48>
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d10b      	bne.n	800808a <vTaskSwitchContext+0x42>
	__asm volatile
 8008072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008076:	f383 8811 	msr	BASEPRI, r3
 800807a:	f3bf 8f6f 	isb	sy
 800807e:	f3bf 8f4f 	dsb	sy
 8008082:	607b      	str	r3, [r7, #4]
}
 8008084:	bf00      	nop
 8008086:	bf00      	nop
 8008088:	e7fd      	b.n	8008086 <vTaskSwitchContext+0x3e>
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	3b01      	subs	r3, #1
 800808e:	60fb      	str	r3, [r7, #12]
 8008090:	491c      	ldr	r1, [pc, #112]	@ (8008104 <vTaskSwitchContext+0xbc>)
 8008092:	68fa      	ldr	r2, [r7, #12]
 8008094:	4613      	mov	r3, r2
 8008096:	009b      	lsls	r3, r3, #2
 8008098:	4413      	add	r3, r2
 800809a:	009b      	lsls	r3, r3, #2
 800809c:	440b      	add	r3, r1
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d0e3      	beq.n	800806c <vTaskSwitchContext+0x24>
 80080a4:	68fa      	ldr	r2, [r7, #12]
 80080a6:	4613      	mov	r3, r2
 80080a8:	009b      	lsls	r3, r3, #2
 80080aa:	4413      	add	r3, r2
 80080ac:	009b      	lsls	r3, r3, #2
 80080ae:	4a15      	ldr	r2, [pc, #84]	@ (8008104 <vTaskSwitchContext+0xbc>)
 80080b0:	4413      	add	r3, r2
 80080b2:	60bb      	str	r3, [r7, #8]
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	685a      	ldr	r2, [r3, #4]
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	605a      	str	r2, [r3, #4]
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	685a      	ldr	r2, [r3, #4]
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	3308      	adds	r3, #8
 80080c6:	429a      	cmp	r2, r3
 80080c8:	d104      	bne.n	80080d4 <vTaskSwitchContext+0x8c>
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	685a      	ldr	r2, [r3, #4]
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	605a      	str	r2, [r3, #4]
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	68db      	ldr	r3, [r3, #12]
 80080da:	4a0b      	ldr	r2, [pc, #44]	@ (8008108 <vTaskSwitchContext+0xc0>)
 80080dc:	6013      	str	r3, [r2, #0]
 80080de:	4a08      	ldr	r2, [pc, #32]	@ (8008100 <vTaskSwitchContext+0xb8>)
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80080e4:	4b08      	ldr	r3, [pc, #32]	@ (8008108 <vTaskSwitchContext+0xc0>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	3354      	adds	r3, #84	@ 0x54
 80080ea:	4a08      	ldr	r2, [pc, #32]	@ (800810c <vTaskSwitchContext+0xc4>)
 80080ec:	6013      	str	r3, [r2, #0]
}
 80080ee:	bf00      	nop
 80080f0:	3714      	adds	r7, #20
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bc80      	pop	{r7}
 80080f6:	4770      	bx	lr
 80080f8:	2000102c 	.word	0x2000102c
 80080fc:	20001018 	.word	0x20001018
 8008100:	2000100c 	.word	0x2000100c
 8008104:	20000b34 	.word	0x20000b34
 8008108:	20000b30 	.word	0x20000b30
 800810c:	20000030 	.word	0x20000030

08008110 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b084      	sub	sp, #16
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
 8008118:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d10b      	bne.n	8008138 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008124:	f383 8811 	msr	BASEPRI, r3
 8008128:	f3bf 8f6f 	isb	sy
 800812c:	f3bf 8f4f 	dsb	sy
 8008130:	60fb      	str	r3, [r7, #12]
}
 8008132:	bf00      	nop
 8008134:	bf00      	nop
 8008136:	e7fd      	b.n	8008134 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008138:	4b07      	ldr	r3, [pc, #28]	@ (8008158 <vTaskPlaceOnEventList+0x48>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	3318      	adds	r3, #24
 800813e:	4619      	mov	r1, r3
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f7fe fb55 	bl	80067f0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008146:	2101      	movs	r1, #1
 8008148:	6838      	ldr	r0, [r7, #0]
 800814a:	f000 fb95 	bl	8008878 <prvAddCurrentTaskToDelayedList>
}
 800814e:	bf00      	nop
 8008150:	3710      	adds	r7, #16
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}
 8008156:	bf00      	nop
 8008158:	20000b30 	.word	0x20000b30

0800815c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800815c:	b580      	push	{r7, lr}
 800815e:	b086      	sub	sp, #24
 8008160:	af00      	add	r7, sp, #0
 8008162:	60f8      	str	r0, [r7, #12]
 8008164:	60b9      	str	r1, [r7, #8]
 8008166:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d10b      	bne.n	8008186 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800816e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008172:	f383 8811 	msr	BASEPRI, r3
 8008176:	f3bf 8f6f 	isb	sy
 800817a:	f3bf 8f4f 	dsb	sy
 800817e:	617b      	str	r3, [r7, #20]
}
 8008180:	bf00      	nop
 8008182:	bf00      	nop
 8008184:	e7fd      	b.n	8008182 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008186:	4b0a      	ldr	r3, [pc, #40]	@ (80081b0 <vTaskPlaceOnEventListRestricted+0x54>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	3318      	adds	r3, #24
 800818c:	4619      	mov	r1, r3
 800818e:	68f8      	ldr	r0, [r7, #12]
 8008190:	f7fe fb0b 	bl	80067aa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d002      	beq.n	80081a0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800819a:	f04f 33ff 	mov.w	r3, #4294967295
 800819e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80081a0:	6879      	ldr	r1, [r7, #4]
 80081a2:	68b8      	ldr	r0, [r7, #8]
 80081a4:	f000 fb68 	bl	8008878 <prvAddCurrentTaskToDelayedList>
	}
 80081a8:	bf00      	nop
 80081aa:	3718      	adds	r7, #24
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}
 80081b0:	20000b30 	.word	0x20000b30

080081b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b086      	sub	sp, #24
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	68db      	ldr	r3, [r3, #12]
 80081c0:	68db      	ldr	r3, [r3, #12]
 80081c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d10b      	bne.n	80081e2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80081ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081ce:	f383 8811 	msr	BASEPRI, r3
 80081d2:	f3bf 8f6f 	isb	sy
 80081d6:	f3bf 8f4f 	dsb	sy
 80081da:	60fb      	str	r3, [r7, #12]
}
 80081dc:	bf00      	nop
 80081de:	bf00      	nop
 80081e0:	e7fd      	b.n	80081de <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	3318      	adds	r3, #24
 80081e6:	4618      	mov	r0, r3
 80081e8:	f7fe fb3a 	bl	8006860 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081ec:	4b1d      	ldr	r3, [pc, #116]	@ (8008264 <xTaskRemoveFromEventList+0xb0>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d11d      	bne.n	8008230 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	3304      	adds	r3, #4
 80081f8:	4618      	mov	r0, r3
 80081fa:	f7fe fb31 	bl	8006860 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008202:	4b19      	ldr	r3, [pc, #100]	@ (8008268 <xTaskRemoveFromEventList+0xb4>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	429a      	cmp	r2, r3
 8008208:	d903      	bls.n	8008212 <xTaskRemoveFromEventList+0x5e>
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800820e:	4a16      	ldr	r2, [pc, #88]	@ (8008268 <xTaskRemoveFromEventList+0xb4>)
 8008210:	6013      	str	r3, [r2, #0]
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008216:	4613      	mov	r3, r2
 8008218:	009b      	lsls	r3, r3, #2
 800821a:	4413      	add	r3, r2
 800821c:	009b      	lsls	r3, r3, #2
 800821e:	4a13      	ldr	r2, [pc, #76]	@ (800826c <xTaskRemoveFromEventList+0xb8>)
 8008220:	441a      	add	r2, r3
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	3304      	adds	r3, #4
 8008226:	4619      	mov	r1, r3
 8008228:	4610      	mov	r0, r2
 800822a:	f7fe fabe 	bl	80067aa <vListInsertEnd>
 800822e:	e005      	b.n	800823c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	3318      	adds	r3, #24
 8008234:	4619      	mov	r1, r3
 8008236:	480e      	ldr	r0, [pc, #56]	@ (8008270 <xTaskRemoveFromEventList+0xbc>)
 8008238:	f7fe fab7 	bl	80067aa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008240:	4b0c      	ldr	r3, [pc, #48]	@ (8008274 <xTaskRemoveFromEventList+0xc0>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008246:	429a      	cmp	r2, r3
 8008248:	d905      	bls.n	8008256 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800824a:	2301      	movs	r3, #1
 800824c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800824e:	4b0a      	ldr	r3, [pc, #40]	@ (8008278 <xTaskRemoveFromEventList+0xc4>)
 8008250:	2201      	movs	r2, #1
 8008252:	601a      	str	r2, [r3, #0]
 8008254:	e001      	b.n	800825a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008256:	2300      	movs	r3, #0
 8008258:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800825a:	697b      	ldr	r3, [r7, #20]
}
 800825c:	4618      	mov	r0, r3
 800825e:	3718      	adds	r7, #24
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}
 8008264:	2000102c 	.word	0x2000102c
 8008268:	2000100c 	.word	0x2000100c
 800826c:	20000b34 	.word	0x20000b34
 8008270:	20000fc4 	.word	0x20000fc4
 8008274:	20000b30 	.word	0x20000b30
 8008278:	20001018 	.word	0x20001018

0800827c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800827c:	b480      	push	{r7}
 800827e:	b083      	sub	sp, #12
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008284:	4b06      	ldr	r3, [pc, #24]	@ (80082a0 <vTaskInternalSetTimeOutState+0x24>)
 8008286:	681a      	ldr	r2, [r3, #0]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800828c:	4b05      	ldr	r3, [pc, #20]	@ (80082a4 <vTaskInternalSetTimeOutState+0x28>)
 800828e:	681a      	ldr	r2, [r3, #0]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	605a      	str	r2, [r3, #4]
}
 8008294:	bf00      	nop
 8008296:	370c      	adds	r7, #12
 8008298:	46bd      	mov	sp, r7
 800829a:	bc80      	pop	{r7}
 800829c:	4770      	bx	lr
 800829e:	bf00      	nop
 80082a0:	2000101c 	.word	0x2000101c
 80082a4:	20001008 	.word	0x20001008

080082a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b088      	sub	sp, #32
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
 80082b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d10b      	bne.n	80082d0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80082b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082bc:	f383 8811 	msr	BASEPRI, r3
 80082c0:	f3bf 8f6f 	isb	sy
 80082c4:	f3bf 8f4f 	dsb	sy
 80082c8:	613b      	str	r3, [r7, #16]
}
 80082ca:	bf00      	nop
 80082cc:	bf00      	nop
 80082ce:	e7fd      	b.n	80082cc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d10b      	bne.n	80082ee <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80082d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082da:	f383 8811 	msr	BASEPRI, r3
 80082de:	f3bf 8f6f 	isb	sy
 80082e2:	f3bf 8f4f 	dsb	sy
 80082e6:	60fb      	str	r3, [r7, #12]
}
 80082e8:	bf00      	nop
 80082ea:	bf00      	nop
 80082ec:	e7fd      	b.n	80082ea <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80082ee:	f000 ff5d 	bl	80091ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80082f2:	4b1d      	ldr	r3, [pc, #116]	@ (8008368 <xTaskCheckForTimeOut+0xc0>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	69ba      	ldr	r2, [r7, #24]
 80082fe:	1ad3      	subs	r3, r2, r3
 8008300:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800830a:	d102      	bne.n	8008312 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800830c:	2300      	movs	r3, #0
 800830e:	61fb      	str	r3, [r7, #28]
 8008310:	e023      	b.n	800835a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681a      	ldr	r2, [r3, #0]
 8008316:	4b15      	ldr	r3, [pc, #84]	@ (800836c <xTaskCheckForTimeOut+0xc4>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	429a      	cmp	r2, r3
 800831c:	d007      	beq.n	800832e <xTaskCheckForTimeOut+0x86>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	69ba      	ldr	r2, [r7, #24]
 8008324:	429a      	cmp	r2, r3
 8008326:	d302      	bcc.n	800832e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008328:	2301      	movs	r3, #1
 800832a:	61fb      	str	r3, [r7, #28]
 800832c:	e015      	b.n	800835a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	697a      	ldr	r2, [r7, #20]
 8008334:	429a      	cmp	r2, r3
 8008336:	d20b      	bcs.n	8008350 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	681a      	ldr	r2, [r3, #0]
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	1ad2      	subs	r2, r2, r3
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f7ff ff99 	bl	800827c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800834a:	2300      	movs	r3, #0
 800834c:	61fb      	str	r3, [r7, #28]
 800834e:	e004      	b.n	800835a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	2200      	movs	r2, #0
 8008354:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008356:	2301      	movs	r3, #1
 8008358:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800835a:	f000 ff57 	bl	800920c <vPortExitCritical>

	return xReturn;
 800835e:	69fb      	ldr	r3, [r7, #28]
}
 8008360:	4618      	mov	r0, r3
 8008362:	3720      	adds	r7, #32
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}
 8008368:	20001008 	.word	0x20001008
 800836c:	2000101c 	.word	0x2000101c

08008370 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008370:	b480      	push	{r7}
 8008372:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008374:	4b03      	ldr	r3, [pc, #12]	@ (8008384 <vTaskMissedYield+0x14>)
 8008376:	2201      	movs	r2, #1
 8008378:	601a      	str	r2, [r3, #0]
}
 800837a:	bf00      	nop
 800837c:	46bd      	mov	sp, r7
 800837e:	bc80      	pop	{r7}
 8008380:	4770      	bx	lr
 8008382:	bf00      	nop
 8008384:	20001018 	.word	0x20001018

08008388 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b082      	sub	sp, #8
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008390:	f000 f852 	bl	8008438 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008394:	4b06      	ldr	r3, [pc, #24]	@ (80083b0 <prvIdleTask+0x28>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	2b01      	cmp	r3, #1
 800839a:	d9f9      	bls.n	8008390 <prvIdleTask+0x8>
			{
				taskYIELD();
 800839c:	4b05      	ldr	r3, [pc, #20]	@ (80083b4 <prvIdleTask+0x2c>)
 800839e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083a2:	601a      	str	r2, [r3, #0]
 80083a4:	f3bf 8f4f 	dsb	sy
 80083a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80083ac:	e7f0      	b.n	8008390 <prvIdleTask+0x8>
 80083ae:	bf00      	nop
 80083b0:	20000b34 	.word	0x20000b34
 80083b4:	e000ed04 	.word	0xe000ed04

080083b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b082      	sub	sp, #8
 80083bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80083be:	2300      	movs	r3, #0
 80083c0:	607b      	str	r3, [r7, #4]
 80083c2:	e00c      	b.n	80083de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80083c4:	687a      	ldr	r2, [r7, #4]
 80083c6:	4613      	mov	r3, r2
 80083c8:	009b      	lsls	r3, r3, #2
 80083ca:	4413      	add	r3, r2
 80083cc:	009b      	lsls	r3, r3, #2
 80083ce:	4a12      	ldr	r2, [pc, #72]	@ (8008418 <prvInitialiseTaskLists+0x60>)
 80083d0:	4413      	add	r3, r2
 80083d2:	4618      	mov	r0, r3
 80083d4:	f7fe f9be 	bl	8006754 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	3301      	adds	r3, #1
 80083dc:	607b      	str	r3, [r7, #4]
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2b37      	cmp	r3, #55	@ 0x37
 80083e2:	d9ef      	bls.n	80083c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80083e4:	480d      	ldr	r0, [pc, #52]	@ (800841c <prvInitialiseTaskLists+0x64>)
 80083e6:	f7fe f9b5 	bl	8006754 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80083ea:	480d      	ldr	r0, [pc, #52]	@ (8008420 <prvInitialiseTaskLists+0x68>)
 80083ec:	f7fe f9b2 	bl	8006754 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80083f0:	480c      	ldr	r0, [pc, #48]	@ (8008424 <prvInitialiseTaskLists+0x6c>)
 80083f2:	f7fe f9af 	bl	8006754 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80083f6:	480c      	ldr	r0, [pc, #48]	@ (8008428 <prvInitialiseTaskLists+0x70>)
 80083f8:	f7fe f9ac 	bl	8006754 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80083fc:	480b      	ldr	r0, [pc, #44]	@ (800842c <prvInitialiseTaskLists+0x74>)
 80083fe:	f7fe f9a9 	bl	8006754 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008402:	4b0b      	ldr	r3, [pc, #44]	@ (8008430 <prvInitialiseTaskLists+0x78>)
 8008404:	4a05      	ldr	r2, [pc, #20]	@ (800841c <prvInitialiseTaskLists+0x64>)
 8008406:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008408:	4b0a      	ldr	r3, [pc, #40]	@ (8008434 <prvInitialiseTaskLists+0x7c>)
 800840a:	4a05      	ldr	r2, [pc, #20]	@ (8008420 <prvInitialiseTaskLists+0x68>)
 800840c:	601a      	str	r2, [r3, #0]
}
 800840e:	bf00      	nop
 8008410:	3708      	adds	r7, #8
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}
 8008416:	bf00      	nop
 8008418:	20000b34 	.word	0x20000b34
 800841c:	20000f94 	.word	0x20000f94
 8008420:	20000fa8 	.word	0x20000fa8
 8008424:	20000fc4 	.word	0x20000fc4
 8008428:	20000fd8 	.word	0x20000fd8
 800842c:	20000ff0 	.word	0x20000ff0
 8008430:	20000fbc 	.word	0x20000fbc
 8008434:	20000fc0 	.word	0x20000fc0

08008438 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b082      	sub	sp, #8
 800843c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800843e:	e019      	b.n	8008474 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008440:	f000 feb4 	bl	80091ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008444:	4b10      	ldr	r3, [pc, #64]	@ (8008488 <prvCheckTasksWaitingTermination+0x50>)
 8008446:	68db      	ldr	r3, [r3, #12]
 8008448:	68db      	ldr	r3, [r3, #12]
 800844a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	3304      	adds	r3, #4
 8008450:	4618      	mov	r0, r3
 8008452:	f7fe fa05 	bl	8006860 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008456:	4b0d      	ldr	r3, [pc, #52]	@ (800848c <prvCheckTasksWaitingTermination+0x54>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	3b01      	subs	r3, #1
 800845c:	4a0b      	ldr	r2, [pc, #44]	@ (800848c <prvCheckTasksWaitingTermination+0x54>)
 800845e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008460:	4b0b      	ldr	r3, [pc, #44]	@ (8008490 <prvCheckTasksWaitingTermination+0x58>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	3b01      	subs	r3, #1
 8008466:	4a0a      	ldr	r2, [pc, #40]	@ (8008490 <prvCheckTasksWaitingTermination+0x58>)
 8008468:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800846a:	f000 fecf 	bl	800920c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f000 f810 	bl	8008494 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008474:	4b06      	ldr	r3, [pc, #24]	@ (8008490 <prvCheckTasksWaitingTermination+0x58>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d1e1      	bne.n	8008440 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800847c:	bf00      	nop
 800847e:	bf00      	nop
 8008480:	3708      	adds	r7, #8
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}
 8008486:	bf00      	nop
 8008488:	20000fd8 	.word	0x20000fd8
 800848c:	20001004 	.word	0x20001004
 8008490:	20000fec 	.word	0x20000fec

08008494 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008494:	b580      	push	{r7, lr}
 8008496:	b084      	sub	sp, #16
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	3354      	adds	r3, #84	@ 0x54
 80084a0:	4618      	mov	r0, r3
 80084a2:	f001 ff3d 	bl	800a320 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d108      	bne.n	80084c2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084b4:	4618      	mov	r0, r3
 80084b6:	f001 f849 	bl	800954c <vPortFree>
				vPortFree( pxTCB );
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f001 f846 	bl	800954c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80084c0:	e019      	b.n	80084f6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	d103      	bne.n	80084d4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f001 f83d 	bl	800954c <vPortFree>
	}
 80084d2:	e010      	b.n	80084f6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80084da:	2b02      	cmp	r3, #2
 80084dc:	d00b      	beq.n	80084f6 <prvDeleteTCB+0x62>
	__asm volatile
 80084de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084e2:	f383 8811 	msr	BASEPRI, r3
 80084e6:	f3bf 8f6f 	isb	sy
 80084ea:	f3bf 8f4f 	dsb	sy
 80084ee:	60fb      	str	r3, [r7, #12]
}
 80084f0:	bf00      	nop
 80084f2:	bf00      	nop
 80084f4:	e7fd      	b.n	80084f2 <prvDeleteTCB+0x5e>
	}
 80084f6:	bf00      	nop
 80084f8:	3710      	adds	r7, #16
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}
	...

08008500 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008500:	b480      	push	{r7}
 8008502:	b083      	sub	sp, #12
 8008504:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008506:	4b0c      	ldr	r3, [pc, #48]	@ (8008538 <prvResetNextTaskUnblockTime+0x38>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d104      	bne.n	800851a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008510:	4b0a      	ldr	r3, [pc, #40]	@ (800853c <prvResetNextTaskUnblockTime+0x3c>)
 8008512:	f04f 32ff 	mov.w	r2, #4294967295
 8008516:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008518:	e008      	b.n	800852c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800851a:	4b07      	ldr	r3, [pc, #28]	@ (8008538 <prvResetNextTaskUnblockTime+0x38>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	68db      	ldr	r3, [r3, #12]
 8008520:	68db      	ldr	r3, [r3, #12]
 8008522:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	685b      	ldr	r3, [r3, #4]
 8008528:	4a04      	ldr	r2, [pc, #16]	@ (800853c <prvResetNextTaskUnblockTime+0x3c>)
 800852a:	6013      	str	r3, [r2, #0]
}
 800852c:	bf00      	nop
 800852e:	370c      	adds	r7, #12
 8008530:	46bd      	mov	sp, r7
 8008532:	bc80      	pop	{r7}
 8008534:	4770      	bx	lr
 8008536:	bf00      	nop
 8008538:	20000fbc 	.word	0x20000fbc
 800853c:	20001024 	.word	0x20001024

08008540 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8008540:	b480      	push	{r7}
 8008542:	b083      	sub	sp, #12
 8008544:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8008546:	4b04      	ldr	r3, [pc, #16]	@ (8008558 <xTaskGetCurrentTaskHandle+0x18>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800854c:	687b      	ldr	r3, [r7, #4]
	}
 800854e:	4618      	mov	r0, r3
 8008550:	370c      	adds	r7, #12
 8008552:	46bd      	mov	sp, r7
 8008554:	bc80      	pop	{r7}
 8008556:	4770      	bx	lr
 8008558:	20000b30 	.word	0x20000b30

0800855c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800855c:	b480      	push	{r7}
 800855e:	b083      	sub	sp, #12
 8008560:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008562:	4b0b      	ldr	r3, [pc, #44]	@ (8008590 <xTaskGetSchedulerState+0x34>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d102      	bne.n	8008570 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800856a:	2301      	movs	r3, #1
 800856c:	607b      	str	r3, [r7, #4]
 800856e:	e008      	b.n	8008582 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008570:	4b08      	ldr	r3, [pc, #32]	@ (8008594 <xTaskGetSchedulerState+0x38>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d102      	bne.n	800857e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008578:	2302      	movs	r3, #2
 800857a:	607b      	str	r3, [r7, #4]
 800857c:	e001      	b.n	8008582 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800857e:	2300      	movs	r3, #0
 8008580:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008582:	687b      	ldr	r3, [r7, #4]
	}
 8008584:	4618      	mov	r0, r3
 8008586:	370c      	adds	r7, #12
 8008588:	46bd      	mov	sp, r7
 800858a:	bc80      	pop	{r7}
 800858c:	4770      	bx	lr
 800858e:	bf00      	nop
 8008590:	20001010 	.word	0x20001010
 8008594:	2000102c 	.word	0x2000102c

08008598 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008598:	b580      	push	{r7, lr}
 800859a:	b084      	sub	sp, #16
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80085a4:	2300      	movs	r3, #0
 80085a6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d051      	beq.n	8008652 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085b2:	4b2a      	ldr	r3, [pc, #168]	@ (800865c <xTaskPriorityInherit+0xc4>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085b8:	429a      	cmp	r2, r3
 80085ba:	d241      	bcs.n	8008640 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	699b      	ldr	r3, [r3, #24]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	db06      	blt.n	80085d2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085c4:	4b25      	ldr	r3, [pc, #148]	@ (800865c <xTaskPriorityInherit+0xc4>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085ca:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	6959      	ldr	r1, [r3, #20]
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085da:	4613      	mov	r3, r2
 80085dc:	009b      	lsls	r3, r3, #2
 80085de:	4413      	add	r3, r2
 80085e0:	009b      	lsls	r3, r3, #2
 80085e2:	4a1f      	ldr	r2, [pc, #124]	@ (8008660 <xTaskPriorityInherit+0xc8>)
 80085e4:	4413      	add	r3, r2
 80085e6:	4299      	cmp	r1, r3
 80085e8:	d122      	bne.n	8008630 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	3304      	adds	r3, #4
 80085ee:	4618      	mov	r0, r3
 80085f0:	f7fe f936 	bl	8006860 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80085f4:	4b19      	ldr	r3, [pc, #100]	@ (800865c <xTaskPriorityInherit+0xc4>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008602:	4b18      	ldr	r3, [pc, #96]	@ (8008664 <xTaskPriorityInherit+0xcc>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	429a      	cmp	r2, r3
 8008608:	d903      	bls.n	8008612 <xTaskPriorityInherit+0x7a>
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800860e:	4a15      	ldr	r2, [pc, #84]	@ (8008664 <xTaskPriorityInherit+0xcc>)
 8008610:	6013      	str	r3, [r2, #0]
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008616:	4613      	mov	r3, r2
 8008618:	009b      	lsls	r3, r3, #2
 800861a:	4413      	add	r3, r2
 800861c:	009b      	lsls	r3, r3, #2
 800861e:	4a10      	ldr	r2, [pc, #64]	@ (8008660 <xTaskPriorityInherit+0xc8>)
 8008620:	441a      	add	r2, r3
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	3304      	adds	r3, #4
 8008626:	4619      	mov	r1, r3
 8008628:	4610      	mov	r0, r2
 800862a:	f7fe f8be 	bl	80067aa <vListInsertEnd>
 800862e:	e004      	b.n	800863a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008630:	4b0a      	ldr	r3, [pc, #40]	@ (800865c <xTaskPriorityInherit+0xc4>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800863a:	2301      	movs	r3, #1
 800863c:	60fb      	str	r3, [r7, #12]
 800863e:	e008      	b.n	8008652 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008644:	4b05      	ldr	r3, [pc, #20]	@ (800865c <xTaskPriorityInherit+0xc4>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800864a:	429a      	cmp	r2, r3
 800864c:	d201      	bcs.n	8008652 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800864e:	2301      	movs	r3, #1
 8008650:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008652:	68fb      	ldr	r3, [r7, #12]
	}
 8008654:	4618      	mov	r0, r3
 8008656:	3710      	adds	r7, #16
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}
 800865c:	20000b30 	.word	0x20000b30
 8008660:	20000b34 	.word	0x20000b34
 8008664:	2000100c 	.word	0x2000100c

08008668 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008668:	b580      	push	{r7, lr}
 800866a:	b086      	sub	sp, #24
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008674:	2300      	movs	r3, #0
 8008676:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d058      	beq.n	8008730 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800867e:	4b2f      	ldr	r3, [pc, #188]	@ (800873c <xTaskPriorityDisinherit+0xd4>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	693a      	ldr	r2, [r7, #16]
 8008684:	429a      	cmp	r2, r3
 8008686:	d00b      	beq.n	80086a0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800868c:	f383 8811 	msr	BASEPRI, r3
 8008690:	f3bf 8f6f 	isb	sy
 8008694:	f3bf 8f4f 	dsb	sy
 8008698:	60fb      	str	r3, [r7, #12]
}
 800869a:	bf00      	nop
 800869c:	bf00      	nop
 800869e:	e7fd      	b.n	800869c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d10b      	bne.n	80086c0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80086a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086ac:	f383 8811 	msr	BASEPRI, r3
 80086b0:	f3bf 8f6f 	isb	sy
 80086b4:	f3bf 8f4f 	dsb	sy
 80086b8:	60bb      	str	r3, [r7, #8]
}
 80086ba:	bf00      	nop
 80086bc:	bf00      	nop
 80086be:	e7fd      	b.n	80086bc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086c4:	1e5a      	subs	r2, r3, #1
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086d2:	429a      	cmp	r2, r3
 80086d4:	d02c      	beq.n	8008730 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80086d6:	693b      	ldr	r3, [r7, #16]
 80086d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d128      	bne.n	8008730 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	3304      	adds	r3, #4
 80086e2:	4618      	mov	r0, r3
 80086e4:	f7fe f8bc 	bl	8006860 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086f4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80086fc:	693b      	ldr	r3, [r7, #16]
 80086fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008700:	4b0f      	ldr	r3, [pc, #60]	@ (8008740 <xTaskPriorityDisinherit+0xd8>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	429a      	cmp	r2, r3
 8008706:	d903      	bls.n	8008710 <xTaskPriorityDisinherit+0xa8>
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800870c:	4a0c      	ldr	r2, [pc, #48]	@ (8008740 <xTaskPriorityDisinherit+0xd8>)
 800870e:	6013      	str	r3, [r2, #0]
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008714:	4613      	mov	r3, r2
 8008716:	009b      	lsls	r3, r3, #2
 8008718:	4413      	add	r3, r2
 800871a:	009b      	lsls	r3, r3, #2
 800871c:	4a09      	ldr	r2, [pc, #36]	@ (8008744 <xTaskPriorityDisinherit+0xdc>)
 800871e:	441a      	add	r2, r3
 8008720:	693b      	ldr	r3, [r7, #16]
 8008722:	3304      	adds	r3, #4
 8008724:	4619      	mov	r1, r3
 8008726:	4610      	mov	r0, r2
 8008728:	f7fe f83f 	bl	80067aa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800872c:	2301      	movs	r3, #1
 800872e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008730:	697b      	ldr	r3, [r7, #20]
	}
 8008732:	4618      	mov	r0, r3
 8008734:	3718      	adds	r7, #24
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}
 800873a:	bf00      	nop
 800873c:	20000b30 	.word	0x20000b30
 8008740:	2000100c 	.word	0x2000100c
 8008744:	20000b34 	.word	0x20000b34

08008748 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008748:	b580      	push	{r7, lr}
 800874a:	b088      	sub	sp, #32
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008756:	2301      	movs	r3, #1
 8008758:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d06c      	beq.n	800883a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008760:	69bb      	ldr	r3, [r7, #24]
 8008762:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008764:	2b00      	cmp	r3, #0
 8008766:	d10b      	bne.n	8008780 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8008768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800876c:	f383 8811 	msr	BASEPRI, r3
 8008770:	f3bf 8f6f 	isb	sy
 8008774:	f3bf 8f4f 	dsb	sy
 8008778:	60fb      	str	r3, [r7, #12]
}
 800877a:	bf00      	nop
 800877c:	bf00      	nop
 800877e:	e7fd      	b.n	800877c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008780:	69bb      	ldr	r3, [r7, #24]
 8008782:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008784:	683a      	ldr	r2, [r7, #0]
 8008786:	429a      	cmp	r2, r3
 8008788:	d902      	bls.n	8008790 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	61fb      	str	r3, [r7, #28]
 800878e:	e002      	b.n	8008796 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008790:	69bb      	ldr	r3, [r7, #24]
 8008792:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008794:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008796:	69bb      	ldr	r3, [r7, #24]
 8008798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800879a:	69fa      	ldr	r2, [r7, #28]
 800879c:	429a      	cmp	r2, r3
 800879e:	d04c      	beq.n	800883a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80087a0:	69bb      	ldr	r3, [r7, #24]
 80087a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80087a4:	697a      	ldr	r2, [r7, #20]
 80087a6:	429a      	cmp	r2, r3
 80087a8:	d147      	bne.n	800883a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80087aa:	4b26      	ldr	r3, [pc, #152]	@ (8008844 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	69ba      	ldr	r2, [r7, #24]
 80087b0:	429a      	cmp	r2, r3
 80087b2:	d10b      	bne.n	80087cc <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80087b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087b8:	f383 8811 	msr	BASEPRI, r3
 80087bc:	f3bf 8f6f 	isb	sy
 80087c0:	f3bf 8f4f 	dsb	sy
 80087c4:	60bb      	str	r3, [r7, #8]
}
 80087c6:	bf00      	nop
 80087c8:	bf00      	nop
 80087ca:	e7fd      	b.n	80087c8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80087cc:	69bb      	ldr	r3, [r7, #24]
 80087ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087d0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80087d2:	69bb      	ldr	r3, [r7, #24]
 80087d4:	69fa      	ldr	r2, [r7, #28]
 80087d6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80087d8:	69bb      	ldr	r3, [r7, #24]
 80087da:	699b      	ldr	r3, [r3, #24]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	db04      	blt.n	80087ea <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087e0:	69fb      	ldr	r3, [r7, #28]
 80087e2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80087e6:	69bb      	ldr	r3, [r7, #24]
 80087e8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80087ea:	69bb      	ldr	r3, [r7, #24]
 80087ec:	6959      	ldr	r1, [r3, #20]
 80087ee:	693a      	ldr	r2, [r7, #16]
 80087f0:	4613      	mov	r3, r2
 80087f2:	009b      	lsls	r3, r3, #2
 80087f4:	4413      	add	r3, r2
 80087f6:	009b      	lsls	r3, r3, #2
 80087f8:	4a13      	ldr	r2, [pc, #76]	@ (8008848 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80087fa:	4413      	add	r3, r2
 80087fc:	4299      	cmp	r1, r3
 80087fe:	d11c      	bne.n	800883a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008800:	69bb      	ldr	r3, [r7, #24]
 8008802:	3304      	adds	r3, #4
 8008804:	4618      	mov	r0, r3
 8008806:	f7fe f82b 	bl	8006860 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800880a:	69bb      	ldr	r3, [r7, #24]
 800880c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800880e:	4b0f      	ldr	r3, [pc, #60]	@ (800884c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	429a      	cmp	r2, r3
 8008814:	d903      	bls.n	800881e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8008816:	69bb      	ldr	r3, [r7, #24]
 8008818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800881a:	4a0c      	ldr	r2, [pc, #48]	@ (800884c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800881c:	6013      	str	r3, [r2, #0]
 800881e:	69bb      	ldr	r3, [r7, #24]
 8008820:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008822:	4613      	mov	r3, r2
 8008824:	009b      	lsls	r3, r3, #2
 8008826:	4413      	add	r3, r2
 8008828:	009b      	lsls	r3, r3, #2
 800882a:	4a07      	ldr	r2, [pc, #28]	@ (8008848 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800882c:	441a      	add	r2, r3
 800882e:	69bb      	ldr	r3, [r7, #24]
 8008830:	3304      	adds	r3, #4
 8008832:	4619      	mov	r1, r3
 8008834:	4610      	mov	r0, r2
 8008836:	f7fd ffb8 	bl	80067aa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800883a:	bf00      	nop
 800883c:	3720      	adds	r7, #32
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}
 8008842:	bf00      	nop
 8008844:	20000b30 	.word	0x20000b30
 8008848:	20000b34 	.word	0x20000b34
 800884c:	2000100c 	.word	0x2000100c

08008850 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008850:	b480      	push	{r7}
 8008852:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008854:	4b07      	ldr	r3, [pc, #28]	@ (8008874 <pvTaskIncrementMutexHeldCount+0x24>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d004      	beq.n	8008866 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800885c:	4b05      	ldr	r3, [pc, #20]	@ (8008874 <pvTaskIncrementMutexHeldCount+0x24>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008862:	3201      	adds	r2, #1
 8008864:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8008866:	4b03      	ldr	r3, [pc, #12]	@ (8008874 <pvTaskIncrementMutexHeldCount+0x24>)
 8008868:	681b      	ldr	r3, [r3, #0]
	}
 800886a:	4618      	mov	r0, r3
 800886c:	46bd      	mov	sp, r7
 800886e:	bc80      	pop	{r7}
 8008870:	4770      	bx	lr
 8008872:	bf00      	nop
 8008874:	20000b30 	.word	0x20000b30

08008878 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b084      	sub	sp, #16
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008882:	4b21      	ldr	r3, [pc, #132]	@ (8008908 <prvAddCurrentTaskToDelayedList+0x90>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008888:	4b20      	ldr	r3, [pc, #128]	@ (800890c <prvAddCurrentTaskToDelayedList+0x94>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	3304      	adds	r3, #4
 800888e:	4618      	mov	r0, r3
 8008890:	f7fd ffe6 	bl	8006860 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800889a:	d10a      	bne.n	80088b2 <prvAddCurrentTaskToDelayedList+0x3a>
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d007      	beq.n	80088b2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80088a2:	4b1a      	ldr	r3, [pc, #104]	@ (800890c <prvAddCurrentTaskToDelayedList+0x94>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	3304      	adds	r3, #4
 80088a8:	4619      	mov	r1, r3
 80088aa:	4819      	ldr	r0, [pc, #100]	@ (8008910 <prvAddCurrentTaskToDelayedList+0x98>)
 80088ac:	f7fd ff7d 	bl	80067aa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80088b0:	e026      	b.n	8008900 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80088b2:	68fa      	ldr	r2, [r7, #12]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	4413      	add	r3, r2
 80088b8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80088ba:	4b14      	ldr	r3, [pc, #80]	@ (800890c <prvAddCurrentTaskToDelayedList+0x94>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	68ba      	ldr	r2, [r7, #8]
 80088c0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80088c2:	68ba      	ldr	r2, [r7, #8]
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	429a      	cmp	r2, r3
 80088c8:	d209      	bcs.n	80088de <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80088ca:	4b12      	ldr	r3, [pc, #72]	@ (8008914 <prvAddCurrentTaskToDelayedList+0x9c>)
 80088cc:	681a      	ldr	r2, [r3, #0]
 80088ce:	4b0f      	ldr	r3, [pc, #60]	@ (800890c <prvAddCurrentTaskToDelayedList+0x94>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	3304      	adds	r3, #4
 80088d4:	4619      	mov	r1, r3
 80088d6:	4610      	mov	r0, r2
 80088d8:	f7fd ff8a 	bl	80067f0 <vListInsert>
}
 80088dc:	e010      	b.n	8008900 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80088de:	4b0e      	ldr	r3, [pc, #56]	@ (8008918 <prvAddCurrentTaskToDelayedList+0xa0>)
 80088e0:	681a      	ldr	r2, [r3, #0]
 80088e2:	4b0a      	ldr	r3, [pc, #40]	@ (800890c <prvAddCurrentTaskToDelayedList+0x94>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	3304      	adds	r3, #4
 80088e8:	4619      	mov	r1, r3
 80088ea:	4610      	mov	r0, r2
 80088ec:	f7fd ff80 	bl	80067f0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80088f0:	4b0a      	ldr	r3, [pc, #40]	@ (800891c <prvAddCurrentTaskToDelayedList+0xa4>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	68ba      	ldr	r2, [r7, #8]
 80088f6:	429a      	cmp	r2, r3
 80088f8:	d202      	bcs.n	8008900 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80088fa:	4a08      	ldr	r2, [pc, #32]	@ (800891c <prvAddCurrentTaskToDelayedList+0xa4>)
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	6013      	str	r3, [r2, #0]
}
 8008900:	bf00      	nop
 8008902:	3710      	adds	r7, #16
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}
 8008908:	20001008 	.word	0x20001008
 800890c:	20000b30 	.word	0x20000b30
 8008910:	20000ff0 	.word	0x20000ff0
 8008914:	20000fc0 	.word	0x20000fc0
 8008918:	20000fbc 	.word	0x20000fbc
 800891c:	20001024 	.word	0x20001024

08008920 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b08a      	sub	sp, #40	@ 0x28
 8008924:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008926:	2300      	movs	r3, #0
 8008928:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800892a:	f000 fb11 	bl	8008f50 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800892e:	4b1d      	ldr	r3, [pc, #116]	@ (80089a4 <xTimerCreateTimerTask+0x84>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d021      	beq.n	800897a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008936:	2300      	movs	r3, #0
 8008938:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800893a:	2300      	movs	r3, #0
 800893c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800893e:	1d3a      	adds	r2, r7, #4
 8008940:	f107 0108 	add.w	r1, r7, #8
 8008944:	f107 030c 	add.w	r3, r7, #12
 8008948:	4618      	mov	r0, r3
 800894a:	f7fd fee9 	bl	8006720 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800894e:	6879      	ldr	r1, [r7, #4]
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	68fa      	ldr	r2, [r7, #12]
 8008954:	9202      	str	r2, [sp, #8]
 8008956:	9301      	str	r3, [sp, #4]
 8008958:	2302      	movs	r3, #2
 800895a:	9300      	str	r3, [sp, #0]
 800895c:	2300      	movs	r3, #0
 800895e:	460a      	mov	r2, r1
 8008960:	4911      	ldr	r1, [pc, #68]	@ (80089a8 <xTimerCreateTimerTask+0x88>)
 8008962:	4812      	ldr	r0, [pc, #72]	@ (80089ac <xTimerCreateTimerTask+0x8c>)
 8008964:	f7fe ff3c 	bl	80077e0 <xTaskCreateStatic>
 8008968:	4603      	mov	r3, r0
 800896a:	4a11      	ldr	r2, [pc, #68]	@ (80089b0 <xTimerCreateTimerTask+0x90>)
 800896c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800896e:	4b10      	ldr	r3, [pc, #64]	@ (80089b0 <xTimerCreateTimerTask+0x90>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d001      	beq.n	800897a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008976:	2301      	movs	r3, #1
 8008978:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d10b      	bne.n	8008998 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008984:	f383 8811 	msr	BASEPRI, r3
 8008988:	f3bf 8f6f 	isb	sy
 800898c:	f3bf 8f4f 	dsb	sy
 8008990:	613b      	str	r3, [r7, #16]
}
 8008992:	bf00      	nop
 8008994:	bf00      	nop
 8008996:	e7fd      	b.n	8008994 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008998:	697b      	ldr	r3, [r7, #20]
}
 800899a:	4618      	mov	r0, r3
 800899c:	3718      	adds	r7, #24
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}
 80089a2:	bf00      	nop
 80089a4:	20001060 	.word	0x20001060
 80089a8:	0800cfac 	.word	0x0800cfac
 80089ac:	08008aed 	.word	0x08008aed
 80089b0:	20001064 	.word	0x20001064

080089b4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b08a      	sub	sp, #40	@ 0x28
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	60f8      	str	r0, [r7, #12]
 80089bc:	60b9      	str	r1, [r7, #8]
 80089be:	607a      	str	r2, [r7, #4]
 80089c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80089c2:	2300      	movs	r3, #0
 80089c4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d10b      	bne.n	80089e4 <xTimerGenericCommand+0x30>
	__asm volatile
 80089cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089d0:	f383 8811 	msr	BASEPRI, r3
 80089d4:	f3bf 8f6f 	isb	sy
 80089d8:	f3bf 8f4f 	dsb	sy
 80089dc:	623b      	str	r3, [r7, #32]
}
 80089de:	bf00      	nop
 80089e0:	bf00      	nop
 80089e2:	e7fd      	b.n	80089e0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80089e4:	4b19      	ldr	r3, [pc, #100]	@ (8008a4c <xTimerGenericCommand+0x98>)
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d02a      	beq.n	8008a42 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	2b05      	cmp	r3, #5
 80089fc:	dc18      	bgt.n	8008a30 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80089fe:	f7ff fdad 	bl	800855c <xTaskGetSchedulerState>
 8008a02:	4603      	mov	r3, r0
 8008a04:	2b02      	cmp	r3, #2
 8008a06:	d109      	bne.n	8008a1c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008a08:	4b10      	ldr	r3, [pc, #64]	@ (8008a4c <xTimerGenericCommand+0x98>)
 8008a0a:	6818      	ldr	r0, [r3, #0]
 8008a0c:	f107 0110 	add.w	r1, r7, #16
 8008a10:	2300      	movs	r3, #0
 8008a12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a14:	f7fe f94c 	bl	8006cb0 <xQueueGenericSend>
 8008a18:	6278      	str	r0, [r7, #36]	@ 0x24
 8008a1a:	e012      	b.n	8008a42 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008a1c:	4b0b      	ldr	r3, [pc, #44]	@ (8008a4c <xTimerGenericCommand+0x98>)
 8008a1e:	6818      	ldr	r0, [r3, #0]
 8008a20:	f107 0110 	add.w	r1, r7, #16
 8008a24:	2300      	movs	r3, #0
 8008a26:	2200      	movs	r2, #0
 8008a28:	f7fe f942 	bl	8006cb0 <xQueueGenericSend>
 8008a2c:	6278      	str	r0, [r7, #36]	@ 0x24
 8008a2e:	e008      	b.n	8008a42 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008a30:	4b06      	ldr	r3, [pc, #24]	@ (8008a4c <xTimerGenericCommand+0x98>)
 8008a32:	6818      	ldr	r0, [r3, #0]
 8008a34:	f107 0110 	add.w	r1, r7, #16
 8008a38:	2300      	movs	r3, #0
 8008a3a:	683a      	ldr	r2, [r7, #0]
 8008a3c:	f7fe fa3a 	bl	8006eb4 <xQueueGenericSendFromISR>
 8008a40:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	3728      	adds	r7, #40	@ 0x28
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}
 8008a4c:	20001060 	.word	0x20001060

08008a50 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b088      	sub	sp, #32
 8008a54:	af02      	add	r7, sp, #8
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a5a:	4b23      	ldr	r3, [pc, #140]	@ (8008ae8 <prvProcessExpiredTimer+0x98>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	68db      	ldr	r3, [r3, #12]
 8008a60:	68db      	ldr	r3, [r3, #12]
 8008a62:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008a64:	697b      	ldr	r3, [r7, #20]
 8008a66:	3304      	adds	r3, #4
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f7fd fef9 	bl	8006860 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008a74:	f003 0304 	and.w	r3, r3, #4
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d023      	beq.n	8008ac4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	699a      	ldr	r2, [r3, #24]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	18d1      	adds	r1, r2, r3
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	683a      	ldr	r2, [r7, #0]
 8008a88:	6978      	ldr	r0, [r7, #20]
 8008a8a:	f000 f8d3 	bl	8008c34 <prvInsertTimerInActiveList>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d020      	beq.n	8008ad6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008a94:	2300      	movs	r3, #0
 8008a96:	9300      	str	r3, [sp, #0]
 8008a98:	2300      	movs	r3, #0
 8008a9a:	687a      	ldr	r2, [r7, #4]
 8008a9c:	2100      	movs	r1, #0
 8008a9e:	6978      	ldr	r0, [r7, #20]
 8008aa0:	f7ff ff88 	bl	80089b4 <xTimerGenericCommand>
 8008aa4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d114      	bne.n	8008ad6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008aac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ab0:	f383 8811 	msr	BASEPRI, r3
 8008ab4:	f3bf 8f6f 	isb	sy
 8008ab8:	f3bf 8f4f 	dsb	sy
 8008abc:	60fb      	str	r3, [r7, #12]
}
 8008abe:	bf00      	nop
 8008ac0:	bf00      	nop
 8008ac2:	e7fd      	b.n	8008ac0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008aca:	f023 0301 	bic.w	r3, r3, #1
 8008ace:	b2da      	uxtb	r2, r3
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	6a1b      	ldr	r3, [r3, #32]
 8008ada:	6978      	ldr	r0, [r7, #20]
 8008adc:	4798      	blx	r3
}
 8008ade:	bf00      	nop
 8008ae0:	3718      	adds	r7, #24
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}
 8008ae6:	bf00      	nop
 8008ae8:	20001058 	.word	0x20001058

08008aec <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b084      	sub	sp, #16
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008af4:	f107 0308 	add.w	r3, r7, #8
 8008af8:	4618      	mov	r0, r3
 8008afa:	f000 f859 	bl	8008bb0 <prvGetNextExpireTime>
 8008afe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	4619      	mov	r1, r3
 8008b04:	68f8      	ldr	r0, [r7, #12]
 8008b06:	f000 f805 	bl	8008b14 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008b0a:	f000 f8d5 	bl	8008cb8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008b0e:	bf00      	nop
 8008b10:	e7f0      	b.n	8008af4 <prvTimerTask+0x8>
	...

08008b14 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b084      	sub	sp, #16
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
 8008b1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008b1e:	f7ff f90d 	bl	8007d3c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008b22:	f107 0308 	add.w	r3, r7, #8
 8008b26:	4618      	mov	r0, r3
 8008b28:	f000 f864 	bl	8008bf4 <prvSampleTimeNow>
 8008b2c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d130      	bne.n	8008b96 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d10a      	bne.n	8008b50 <prvProcessTimerOrBlockTask+0x3c>
 8008b3a:	687a      	ldr	r2, [r7, #4]
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	429a      	cmp	r2, r3
 8008b40:	d806      	bhi.n	8008b50 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008b42:	f7ff f909 	bl	8007d58 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008b46:	68f9      	ldr	r1, [r7, #12]
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f7ff ff81 	bl	8008a50 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008b4e:	e024      	b.n	8008b9a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d008      	beq.n	8008b68 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008b56:	4b13      	ldr	r3, [pc, #76]	@ (8008ba4 <prvProcessTimerOrBlockTask+0x90>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d101      	bne.n	8008b64 <prvProcessTimerOrBlockTask+0x50>
 8008b60:	2301      	movs	r3, #1
 8008b62:	e000      	b.n	8008b66 <prvProcessTimerOrBlockTask+0x52>
 8008b64:	2300      	movs	r3, #0
 8008b66:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008b68:	4b0f      	ldr	r3, [pc, #60]	@ (8008ba8 <prvProcessTimerOrBlockTask+0x94>)
 8008b6a:	6818      	ldr	r0, [r3, #0]
 8008b6c:	687a      	ldr	r2, [r7, #4]
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	1ad3      	subs	r3, r2, r3
 8008b72:	683a      	ldr	r2, [r7, #0]
 8008b74:	4619      	mov	r1, r3
 8008b76:	f7fe fdff 	bl	8007778 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008b7a:	f7ff f8ed 	bl	8007d58 <xTaskResumeAll>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d10a      	bne.n	8008b9a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008b84:	4b09      	ldr	r3, [pc, #36]	@ (8008bac <prvProcessTimerOrBlockTask+0x98>)
 8008b86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b8a:	601a      	str	r2, [r3, #0]
 8008b8c:	f3bf 8f4f 	dsb	sy
 8008b90:	f3bf 8f6f 	isb	sy
}
 8008b94:	e001      	b.n	8008b9a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008b96:	f7ff f8df 	bl	8007d58 <xTaskResumeAll>
}
 8008b9a:	bf00      	nop
 8008b9c:	3710      	adds	r7, #16
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}
 8008ba2:	bf00      	nop
 8008ba4:	2000105c 	.word	0x2000105c
 8008ba8:	20001060 	.word	0x20001060
 8008bac:	e000ed04 	.word	0xe000ed04

08008bb0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b085      	sub	sp, #20
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008bb8:	4b0d      	ldr	r3, [pc, #52]	@ (8008bf0 <prvGetNextExpireTime+0x40>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d101      	bne.n	8008bc6 <prvGetNextExpireTime+0x16>
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	e000      	b.n	8008bc8 <prvGetNextExpireTime+0x18>
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d105      	bne.n	8008be0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008bd4:	4b06      	ldr	r3, [pc, #24]	@ (8008bf0 <prvGetNextExpireTime+0x40>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	68db      	ldr	r3, [r3, #12]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	60fb      	str	r3, [r7, #12]
 8008bde:	e001      	b.n	8008be4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008be0:	2300      	movs	r3, #0
 8008be2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008be4:	68fb      	ldr	r3, [r7, #12]
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3714      	adds	r7, #20
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bc80      	pop	{r7}
 8008bee:	4770      	bx	lr
 8008bf0:	20001058 	.word	0x20001058

08008bf4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b084      	sub	sp, #16
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008bfc:	f7ff f94a 	bl	8007e94 <xTaskGetTickCount>
 8008c00:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008c02:	4b0b      	ldr	r3, [pc, #44]	@ (8008c30 <prvSampleTimeNow+0x3c>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	68fa      	ldr	r2, [r7, #12]
 8008c08:	429a      	cmp	r2, r3
 8008c0a:	d205      	bcs.n	8008c18 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008c0c:	f000 f93a 	bl	8008e84 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2201      	movs	r2, #1
 8008c14:	601a      	str	r2, [r3, #0]
 8008c16:	e002      	b.n	8008c1e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008c1e:	4a04      	ldr	r2, [pc, #16]	@ (8008c30 <prvSampleTimeNow+0x3c>)
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008c24:	68fb      	ldr	r3, [r7, #12]
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3710      	adds	r7, #16
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}
 8008c2e:	bf00      	nop
 8008c30:	20001068 	.word	0x20001068

08008c34 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b086      	sub	sp, #24
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	60f8      	str	r0, [r7, #12]
 8008c3c:	60b9      	str	r1, [r7, #8]
 8008c3e:	607a      	str	r2, [r7, #4]
 8008c40:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008c42:	2300      	movs	r3, #0
 8008c44:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	68ba      	ldr	r2, [r7, #8]
 8008c4a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	68fa      	ldr	r2, [r7, #12]
 8008c50:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008c52:	68ba      	ldr	r2, [r7, #8]
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	429a      	cmp	r2, r3
 8008c58:	d812      	bhi.n	8008c80 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c5a:	687a      	ldr	r2, [r7, #4]
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	1ad2      	subs	r2, r2, r3
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	699b      	ldr	r3, [r3, #24]
 8008c64:	429a      	cmp	r2, r3
 8008c66:	d302      	bcc.n	8008c6e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008c68:	2301      	movs	r3, #1
 8008c6a:	617b      	str	r3, [r7, #20]
 8008c6c:	e01b      	b.n	8008ca6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008c6e:	4b10      	ldr	r3, [pc, #64]	@ (8008cb0 <prvInsertTimerInActiveList+0x7c>)
 8008c70:	681a      	ldr	r2, [r3, #0]
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	3304      	adds	r3, #4
 8008c76:	4619      	mov	r1, r3
 8008c78:	4610      	mov	r0, r2
 8008c7a:	f7fd fdb9 	bl	80067f0 <vListInsert>
 8008c7e:	e012      	b.n	8008ca6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008c80:	687a      	ldr	r2, [r7, #4]
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	429a      	cmp	r2, r3
 8008c86:	d206      	bcs.n	8008c96 <prvInsertTimerInActiveList+0x62>
 8008c88:	68ba      	ldr	r2, [r7, #8]
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	429a      	cmp	r2, r3
 8008c8e:	d302      	bcc.n	8008c96 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008c90:	2301      	movs	r3, #1
 8008c92:	617b      	str	r3, [r7, #20]
 8008c94:	e007      	b.n	8008ca6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008c96:	4b07      	ldr	r3, [pc, #28]	@ (8008cb4 <prvInsertTimerInActiveList+0x80>)
 8008c98:	681a      	ldr	r2, [r3, #0]
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	3304      	adds	r3, #4
 8008c9e:	4619      	mov	r1, r3
 8008ca0:	4610      	mov	r0, r2
 8008ca2:	f7fd fda5 	bl	80067f0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008ca6:	697b      	ldr	r3, [r7, #20]
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3718      	adds	r7, #24
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}
 8008cb0:	2000105c 	.word	0x2000105c
 8008cb4:	20001058 	.word	0x20001058

08008cb8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b08e      	sub	sp, #56	@ 0x38
 8008cbc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008cbe:	e0ce      	b.n	8008e5e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	da19      	bge.n	8008cfa <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008cc6:	1d3b      	adds	r3, r7, #4
 8008cc8:	3304      	adds	r3, #4
 8008cca:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d10b      	bne.n	8008cea <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008cd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cd6:	f383 8811 	msr	BASEPRI, r3
 8008cda:	f3bf 8f6f 	isb	sy
 8008cde:	f3bf 8f4f 	dsb	sy
 8008ce2:	61fb      	str	r3, [r7, #28]
}
 8008ce4:	bf00      	nop
 8008ce6:	bf00      	nop
 8008ce8:	e7fd      	b.n	8008ce6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008cea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008cf0:	6850      	ldr	r0, [r2, #4]
 8008cf2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008cf4:	6892      	ldr	r2, [r2, #8]
 8008cf6:	4611      	mov	r1, r2
 8008cf8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	f2c0 80ae 	blt.w	8008e5e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d08:	695b      	ldr	r3, [r3, #20]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d004      	beq.n	8008d18 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d10:	3304      	adds	r3, #4
 8008d12:	4618      	mov	r0, r3
 8008d14:	f7fd fda4 	bl	8006860 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008d18:	463b      	mov	r3, r7
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f7ff ff6a 	bl	8008bf4 <prvSampleTimeNow>
 8008d20:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2b09      	cmp	r3, #9
 8008d26:	f200 8097 	bhi.w	8008e58 <prvProcessReceivedCommands+0x1a0>
 8008d2a:	a201      	add	r2, pc, #4	@ (adr r2, 8008d30 <prvProcessReceivedCommands+0x78>)
 8008d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d30:	08008d59 	.word	0x08008d59
 8008d34:	08008d59 	.word	0x08008d59
 8008d38:	08008d59 	.word	0x08008d59
 8008d3c:	08008dcf 	.word	0x08008dcf
 8008d40:	08008de3 	.word	0x08008de3
 8008d44:	08008e2f 	.word	0x08008e2f
 8008d48:	08008d59 	.word	0x08008d59
 8008d4c:	08008d59 	.word	0x08008d59
 8008d50:	08008dcf 	.word	0x08008dcf
 8008d54:	08008de3 	.word	0x08008de3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d5a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008d5e:	f043 0301 	orr.w	r3, r3, #1
 8008d62:	b2da      	uxtb	r2, r3
 8008d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d66:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008d6a:	68ba      	ldr	r2, [r7, #8]
 8008d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d6e:	699b      	ldr	r3, [r3, #24]
 8008d70:	18d1      	adds	r1, r2, r3
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d78:	f7ff ff5c 	bl	8008c34 <prvInsertTimerInActiveList>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d06c      	beq.n	8008e5c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008d82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d84:	6a1b      	ldr	r3, [r3, #32]
 8008d86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d88:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008d90:	f003 0304 	and.w	r3, r3, #4
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d061      	beq.n	8008e5c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008d98:	68ba      	ldr	r2, [r7, #8]
 8008d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d9c:	699b      	ldr	r3, [r3, #24]
 8008d9e:	441a      	add	r2, r3
 8008da0:	2300      	movs	r3, #0
 8008da2:	9300      	str	r3, [sp, #0]
 8008da4:	2300      	movs	r3, #0
 8008da6:	2100      	movs	r1, #0
 8008da8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008daa:	f7ff fe03 	bl	80089b4 <xTimerGenericCommand>
 8008dae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008db0:	6a3b      	ldr	r3, [r7, #32]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d152      	bne.n	8008e5c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dba:	f383 8811 	msr	BASEPRI, r3
 8008dbe:	f3bf 8f6f 	isb	sy
 8008dc2:	f3bf 8f4f 	dsb	sy
 8008dc6:	61bb      	str	r3, [r7, #24]
}
 8008dc8:	bf00      	nop
 8008dca:	bf00      	nop
 8008dcc:	e7fd      	b.n	8008dca <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dd0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008dd4:	f023 0301 	bic.w	r3, r3, #1
 8008dd8:	b2da      	uxtb	r2, r3
 8008dda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ddc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008de0:	e03d      	b.n	8008e5e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008de4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008de8:	f043 0301 	orr.w	r3, r3, #1
 8008dec:	b2da      	uxtb	r2, r3
 8008dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008df0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008df4:	68ba      	ldr	r2, [r7, #8]
 8008df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008df8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dfc:	699b      	ldr	r3, [r3, #24]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d10b      	bne.n	8008e1a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8008e02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e06:	f383 8811 	msr	BASEPRI, r3
 8008e0a:	f3bf 8f6f 	isb	sy
 8008e0e:	f3bf 8f4f 	dsb	sy
 8008e12:	617b      	str	r3, [r7, #20]
}
 8008e14:	bf00      	nop
 8008e16:	bf00      	nop
 8008e18:	e7fd      	b.n	8008e16 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e1c:	699a      	ldr	r2, [r3, #24]
 8008e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e20:	18d1      	adds	r1, r2, r3
 8008e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e28:	f7ff ff04 	bl	8008c34 <prvInsertTimerInActiveList>
					break;
 8008e2c:	e017      	b.n	8008e5e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008e34:	f003 0302 	and.w	r3, r3, #2
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d103      	bne.n	8008e44 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008e3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e3e:	f000 fb85 	bl	800954c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008e42:	e00c      	b.n	8008e5e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e46:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008e4a:	f023 0301 	bic.w	r3, r3, #1
 8008e4e:	b2da      	uxtb	r2, r3
 8008e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e52:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008e56:	e002      	b.n	8008e5e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008e58:	bf00      	nop
 8008e5a:	e000      	b.n	8008e5e <prvProcessReceivedCommands+0x1a6>
					break;
 8008e5c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008e5e:	4b08      	ldr	r3, [pc, #32]	@ (8008e80 <prvProcessReceivedCommands+0x1c8>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	1d39      	adds	r1, r7, #4
 8008e64:	2200      	movs	r2, #0
 8008e66:	4618      	mov	r0, r3
 8008e68:	f7fe f8c2 	bl	8006ff0 <xQueueReceive>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	f47f af26 	bne.w	8008cc0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008e74:	bf00      	nop
 8008e76:	bf00      	nop
 8008e78:	3730      	adds	r7, #48	@ 0x30
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}
 8008e7e:	bf00      	nop
 8008e80:	20001060 	.word	0x20001060

08008e84 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b088      	sub	sp, #32
 8008e88:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008e8a:	e049      	b.n	8008f20 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008e8c:	4b2e      	ldr	r3, [pc, #184]	@ (8008f48 <prvSwitchTimerLists+0xc4>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	68db      	ldr	r3, [r3, #12]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e96:	4b2c      	ldr	r3, [pc, #176]	@ (8008f48 <prvSwitchTimerLists+0xc4>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	68db      	ldr	r3, [r3, #12]
 8008e9c:	68db      	ldr	r3, [r3, #12]
 8008e9e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	3304      	adds	r3, #4
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	f7fd fcdb 	bl	8006860 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	6a1b      	ldr	r3, [r3, #32]
 8008eae:	68f8      	ldr	r0, [r7, #12]
 8008eb0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008eb8:	f003 0304 	and.w	r3, r3, #4
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d02f      	beq.n	8008f20 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	699b      	ldr	r3, [r3, #24]
 8008ec4:	693a      	ldr	r2, [r7, #16]
 8008ec6:	4413      	add	r3, r2
 8008ec8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008eca:	68ba      	ldr	r2, [r7, #8]
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	429a      	cmp	r2, r3
 8008ed0:	d90e      	bls.n	8008ef0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	68ba      	ldr	r2, [r7, #8]
 8008ed6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	68fa      	ldr	r2, [r7, #12]
 8008edc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008ede:	4b1a      	ldr	r3, [pc, #104]	@ (8008f48 <prvSwitchTimerLists+0xc4>)
 8008ee0:	681a      	ldr	r2, [r3, #0]
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	3304      	adds	r3, #4
 8008ee6:	4619      	mov	r1, r3
 8008ee8:	4610      	mov	r0, r2
 8008eea:	f7fd fc81 	bl	80067f0 <vListInsert>
 8008eee:	e017      	b.n	8008f20 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	9300      	str	r3, [sp, #0]
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	693a      	ldr	r2, [r7, #16]
 8008ef8:	2100      	movs	r1, #0
 8008efa:	68f8      	ldr	r0, [r7, #12]
 8008efc:	f7ff fd5a 	bl	80089b4 <xTimerGenericCommand>
 8008f00:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d10b      	bne.n	8008f20 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008f08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f0c:	f383 8811 	msr	BASEPRI, r3
 8008f10:	f3bf 8f6f 	isb	sy
 8008f14:	f3bf 8f4f 	dsb	sy
 8008f18:	603b      	str	r3, [r7, #0]
}
 8008f1a:	bf00      	nop
 8008f1c:	bf00      	nop
 8008f1e:	e7fd      	b.n	8008f1c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008f20:	4b09      	ldr	r3, [pc, #36]	@ (8008f48 <prvSwitchTimerLists+0xc4>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d1b0      	bne.n	8008e8c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008f2a:	4b07      	ldr	r3, [pc, #28]	@ (8008f48 <prvSwitchTimerLists+0xc4>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008f30:	4b06      	ldr	r3, [pc, #24]	@ (8008f4c <prvSwitchTimerLists+0xc8>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	4a04      	ldr	r2, [pc, #16]	@ (8008f48 <prvSwitchTimerLists+0xc4>)
 8008f36:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008f38:	4a04      	ldr	r2, [pc, #16]	@ (8008f4c <prvSwitchTimerLists+0xc8>)
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	6013      	str	r3, [r2, #0]
}
 8008f3e:	bf00      	nop
 8008f40:	3718      	adds	r7, #24
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}
 8008f46:	bf00      	nop
 8008f48:	20001058 	.word	0x20001058
 8008f4c:	2000105c 	.word	0x2000105c

08008f50 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b082      	sub	sp, #8
 8008f54:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008f56:	f000 f929 	bl	80091ac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008f5a:	4b15      	ldr	r3, [pc, #84]	@ (8008fb0 <prvCheckForValidListAndQueue+0x60>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d120      	bne.n	8008fa4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008f62:	4814      	ldr	r0, [pc, #80]	@ (8008fb4 <prvCheckForValidListAndQueue+0x64>)
 8008f64:	f7fd fbf6 	bl	8006754 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008f68:	4813      	ldr	r0, [pc, #76]	@ (8008fb8 <prvCheckForValidListAndQueue+0x68>)
 8008f6a:	f7fd fbf3 	bl	8006754 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008f6e:	4b13      	ldr	r3, [pc, #76]	@ (8008fbc <prvCheckForValidListAndQueue+0x6c>)
 8008f70:	4a10      	ldr	r2, [pc, #64]	@ (8008fb4 <prvCheckForValidListAndQueue+0x64>)
 8008f72:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008f74:	4b12      	ldr	r3, [pc, #72]	@ (8008fc0 <prvCheckForValidListAndQueue+0x70>)
 8008f76:	4a10      	ldr	r2, [pc, #64]	@ (8008fb8 <prvCheckForValidListAndQueue+0x68>)
 8008f78:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	9300      	str	r3, [sp, #0]
 8008f7e:	4b11      	ldr	r3, [pc, #68]	@ (8008fc4 <prvCheckForValidListAndQueue+0x74>)
 8008f80:	4a11      	ldr	r2, [pc, #68]	@ (8008fc8 <prvCheckForValidListAndQueue+0x78>)
 8008f82:	2110      	movs	r1, #16
 8008f84:	200a      	movs	r0, #10
 8008f86:	f7fd fcff 	bl	8006988 <xQueueGenericCreateStatic>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	4a08      	ldr	r2, [pc, #32]	@ (8008fb0 <prvCheckForValidListAndQueue+0x60>)
 8008f8e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008f90:	4b07      	ldr	r3, [pc, #28]	@ (8008fb0 <prvCheckForValidListAndQueue+0x60>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d005      	beq.n	8008fa4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008f98:	4b05      	ldr	r3, [pc, #20]	@ (8008fb0 <prvCheckForValidListAndQueue+0x60>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	490b      	ldr	r1, [pc, #44]	@ (8008fcc <prvCheckForValidListAndQueue+0x7c>)
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f7fe fbc2 	bl	8007728 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008fa4:	f000 f932 	bl	800920c <vPortExitCritical>
}
 8008fa8:	bf00      	nop
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}
 8008fae:	bf00      	nop
 8008fb0:	20001060 	.word	0x20001060
 8008fb4:	20001030 	.word	0x20001030
 8008fb8:	20001044 	.word	0x20001044
 8008fbc:	20001058 	.word	0x20001058
 8008fc0:	2000105c 	.word	0x2000105c
 8008fc4:	2000110c 	.word	0x2000110c
 8008fc8:	2000106c 	.word	0x2000106c
 8008fcc:	0800cfb4 	.word	0x0800cfb4

08008fd0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b085      	sub	sp, #20
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	60f8      	str	r0, [r7, #12]
 8008fd8:	60b9      	str	r1, [r7, #8]
 8008fda:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	3b04      	subs	r3, #4
 8008fe0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008fe8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	3b04      	subs	r3, #4
 8008fee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	f023 0201 	bic.w	r2, r3, #1
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	3b04      	subs	r3, #4
 8008ffe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009000:	4a08      	ldr	r2, [pc, #32]	@ (8009024 <pxPortInitialiseStack+0x54>)
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	3b14      	subs	r3, #20
 800900a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800900c:	687a      	ldr	r2, [r7, #4]
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	3b20      	subs	r3, #32
 8009016:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009018:	68fb      	ldr	r3, [r7, #12]
}
 800901a:	4618      	mov	r0, r3
 800901c:	3714      	adds	r7, #20
 800901e:	46bd      	mov	sp, r7
 8009020:	bc80      	pop	{r7}
 8009022:	4770      	bx	lr
 8009024:	08009029 	.word	0x08009029

08009028 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009028:	b480      	push	{r7}
 800902a:	b085      	sub	sp, #20
 800902c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800902e:	2300      	movs	r3, #0
 8009030:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009032:	4b12      	ldr	r3, [pc, #72]	@ (800907c <prvTaskExitError+0x54>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800903a:	d00b      	beq.n	8009054 <prvTaskExitError+0x2c>
	__asm volatile
 800903c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009040:	f383 8811 	msr	BASEPRI, r3
 8009044:	f3bf 8f6f 	isb	sy
 8009048:	f3bf 8f4f 	dsb	sy
 800904c:	60fb      	str	r3, [r7, #12]
}
 800904e:	bf00      	nop
 8009050:	bf00      	nop
 8009052:	e7fd      	b.n	8009050 <prvTaskExitError+0x28>
	__asm volatile
 8009054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009058:	f383 8811 	msr	BASEPRI, r3
 800905c:	f3bf 8f6f 	isb	sy
 8009060:	f3bf 8f4f 	dsb	sy
 8009064:	60bb      	str	r3, [r7, #8]
}
 8009066:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009068:	bf00      	nop
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d0fc      	beq.n	800906a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009070:	bf00      	nop
 8009072:	bf00      	nop
 8009074:	3714      	adds	r7, #20
 8009076:	46bd      	mov	sp, r7
 8009078:	bc80      	pop	{r7}
 800907a:	4770      	bx	lr
 800907c:	20000020 	.word	0x20000020

08009080 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009080:	4b07      	ldr	r3, [pc, #28]	@ (80090a0 <pxCurrentTCBConst2>)
 8009082:	6819      	ldr	r1, [r3, #0]
 8009084:	6808      	ldr	r0, [r1, #0]
 8009086:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800908a:	f380 8809 	msr	PSP, r0
 800908e:	f3bf 8f6f 	isb	sy
 8009092:	f04f 0000 	mov.w	r0, #0
 8009096:	f380 8811 	msr	BASEPRI, r0
 800909a:	f04e 0e0d 	orr.w	lr, lr, #13
 800909e:	4770      	bx	lr

080090a0 <pxCurrentTCBConst2>:
 80090a0:	20000b30 	.word	0x20000b30
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80090a4:	bf00      	nop
 80090a6:	bf00      	nop

080090a8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80090a8:	4806      	ldr	r0, [pc, #24]	@ (80090c4 <prvPortStartFirstTask+0x1c>)
 80090aa:	6800      	ldr	r0, [r0, #0]
 80090ac:	6800      	ldr	r0, [r0, #0]
 80090ae:	f380 8808 	msr	MSP, r0
 80090b2:	b662      	cpsie	i
 80090b4:	b661      	cpsie	f
 80090b6:	f3bf 8f4f 	dsb	sy
 80090ba:	f3bf 8f6f 	isb	sy
 80090be:	df00      	svc	0
 80090c0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80090c2:	bf00      	nop
 80090c4:	e000ed08 	.word	0xe000ed08

080090c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b084      	sub	sp, #16
 80090cc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80090ce:	4b32      	ldr	r3, [pc, #200]	@ (8009198 <xPortStartScheduler+0xd0>)
 80090d0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	781b      	ldrb	r3, [r3, #0]
 80090d6:	b2db      	uxtb	r3, r3
 80090d8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	22ff      	movs	r2, #255	@ 0xff
 80090de:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	781b      	ldrb	r3, [r3, #0]
 80090e4:	b2db      	uxtb	r3, r3
 80090e6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80090e8:	78fb      	ldrb	r3, [r7, #3]
 80090ea:	b2db      	uxtb	r3, r3
 80090ec:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80090f0:	b2da      	uxtb	r2, r3
 80090f2:	4b2a      	ldr	r3, [pc, #168]	@ (800919c <xPortStartScheduler+0xd4>)
 80090f4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80090f6:	4b2a      	ldr	r3, [pc, #168]	@ (80091a0 <xPortStartScheduler+0xd8>)
 80090f8:	2207      	movs	r2, #7
 80090fa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80090fc:	e009      	b.n	8009112 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80090fe:	4b28      	ldr	r3, [pc, #160]	@ (80091a0 <xPortStartScheduler+0xd8>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	3b01      	subs	r3, #1
 8009104:	4a26      	ldr	r2, [pc, #152]	@ (80091a0 <xPortStartScheduler+0xd8>)
 8009106:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009108:	78fb      	ldrb	r3, [r7, #3]
 800910a:	b2db      	uxtb	r3, r3
 800910c:	005b      	lsls	r3, r3, #1
 800910e:	b2db      	uxtb	r3, r3
 8009110:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009112:	78fb      	ldrb	r3, [r7, #3]
 8009114:	b2db      	uxtb	r3, r3
 8009116:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800911a:	2b80      	cmp	r3, #128	@ 0x80
 800911c:	d0ef      	beq.n	80090fe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800911e:	4b20      	ldr	r3, [pc, #128]	@ (80091a0 <xPortStartScheduler+0xd8>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f1c3 0307 	rsb	r3, r3, #7
 8009126:	2b04      	cmp	r3, #4
 8009128:	d00b      	beq.n	8009142 <xPortStartScheduler+0x7a>
	__asm volatile
 800912a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800912e:	f383 8811 	msr	BASEPRI, r3
 8009132:	f3bf 8f6f 	isb	sy
 8009136:	f3bf 8f4f 	dsb	sy
 800913a:	60bb      	str	r3, [r7, #8]
}
 800913c:	bf00      	nop
 800913e:	bf00      	nop
 8009140:	e7fd      	b.n	800913e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009142:	4b17      	ldr	r3, [pc, #92]	@ (80091a0 <xPortStartScheduler+0xd8>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	021b      	lsls	r3, r3, #8
 8009148:	4a15      	ldr	r2, [pc, #84]	@ (80091a0 <xPortStartScheduler+0xd8>)
 800914a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800914c:	4b14      	ldr	r3, [pc, #80]	@ (80091a0 <xPortStartScheduler+0xd8>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009154:	4a12      	ldr	r2, [pc, #72]	@ (80091a0 <xPortStartScheduler+0xd8>)
 8009156:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	b2da      	uxtb	r2, r3
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009160:	4b10      	ldr	r3, [pc, #64]	@ (80091a4 <xPortStartScheduler+0xdc>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	4a0f      	ldr	r2, [pc, #60]	@ (80091a4 <xPortStartScheduler+0xdc>)
 8009166:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800916a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800916c:	4b0d      	ldr	r3, [pc, #52]	@ (80091a4 <xPortStartScheduler+0xdc>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	4a0c      	ldr	r2, [pc, #48]	@ (80091a4 <xPortStartScheduler+0xdc>)
 8009172:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009176:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009178:	f000 f8b8 	bl	80092ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800917c:	4b0a      	ldr	r3, [pc, #40]	@ (80091a8 <xPortStartScheduler+0xe0>)
 800917e:	2200      	movs	r2, #0
 8009180:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009182:	f7ff ff91 	bl	80090a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009186:	f7fe ff5f 	bl	8008048 <vTaskSwitchContext>
	prvTaskExitError();
 800918a:	f7ff ff4d 	bl	8009028 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800918e:	2300      	movs	r3, #0
}
 8009190:	4618      	mov	r0, r3
 8009192:	3710      	adds	r7, #16
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}
 8009198:	e000e400 	.word	0xe000e400
 800919c:	2000115c 	.word	0x2000115c
 80091a0:	20001160 	.word	0x20001160
 80091a4:	e000ed20 	.word	0xe000ed20
 80091a8:	20000020 	.word	0x20000020

080091ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80091ac:	b480      	push	{r7}
 80091ae:	b083      	sub	sp, #12
 80091b0:	af00      	add	r7, sp, #0
	__asm volatile
 80091b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091b6:	f383 8811 	msr	BASEPRI, r3
 80091ba:	f3bf 8f6f 	isb	sy
 80091be:	f3bf 8f4f 	dsb	sy
 80091c2:	607b      	str	r3, [r7, #4]
}
 80091c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80091c6:	4b0f      	ldr	r3, [pc, #60]	@ (8009204 <vPortEnterCritical+0x58>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	3301      	adds	r3, #1
 80091cc:	4a0d      	ldr	r2, [pc, #52]	@ (8009204 <vPortEnterCritical+0x58>)
 80091ce:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80091d0:	4b0c      	ldr	r3, [pc, #48]	@ (8009204 <vPortEnterCritical+0x58>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	2b01      	cmp	r3, #1
 80091d6:	d110      	bne.n	80091fa <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80091d8:	4b0b      	ldr	r3, [pc, #44]	@ (8009208 <vPortEnterCritical+0x5c>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	b2db      	uxtb	r3, r3
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d00b      	beq.n	80091fa <vPortEnterCritical+0x4e>
	__asm volatile
 80091e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091e6:	f383 8811 	msr	BASEPRI, r3
 80091ea:	f3bf 8f6f 	isb	sy
 80091ee:	f3bf 8f4f 	dsb	sy
 80091f2:	603b      	str	r3, [r7, #0]
}
 80091f4:	bf00      	nop
 80091f6:	bf00      	nop
 80091f8:	e7fd      	b.n	80091f6 <vPortEnterCritical+0x4a>
	}
}
 80091fa:	bf00      	nop
 80091fc:	370c      	adds	r7, #12
 80091fe:	46bd      	mov	sp, r7
 8009200:	bc80      	pop	{r7}
 8009202:	4770      	bx	lr
 8009204:	20000020 	.word	0x20000020
 8009208:	e000ed04 	.word	0xe000ed04

0800920c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800920c:	b480      	push	{r7}
 800920e:	b083      	sub	sp, #12
 8009210:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009212:	4b12      	ldr	r3, [pc, #72]	@ (800925c <vPortExitCritical+0x50>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d10b      	bne.n	8009232 <vPortExitCritical+0x26>
	__asm volatile
 800921a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800921e:	f383 8811 	msr	BASEPRI, r3
 8009222:	f3bf 8f6f 	isb	sy
 8009226:	f3bf 8f4f 	dsb	sy
 800922a:	607b      	str	r3, [r7, #4]
}
 800922c:	bf00      	nop
 800922e:	bf00      	nop
 8009230:	e7fd      	b.n	800922e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009232:	4b0a      	ldr	r3, [pc, #40]	@ (800925c <vPortExitCritical+0x50>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	3b01      	subs	r3, #1
 8009238:	4a08      	ldr	r2, [pc, #32]	@ (800925c <vPortExitCritical+0x50>)
 800923a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800923c:	4b07      	ldr	r3, [pc, #28]	@ (800925c <vPortExitCritical+0x50>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d105      	bne.n	8009250 <vPortExitCritical+0x44>
 8009244:	2300      	movs	r3, #0
 8009246:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	f383 8811 	msr	BASEPRI, r3
}
 800924e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009250:	bf00      	nop
 8009252:	370c      	adds	r7, #12
 8009254:	46bd      	mov	sp, r7
 8009256:	bc80      	pop	{r7}
 8009258:	4770      	bx	lr
 800925a:	bf00      	nop
 800925c:	20000020 	.word	0x20000020

08009260 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009260:	f3ef 8009 	mrs	r0, PSP
 8009264:	f3bf 8f6f 	isb	sy
 8009268:	4b0d      	ldr	r3, [pc, #52]	@ (80092a0 <pxCurrentTCBConst>)
 800926a:	681a      	ldr	r2, [r3, #0]
 800926c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009270:	6010      	str	r0, [r2, #0]
 8009272:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009276:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800927a:	f380 8811 	msr	BASEPRI, r0
 800927e:	f7fe fee3 	bl	8008048 <vTaskSwitchContext>
 8009282:	f04f 0000 	mov.w	r0, #0
 8009286:	f380 8811 	msr	BASEPRI, r0
 800928a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800928e:	6819      	ldr	r1, [r3, #0]
 8009290:	6808      	ldr	r0, [r1, #0]
 8009292:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009296:	f380 8809 	msr	PSP, r0
 800929a:	f3bf 8f6f 	isb	sy
 800929e:	4770      	bx	lr

080092a0 <pxCurrentTCBConst>:
 80092a0:	20000b30 	.word	0x20000b30
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80092a4:	bf00      	nop
 80092a6:	bf00      	nop

080092a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b082      	sub	sp, #8
 80092ac:	af00      	add	r7, sp, #0
	__asm volatile
 80092ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092b2:	f383 8811 	msr	BASEPRI, r3
 80092b6:	f3bf 8f6f 	isb	sy
 80092ba:	f3bf 8f4f 	dsb	sy
 80092be:	607b      	str	r3, [r7, #4]
}
 80092c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80092c2:	f7fe fe07 	bl	8007ed4 <xTaskIncrementTick>
 80092c6:	4603      	mov	r3, r0
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d003      	beq.n	80092d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80092cc:	4b06      	ldr	r3, [pc, #24]	@ (80092e8 <xPortSysTickHandler+0x40>)
 80092ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80092d2:	601a      	str	r2, [r3, #0]
 80092d4:	2300      	movs	r3, #0
 80092d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	f383 8811 	msr	BASEPRI, r3
}
 80092de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80092e0:	bf00      	nop
 80092e2:	3708      	adds	r7, #8
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}
 80092e8:	e000ed04 	.word	0xe000ed04

080092ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80092ec:	b480      	push	{r7}
 80092ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80092f0:	4b0a      	ldr	r3, [pc, #40]	@ (800931c <vPortSetupTimerInterrupt+0x30>)
 80092f2:	2200      	movs	r2, #0
 80092f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80092f6:	4b0a      	ldr	r3, [pc, #40]	@ (8009320 <vPortSetupTimerInterrupt+0x34>)
 80092f8:	2200      	movs	r2, #0
 80092fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80092fc:	4b09      	ldr	r3, [pc, #36]	@ (8009324 <vPortSetupTimerInterrupt+0x38>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	4a09      	ldr	r2, [pc, #36]	@ (8009328 <vPortSetupTimerInterrupt+0x3c>)
 8009302:	fba2 2303 	umull	r2, r3, r2, r3
 8009306:	099b      	lsrs	r3, r3, #6
 8009308:	4a08      	ldr	r2, [pc, #32]	@ (800932c <vPortSetupTimerInterrupt+0x40>)
 800930a:	3b01      	subs	r3, #1
 800930c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800930e:	4b03      	ldr	r3, [pc, #12]	@ (800931c <vPortSetupTimerInterrupt+0x30>)
 8009310:	2207      	movs	r2, #7
 8009312:	601a      	str	r2, [r3, #0]
}
 8009314:	bf00      	nop
 8009316:	46bd      	mov	sp, r7
 8009318:	bc80      	pop	{r7}
 800931a:	4770      	bx	lr
 800931c:	e000e010 	.word	0xe000e010
 8009320:	e000e018 	.word	0xe000e018
 8009324:	20000014 	.word	0x20000014
 8009328:	10624dd3 	.word	0x10624dd3
 800932c:	e000e014 	.word	0xe000e014

08009330 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009330:	b480      	push	{r7}
 8009332:	b085      	sub	sp, #20
 8009334:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009336:	f3ef 8305 	mrs	r3, IPSR
 800933a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	2b0f      	cmp	r3, #15
 8009340:	d915      	bls.n	800936e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009342:	4a17      	ldr	r2, [pc, #92]	@ (80093a0 <vPortValidateInterruptPriority+0x70>)
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	4413      	add	r3, r2
 8009348:	781b      	ldrb	r3, [r3, #0]
 800934a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800934c:	4b15      	ldr	r3, [pc, #84]	@ (80093a4 <vPortValidateInterruptPriority+0x74>)
 800934e:	781b      	ldrb	r3, [r3, #0]
 8009350:	7afa      	ldrb	r2, [r7, #11]
 8009352:	429a      	cmp	r2, r3
 8009354:	d20b      	bcs.n	800936e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800935a:	f383 8811 	msr	BASEPRI, r3
 800935e:	f3bf 8f6f 	isb	sy
 8009362:	f3bf 8f4f 	dsb	sy
 8009366:	607b      	str	r3, [r7, #4]
}
 8009368:	bf00      	nop
 800936a:	bf00      	nop
 800936c:	e7fd      	b.n	800936a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800936e:	4b0e      	ldr	r3, [pc, #56]	@ (80093a8 <vPortValidateInterruptPriority+0x78>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009376:	4b0d      	ldr	r3, [pc, #52]	@ (80093ac <vPortValidateInterruptPriority+0x7c>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	429a      	cmp	r2, r3
 800937c:	d90b      	bls.n	8009396 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800937e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009382:	f383 8811 	msr	BASEPRI, r3
 8009386:	f3bf 8f6f 	isb	sy
 800938a:	f3bf 8f4f 	dsb	sy
 800938e:	603b      	str	r3, [r7, #0]
}
 8009390:	bf00      	nop
 8009392:	bf00      	nop
 8009394:	e7fd      	b.n	8009392 <vPortValidateInterruptPriority+0x62>
	}
 8009396:	bf00      	nop
 8009398:	3714      	adds	r7, #20
 800939a:	46bd      	mov	sp, r7
 800939c:	bc80      	pop	{r7}
 800939e:	4770      	bx	lr
 80093a0:	e000e3f0 	.word	0xe000e3f0
 80093a4:	2000115c 	.word	0x2000115c
 80093a8:	e000ed0c 	.word	0xe000ed0c
 80093ac:	20001160 	.word	0x20001160

080093b0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b08a      	sub	sp, #40	@ 0x28
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80093b8:	2300      	movs	r3, #0
 80093ba:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80093bc:	f7fe fcbe 	bl	8007d3c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80093c0:	4b5c      	ldr	r3, [pc, #368]	@ (8009534 <pvPortMalloc+0x184>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d101      	bne.n	80093cc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80093c8:	f000 f924 	bl	8009614 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80093cc:	4b5a      	ldr	r3, [pc, #360]	@ (8009538 <pvPortMalloc+0x188>)
 80093ce:	681a      	ldr	r2, [r3, #0]
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	4013      	ands	r3, r2
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	f040 8095 	bne.w	8009504 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d01e      	beq.n	800941e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80093e0:	2208      	movs	r2, #8
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	4413      	add	r3, r2
 80093e6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f003 0307 	and.w	r3, r3, #7
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d015      	beq.n	800941e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f023 0307 	bic.w	r3, r3, #7
 80093f8:	3308      	adds	r3, #8
 80093fa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f003 0307 	and.w	r3, r3, #7
 8009402:	2b00      	cmp	r3, #0
 8009404:	d00b      	beq.n	800941e <pvPortMalloc+0x6e>
	__asm volatile
 8009406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800940a:	f383 8811 	msr	BASEPRI, r3
 800940e:	f3bf 8f6f 	isb	sy
 8009412:	f3bf 8f4f 	dsb	sy
 8009416:	617b      	str	r3, [r7, #20]
}
 8009418:	bf00      	nop
 800941a:	bf00      	nop
 800941c:	e7fd      	b.n	800941a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d06f      	beq.n	8009504 <pvPortMalloc+0x154>
 8009424:	4b45      	ldr	r3, [pc, #276]	@ (800953c <pvPortMalloc+0x18c>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	687a      	ldr	r2, [r7, #4]
 800942a:	429a      	cmp	r2, r3
 800942c:	d86a      	bhi.n	8009504 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800942e:	4b44      	ldr	r3, [pc, #272]	@ (8009540 <pvPortMalloc+0x190>)
 8009430:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009432:	4b43      	ldr	r3, [pc, #268]	@ (8009540 <pvPortMalloc+0x190>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009438:	e004      	b.n	8009444 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800943a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800943c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800943e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009446:	685b      	ldr	r3, [r3, #4]
 8009448:	687a      	ldr	r2, [r7, #4]
 800944a:	429a      	cmp	r2, r3
 800944c:	d903      	bls.n	8009456 <pvPortMalloc+0xa6>
 800944e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d1f1      	bne.n	800943a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009456:	4b37      	ldr	r3, [pc, #220]	@ (8009534 <pvPortMalloc+0x184>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800945c:	429a      	cmp	r2, r3
 800945e:	d051      	beq.n	8009504 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009460:	6a3b      	ldr	r3, [r7, #32]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	2208      	movs	r2, #8
 8009466:	4413      	add	r3, r2
 8009468:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800946a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800946c:	681a      	ldr	r2, [r3, #0]
 800946e:	6a3b      	ldr	r3, [r7, #32]
 8009470:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009474:	685a      	ldr	r2, [r3, #4]
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	1ad2      	subs	r2, r2, r3
 800947a:	2308      	movs	r3, #8
 800947c:	005b      	lsls	r3, r3, #1
 800947e:	429a      	cmp	r2, r3
 8009480:	d920      	bls.n	80094c4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009482:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	4413      	add	r3, r2
 8009488:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800948a:	69bb      	ldr	r3, [r7, #24]
 800948c:	f003 0307 	and.w	r3, r3, #7
 8009490:	2b00      	cmp	r3, #0
 8009492:	d00b      	beq.n	80094ac <pvPortMalloc+0xfc>
	__asm volatile
 8009494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009498:	f383 8811 	msr	BASEPRI, r3
 800949c:	f3bf 8f6f 	isb	sy
 80094a0:	f3bf 8f4f 	dsb	sy
 80094a4:	613b      	str	r3, [r7, #16]
}
 80094a6:	bf00      	nop
 80094a8:	bf00      	nop
 80094aa:	e7fd      	b.n	80094a8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80094ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ae:	685a      	ldr	r2, [r3, #4]
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	1ad2      	subs	r2, r2, r3
 80094b4:	69bb      	ldr	r3, [r7, #24]
 80094b6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80094b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ba:	687a      	ldr	r2, [r7, #4]
 80094bc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80094be:	69b8      	ldr	r0, [r7, #24]
 80094c0:	f000 f90a 	bl	80096d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80094c4:	4b1d      	ldr	r3, [pc, #116]	@ (800953c <pvPortMalloc+0x18c>)
 80094c6:	681a      	ldr	r2, [r3, #0]
 80094c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ca:	685b      	ldr	r3, [r3, #4]
 80094cc:	1ad3      	subs	r3, r2, r3
 80094ce:	4a1b      	ldr	r2, [pc, #108]	@ (800953c <pvPortMalloc+0x18c>)
 80094d0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80094d2:	4b1a      	ldr	r3, [pc, #104]	@ (800953c <pvPortMalloc+0x18c>)
 80094d4:	681a      	ldr	r2, [r3, #0]
 80094d6:	4b1b      	ldr	r3, [pc, #108]	@ (8009544 <pvPortMalloc+0x194>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	429a      	cmp	r2, r3
 80094dc:	d203      	bcs.n	80094e6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80094de:	4b17      	ldr	r3, [pc, #92]	@ (800953c <pvPortMalloc+0x18c>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	4a18      	ldr	r2, [pc, #96]	@ (8009544 <pvPortMalloc+0x194>)
 80094e4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80094e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094e8:	685a      	ldr	r2, [r3, #4]
 80094ea:	4b13      	ldr	r3, [pc, #76]	@ (8009538 <pvPortMalloc+0x188>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	431a      	orrs	r2, r3
 80094f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094f2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80094f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094f6:	2200      	movs	r2, #0
 80094f8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80094fa:	4b13      	ldr	r3, [pc, #76]	@ (8009548 <pvPortMalloc+0x198>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	3301      	adds	r3, #1
 8009500:	4a11      	ldr	r2, [pc, #68]	@ (8009548 <pvPortMalloc+0x198>)
 8009502:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009504:	f7fe fc28 	bl	8007d58 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009508:	69fb      	ldr	r3, [r7, #28]
 800950a:	f003 0307 	and.w	r3, r3, #7
 800950e:	2b00      	cmp	r3, #0
 8009510:	d00b      	beq.n	800952a <pvPortMalloc+0x17a>
	__asm volatile
 8009512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009516:	f383 8811 	msr	BASEPRI, r3
 800951a:	f3bf 8f6f 	isb	sy
 800951e:	f3bf 8f4f 	dsb	sy
 8009522:	60fb      	str	r3, [r7, #12]
}
 8009524:	bf00      	nop
 8009526:	bf00      	nop
 8009528:	e7fd      	b.n	8009526 <pvPortMalloc+0x176>
	return pvReturn;
 800952a:	69fb      	ldr	r3, [r7, #28]
}
 800952c:	4618      	mov	r0, r3
 800952e:	3728      	adds	r7, #40	@ 0x28
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}
 8009534:	2000296c 	.word	0x2000296c
 8009538:	20002980 	.word	0x20002980
 800953c:	20002970 	.word	0x20002970
 8009540:	20002964 	.word	0x20002964
 8009544:	20002974 	.word	0x20002974
 8009548:	20002978 	.word	0x20002978

0800954c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b086      	sub	sp, #24
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d04f      	beq.n	80095fe <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800955e:	2308      	movs	r3, #8
 8009560:	425b      	negs	r3, r3
 8009562:	697a      	ldr	r2, [r7, #20]
 8009564:	4413      	add	r3, r2
 8009566:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009568:	697b      	ldr	r3, [r7, #20]
 800956a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800956c:	693b      	ldr	r3, [r7, #16]
 800956e:	685a      	ldr	r2, [r3, #4]
 8009570:	4b25      	ldr	r3, [pc, #148]	@ (8009608 <vPortFree+0xbc>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	4013      	ands	r3, r2
 8009576:	2b00      	cmp	r3, #0
 8009578:	d10b      	bne.n	8009592 <vPortFree+0x46>
	__asm volatile
 800957a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800957e:	f383 8811 	msr	BASEPRI, r3
 8009582:	f3bf 8f6f 	isb	sy
 8009586:	f3bf 8f4f 	dsb	sy
 800958a:	60fb      	str	r3, [r7, #12]
}
 800958c:	bf00      	nop
 800958e:	bf00      	nop
 8009590:	e7fd      	b.n	800958e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009592:	693b      	ldr	r3, [r7, #16]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d00b      	beq.n	80095b2 <vPortFree+0x66>
	__asm volatile
 800959a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800959e:	f383 8811 	msr	BASEPRI, r3
 80095a2:	f3bf 8f6f 	isb	sy
 80095a6:	f3bf 8f4f 	dsb	sy
 80095aa:	60bb      	str	r3, [r7, #8]
}
 80095ac:	bf00      	nop
 80095ae:	bf00      	nop
 80095b0:	e7fd      	b.n	80095ae <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	685a      	ldr	r2, [r3, #4]
 80095b6:	4b14      	ldr	r3, [pc, #80]	@ (8009608 <vPortFree+0xbc>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	4013      	ands	r3, r2
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d01e      	beq.n	80095fe <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d11a      	bne.n	80095fe <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80095c8:	693b      	ldr	r3, [r7, #16]
 80095ca:	685a      	ldr	r2, [r3, #4]
 80095cc:	4b0e      	ldr	r3, [pc, #56]	@ (8009608 <vPortFree+0xbc>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	43db      	mvns	r3, r3
 80095d2:	401a      	ands	r2, r3
 80095d4:	693b      	ldr	r3, [r7, #16]
 80095d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80095d8:	f7fe fbb0 	bl	8007d3c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80095dc:	693b      	ldr	r3, [r7, #16]
 80095de:	685a      	ldr	r2, [r3, #4]
 80095e0:	4b0a      	ldr	r3, [pc, #40]	@ (800960c <vPortFree+0xc0>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	4413      	add	r3, r2
 80095e6:	4a09      	ldr	r2, [pc, #36]	@ (800960c <vPortFree+0xc0>)
 80095e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80095ea:	6938      	ldr	r0, [r7, #16]
 80095ec:	f000 f874 	bl	80096d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80095f0:	4b07      	ldr	r3, [pc, #28]	@ (8009610 <vPortFree+0xc4>)
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	3301      	adds	r3, #1
 80095f6:	4a06      	ldr	r2, [pc, #24]	@ (8009610 <vPortFree+0xc4>)
 80095f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80095fa:	f7fe fbad 	bl	8007d58 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80095fe:	bf00      	nop
 8009600:	3718      	adds	r7, #24
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}
 8009606:	bf00      	nop
 8009608:	20002980 	.word	0x20002980
 800960c:	20002970 	.word	0x20002970
 8009610:	2000297c 	.word	0x2000297c

08009614 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009614:	b480      	push	{r7}
 8009616:	b085      	sub	sp, #20
 8009618:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800961a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800961e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009620:	4b27      	ldr	r3, [pc, #156]	@ (80096c0 <prvHeapInit+0xac>)
 8009622:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	f003 0307 	and.w	r3, r3, #7
 800962a:	2b00      	cmp	r3, #0
 800962c:	d00c      	beq.n	8009648 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	3307      	adds	r3, #7
 8009632:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	f023 0307 	bic.w	r3, r3, #7
 800963a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800963c:	68ba      	ldr	r2, [r7, #8]
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	1ad3      	subs	r3, r2, r3
 8009642:	4a1f      	ldr	r2, [pc, #124]	@ (80096c0 <prvHeapInit+0xac>)
 8009644:	4413      	add	r3, r2
 8009646:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800964c:	4a1d      	ldr	r2, [pc, #116]	@ (80096c4 <prvHeapInit+0xb0>)
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009652:	4b1c      	ldr	r3, [pc, #112]	@ (80096c4 <prvHeapInit+0xb0>)
 8009654:	2200      	movs	r2, #0
 8009656:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	68ba      	ldr	r2, [r7, #8]
 800965c:	4413      	add	r3, r2
 800965e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009660:	2208      	movs	r2, #8
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	1a9b      	subs	r3, r3, r2
 8009666:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	f023 0307 	bic.w	r3, r3, #7
 800966e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	4a15      	ldr	r2, [pc, #84]	@ (80096c8 <prvHeapInit+0xb4>)
 8009674:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009676:	4b14      	ldr	r3, [pc, #80]	@ (80096c8 <prvHeapInit+0xb4>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	2200      	movs	r2, #0
 800967c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800967e:	4b12      	ldr	r3, [pc, #72]	@ (80096c8 <prvHeapInit+0xb4>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	2200      	movs	r2, #0
 8009684:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	68fa      	ldr	r2, [r7, #12]
 800968e:	1ad2      	subs	r2, r2, r3
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009694:	4b0c      	ldr	r3, [pc, #48]	@ (80096c8 <prvHeapInit+0xb4>)
 8009696:	681a      	ldr	r2, [r3, #0]
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	685b      	ldr	r3, [r3, #4]
 80096a0:	4a0a      	ldr	r2, [pc, #40]	@ (80096cc <prvHeapInit+0xb8>)
 80096a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	685b      	ldr	r3, [r3, #4]
 80096a8:	4a09      	ldr	r2, [pc, #36]	@ (80096d0 <prvHeapInit+0xbc>)
 80096aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80096ac:	4b09      	ldr	r3, [pc, #36]	@ (80096d4 <prvHeapInit+0xc0>)
 80096ae:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80096b2:	601a      	str	r2, [r3, #0]
}
 80096b4:	bf00      	nop
 80096b6:	3714      	adds	r7, #20
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bc80      	pop	{r7}
 80096bc:	4770      	bx	lr
 80096be:	bf00      	nop
 80096c0:	20001164 	.word	0x20001164
 80096c4:	20002964 	.word	0x20002964
 80096c8:	2000296c 	.word	0x2000296c
 80096cc:	20002974 	.word	0x20002974
 80096d0:	20002970 	.word	0x20002970
 80096d4:	20002980 	.word	0x20002980

080096d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80096d8:	b480      	push	{r7}
 80096da:	b085      	sub	sp, #20
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80096e0:	4b27      	ldr	r3, [pc, #156]	@ (8009780 <prvInsertBlockIntoFreeList+0xa8>)
 80096e2:	60fb      	str	r3, [r7, #12]
 80096e4:	e002      	b.n	80096ec <prvInsertBlockIntoFreeList+0x14>
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	60fb      	str	r3, [r7, #12]
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	687a      	ldr	r2, [r7, #4]
 80096f2:	429a      	cmp	r2, r3
 80096f4:	d8f7      	bhi.n	80096e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	685b      	ldr	r3, [r3, #4]
 80096fe:	68ba      	ldr	r2, [r7, #8]
 8009700:	4413      	add	r3, r2
 8009702:	687a      	ldr	r2, [r7, #4]
 8009704:	429a      	cmp	r2, r3
 8009706:	d108      	bne.n	800971a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	685a      	ldr	r2, [r3, #4]
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	685b      	ldr	r3, [r3, #4]
 8009710:	441a      	add	r2, r3
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	685b      	ldr	r3, [r3, #4]
 8009722:	68ba      	ldr	r2, [r7, #8]
 8009724:	441a      	add	r2, r3
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	429a      	cmp	r2, r3
 800972c:	d118      	bne.n	8009760 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681a      	ldr	r2, [r3, #0]
 8009732:	4b14      	ldr	r3, [pc, #80]	@ (8009784 <prvInsertBlockIntoFreeList+0xac>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	429a      	cmp	r2, r3
 8009738:	d00d      	beq.n	8009756 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	685a      	ldr	r2, [r3, #4]
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	685b      	ldr	r3, [r3, #4]
 8009744:	441a      	add	r2, r3
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	681a      	ldr	r2, [r3, #0]
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	601a      	str	r2, [r3, #0]
 8009754:	e008      	b.n	8009768 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009756:	4b0b      	ldr	r3, [pc, #44]	@ (8009784 <prvInsertBlockIntoFreeList+0xac>)
 8009758:	681a      	ldr	r2, [r3, #0]
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	601a      	str	r2, [r3, #0]
 800975e:	e003      	b.n	8009768 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	681a      	ldr	r2, [r3, #0]
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009768:	68fa      	ldr	r2, [r7, #12]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	429a      	cmp	r2, r3
 800976e:	d002      	beq.n	8009776 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	687a      	ldr	r2, [r7, #4]
 8009774:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009776:	bf00      	nop
 8009778:	3714      	adds	r7, #20
 800977a:	46bd      	mov	sp, r7
 800977c:	bc80      	pop	{r7}
 800977e:	4770      	bx	lr
 8009780:	20002964 	.word	0x20002964
 8009784:	2000296c 	.word	0x2000296c

08009788 <__cvt>:
 8009788:	2b00      	cmp	r3, #0
 800978a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800978e:	461d      	mov	r5, r3
 8009790:	bfbb      	ittet	lt
 8009792:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8009796:	461d      	movlt	r5, r3
 8009798:	2300      	movge	r3, #0
 800979a:	232d      	movlt	r3, #45	@ 0x2d
 800979c:	b088      	sub	sp, #32
 800979e:	4614      	mov	r4, r2
 80097a0:	bfb8      	it	lt
 80097a2:	4614      	movlt	r4, r2
 80097a4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80097a6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80097a8:	7013      	strb	r3, [r2, #0]
 80097aa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80097ac:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80097b0:	f023 0820 	bic.w	r8, r3, #32
 80097b4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80097b8:	d005      	beq.n	80097c6 <__cvt+0x3e>
 80097ba:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80097be:	d100      	bne.n	80097c2 <__cvt+0x3a>
 80097c0:	3601      	adds	r6, #1
 80097c2:	2302      	movs	r3, #2
 80097c4:	e000      	b.n	80097c8 <__cvt+0x40>
 80097c6:	2303      	movs	r3, #3
 80097c8:	aa07      	add	r2, sp, #28
 80097ca:	9204      	str	r2, [sp, #16]
 80097cc:	aa06      	add	r2, sp, #24
 80097ce:	e9cd a202 	strd	sl, r2, [sp, #8]
 80097d2:	e9cd 3600 	strd	r3, r6, [sp]
 80097d6:	4622      	mov	r2, r4
 80097d8:	462b      	mov	r3, r5
 80097da:	f000 ff09 	bl	800a5f0 <_dtoa_r>
 80097de:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80097e2:	4607      	mov	r7, r0
 80097e4:	d119      	bne.n	800981a <__cvt+0x92>
 80097e6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80097e8:	07db      	lsls	r3, r3, #31
 80097ea:	d50e      	bpl.n	800980a <__cvt+0x82>
 80097ec:	eb00 0906 	add.w	r9, r0, r6
 80097f0:	2200      	movs	r2, #0
 80097f2:	2300      	movs	r3, #0
 80097f4:	4620      	mov	r0, r4
 80097f6:	4629      	mov	r1, r5
 80097f8:	f7f7 f8d6 	bl	80009a8 <__aeabi_dcmpeq>
 80097fc:	b108      	cbz	r0, 8009802 <__cvt+0x7a>
 80097fe:	f8cd 901c 	str.w	r9, [sp, #28]
 8009802:	2230      	movs	r2, #48	@ 0x30
 8009804:	9b07      	ldr	r3, [sp, #28]
 8009806:	454b      	cmp	r3, r9
 8009808:	d31e      	bcc.n	8009848 <__cvt+0xc0>
 800980a:	4638      	mov	r0, r7
 800980c:	9b07      	ldr	r3, [sp, #28]
 800980e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8009810:	1bdb      	subs	r3, r3, r7
 8009812:	6013      	str	r3, [r2, #0]
 8009814:	b008      	add	sp, #32
 8009816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800981a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800981e:	eb00 0906 	add.w	r9, r0, r6
 8009822:	d1e5      	bne.n	80097f0 <__cvt+0x68>
 8009824:	7803      	ldrb	r3, [r0, #0]
 8009826:	2b30      	cmp	r3, #48	@ 0x30
 8009828:	d10a      	bne.n	8009840 <__cvt+0xb8>
 800982a:	2200      	movs	r2, #0
 800982c:	2300      	movs	r3, #0
 800982e:	4620      	mov	r0, r4
 8009830:	4629      	mov	r1, r5
 8009832:	f7f7 f8b9 	bl	80009a8 <__aeabi_dcmpeq>
 8009836:	b918      	cbnz	r0, 8009840 <__cvt+0xb8>
 8009838:	f1c6 0601 	rsb	r6, r6, #1
 800983c:	f8ca 6000 	str.w	r6, [sl]
 8009840:	f8da 3000 	ldr.w	r3, [sl]
 8009844:	4499      	add	r9, r3
 8009846:	e7d3      	b.n	80097f0 <__cvt+0x68>
 8009848:	1c59      	adds	r1, r3, #1
 800984a:	9107      	str	r1, [sp, #28]
 800984c:	701a      	strb	r2, [r3, #0]
 800984e:	e7d9      	b.n	8009804 <__cvt+0x7c>

08009850 <__exponent>:
 8009850:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009852:	2900      	cmp	r1, #0
 8009854:	bfb6      	itet	lt
 8009856:	232d      	movlt	r3, #45	@ 0x2d
 8009858:	232b      	movge	r3, #43	@ 0x2b
 800985a:	4249      	neglt	r1, r1
 800985c:	2909      	cmp	r1, #9
 800985e:	7002      	strb	r2, [r0, #0]
 8009860:	7043      	strb	r3, [r0, #1]
 8009862:	dd29      	ble.n	80098b8 <__exponent+0x68>
 8009864:	f10d 0307 	add.w	r3, sp, #7
 8009868:	461d      	mov	r5, r3
 800986a:	270a      	movs	r7, #10
 800986c:	fbb1 f6f7 	udiv	r6, r1, r7
 8009870:	461a      	mov	r2, r3
 8009872:	fb07 1416 	mls	r4, r7, r6, r1
 8009876:	3430      	adds	r4, #48	@ 0x30
 8009878:	f802 4c01 	strb.w	r4, [r2, #-1]
 800987c:	460c      	mov	r4, r1
 800987e:	2c63      	cmp	r4, #99	@ 0x63
 8009880:	4631      	mov	r1, r6
 8009882:	f103 33ff 	add.w	r3, r3, #4294967295
 8009886:	dcf1      	bgt.n	800986c <__exponent+0x1c>
 8009888:	3130      	adds	r1, #48	@ 0x30
 800988a:	1e94      	subs	r4, r2, #2
 800988c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009890:	4623      	mov	r3, r4
 8009892:	1c41      	adds	r1, r0, #1
 8009894:	42ab      	cmp	r3, r5
 8009896:	d30a      	bcc.n	80098ae <__exponent+0x5e>
 8009898:	f10d 0309 	add.w	r3, sp, #9
 800989c:	1a9b      	subs	r3, r3, r2
 800989e:	42ac      	cmp	r4, r5
 80098a0:	bf88      	it	hi
 80098a2:	2300      	movhi	r3, #0
 80098a4:	3302      	adds	r3, #2
 80098a6:	4403      	add	r3, r0
 80098a8:	1a18      	subs	r0, r3, r0
 80098aa:	b003      	add	sp, #12
 80098ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098ae:	f813 6b01 	ldrb.w	r6, [r3], #1
 80098b2:	f801 6f01 	strb.w	r6, [r1, #1]!
 80098b6:	e7ed      	b.n	8009894 <__exponent+0x44>
 80098b8:	2330      	movs	r3, #48	@ 0x30
 80098ba:	3130      	adds	r1, #48	@ 0x30
 80098bc:	7083      	strb	r3, [r0, #2]
 80098be:	70c1      	strb	r1, [r0, #3]
 80098c0:	1d03      	adds	r3, r0, #4
 80098c2:	e7f1      	b.n	80098a8 <__exponent+0x58>

080098c4 <_printf_float>:
 80098c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098c8:	b091      	sub	sp, #68	@ 0x44
 80098ca:	460c      	mov	r4, r1
 80098cc:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80098d0:	4616      	mov	r6, r2
 80098d2:	461f      	mov	r7, r3
 80098d4:	4605      	mov	r5, r0
 80098d6:	f000 fd0f 	bl	800a2f8 <_localeconv_r>
 80098da:	6803      	ldr	r3, [r0, #0]
 80098dc:	4618      	mov	r0, r3
 80098de:	9308      	str	r3, [sp, #32]
 80098e0:	f7f6 fc36 	bl	8000150 <strlen>
 80098e4:	2300      	movs	r3, #0
 80098e6:	930e      	str	r3, [sp, #56]	@ 0x38
 80098e8:	f8d8 3000 	ldr.w	r3, [r8]
 80098ec:	9009      	str	r0, [sp, #36]	@ 0x24
 80098ee:	3307      	adds	r3, #7
 80098f0:	f023 0307 	bic.w	r3, r3, #7
 80098f4:	f103 0208 	add.w	r2, r3, #8
 80098f8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80098fc:	f8d4 b000 	ldr.w	fp, [r4]
 8009900:	f8c8 2000 	str.w	r2, [r8]
 8009904:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009908:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800990c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800990e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8009912:	f04f 32ff 	mov.w	r2, #4294967295
 8009916:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800991a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800991e:	4b9c      	ldr	r3, [pc, #624]	@ (8009b90 <_printf_float+0x2cc>)
 8009920:	f7f7 f874 	bl	8000a0c <__aeabi_dcmpun>
 8009924:	bb70      	cbnz	r0, 8009984 <_printf_float+0xc0>
 8009926:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800992a:	f04f 32ff 	mov.w	r2, #4294967295
 800992e:	4b98      	ldr	r3, [pc, #608]	@ (8009b90 <_printf_float+0x2cc>)
 8009930:	f7f7 f84e 	bl	80009d0 <__aeabi_dcmple>
 8009934:	bb30      	cbnz	r0, 8009984 <_printf_float+0xc0>
 8009936:	2200      	movs	r2, #0
 8009938:	2300      	movs	r3, #0
 800993a:	4640      	mov	r0, r8
 800993c:	4649      	mov	r1, r9
 800993e:	f7f7 f83d 	bl	80009bc <__aeabi_dcmplt>
 8009942:	b110      	cbz	r0, 800994a <_printf_float+0x86>
 8009944:	232d      	movs	r3, #45	@ 0x2d
 8009946:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800994a:	4a92      	ldr	r2, [pc, #584]	@ (8009b94 <_printf_float+0x2d0>)
 800994c:	4b92      	ldr	r3, [pc, #584]	@ (8009b98 <_printf_float+0x2d4>)
 800994e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009952:	bf8c      	ite	hi
 8009954:	4690      	movhi	r8, r2
 8009956:	4698      	movls	r8, r3
 8009958:	2303      	movs	r3, #3
 800995a:	f04f 0900 	mov.w	r9, #0
 800995e:	6123      	str	r3, [r4, #16]
 8009960:	f02b 0304 	bic.w	r3, fp, #4
 8009964:	6023      	str	r3, [r4, #0]
 8009966:	4633      	mov	r3, r6
 8009968:	4621      	mov	r1, r4
 800996a:	4628      	mov	r0, r5
 800996c:	9700      	str	r7, [sp, #0]
 800996e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8009970:	f000 f9d4 	bl	8009d1c <_printf_common>
 8009974:	3001      	adds	r0, #1
 8009976:	f040 8090 	bne.w	8009a9a <_printf_float+0x1d6>
 800997a:	f04f 30ff 	mov.w	r0, #4294967295
 800997e:	b011      	add	sp, #68	@ 0x44
 8009980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009984:	4642      	mov	r2, r8
 8009986:	464b      	mov	r3, r9
 8009988:	4640      	mov	r0, r8
 800998a:	4649      	mov	r1, r9
 800998c:	f7f7 f83e 	bl	8000a0c <__aeabi_dcmpun>
 8009990:	b148      	cbz	r0, 80099a6 <_printf_float+0xe2>
 8009992:	464b      	mov	r3, r9
 8009994:	2b00      	cmp	r3, #0
 8009996:	bfb8      	it	lt
 8009998:	232d      	movlt	r3, #45	@ 0x2d
 800999a:	4a80      	ldr	r2, [pc, #512]	@ (8009b9c <_printf_float+0x2d8>)
 800999c:	bfb8      	it	lt
 800999e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80099a2:	4b7f      	ldr	r3, [pc, #508]	@ (8009ba0 <_printf_float+0x2dc>)
 80099a4:	e7d3      	b.n	800994e <_printf_float+0x8a>
 80099a6:	6863      	ldr	r3, [r4, #4]
 80099a8:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80099ac:	1c5a      	adds	r2, r3, #1
 80099ae:	d13f      	bne.n	8009a30 <_printf_float+0x16c>
 80099b0:	2306      	movs	r3, #6
 80099b2:	6063      	str	r3, [r4, #4]
 80099b4:	2200      	movs	r2, #0
 80099b6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80099ba:	6023      	str	r3, [r4, #0]
 80099bc:	9206      	str	r2, [sp, #24]
 80099be:	aa0e      	add	r2, sp, #56	@ 0x38
 80099c0:	e9cd a204 	strd	sl, r2, [sp, #16]
 80099c4:	aa0d      	add	r2, sp, #52	@ 0x34
 80099c6:	9203      	str	r2, [sp, #12]
 80099c8:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80099cc:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80099d0:	6863      	ldr	r3, [r4, #4]
 80099d2:	4642      	mov	r2, r8
 80099d4:	9300      	str	r3, [sp, #0]
 80099d6:	4628      	mov	r0, r5
 80099d8:	464b      	mov	r3, r9
 80099da:	910a      	str	r1, [sp, #40]	@ 0x28
 80099dc:	f7ff fed4 	bl	8009788 <__cvt>
 80099e0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80099e2:	4680      	mov	r8, r0
 80099e4:	2947      	cmp	r1, #71	@ 0x47
 80099e6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80099e8:	d128      	bne.n	8009a3c <_printf_float+0x178>
 80099ea:	1cc8      	adds	r0, r1, #3
 80099ec:	db02      	blt.n	80099f4 <_printf_float+0x130>
 80099ee:	6863      	ldr	r3, [r4, #4]
 80099f0:	4299      	cmp	r1, r3
 80099f2:	dd40      	ble.n	8009a76 <_printf_float+0x1b2>
 80099f4:	f1aa 0a02 	sub.w	sl, sl, #2
 80099f8:	fa5f fa8a 	uxtb.w	sl, sl
 80099fc:	4652      	mov	r2, sl
 80099fe:	3901      	subs	r1, #1
 8009a00:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009a04:	910d      	str	r1, [sp, #52]	@ 0x34
 8009a06:	f7ff ff23 	bl	8009850 <__exponent>
 8009a0a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009a0c:	4681      	mov	r9, r0
 8009a0e:	1813      	adds	r3, r2, r0
 8009a10:	2a01      	cmp	r2, #1
 8009a12:	6123      	str	r3, [r4, #16]
 8009a14:	dc02      	bgt.n	8009a1c <_printf_float+0x158>
 8009a16:	6822      	ldr	r2, [r4, #0]
 8009a18:	07d2      	lsls	r2, r2, #31
 8009a1a:	d501      	bpl.n	8009a20 <_printf_float+0x15c>
 8009a1c:	3301      	adds	r3, #1
 8009a1e:	6123      	str	r3, [r4, #16]
 8009a20:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d09e      	beq.n	8009966 <_printf_float+0xa2>
 8009a28:	232d      	movs	r3, #45	@ 0x2d
 8009a2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009a2e:	e79a      	b.n	8009966 <_printf_float+0xa2>
 8009a30:	2947      	cmp	r1, #71	@ 0x47
 8009a32:	d1bf      	bne.n	80099b4 <_printf_float+0xf0>
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d1bd      	bne.n	80099b4 <_printf_float+0xf0>
 8009a38:	2301      	movs	r3, #1
 8009a3a:	e7ba      	b.n	80099b2 <_printf_float+0xee>
 8009a3c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009a40:	d9dc      	bls.n	80099fc <_printf_float+0x138>
 8009a42:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009a46:	d118      	bne.n	8009a7a <_printf_float+0x1b6>
 8009a48:	2900      	cmp	r1, #0
 8009a4a:	6863      	ldr	r3, [r4, #4]
 8009a4c:	dd0b      	ble.n	8009a66 <_printf_float+0x1a2>
 8009a4e:	6121      	str	r1, [r4, #16]
 8009a50:	b913      	cbnz	r3, 8009a58 <_printf_float+0x194>
 8009a52:	6822      	ldr	r2, [r4, #0]
 8009a54:	07d0      	lsls	r0, r2, #31
 8009a56:	d502      	bpl.n	8009a5e <_printf_float+0x19a>
 8009a58:	3301      	adds	r3, #1
 8009a5a:	440b      	add	r3, r1
 8009a5c:	6123      	str	r3, [r4, #16]
 8009a5e:	f04f 0900 	mov.w	r9, #0
 8009a62:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009a64:	e7dc      	b.n	8009a20 <_printf_float+0x15c>
 8009a66:	b913      	cbnz	r3, 8009a6e <_printf_float+0x1aa>
 8009a68:	6822      	ldr	r2, [r4, #0]
 8009a6a:	07d2      	lsls	r2, r2, #31
 8009a6c:	d501      	bpl.n	8009a72 <_printf_float+0x1ae>
 8009a6e:	3302      	adds	r3, #2
 8009a70:	e7f4      	b.n	8009a5c <_printf_float+0x198>
 8009a72:	2301      	movs	r3, #1
 8009a74:	e7f2      	b.n	8009a5c <_printf_float+0x198>
 8009a76:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009a7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a7c:	4299      	cmp	r1, r3
 8009a7e:	db05      	blt.n	8009a8c <_printf_float+0x1c8>
 8009a80:	6823      	ldr	r3, [r4, #0]
 8009a82:	6121      	str	r1, [r4, #16]
 8009a84:	07d8      	lsls	r0, r3, #31
 8009a86:	d5ea      	bpl.n	8009a5e <_printf_float+0x19a>
 8009a88:	1c4b      	adds	r3, r1, #1
 8009a8a:	e7e7      	b.n	8009a5c <_printf_float+0x198>
 8009a8c:	2900      	cmp	r1, #0
 8009a8e:	bfcc      	ite	gt
 8009a90:	2201      	movgt	r2, #1
 8009a92:	f1c1 0202 	rsble	r2, r1, #2
 8009a96:	4413      	add	r3, r2
 8009a98:	e7e0      	b.n	8009a5c <_printf_float+0x198>
 8009a9a:	6823      	ldr	r3, [r4, #0]
 8009a9c:	055a      	lsls	r2, r3, #21
 8009a9e:	d407      	bmi.n	8009ab0 <_printf_float+0x1ec>
 8009aa0:	6923      	ldr	r3, [r4, #16]
 8009aa2:	4642      	mov	r2, r8
 8009aa4:	4631      	mov	r1, r6
 8009aa6:	4628      	mov	r0, r5
 8009aa8:	47b8      	blx	r7
 8009aaa:	3001      	adds	r0, #1
 8009aac:	d12b      	bne.n	8009b06 <_printf_float+0x242>
 8009aae:	e764      	b.n	800997a <_printf_float+0xb6>
 8009ab0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009ab4:	f240 80dc 	bls.w	8009c70 <_printf_float+0x3ac>
 8009ab8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009abc:	2200      	movs	r2, #0
 8009abe:	2300      	movs	r3, #0
 8009ac0:	f7f6 ff72 	bl	80009a8 <__aeabi_dcmpeq>
 8009ac4:	2800      	cmp	r0, #0
 8009ac6:	d033      	beq.n	8009b30 <_printf_float+0x26c>
 8009ac8:	2301      	movs	r3, #1
 8009aca:	4631      	mov	r1, r6
 8009acc:	4628      	mov	r0, r5
 8009ace:	4a35      	ldr	r2, [pc, #212]	@ (8009ba4 <_printf_float+0x2e0>)
 8009ad0:	47b8      	blx	r7
 8009ad2:	3001      	adds	r0, #1
 8009ad4:	f43f af51 	beq.w	800997a <_printf_float+0xb6>
 8009ad8:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8009adc:	4543      	cmp	r3, r8
 8009ade:	db02      	blt.n	8009ae6 <_printf_float+0x222>
 8009ae0:	6823      	ldr	r3, [r4, #0]
 8009ae2:	07d8      	lsls	r0, r3, #31
 8009ae4:	d50f      	bpl.n	8009b06 <_printf_float+0x242>
 8009ae6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009aea:	4631      	mov	r1, r6
 8009aec:	4628      	mov	r0, r5
 8009aee:	47b8      	blx	r7
 8009af0:	3001      	adds	r0, #1
 8009af2:	f43f af42 	beq.w	800997a <_printf_float+0xb6>
 8009af6:	f04f 0900 	mov.w	r9, #0
 8009afa:	f108 38ff 	add.w	r8, r8, #4294967295
 8009afe:	f104 0a1a 	add.w	sl, r4, #26
 8009b02:	45c8      	cmp	r8, r9
 8009b04:	dc09      	bgt.n	8009b1a <_printf_float+0x256>
 8009b06:	6823      	ldr	r3, [r4, #0]
 8009b08:	079b      	lsls	r3, r3, #30
 8009b0a:	f100 8102 	bmi.w	8009d12 <_printf_float+0x44e>
 8009b0e:	68e0      	ldr	r0, [r4, #12]
 8009b10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b12:	4298      	cmp	r0, r3
 8009b14:	bfb8      	it	lt
 8009b16:	4618      	movlt	r0, r3
 8009b18:	e731      	b.n	800997e <_printf_float+0xba>
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	4652      	mov	r2, sl
 8009b1e:	4631      	mov	r1, r6
 8009b20:	4628      	mov	r0, r5
 8009b22:	47b8      	blx	r7
 8009b24:	3001      	adds	r0, #1
 8009b26:	f43f af28 	beq.w	800997a <_printf_float+0xb6>
 8009b2a:	f109 0901 	add.w	r9, r9, #1
 8009b2e:	e7e8      	b.n	8009b02 <_printf_float+0x23e>
 8009b30:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	dc38      	bgt.n	8009ba8 <_printf_float+0x2e4>
 8009b36:	2301      	movs	r3, #1
 8009b38:	4631      	mov	r1, r6
 8009b3a:	4628      	mov	r0, r5
 8009b3c:	4a19      	ldr	r2, [pc, #100]	@ (8009ba4 <_printf_float+0x2e0>)
 8009b3e:	47b8      	blx	r7
 8009b40:	3001      	adds	r0, #1
 8009b42:	f43f af1a 	beq.w	800997a <_printf_float+0xb6>
 8009b46:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8009b4a:	ea59 0303 	orrs.w	r3, r9, r3
 8009b4e:	d102      	bne.n	8009b56 <_printf_float+0x292>
 8009b50:	6823      	ldr	r3, [r4, #0]
 8009b52:	07d9      	lsls	r1, r3, #31
 8009b54:	d5d7      	bpl.n	8009b06 <_printf_float+0x242>
 8009b56:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009b5a:	4631      	mov	r1, r6
 8009b5c:	4628      	mov	r0, r5
 8009b5e:	47b8      	blx	r7
 8009b60:	3001      	adds	r0, #1
 8009b62:	f43f af0a 	beq.w	800997a <_printf_float+0xb6>
 8009b66:	f04f 0a00 	mov.w	sl, #0
 8009b6a:	f104 0b1a 	add.w	fp, r4, #26
 8009b6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009b70:	425b      	negs	r3, r3
 8009b72:	4553      	cmp	r3, sl
 8009b74:	dc01      	bgt.n	8009b7a <_printf_float+0x2b6>
 8009b76:	464b      	mov	r3, r9
 8009b78:	e793      	b.n	8009aa2 <_printf_float+0x1de>
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	465a      	mov	r2, fp
 8009b7e:	4631      	mov	r1, r6
 8009b80:	4628      	mov	r0, r5
 8009b82:	47b8      	blx	r7
 8009b84:	3001      	adds	r0, #1
 8009b86:	f43f aef8 	beq.w	800997a <_printf_float+0xb6>
 8009b8a:	f10a 0a01 	add.w	sl, sl, #1
 8009b8e:	e7ee      	b.n	8009b6e <_printf_float+0x2aa>
 8009b90:	7fefffff 	.word	0x7fefffff
 8009b94:	0800d0da 	.word	0x0800d0da
 8009b98:	0800d0d6 	.word	0x0800d0d6
 8009b9c:	0800d0e2 	.word	0x0800d0e2
 8009ba0:	0800d0de 	.word	0x0800d0de
 8009ba4:	0800d215 	.word	0x0800d215
 8009ba8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009baa:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8009bae:	4553      	cmp	r3, sl
 8009bb0:	bfa8      	it	ge
 8009bb2:	4653      	movge	r3, sl
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	4699      	mov	r9, r3
 8009bb8:	dc36      	bgt.n	8009c28 <_printf_float+0x364>
 8009bba:	f04f 0b00 	mov.w	fp, #0
 8009bbe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009bc2:	f104 021a 	add.w	r2, r4, #26
 8009bc6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009bc8:	930a      	str	r3, [sp, #40]	@ 0x28
 8009bca:	eba3 0309 	sub.w	r3, r3, r9
 8009bce:	455b      	cmp	r3, fp
 8009bd0:	dc31      	bgt.n	8009c36 <_printf_float+0x372>
 8009bd2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009bd4:	459a      	cmp	sl, r3
 8009bd6:	dc3a      	bgt.n	8009c4e <_printf_float+0x38a>
 8009bd8:	6823      	ldr	r3, [r4, #0]
 8009bda:	07da      	lsls	r2, r3, #31
 8009bdc:	d437      	bmi.n	8009c4e <_printf_float+0x38a>
 8009bde:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009be0:	ebaa 0903 	sub.w	r9, sl, r3
 8009be4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009be6:	ebaa 0303 	sub.w	r3, sl, r3
 8009bea:	4599      	cmp	r9, r3
 8009bec:	bfa8      	it	ge
 8009bee:	4699      	movge	r9, r3
 8009bf0:	f1b9 0f00 	cmp.w	r9, #0
 8009bf4:	dc33      	bgt.n	8009c5e <_printf_float+0x39a>
 8009bf6:	f04f 0800 	mov.w	r8, #0
 8009bfa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009bfe:	f104 0b1a 	add.w	fp, r4, #26
 8009c02:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009c04:	ebaa 0303 	sub.w	r3, sl, r3
 8009c08:	eba3 0309 	sub.w	r3, r3, r9
 8009c0c:	4543      	cmp	r3, r8
 8009c0e:	f77f af7a 	ble.w	8009b06 <_printf_float+0x242>
 8009c12:	2301      	movs	r3, #1
 8009c14:	465a      	mov	r2, fp
 8009c16:	4631      	mov	r1, r6
 8009c18:	4628      	mov	r0, r5
 8009c1a:	47b8      	blx	r7
 8009c1c:	3001      	adds	r0, #1
 8009c1e:	f43f aeac 	beq.w	800997a <_printf_float+0xb6>
 8009c22:	f108 0801 	add.w	r8, r8, #1
 8009c26:	e7ec      	b.n	8009c02 <_printf_float+0x33e>
 8009c28:	4642      	mov	r2, r8
 8009c2a:	4631      	mov	r1, r6
 8009c2c:	4628      	mov	r0, r5
 8009c2e:	47b8      	blx	r7
 8009c30:	3001      	adds	r0, #1
 8009c32:	d1c2      	bne.n	8009bba <_printf_float+0x2f6>
 8009c34:	e6a1      	b.n	800997a <_printf_float+0xb6>
 8009c36:	2301      	movs	r3, #1
 8009c38:	4631      	mov	r1, r6
 8009c3a:	4628      	mov	r0, r5
 8009c3c:	920a      	str	r2, [sp, #40]	@ 0x28
 8009c3e:	47b8      	blx	r7
 8009c40:	3001      	adds	r0, #1
 8009c42:	f43f ae9a 	beq.w	800997a <_printf_float+0xb6>
 8009c46:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009c48:	f10b 0b01 	add.w	fp, fp, #1
 8009c4c:	e7bb      	b.n	8009bc6 <_printf_float+0x302>
 8009c4e:	4631      	mov	r1, r6
 8009c50:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009c54:	4628      	mov	r0, r5
 8009c56:	47b8      	blx	r7
 8009c58:	3001      	adds	r0, #1
 8009c5a:	d1c0      	bne.n	8009bde <_printf_float+0x31a>
 8009c5c:	e68d      	b.n	800997a <_printf_float+0xb6>
 8009c5e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009c60:	464b      	mov	r3, r9
 8009c62:	4631      	mov	r1, r6
 8009c64:	4628      	mov	r0, r5
 8009c66:	4442      	add	r2, r8
 8009c68:	47b8      	blx	r7
 8009c6a:	3001      	adds	r0, #1
 8009c6c:	d1c3      	bne.n	8009bf6 <_printf_float+0x332>
 8009c6e:	e684      	b.n	800997a <_printf_float+0xb6>
 8009c70:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8009c74:	f1ba 0f01 	cmp.w	sl, #1
 8009c78:	dc01      	bgt.n	8009c7e <_printf_float+0x3ba>
 8009c7a:	07db      	lsls	r3, r3, #31
 8009c7c:	d536      	bpl.n	8009cec <_printf_float+0x428>
 8009c7e:	2301      	movs	r3, #1
 8009c80:	4642      	mov	r2, r8
 8009c82:	4631      	mov	r1, r6
 8009c84:	4628      	mov	r0, r5
 8009c86:	47b8      	blx	r7
 8009c88:	3001      	adds	r0, #1
 8009c8a:	f43f ae76 	beq.w	800997a <_printf_float+0xb6>
 8009c8e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009c92:	4631      	mov	r1, r6
 8009c94:	4628      	mov	r0, r5
 8009c96:	47b8      	blx	r7
 8009c98:	3001      	adds	r0, #1
 8009c9a:	f43f ae6e 	beq.w	800997a <_printf_float+0xb6>
 8009c9e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009caa:	f7f6 fe7d 	bl	80009a8 <__aeabi_dcmpeq>
 8009cae:	b9c0      	cbnz	r0, 8009ce2 <_printf_float+0x41e>
 8009cb0:	4653      	mov	r3, sl
 8009cb2:	f108 0201 	add.w	r2, r8, #1
 8009cb6:	4631      	mov	r1, r6
 8009cb8:	4628      	mov	r0, r5
 8009cba:	47b8      	blx	r7
 8009cbc:	3001      	adds	r0, #1
 8009cbe:	d10c      	bne.n	8009cda <_printf_float+0x416>
 8009cc0:	e65b      	b.n	800997a <_printf_float+0xb6>
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	465a      	mov	r2, fp
 8009cc6:	4631      	mov	r1, r6
 8009cc8:	4628      	mov	r0, r5
 8009cca:	47b8      	blx	r7
 8009ccc:	3001      	adds	r0, #1
 8009cce:	f43f ae54 	beq.w	800997a <_printf_float+0xb6>
 8009cd2:	f108 0801 	add.w	r8, r8, #1
 8009cd6:	45d0      	cmp	r8, sl
 8009cd8:	dbf3      	blt.n	8009cc2 <_printf_float+0x3fe>
 8009cda:	464b      	mov	r3, r9
 8009cdc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009ce0:	e6e0      	b.n	8009aa4 <_printf_float+0x1e0>
 8009ce2:	f04f 0800 	mov.w	r8, #0
 8009ce6:	f104 0b1a 	add.w	fp, r4, #26
 8009cea:	e7f4      	b.n	8009cd6 <_printf_float+0x412>
 8009cec:	2301      	movs	r3, #1
 8009cee:	4642      	mov	r2, r8
 8009cf0:	e7e1      	b.n	8009cb6 <_printf_float+0x3f2>
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	464a      	mov	r2, r9
 8009cf6:	4631      	mov	r1, r6
 8009cf8:	4628      	mov	r0, r5
 8009cfa:	47b8      	blx	r7
 8009cfc:	3001      	adds	r0, #1
 8009cfe:	f43f ae3c 	beq.w	800997a <_printf_float+0xb6>
 8009d02:	f108 0801 	add.w	r8, r8, #1
 8009d06:	68e3      	ldr	r3, [r4, #12]
 8009d08:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009d0a:	1a5b      	subs	r3, r3, r1
 8009d0c:	4543      	cmp	r3, r8
 8009d0e:	dcf0      	bgt.n	8009cf2 <_printf_float+0x42e>
 8009d10:	e6fd      	b.n	8009b0e <_printf_float+0x24a>
 8009d12:	f04f 0800 	mov.w	r8, #0
 8009d16:	f104 0919 	add.w	r9, r4, #25
 8009d1a:	e7f4      	b.n	8009d06 <_printf_float+0x442>

08009d1c <_printf_common>:
 8009d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d20:	4616      	mov	r6, r2
 8009d22:	4698      	mov	r8, r3
 8009d24:	688a      	ldr	r2, [r1, #8]
 8009d26:	690b      	ldr	r3, [r1, #16]
 8009d28:	4607      	mov	r7, r0
 8009d2a:	4293      	cmp	r3, r2
 8009d2c:	bfb8      	it	lt
 8009d2e:	4613      	movlt	r3, r2
 8009d30:	6033      	str	r3, [r6, #0]
 8009d32:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009d36:	460c      	mov	r4, r1
 8009d38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009d3c:	b10a      	cbz	r2, 8009d42 <_printf_common+0x26>
 8009d3e:	3301      	adds	r3, #1
 8009d40:	6033      	str	r3, [r6, #0]
 8009d42:	6823      	ldr	r3, [r4, #0]
 8009d44:	0699      	lsls	r1, r3, #26
 8009d46:	bf42      	ittt	mi
 8009d48:	6833      	ldrmi	r3, [r6, #0]
 8009d4a:	3302      	addmi	r3, #2
 8009d4c:	6033      	strmi	r3, [r6, #0]
 8009d4e:	6825      	ldr	r5, [r4, #0]
 8009d50:	f015 0506 	ands.w	r5, r5, #6
 8009d54:	d106      	bne.n	8009d64 <_printf_common+0x48>
 8009d56:	f104 0a19 	add.w	sl, r4, #25
 8009d5a:	68e3      	ldr	r3, [r4, #12]
 8009d5c:	6832      	ldr	r2, [r6, #0]
 8009d5e:	1a9b      	subs	r3, r3, r2
 8009d60:	42ab      	cmp	r3, r5
 8009d62:	dc2b      	bgt.n	8009dbc <_printf_common+0xa0>
 8009d64:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009d68:	6822      	ldr	r2, [r4, #0]
 8009d6a:	3b00      	subs	r3, #0
 8009d6c:	bf18      	it	ne
 8009d6e:	2301      	movne	r3, #1
 8009d70:	0692      	lsls	r2, r2, #26
 8009d72:	d430      	bmi.n	8009dd6 <_printf_common+0xba>
 8009d74:	4641      	mov	r1, r8
 8009d76:	4638      	mov	r0, r7
 8009d78:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009d7c:	47c8      	blx	r9
 8009d7e:	3001      	adds	r0, #1
 8009d80:	d023      	beq.n	8009dca <_printf_common+0xae>
 8009d82:	6823      	ldr	r3, [r4, #0]
 8009d84:	6922      	ldr	r2, [r4, #16]
 8009d86:	f003 0306 	and.w	r3, r3, #6
 8009d8a:	2b04      	cmp	r3, #4
 8009d8c:	bf14      	ite	ne
 8009d8e:	2500      	movne	r5, #0
 8009d90:	6833      	ldreq	r3, [r6, #0]
 8009d92:	f04f 0600 	mov.w	r6, #0
 8009d96:	bf08      	it	eq
 8009d98:	68e5      	ldreq	r5, [r4, #12]
 8009d9a:	f104 041a 	add.w	r4, r4, #26
 8009d9e:	bf08      	it	eq
 8009da0:	1aed      	subeq	r5, r5, r3
 8009da2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009da6:	bf08      	it	eq
 8009da8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009dac:	4293      	cmp	r3, r2
 8009dae:	bfc4      	itt	gt
 8009db0:	1a9b      	subgt	r3, r3, r2
 8009db2:	18ed      	addgt	r5, r5, r3
 8009db4:	42b5      	cmp	r5, r6
 8009db6:	d11a      	bne.n	8009dee <_printf_common+0xd2>
 8009db8:	2000      	movs	r0, #0
 8009dba:	e008      	b.n	8009dce <_printf_common+0xb2>
 8009dbc:	2301      	movs	r3, #1
 8009dbe:	4652      	mov	r2, sl
 8009dc0:	4641      	mov	r1, r8
 8009dc2:	4638      	mov	r0, r7
 8009dc4:	47c8      	blx	r9
 8009dc6:	3001      	adds	r0, #1
 8009dc8:	d103      	bne.n	8009dd2 <_printf_common+0xb6>
 8009dca:	f04f 30ff 	mov.w	r0, #4294967295
 8009dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dd2:	3501      	adds	r5, #1
 8009dd4:	e7c1      	b.n	8009d5a <_printf_common+0x3e>
 8009dd6:	2030      	movs	r0, #48	@ 0x30
 8009dd8:	18e1      	adds	r1, r4, r3
 8009dda:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009dde:	1c5a      	adds	r2, r3, #1
 8009de0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009de4:	4422      	add	r2, r4
 8009de6:	3302      	adds	r3, #2
 8009de8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009dec:	e7c2      	b.n	8009d74 <_printf_common+0x58>
 8009dee:	2301      	movs	r3, #1
 8009df0:	4622      	mov	r2, r4
 8009df2:	4641      	mov	r1, r8
 8009df4:	4638      	mov	r0, r7
 8009df6:	47c8      	blx	r9
 8009df8:	3001      	adds	r0, #1
 8009dfa:	d0e6      	beq.n	8009dca <_printf_common+0xae>
 8009dfc:	3601      	adds	r6, #1
 8009dfe:	e7d9      	b.n	8009db4 <_printf_common+0x98>

08009e00 <_printf_i>:
 8009e00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e04:	7e0f      	ldrb	r7, [r1, #24]
 8009e06:	4691      	mov	r9, r2
 8009e08:	2f78      	cmp	r7, #120	@ 0x78
 8009e0a:	4680      	mov	r8, r0
 8009e0c:	460c      	mov	r4, r1
 8009e0e:	469a      	mov	sl, r3
 8009e10:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009e12:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009e16:	d807      	bhi.n	8009e28 <_printf_i+0x28>
 8009e18:	2f62      	cmp	r7, #98	@ 0x62
 8009e1a:	d80a      	bhi.n	8009e32 <_printf_i+0x32>
 8009e1c:	2f00      	cmp	r7, #0
 8009e1e:	f000 80d1 	beq.w	8009fc4 <_printf_i+0x1c4>
 8009e22:	2f58      	cmp	r7, #88	@ 0x58
 8009e24:	f000 80b8 	beq.w	8009f98 <_printf_i+0x198>
 8009e28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009e2c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009e30:	e03a      	b.n	8009ea8 <_printf_i+0xa8>
 8009e32:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009e36:	2b15      	cmp	r3, #21
 8009e38:	d8f6      	bhi.n	8009e28 <_printf_i+0x28>
 8009e3a:	a101      	add	r1, pc, #4	@ (adr r1, 8009e40 <_printf_i+0x40>)
 8009e3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009e40:	08009e99 	.word	0x08009e99
 8009e44:	08009ead 	.word	0x08009ead
 8009e48:	08009e29 	.word	0x08009e29
 8009e4c:	08009e29 	.word	0x08009e29
 8009e50:	08009e29 	.word	0x08009e29
 8009e54:	08009e29 	.word	0x08009e29
 8009e58:	08009ead 	.word	0x08009ead
 8009e5c:	08009e29 	.word	0x08009e29
 8009e60:	08009e29 	.word	0x08009e29
 8009e64:	08009e29 	.word	0x08009e29
 8009e68:	08009e29 	.word	0x08009e29
 8009e6c:	08009fab 	.word	0x08009fab
 8009e70:	08009ed7 	.word	0x08009ed7
 8009e74:	08009f65 	.word	0x08009f65
 8009e78:	08009e29 	.word	0x08009e29
 8009e7c:	08009e29 	.word	0x08009e29
 8009e80:	08009fcd 	.word	0x08009fcd
 8009e84:	08009e29 	.word	0x08009e29
 8009e88:	08009ed7 	.word	0x08009ed7
 8009e8c:	08009e29 	.word	0x08009e29
 8009e90:	08009e29 	.word	0x08009e29
 8009e94:	08009f6d 	.word	0x08009f6d
 8009e98:	6833      	ldr	r3, [r6, #0]
 8009e9a:	1d1a      	adds	r2, r3, #4
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	6032      	str	r2, [r6, #0]
 8009ea0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009ea4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	e09c      	b.n	8009fe6 <_printf_i+0x1e6>
 8009eac:	6833      	ldr	r3, [r6, #0]
 8009eae:	6820      	ldr	r0, [r4, #0]
 8009eb0:	1d19      	adds	r1, r3, #4
 8009eb2:	6031      	str	r1, [r6, #0]
 8009eb4:	0606      	lsls	r6, r0, #24
 8009eb6:	d501      	bpl.n	8009ebc <_printf_i+0xbc>
 8009eb8:	681d      	ldr	r5, [r3, #0]
 8009eba:	e003      	b.n	8009ec4 <_printf_i+0xc4>
 8009ebc:	0645      	lsls	r5, r0, #25
 8009ebe:	d5fb      	bpl.n	8009eb8 <_printf_i+0xb8>
 8009ec0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009ec4:	2d00      	cmp	r5, #0
 8009ec6:	da03      	bge.n	8009ed0 <_printf_i+0xd0>
 8009ec8:	232d      	movs	r3, #45	@ 0x2d
 8009eca:	426d      	negs	r5, r5
 8009ecc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009ed0:	230a      	movs	r3, #10
 8009ed2:	4858      	ldr	r0, [pc, #352]	@ (800a034 <_printf_i+0x234>)
 8009ed4:	e011      	b.n	8009efa <_printf_i+0xfa>
 8009ed6:	6821      	ldr	r1, [r4, #0]
 8009ed8:	6833      	ldr	r3, [r6, #0]
 8009eda:	0608      	lsls	r0, r1, #24
 8009edc:	f853 5b04 	ldr.w	r5, [r3], #4
 8009ee0:	d402      	bmi.n	8009ee8 <_printf_i+0xe8>
 8009ee2:	0649      	lsls	r1, r1, #25
 8009ee4:	bf48      	it	mi
 8009ee6:	b2ad      	uxthmi	r5, r5
 8009ee8:	2f6f      	cmp	r7, #111	@ 0x6f
 8009eea:	6033      	str	r3, [r6, #0]
 8009eec:	bf14      	ite	ne
 8009eee:	230a      	movne	r3, #10
 8009ef0:	2308      	moveq	r3, #8
 8009ef2:	4850      	ldr	r0, [pc, #320]	@ (800a034 <_printf_i+0x234>)
 8009ef4:	2100      	movs	r1, #0
 8009ef6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009efa:	6866      	ldr	r6, [r4, #4]
 8009efc:	2e00      	cmp	r6, #0
 8009efe:	60a6      	str	r6, [r4, #8]
 8009f00:	db05      	blt.n	8009f0e <_printf_i+0x10e>
 8009f02:	6821      	ldr	r1, [r4, #0]
 8009f04:	432e      	orrs	r6, r5
 8009f06:	f021 0104 	bic.w	r1, r1, #4
 8009f0a:	6021      	str	r1, [r4, #0]
 8009f0c:	d04b      	beq.n	8009fa6 <_printf_i+0x1a6>
 8009f0e:	4616      	mov	r6, r2
 8009f10:	fbb5 f1f3 	udiv	r1, r5, r3
 8009f14:	fb03 5711 	mls	r7, r3, r1, r5
 8009f18:	5dc7      	ldrb	r7, [r0, r7]
 8009f1a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009f1e:	462f      	mov	r7, r5
 8009f20:	42bb      	cmp	r3, r7
 8009f22:	460d      	mov	r5, r1
 8009f24:	d9f4      	bls.n	8009f10 <_printf_i+0x110>
 8009f26:	2b08      	cmp	r3, #8
 8009f28:	d10b      	bne.n	8009f42 <_printf_i+0x142>
 8009f2a:	6823      	ldr	r3, [r4, #0]
 8009f2c:	07df      	lsls	r7, r3, #31
 8009f2e:	d508      	bpl.n	8009f42 <_printf_i+0x142>
 8009f30:	6923      	ldr	r3, [r4, #16]
 8009f32:	6861      	ldr	r1, [r4, #4]
 8009f34:	4299      	cmp	r1, r3
 8009f36:	bfde      	ittt	le
 8009f38:	2330      	movle	r3, #48	@ 0x30
 8009f3a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009f3e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009f42:	1b92      	subs	r2, r2, r6
 8009f44:	6122      	str	r2, [r4, #16]
 8009f46:	464b      	mov	r3, r9
 8009f48:	4621      	mov	r1, r4
 8009f4a:	4640      	mov	r0, r8
 8009f4c:	f8cd a000 	str.w	sl, [sp]
 8009f50:	aa03      	add	r2, sp, #12
 8009f52:	f7ff fee3 	bl	8009d1c <_printf_common>
 8009f56:	3001      	adds	r0, #1
 8009f58:	d14a      	bne.n	8009ff0 <_printf_i+0x1f0>
 8009f5a:	f04f 30ff 	mov.w	r0, #4294967295
 8009f5e:	b004      	add	sp, #16
 8009f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f64:	6823      	ldr	r3, [r4, #0]
 8009f66:	f043 0320 	orr.w	r3, r3, #32
 8009f6a:	6023      	str	r3, [r4, #0]
 8009f6c:	2778      	movs	r7, #120	@ 0x78
 8009f6e:	4832      	ldr	r0, [pc, #200]	@ (800a038 <_printf_i+0x238>)
 8009f70:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009f74:	6823      	ldr	r3, [r4, #0]
 8009f76:	6831      	ldr	r1, [r6, #0]
 8009f78:	061f      	lsls	r7, r3, #24
 8009f7a:	f851 5b04 	ldr.w	r5, [r1], #4
 8009f7e:	d402      	bmi.n	8009f86 <_printf_i+0x186>
 8009f80:	065f      	lsls	r7, r3, #25
 8009f82:	bf48      	it	mi
 8009f84:	b2ad      	uxthmi	r5, r5
 8009f86:	6031      	str	r1, [r6, #0]
 8009f88:	07d9      	lsls	r1, r3, #31
 8009f8a:	bf44      	itt	mi
 8009f8c:	f043 0320 	orrmi.w	r3, r3, #32
 8009f90:	6023      	strmi	r3, [r4, #0]
 8009f92:	b11d      	cbz	r5, 8009f9c <_printf_i+0x19c>
 8009f94:	2310      	movs	r3, #16
 8009f96:	e7ad      	b.n	8009ef4 <_printf_i+0xf4>
 8009f98:	4826      	ldr	r0, [pc, #152]	@ (800a034 <_printf_i+0x234>)
 8009f9a:	e7e9      	b.n	8009f70 <_printf_i+0x170>
 8009f9c:	6823      	ldr	r3, [r4, #0]
 8009f9e:	f023 0320 	bic.w	r3, r3, #32
 8009fa2:	6023      	str	r3, [r4, #0]
 8009fa4:	e7f6      	b.n	8009f94 <_printf_i+0x194>
 8009fa6:	4616      	mov	r6, r2
 8009fa8:	e7bd      	b.n	8009f26 <_printf_i+0x126>
 8009faa:	6833      	ldr	r3, [r6, #0]
 8009fac:	6825      	ldr	r5, [r4, #0]
 8009fae:	1d18      	adds	r0, r3, #4
 8009fb0:	6961      	ldr	r1, [r4, #20]
 8009fb2:	6030      	str	r0, [r6, #0]
 8009fb4:	062e      	lsls	r6, r5, #24
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	d501      	bpl.n	8009fbe <_printf_i+0x1be>
 8009fba:	6019      	str	r1, [r3, #0]
 8009fbc:	e002      	b.n	8009fc4 <_printf_i+0x1c4>
 8009fbe:	0668      	lsls	r0, r5, #25
 8009fc0:	d5fb      	bpl.n	8009fba <_printf_i+0x1ba>
 8009fc2:	8019      	strh	r1, [r3, #0]
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	4616      	mov	r6, r2
 8009fc8:	6123      	str	r3, [r4, #16]
 8009fca:	e7bc      	b.n	8009f46 <_printf_i+0x146>
 8009fcc:	6833      	ldr	r3, [r6, #0]
 8009fce:	2100      	movs	r1, #0
 8009fd0:	1d1a      	adds	r2, r3, #4
 8009fd2:	6032      	str	r2, [r6, #0]
 8009fd4:	681e      	ldr	r6, [r3, #0]
 8009fd6:	6862      	ldr	r2, [r4, #4]
 8009fd8:	4630      	mov	r0, r6
 8009fda:	f000 fa62 	bl	800a4a2 <memchr>
 8009fde:	b108      	cbz	r0, 8009fe4 <_printf_i+0x1e4>
 8009fe0:	1b80      	subs	r0, r0, r6
 8009fe2:	6060      	str	r0, [r4, #4]
 8009fe4:	6863      	ldr	r3, [r4, #4]
 8009fe6:	6123      	str	r3, [r4, #16]
 8009fe8:	2300      	movs	r3, #0
 8009fea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009fee:	e7aa      	b.n	8009f46 <_printf_i+0x146>
 8009ff0:	4632      	mov	r2, r6
 8009ff2:	4649      	mov	r1, r9
 8009ff4:	4640      	mov	r0, r8
 8009ff6:	6923      	ldr	r3, [r4, #16]
 8009ff8:	47d0      	blx	sl
 8009ffa:	3001      	adds	r0, #1
 8009ffc:	d0ad      	beq.n	8009f5a <_printf_i+0x15a>
 8009ffe:	6823      	ldr	r3, [r4, #0]
 800a000:	079b      	lsls	r3, r3, #30
 800a002:	d413      	bmi.n	800a02c <_printf_i+0x22c>
 800a004:	68e0      	ldr	r0, [r4, #12]
 800a006:	9b03      	ldr	r3, [sp, #12]
 800a008:	4298      	cmp	r0, r3
 800a00a:	bfb8      	it	lt
 800a00c:	4618      	movlt	r0, r3
 800a00e:	e7a6      	b.n	8009f5e <_printf_i+0x15e>
 800a010:	2301      	movs	r3, #1
 800a012:	4632      	mov	r2, r6
 800a014:	4649      	mov	r1, r9
 800a016:	4640      	mov	r0, r8
 800a018:	47d0      	blx	sl
 800a01a:	3001      	adds	r0, #1
 800a01c:	d09d      	beq.n	8009f5a <_printf_i+0x15a>
 800a01e:	3501      	adds	r5, #1
 800a020:	68e3      	ldr	r3, [r4, #12]
 800a022:	9903      	ldr	r1, [sp, #12]
 800a024:	1a5b      	subs	r3, r3, r1
 800a026:	42ab      	cmp	r3, r5
 800a028:	dcf2      	bgt.n	800a010 <_printf_i+0x210>
 800a02a:	e7eb      	b.n	800a004 <_printf_i+0x204>
 800a02c:	2500      	movs	r5, #0
 800a02e:	f104 0619 	add.w	r6, r4, #25
 800a032:	e7f5      	b.n	800a020 <_printf_i+0x220>
 800a034:	0800d0e6 	.word	0x0800d0e6
 800a038:	0800d0f7 	.word	0x0800d0f7

0800a03c <std>:
 800a03c:	2300      	movs	r3, #0
 800a03e:	b510      	push	{r4, lr}
 800a040:	4604      	mov	r4, r0
 800a042:	e9c0 3300 	strd	r3, r3, [r0]
 800a046:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a04a:	6083      	str	r3, [r0, #8]
 800a04c:	8181      	strh	r1, [r0, #12]
 800a04e:	6643      	str	r3, [r0, #100]	@ 0x64
 800a050:	81c2      	strh	r2, [r0, #14]
 800a052:	6183      	str	r3, [r0, #24]
 800a054:	4619      	mov	r1, r3
 800a056:	2208      	movs	r2, #8
 800a058:	305c      	adds	r0, #92	@ 0x5c
 800a05a:	f000 f944 	bl	800a2e6 <memset>
 800a05e:	4b0d      	ldr	r3, [pc, #52]	@ (800a094 <std+0x58>)
 800a060:	6224      	str	r4, [r4, #32]
 800a062:	6263      	str	r3, [r4, #36]	@ 0x24
 800a064:	4b0c      	ldr	r3, [pc, #48]	@ (800a098 <std+0x5c>)
 800a066:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a068:	4b0c      	ldr	r3, [pc, #48]	@ (800a09c <std+0x60>)
 800a06a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a06c:	4b0c      	ldr	r3, [pc, #48]	@ (800a0a0 <std+0x64>)
 800a06e:	6323      	str	r3, [r4, #48]	@ 0x30
 800a070:	4b0c      	ldr	r3, [pc, #48]	@ (800a0a4 <std+0x68>)
 800a072:	429c      	cmp	r4, r3
 800a074:	d006      	beq.n	800a084 <std+0x48>
 800a076:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a07a:	4294      	cmp	r4, r2
 800a07c:	d002      	beq.n	800a084 <std+0x48>
 800a07e:	33d0      	adds	r3, #208	@ 0xd0
 800a080:	429c      	cmp	r4, r3
 800a082:	d105      	bne.n	800a090 <std+0x54>
 800a084:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a088:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a08c:	f000 ba06 	b.w	800a49c <__retarget_lock_init_recursive>
 800a090:	bd10      	pop	{r4, pc}
 800a092:	bf00      	nop
 800a094:	0800a25d 	.word	0x0800a25d
 800a098:	0800a283 	.word	0x0800a283
 800a09c:	0800a2bb 	.word	0x0800a2bb
 800a0a0:	0800a2df 	.word	0x0800a2df
 800a0a4:	20002984 	.word	0x20002984

0800a0a8 <stdio_exit_handler>:
 800a0a8:	4a02      	ldr	r2, [pc, #8]	@ (800a0b4 <stdio_exit_handler+0xc>)
 800a0aa:	4903      	ldr	r1, [pc, #12]	@ (800a0b8 <stdio_exit_handler+0x10>)
 800a0ac:	4803      	ldr	r0, [pc, #12]	@ (800a0bc <stdio_exit_handler+0x14>)
 800a0ae:	f000 b869 	b.w	800a184 <_fwalk_sglue>
 800a0b2:	bf00      	nop
 800a0b4:	20000024 	.word	0x20000024
 800a0b8:	0800c46d 	.word	0x0800c46d
 800a0bc:	20000034 	.word	0x20000034

0800a0c0 <cleanup_stdio>:
 800a0c0:	6841      	ldr	r1, [r0, #4]
 800a0c2:	4b0c      	ldr	r3, [pc, #48]	@ (800a0f4 <cleanup_stdio+0x34>)
 800a0c4:	b510      	push	{r4, lr}
 800a0c6:	4299      	cmp	r1, r3
 800a0c8:	4604      	mov	r4, r0
 800a0ca:	d001      	beq.n	800a0d0 <cleanup_stdio+0x10>
 800a0cc:	f002 f9ce 	bl	800c46c <_fflush_r>
 800a0d0:	68a1      	ldr	r1, [r4, #8]
 800a0d2:	4b09      	ldr	r3, [pc, #36]	@ (800a0f8 <cleanup_stdio+0x38>)
 800a0d4:	4299      	cmp	r1, r3
 800a0d6:	d002      	beq.n	800a0de <cleanup_stdio+0x1e>
 800a0d8:	4620      	mov	r0, r4
 800a0da:	f002 f9c7 	bl	800c46c <_fflush_r>
 800a0de:	68e1      	ldr	r1, [r4, #12]
 800a0e0:	4b06      	ldr	r3, [pc, #24]	@ (800a0fc <cleanup_stdio+0x3c>)
 800a0e2:	4299      	cmp	r1, r3
 800a0e4:	d004      	beq.n	800a0f0 <cleanup_stdio+0x30>
 800a0e6:	4620      	mov	r0, r4
 800a0e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0ec:	f002 b9be 	b.w	800c46c <_fflush_r>
 800a0f0:	bd10      	pop	{r4, pc}
 800a0f2:	bf00      	nop
 800a0f4:	20002984 	.word	0x20002984
 800a0f8:	200029ec 	.word	0x200029ec
 800a0fc:	20002a54 	.word	0x20002a54

0800a100 <global_stdio_init.part.0>:
 800a100:	b510      	push	{r4, lr}
 800a102:	4b0b      	ldr	r3, [pc, #44]	@ (800a130 <global_stdio_init.part.0+0x30>)
 800a104:	4c0b      	ldr	r4, [pc, #44]	@ (800a134 <global_stdio_init.part.0+0x34>)
 800a106:	4a0c      	ldr	r2, [pc, #48]	@ (800a138 <global_stdio_init.part.0+0x38>)
 800a108:	4620      	mov	r0, r4
 800a10a:	601a      	str	r2, [r3, #0]
 800a10c:	2104      	movs	r1, #4
 800a10e:	2200      	movs	r2, #0
 800a110:	f7ff ff94 	bl	800a03c <std>
 800a114:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a118:	2201      	movs	r2, #1
 800a11a:	2109      	movs	r1, #9
 800a11c:	f7ff ff8e 	bl	800a03c <std>
 800a120:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a124:	2202      	movs	r2, #2
 800a126:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a12a:	2112      	movs	r1, #18
 800a12c:	f7ff bf86 	b.w	800a03c <std>
 800a130:	20002abc 	.word	0x20002abc
 800a134:	20002984 	.word	0x20002984
 800a138:	0800a0a9 	.word	0x0800a0a9

0800a13c <__sfp_lock_acquire>:
 800a13c:	4801      	ldr	r0, [pc, #4]	@ (800a144 <__sfp_lock_acquire+0x8>)
 800a13e:	f000 b9ae 	b.w	800a49e <__retarget_lock_acquire_recursive>
 800a142:	bf00      	nop
 800a144:	20002ac5 	.word	0x20002ac5

0800a148 <__sfp_lock_release>:
 800a148:	4801      	ldr	r0, [pc, #4]	@ (800a150 <__sfp_lock_release+0x8>)
 800a14a:	f000 b9a9 	b.w	800a4a0 <__retarget_lock_release_recursive>
 800a14e:	bf00      	nop
 800a150:	20002ac5 	.word	0x20002ac5

0800a154 <__sinit>:
 800a154:	b510      	push	{r4, lr}
 800a156:	4604      	mov	r4, r0
 800a158:	f7ff fff0 	bl	800a13c <__sfp_lock_acquire>
 800a15c:	6a23      	ldr	r3, [r4, #32]
 800a15e:	b11b      	cbz	r3, 800a168 <__sinit+0x14>
 800a160:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a164:	f7ff bff0 	b.w	800a148 <__sfp_lock_release>
 800a168:	4b04      	ldr	r3, [pc, #16]	@ (800a17c <__sinit+0x28>)
 800a16a:	6223      	str	r3, [r4, #32]
 800a16c:	4b04      	ldr	r3, [pc, #16]	@ (800a180 <__sinit+0x2c>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d1f5      	bne.n	800a160 <__sinit+0xc>
 800a174:	f7ff ffc4 	bl	800a100 <global_stdio_init.part.0>
 800a178:	e7f2      	b.n	800a160 <__sinit+0xc>
 800a17a:	bf00      	nop
 800a17c:	0800a0c1 	.word	0x0800a0c1
 800a180:	20002abc 	.word	0x20002abc

0800a184 <_fwalk_sglue>:
 800a184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a188:	4607      	mov	r7, r0
 800a18a:	4688      	mov	r8, r1
 800a18c:	4614      	mov	r4, r2
 800a18e:	2600      	movs	r6, #0
 800a190:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a194:	f1b9 0901 	subs.w	r9, r9, #1
 800a198:	d505      	bpl.n	800a1a6 <_fwalk_sglue+0x22>
 800a19a:	6824      	ldr	r4, [r4, #0]
 800a19c:	2c00      	cmp	r4, #0
 800a19e:	d1f7      	bne.n	800a190 <_fwalk_sglue+0xc>
 800a1a0:	4630      	mov	r0, r6
 800a1a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1a6:	89ab      	ldrh	r3, [r5, #12]
 800a1a8:	2b01      	cmp	r3, #1
 800a1aa:	d907      	bls.n	800a1bc <_fwalk_sglue+0x38>
 800a1ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a1b0:	3301      	adds	r3, #1
 800a1b2:	d003      	beq.n	800a1bc <_fwalk_sglue+0x38>
 800a1b4:	4629      	mov	r1, r5
 800a1b6:	4638      	mov	r0, r7
 800a1b8:	47c0      	blx	r8
 800a1ba:	4306      	orrs	r6, r0
 800a1bc:	3568      	adds	r5, #104	@ 0x68
 800a1be:	e7e9      	b.n	800a194 <_fwalk_sglue+0x10>

0800a1c0 <siprintf>:
 800a1c0:	b40e      	push	{r1, r2, r3}
 800a1c2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a1c6:	b510      	push	{r4, lr}
 800a1c8:	2400      	movs	r4, #0
 800a1ca:	b09d      	sub	sp, #116	@ 0x74
 800a1cc:	ab1f      	add	r3, sp, #124	@ 0x7c
 800a1ce:	9002      	str	r0, [sp, #8]
 800a1d0:	9006      	str	r0, [sp, #24]
 800a1d2:	9107      	str	r1, [sp, #28]
 800a1d4:	9104      	str	r1, [sp, #16]
 800a1d6:	4809      	ldr	r0, [pc, #36]	@ (800a1fc <siprintf+0x3c>)
 800a1d8:	4909      	ldr	r1, [pc, #36]	@ (800a200 <siprintf+0x40>)
 800a1da:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1de:	9105      	str	r1, [sp, #20]
 800a1e0:	6800      	ldr	r0, [r0, #0]
 800a1e2:	a902      	add	r1, sp, #8
 800a1e4:	9301      	str	r3, [sp, #4]
 800a1e6:	941b      	str	r4, [sp, #108]	@ 0x6c
 800a1e8:	f001 fcaa 	bl	800bb40 <_svfiprintf_r>
 800a1ec:	9b02      	ldr	r3, [sp, #8]
 800a1ee:	701c      	strb	r4, [r3, #0]
 800a1f0:	b01d      	add	sp, #116	@ 0x74
 800a1f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1f6:	b003      	add	sp, #12
 800a1f8:	4770      	bx	lr
 800a1fa:	bf00      	nop
 800a1fc:	20000030 	.word	0x20000030
 800a200:	ffff0208 	.word	0xffff0208

0800a204 <siscanf>:
 800a204:	b40e      	push	{r1, r2, r3}
 800a206:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800a20a:	b570      	push	{r4, r5, r6, lr}
 800a20c:	2500      	movs	r5, #0
 800a20e:	b09d      	sub	sp, #116	@ 0x74
 800a210:	ac21      	add	r4, sp, #132	@ 0x84
 800a212:	f854 6b04 	ldr.w	r6, [r4], #4
 800a216:	f8ad 2014 	strh.w	r2, [sp, #20]
 800a21a:	951b      	str	r5, [sp, #108]	@ 0x6c
 800a21c:	9002      	str	r0, [sp, #8]
 800a21e:	9006      	str	r0, [sp, #24]
 800a220:	f7f5 ff96 	bl	8000150 <strlen>
 800a224:	4b0b      	ldr	r3, [pc, #44]	@ (800a254 <siscanf+0x50>)
 800a226:	9003      	str	r0, [sp, #12]
 800a228:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a22a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a22e:	9007      	str	r0, [sp, #28]
 800a230:	4809      	ldr	r0, [pc, #36]	@ (800a258 <siscanf+0x54>)
 800a232:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a236:	4632      	mov	r2, r6
 800a238:	4623      	mov	r3, r4
 800a23a:	a902      	add	r1, sp, #8
 800a23c:	6800      	ldr	r0, [r0, #0]
 800a23e:	950f      	str	r5, [sp, #60]	@ 0x3c
 800a240:	9514      	str	r5, [sp, #80]	@ 0x50
 800a242:	9401      	str	r4, [sp, #4]
 800a244:	f001 fdd2 	bl	800bdec <__ssvfiscanf_r>
 800a248:	b01d      	add	sp, #116	@ 0x74
 800a24a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a24e:	b003      	add	sp, #12
 800a250:	4770      	bx	lr
 800a252:	bf00      	nop
 800a254:	0800a27f 	.word	0x0800a27f
 800a258:	20000030 	.word	0x20000030

0800a25c <__sread>:
 800a25c:	b510      	push	{r4, lr}
 800a25e:	460c      	mov	r4, r1
 800a260:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a264:	f000 f8cc 	bl	800a400 <_read_r>
 800a268:	2800      	cmp	r0, #0
 800a26a:	bfab      	itete	ge
 800a26c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a26e:	89a3      	ldrhlt	r3, [r4, #12]
 800a270:	181b      	addge	r3, r3, r0
 800a272:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a276:	bfac      	ite	ge
 800a278:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a27a:	81a3      	strhlt	r3, [r4, #12]
 800a27c:	bd10      	pop	{r4, pc}

0800a27e <__seofread>:
 800a27e:	2000      	movs	r0, #0
 800a280:	4770      	bx	lr

0800a282 <__swrite>:
 800a282:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a286:	461f      	mov	r7, r3
 800a288:	898b      	ldrh	r3, [r1, #12]
 800a28a:	4605      	mov	r5, r0
 800a28c:	05db      	lsls	r3, r3, #23
 800a28e:	460c      	mov	r4, r1
 800a290:	4616      	mov	r6, r2
 800a292:	d505      	bpl.n	800a2a0 <__swrite+0x1e>
 800a294:	2302      	movs	r3, #2
 800a296:	2200      	movs	r2, #0
 800a298:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a29c:	f000 f89e 	bl	800a3dc <_lseek_r>
 800a2a0:	89a3      	ldrh	r3, [r4, #12]
 800a2a2:	4632      	mov	r2, r6
 800a2a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a2a8:	81a3      	strh	r3, [r4, #12]
 800a2aa:	4628      	mov	r0, r5
 800a2ac:	463b      	mov	r3, r7
 800a2ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a2b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a2b6:	f000 b8b5 	b.w	800a424 <_write_r>

0800a2ba <__sseek>:
 800a2ba:	b510      	push	{r4, lr}
 800a2bc:	460c      	mov	r4, r1
 800a2be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2c2:	f000 f88b 	bl	800a3dc <_lseek_r>
 800a2c6:	1c43      	adds	r3, r0, #1
 800a2c8:	89a3      	ldrh	r3, [r4, #12]
 800a2ca:	bf15      	itete	ne
 800a2cc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a2ce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a2d2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a2d6:	81a3      	strheq	r3, [r4, #12]
 800a2d8:	bf18      	it	ne
 800a2da:	81a3      	strhne	r3, [r4, #12]
 800a2dc:	bd10      	pop	{r4, pc}

0800a2de <__sclose>:
 800a2de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2e2:	f000 b80d 	b.w	800a300 <_close_r>

0800a2e6 <memset>:
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	4402      	add	r2, r0
 800a2ea:	4293      	cmp	r3, r2
 800a2ec:	d100      	bne.n	800a2f0 <memset+0xa>
 800a2ee:	4770      	bx	lr
 800a2f0:	f803 1b01 	strb.w	r1, [r3], #1
 800a2f4:	e7f9      	b.n	800a2ea <memset+0x4>
	...

0800a2f8 <_localeconv_r>:
 800a2f8:	4800      	ldr	r0, [pc, #0]	@ (800a2fc <_localeconv_r+0x4>)
 800a2fa:	4770      	bx	lr
 800a2fc:	20000170 	.word	0x20000170

0800a300 <_close_r>:
 800a300:	b538      	push	{r3, r4, r5, lr}
 800a302:	2300      	movs	r3, #0
 800a304:	4d05      	ldr	r5, [pc, #20]	@ (800a31c <_close_r+0x1c>)
 800a306:	4604      	mov	r4, r0
 800a308:	4608      	mov	r0, r1
 800a30a:	602b      	str	r3, [r5, #0]
 800a30c:	f7f7 fded 	bl	8001eea <_close>
 800a310:	1c43      	adds	r3, r0, #1
 800a312:	d102      	bne.n	800a31a <_close_r+0x1a>
 800a314:	682b      	ldr	r3, [r5, #0]
 800a316:	b103      	cbz	r3, 800a31a <_close_r+0x1a>
 800a318:	6023      	str	r3, [r4, #0]
 800a31a:	bd38      	pop	{r3, r4, r5, pc}
 800a31c:	20002ac0 	.word	0x20002ac0

0800a320 <_reclaim_reent>:
 800a320:	4b2d      	ldr	r3, [pc, #180]	@ (800a3d8 <_reclaim_reent+0xb8>)
 800a322:	b570      	push	{r4, r5, r6, lr}
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	4604      	mov	r4, r0
 800a328:	4283      	cmp	r3, r0
 800a32a:	d053      	beq.n	800a3d4 <_reclaim_reent+0xb4>
 800a32c:	69c3      	ldr	r3, [r0, #28]
 800a32e:	b31b      	cbz	r3, 800a378 <_reclaim_reent+0x58>
 800a330:	68db      	ldr	r3, [r3, #12]
 800a332:	b163      	cbz	r3, 800a34e <_reclaim_reent+0x2e>
 800a334:	2500      	movs	r5, #0
 800a336:	69e3      	ldr	r3, [r4, #28]
 800a338:	68db      	ldr	r3, [r3, #12]
 800a33a:	5959      	ldr	r1, [r3, r5]
 800a33c:	b9b1      	cbnz	r1, 800a36c <_reclaim_reent+0x4c>
 800a33e:	3504      	adds	r5, #4
 800a340:	2d80      	cmp	r5, #128	@ 0x80
 800a342:	d1f8      	bne.n	800a336 <_reclaim_reent+0x16>
 800a344:	69e3      	ldr	r3, [r4, #28]
 800a346:	4620      	mov	r0, r4
 800a348:	68d9      	ldr	r1, [r3, #12]
 800a34a:	f000 ff25 	bl	800b198 <_free_r>
 800a34e:	69e3      	ldr	r3, [r4, #28]
 800a350:	6819      	ldr	r1, [r3, #0]
 800a352:	b111      	cbz	r1, 800a35a <_reclaim_reent+0x3a>
 800a354:	4620      	mov	r0, r4
 800a356:	f000 ff1f 	bl	800b198 <_free_r>
 800a35a:	69e3      	ldr	r3, [r4, #28]
 800a35c:	689d      	ldr	r5, [r3, #8]
 800a35e:	b15d      	cbz	r5, 800a378 <_reclaim_reent+0x58>
 800a360:	4629      	mov	r1, r5
 800a362:	4620      	mov	r0, r4
 800a364:	682d      	ldr	r5, [r5, #0]
 800a366:	f000 ff17 	bl	800b198 <_free_r>
 800a36a:	e7f8      	b.n	800a35e <_reclaim_reent+0x3e>
 800a36c:	680e      	ldr	r6, [r1, #0]
 800a36e:	4620      	mov	r0, r4
 800a370:	f000 ff12 	bl	800b198 <_free_r>
 800a374:	4631      	mov	r1, r6
 800a376:	e7e1      	b.n	800a33c <_reclaim_reent+0x1c>
 800a378:	6961      	ldr	r1, [r4, #20]
 800a37a:	b111      	cbz	r1, 800a382 <_reclaim_reent+0x62>
 800a37c:	4620      	mov	r0, r4
 800a37e:	f000 ff0b 	bl	800b198 <_free_r>
 800a382:	69e1      	ldr	r1, [r4, #28]
 800a384:	b111      	cbz	r1, 800a38c <_reclaim_reent+0x6c>
 800a386:	4620      	mov	r0, r4
 800a388:	f000 ff06 	bl	800b198 <_free_r>
 800a38c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a38e:	b111      	cbz	r1, 800a396 <_reclaim_reent+0x76>
 800a390:	4620      	mov	r0, r4
 800a392:	f000 ff01 	bl	800b198 <_free_r>
 800a396:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a398:	b111      	cbz	r1, 800a3a0 <_reclaim_reent+0x80>
 800a39a:	4620      	mov	r0, r4
 800a39c:	f000 fefc 	bl	800b198 <_free_r>
 800a3a0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800a3a2:	b111      	cbz	r1, 800a3aa <_reclaim_reent+0x8a>
 800a3a4:	4620      	mov	r0, r4
 800a3a6:	f000 fef7 	bl	800b198 <_free_r>
 800a3aa:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800a3ac:	b111      	cbz	r1, 800a3b4 <_reclaim_reent+0x94>
 800a3ae:	4620      	mov	r0, r4
 800a3b0:	f000 fef2 	bl	800b198 <_free_r>
 800a3b4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800a3b6:	b111      	cbz	r1, 800a3be <_reclaim_reent+0x9e>
 800a3b8:	4620      	mov	r0, r4
 800a3ba:	f000 feed 	bl	800b198 <_free_r>
 800a3be:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a3c0:	b111      	cbz	r1, 800a3c8 <_reclaim_reent+0xa8>
 800a3c2:	4620      	mov	r0, r4
 800a3c4:	f000 fee8 	bl	800b198 <_free_r>
 800a3c8:	6a23      	ldr	r3, [r4, #32]
 800a3ca:	b11b      	cbz	r3, 800a3d4 <_reclaim_reent+0xb4>
 800a3cc:	4620      	mov	r0, r4
 800a3ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a3d2:	4718      	bx	r3
 800a3d4:	bd70      	pop	{r4, r5, r6, pc}
 800a3d6:	bf00      	nop
 800a3d8:	20000030 	.word	0x20000030

0800a3dc <_lseek_r>:
 800a3dc:	b538      	push	{r3, r4, r5, lr}
 800a3de:	4604      	mov	r4, r0
 800a3e0:	4608      	mov	r0, r1
 800a3e2:	4611      	mov	r1, r2
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	4d05      	ldr	r5, [pc, #20]	@ (800a3fc <_lseek_r+0x20>)
 800a3e8:	602a      	str	r2, [r5, #0]
 800a3ea:	461a      	mov	r2, r3
 800a3ec:	f7f7 fda1 	bl	8001f32 <_lseek>
 800a3f0:	1c43      	adds	r3, r0, #1
 800a3f2:	d102      	bne.n	800a3fa <_lseek_r+0x1e>
 800a3f4:	682b      	ldr	r3, [r5, #0]
 800a3f6:	b103      	cbz	r3, 800a3fa <_lseek_r+0x1e>
 800a3f8:	6023      	str	r3, [r4, #0]
 800a3fa:	bd38      	pop	{r3, r4, r5, pc}
 800a3fc:	20002ac0 	.word	0x20002ac0

0800a400 <_read_r>:
 800a400:	b538      	push	{r3, r4, r5, lr}
 800a402:	4604      	mov	r4, r0
 800a404:	4608      	mov	r0, r1
 800a406:	4611      	mov	r1, r2
 800a408:	2200      	movs	r2, #0
 800a40a:	4d05      	ldr	r5, [pc, #20]	@ (800a420 <_read_r+0x20>)
 800a40c:	602a      	str	r2, [r5, #0]
 800a40e:	461a      	mov	r2, r3
 800a410:	f7f7 fd32 	bl	8001e78 <_read>
 800a414:	1c43      	adds	r3, r0, #1
 800a416:	d102      	bne.n	800a41e <_read_r+0x1e>
 800a418:	682b      	ldr	r3, [r5, #0]
 800a41a:	b103      	cbz	r3, 800a41e <_read_r+0x1e>
 800a41c:	6023      	str	r3, [r4, #0]
 800a41e:	bd38      	pop	{r3, r4, r5, pc}
 800a420:	20002ac0 	.word	0x20002ac0

0800a424 <_write_r>:
 800a424:	b538      	push	{r3, r4, r5, lr}
 800a426:	4604      	mov	r4, r0
 800a428:	4608      	mov	r0, r1
 800a42a:	4611      	mov	r1, r2
 800a42c:	2200      	movs	r2, #0
 800a42e:	4d05      	ldr	r5, [pc, #20]	@ (800a444 <_write_r+0x20>)
 800a430:	602a      	str	r2, [r5, #0]
 800a432:	461a      	mov	r2, r3
 800a434:	f7f7 fd3d 	bl	8001eb2 <_write>
 800a438:	1c43      	adds	r3, r0, #1
 800a43a:	d102      	bne.n	800a442 <_write_r+0x1e>
 800a43c:	682b      	ldr	r3, [r5, #0]
 800a43e:	b103      	cbz	r3, 800a442 <_write_r+0x1e>
 800a440:	6023      	str	r3, [r4, #0]
 800a442:	bd38      	pop	{r3, r4, r5, pc}
 800a444:	20002ac0 	.word	0x20002ac0

0800a448 <__errno>:
 800a448:	4b01      	ldr	r3, [pc, #4]	@ (800a450 <__errno+0x8>)
 800a44a:	6818      	ldr	r0, [r3, #0]
 800a44c:	4770      	bx	lr
 800a44e:	bf00      	nop
 800a450:	20000030 	.word	0x20000030

0800a454 <__libc_init_array>:
 800a454:	b570      	push	{r4, r5, r6, lr}
 800a456:	2600      	movs	r6, #0
 800a458:	4d0c      	ldr	r5, [pc, #48]	@ (800a48c <__libc_init_array+0x38>)
 800a45a:	4c0d      	ldr	r4, [pc, #52]	@ (800a490 <__libc_init_array+0x3c>)
 800a45c:	1b64      	subs	r4, r4, r5
 800a45e:	10a4      	asrs	r4, r4, #2
 800a460:	42a6      	cmp	r6, r4
 800a462:	d109      	bne.n	800a478 <__libc_init_array+0x24>
 800a464:	f002 fcee 	bl	800ce44 <_init>
 800a468:	2600      	movs	r6, #0
 800a46a:	4d0a      	ldr	r5, [pc, #40]	@ (800a494 <__libc_init_array+0x40>)
 800a46c:	4c0a      	ldr	r4, [pc, #40]	@ (800a498 <__libc_init_array+0x44>)
 800a46e:	1b64      	subs	r4, r4, r5
 800a470:	10a4      	asrs	r4, r4, #2
 800a472:	42a6      	cmp	r6, r4
 800a474:	d105      	bne.n	800a482 <__libc_init_array+0x2e>
 800a476:	bd70      	pop	{r4, r5, r6, pc}
 800a478:	f855 3b04 	ldr.w	r3, [r5], #4
 800a47c:	4798      	blx	r3
 800a47e:	3601      	adds	r6, #1
 800a480:	e7ee      	b.n	800a460 <__libc_init_array+0xc>
 800a482:	f855 3b04 	ldr.w	r3, [r5], #4
 800a486:	4798      	blx	r3
 800a488:	3601      	adds	r6, #1
 800a48a:	e7f2      	b.n	800a472 <__libc_init_array+0x1e>
 800a48c:	0800d46c 	.word	0x0800d46c
 800a490:	0800d46c 	.word	0x0800d46c
 800a494:	0800d46c 	.word	0x0800d46c
 800a498:	0800d470 	.word	0x0800d470

0800a49c <__retarget_lock_init_recursive>:
 800a49c:	4770      	bx	lr

0800a49e <__retarget_lock_acquire_recursive>:
 800a49e:	4770      	bx	lr

0800a4a0 <__retarget_lock_release_recursive>:
 800a4a0:	4770      	bx	lr

0800a4a2 <memchr>:
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	b510      	push	{r4, lr}
 800a4a6:	b2c9      	uxtb	r1, r1
 800a4a8:	4402      	add	r2, r0
 800a4aa:	4293      	cmp	r3, r2
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	d101      	bne.n	800a4b4 <memchr+0x12>
 800a4b0:	2000      	movs	r0, #0
 800a4b2:	e003      	b.n	800a4bc <memchr+0x1a>
 800a4b4:	7804      	ldrb	r4, [r0, #0]
 800a4b6:	3301      	adds	r3, #1
 800a4b8:	428c      	cmp	r4, r1
 800a4ba:	d1f6      	bne.n	800a4aa <memchr+0x8>
 800a4bc:	bd10      	pop	{r4, pc}

0800a4be <memcpy>:
 800a4be:	440a      	add	r2, r1
 800a4c0:	4291      	cmp	r1, r2
 800a4c2:	f100 33ff 	add.w	r3, r0, #4294967295
 800a4c6:	d100      	bne.n	800a4ca <memcpy+0xc>
 800a4c8:	4770      	bx	lr
 800a4ca:	b510      	push	{r4, lr}
 800a4cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a4d0:	4291      	cmp	r1, r2
 800a4d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a4d6:	d1f9      	bne.n	800a4cc <memcpy+0xe>
 800a4d8:	bd10      	pop	{r4, pc}

0800a4da <quorem>:
 800a4da:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4de:	6903      	ldr	r3, [r0, #16]
 800a4e0:	690c      	ldr	r4, [r1, #16]
 800a4e2:	4607      	mov	r7, r0
 800a4e4:	42a3      	cmp	r3, r4
 800a4e6:	db7e      	blt.n	800a5e6 <quorem+0x10c>
 800a4e8:	3c01      	subs	r4, #1
 800a4ea:	00a3      	lsls	r3, r4, #2
 800a4ec:	f100 0514 	add.w	r5, r0, #20
 800a4f0:	f101 0814 	add.w	r8, r1, #20
 800a4f4:	9300      	str	r3, [sp, #0]
 800a4f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a4fa:	9301      	str	r3, [sp, #4]
 800a4fc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a500:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a504:	3301      	adds	r3, #1
 800a506:	429a      	cmp	r2, r3
 800a508:	fbb2 f6f3 	udiv	r6, r2, r3
 800a50c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a510:	d32e      	bcc.n	800a570 <quorem+0x96>
 800a512:	f04f 0a00 	mov.w	sl, #0
 800a516:	46c4      	mov	ip, r8
 800a518:	46ae      	mov	lr, r5
 800a51a:	46d3      	mov	fp, sl
 800a51c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a520:	b298      	uxth	r0, r3
 800a522:	fb06 a000 	mla	r0, r6, r0, sl
 800a526:	0c1b      	lsrs	r3, r3, #16
 800a528:	0c02      	lsrs	r2, r0, #16
 800a52a:	fb06 2303 	mla	r3, r6, r3, r2
 800a52e:	f8de 2000 	ldr.w	r2, [lr]
 800a532:	b280      	uxth	r0, r0
 800a534:	b292      	uxth	r2, r2
 800a536:	1a12      	subs	r2, r2, r0
 800a538:	445a      	add	r2, fp
 800a53a:	f8de 0000 	ldr.w	r0, [lr]
 800a53e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a542:	b29b      	uxth	r3, r3
 800a544:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a548:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a54c:	b292      	uxth	r2, r2
 800a54e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a552:	45e1      	cmp	r9, ip
 800a554:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a558:	f84e 2b04 	str.w	r2, [lr], #4
 800a55c:	d2de      	bcs.n	800a51c <quorem+0x42>
 800a55e:	9b00      	ldr	r3, [sp, #0]
 800a560:	58eb      	ldr	r3, [r5, r3]
 800a562:	b92b      	cbnz	r3, 800a570 <quorem+0x96>
 800a564:	9b01      	ldr	r3, [sp, #4]
 800a566:	3b04      	subs	r3, #4
 800a568:	429d      	cmp	r5, r3
 800a56a:	461a      	mov	r2, r3
 800a56c:	d32f      	bcc.n	800a5ce <quorem+0xf4>
 800a56e:	613c      	str	r4, [r7, #16]
 800a570:	4638      	mov	r0, r7
 800a572:	f001 f981 	bl	800b878 <__mcmp>
 800a576:	2800      	cmp	r0, #0
 800a578:	db25      	blt.n	800a5c6 <quorem+0xec>
 800a57a:	4629      	mov	r1, r5
 800a57c:	2000      	movs	r0, #0
 800a57e:	f858 2b04 	ldr.w	r2, [r8], #4
 800a582:	f8d1 c000 	ldr.w	ip, [r1]
 800a586:	fa1f fe82 	uxth.w	lr, r2
 800a58a:	fa1f f38c 	uxth.w	r3, ip
 800a58e:	eba3 030e 	sub.w	r3, r3, lr
 800a592:	4403      	add	r3, r0
 800a594:	0c12      	lsrs	r2, r2, #16
 800a596:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a59a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a59e:	b29b      	uxth	r3, r3
 800a5a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a5a4:	45c1      	cmp	r9, r8
 800a5a6:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a5aa:	f841 3b04 	str.w	r3, [r1], #4
 800a5ae:	d2e6      	bcs.n	800a57e <quorem+0xa4>
 800a5b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a5b4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a5b8:	b922      	cbnz	r2, 800a5c4 <quorem+0xea>
 800a5ba:	3b04      	subs	r3, #4
 800a5bc:	429d      	cmp	r5, r3
 800a5be:	461a      	mov	r2, r3
 800a5c0:	d30b      	bcc.n	800a5da <quorem+0x100>
 800a5c2:	613c      	str	r4, [r7, #16]
 800a5c4:	3601      	adds	r6, #1
 800a5c6:	4630      	mov	r0, r6
 800a5c8:	b003      	add	sp, #12
 800a5ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5ce:	6812      	ldr	r2, [r2, #0]
 800a5d0:	3b04      	subs	r3, #4
 800a5d2:	2a00      	cmp	r2, #0
 800a5d4:	d1cb      	bne.n	800a56e <quorem+0x94>
 800a5d6:	3c01      	subs	r4, #1
 800a5d8:	e7c6      	b.n	800a568 <quorem+0x8e>
 800a5da:	6812      	ldr	r2, [r2, #0]
 800a5dc:	3b04      	subs	r3, #4
 800a5de:	2a00      	cmp	r2, #0
 800a5e0:	d1ef      	bne.n	800a5c2 <quorem+0xe8>
 800a5e2:	3c01      	subs	r4, #1
 800a5e4:	e7ea      	b.n	800a5bc <quorem+0xe2>
 800a5e6:	2000      	movs	r0, #0
 800a5e8:	e7ee      	b.n	800a5c8 <quorem+0xee>
 800a5ea:	0000      	movs	r0, r0
 800a5ec:	0000      	movs	r0, r0
	...

0800a5f0 <_dtoa_r>:
 800a5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5f4:	4614      	mov	r4, r2
 800a5f6:	461d      	mov	r5, r3
 800a5f8:	69c7      	ldr	r7, [r0, #28]
 800a5fa:	b097      	sub	sp, #92	@ 0x5c
 800a5fc:	4681      	mov	r9, r0
 800a5fe:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800a602:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800a604:	b97f      	cbnz	r7, 800a626 <_dtoa_r+0x36>
 800a606:	2010      	movs	r0, #16
 800a608:	f000 fe0e 	bl	800b228 <malloc>
 800a60c:	4602      	mov	r2, r0
 800a60e:	f8c9 001c 	str.w	r0, [r9, #28]
 800a612:	b920      	cbnz	r0, 800a61e <_dtoa_r+0x2e>
 800a614:	21ef      	movs	r1, #239	@ 0xef
 800a616:	4bac      	ldr	r3, [pc, #688]	@ (800a8c8 <_dtoa_r+0x2d8>)
 800a618:	48ac      	ldr	r0, [pc, #688]	@ (800a8cc <_dtoa_r+0x2dc>)
 800a61a:	f001 ffeb 	bl	800c5f4 <__assert_func>
 800a61e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a622:	6007      	str	r7, [r0, #0]
 800a624:	60c7      	str	r7, [r0, #12]
 800a626:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a62a:	6819      	ldr	r1, [r3, #0]
 800a62c:	b159      	cbz	r1, 800a646 <_dtoa_r+0x56>
 800a62e:	685a      	ldr	r2, [r3, #4]
 800a630:	2301      	movs	r3, #1
 800a632:	4093      	lsls	r3, r2
 800a634:	604a      	str	r2, [r1, #4]
 800a636:	608b      	str	r3, [r1, #8]
 800a638:	4648      	mov	r0, r9
 800a63a:	f000 feeb 	bl	800b414 <_Bfree>
 800a63e:	2200      	movs	r2, #0
 800a640:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a644:	601a      	str	r2, [r3, #0]
 800a646:	1e2b      	subs	r3, r5, #0
 800a648:	bfaf      	iteee	ge
 800a64a:	2300      	movge	r3, #0
 800a64c:	2201      	movlt	r2, #1
 800a64e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a652:	9307      	strlt	r3, [sp, #28]
 800a654:	bfa8      	it	ge
 800a656:	6033      	strge	r3, [r6, #0]
 800a658:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800a65c:	4b9c      	ldr	r3, [pc, #624]	@ (800a8d0 <_dtoa_r+0x2e0>)
 800a65e:	bfb8      	it	lt
 800a660:	6032      	strlt	r2, [r6, #0]
 800a662:	ea33 0308 	bics.w	r3, r3, r8
 800a666:	d112      	bne.n	800a68e <_dtoa_r+0x9e>
 800a668:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a66c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800a66e:	6013      	str	r3, [r2, #0]
 800a670:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a674:	4323      	orrs	r3, r4
 800a676:	f000 855e 	beq.w	800b136 <_dtoa_r+0xb46>
 800a67a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a67c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a8d4 <_dtoa_r+0x2e4>
 800a680:	2b00      	cmp	r3, #0
 800a682:	f000 8560 	beq.w	800b146 <_dtoa_r+0xb56>
 800a686:	f10a 0303 	add.w	r3, sl, #3
 800a68a:	f000 bd5a 	b.w	800b142 <_dtoa_r+0xb52>
 800a68e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a692:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a696:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a69a:	2200      	movs	r2, #0
 800a69c:	2300      	movs	r3, #0
 800a69e:	f7f6 f983 	bl	80009a8 <__aeabi_dcmpeq>
 800a6a2:	4607      	mov	r7, r0
 800a6a4:	b158      	cbz	r0, 800a6be <_dtoa_r+0xce>
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800a6aa:	6013      	str	r3, [r2, #0]
 800a6ac:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a6ae:	b113      	cbz	r3, 800a6b6 <_dtoa_r+0xc6>
 800a6b0:	4b89      	ldr	r3, [pc, #548]	@ (800a8d8 <_dtoa_r+0x2e8>)
 800a6b2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a6b4:	6013      	str	r3, [r2, #0]
 800a6b6:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800a8dc <_dtoa_r+0x2ec>
 800a6ba:	f000 bd44 	b.w	800b146 <_dtoa_r+0xb56>
 800a6be:	ab14      	add	r3, sp, #80	@ 0x50
 800a6c0:	9301      	str	r3, [sp, #4]
 800a6c2:	ab15      	add	r3, sp, #84	@ 0x54
 800a6c4:	9300      	str	r3, [sp, #0]
 800a6c6:	4648      	mov	r0, r9
 800a6c8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a6cc:	f001 f984 	bl	800b9d8 <__d2b>
 800a6d0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800a6d4:	9003      	str	r0, [sp, #12]
 800a6d6:	2e00      	cmp	r6, #0
 800a6d8:	d078      	beq.n	800a7cc <_dtoa_r+0x1dc>
 800a6da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a6de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a6e0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a6e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a6e8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a6ec:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a6f0:	9712      	str	r7, [sp, #72]	@ 0x48
 800a6f2:	4619      	mov	r1, r3
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	4b7a      	ldr	r3, [pc, #488]	@ (800a8e0 <_dtoa_r+0x2f0>)
 800a6f8:	f7f5 fd36 	bl	8000168 <__aeabi_dsub>
 800a6fc:	a36c      	add	r3, pc, #432	@ (adr r3, 800a8b0 <_dtoa_r+0x2c0>)
 800a6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a702:	f7f5 fee9 	bl	80004d8 <__aeabi_dmul>
 800a706:	a36c      	add	r3, pc, #432	@ (adr r3, 800a8b8 <_dtoa_r+0x2c8>)
 800a708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a70c:	f7f5 fd2e 	bl	800016c <__adddf3>
 800a710:	4604      	mov	r4, r0
 800a712:	4630      	mov	r0, r6
 800a714:	460d      	mov	r5, r1
 800a716:	f7f5 fe75 	bl	8000404 <__aeabi_i2d>
 800a71a:	a369      	add	r3, pc, #420	@ (adr r3, 800a8c0 <_dtoa_r+0x2d0>)
 800a71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a720:	f7f5 feda 	bl	80004d8 <__aeabi_dmul>
 800a724:	4602      	mov	r2, r0
 800a726:	460b      	mov	r3, r1
 800a728:	4620      	mov	r0, r4
 800a72a:	4629      	mov	r1, r5
 800a72c:	f7f5 fd1e 	bl	800016c <__adddf3>
 800a730:	4604      	mov	r4, r0
 800a732:	460d      	mov	r5, r1
 800a734:	f7f6 f980 	bl	8000a38 <__aeabi_d2iz>
 800a738:	2200      	movs	r2, #0
 800a73a:	4607      	mov	r7, r0
 800a73c:	2300      	movs	r3, #0
 800a73e:	4620      	mov	r0, r4
 800a740:	4629      	mov	r1, r5
 800a742:	f7f6 f93b 	bl	80009bc <__aeabi_dcmplt>
 800a746:	b140      	cbz	r0, 800a75a <_dtoa_r+0x16a>
 800a748:	4638      	mov	r0, r7
 800a74a:	f7f5 fe5b 	bl	8000404 <__aeabi_i2d>
 800a74e:	4622      	mov	r2, r4
 800a750:	462b      	mov	r3, r5
 800a752:	f7f6 f929 	bl	80009a8 <__aeabi_dcmpeq>
 800a756:	b900      	cbnz	r0, 800a75a <_dtoa_r+0x16a>
 800a758:	3f01      	subs	r7, #1
 800a75a:	2f16      	cmp	r7, #22
 800a75c:	d854      	bhi.n	800a808 <_dtoa_r+0x218>
 800a75e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a762:	4b60      	ldr	r3, [pc, #384]	@ (800a8e4 <_dtoa_r+0x2f4>)
 800a764:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a76c:	f7f6 f926 	bl	80009bc <__aeabi_dcmplt>
 800a770:	2800      	cmp	r0, #0
 800a772:	d04b      	beq.n	800a80c <_dtoa_r+0x21c>
 800a774:	2300      	movs	r3, #0
 800a776:	3f01      	subs	r7, #1
 800a778:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a77a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a77c:	1b9b      	subs	r3, r3, r6
 800a77e:	1e5a      	subs	r2, r3, #1
 800a780:	bf49      	itett	mi
 800a782:	f1c3 0301 	rsbmi	r3, r3, #1
 800a786:	2300      	movpl	r3, #0
 800a788:	9304      	strmi	r3, [sp, #16]
 800a78a:	2300      	movmi	r3, #0
 800a78c:	9209      	str	r2, [sp, #36]	@ 0x24
 800a78e:	bf54      	ite	pl
 800a790:	9304      	strpl	r3, [sp, #16]
 800a792:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800a794:	2f00      	cmp	r7, #0
 800a796:	db3b      	blt.n	800a810 <_dtoa_r+0x220>
 800a798:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a79a:	970e      	str	r7, [sp, #56]	@ 0x38
 800a79c:	443b      	add	r3, r7
 800a79e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	930a      	str	r3, [sp, #40]	@ 0x28
 800a7a4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a7a6:	2b09      	cmp	r3, #9
 800a7a8:	d865      	bhi.n	800a876 <_dtoa_r+0x286>
 800a7aa:	2b05      	cmp	r3, #5
 800a7ac:	bfc4      	itt	gt
 800a7ae:	3b04      	subgt	r3, #4
 800a7b0:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800a7b2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a7b4:	bfc8      	it	gt
 800a7b6:	2400      	movgt	r4, #0
 800a7b8:	f1a3 0302 	sub.w	r3, r3, #2
 800a7bc:	bfd8      	it	le
 800a7be:	2401      	movle	r4, #1
 800a7c0:	2b03      	cmp	r3, #3
 800a7c2:	d864      	bhi.n	800a88e <_dtoa_r+0x29e>
 800a7c4:	e8df f003 	tbb	[pc, r3]
 800a7c8:	2c385553 	.word	0x2c385553
 800a7cc:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800a7d0:	441e      	add	r6, r3
 800a7d2:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a7d6:	2b20      	cmp	r3, #32
 800a7d8:	bfc1      	itttt	gt
 800a7da:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a7de:	fa08 f803 	lslgt.w	r8, r8, r3
 800a7e2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a7e6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a7ea:	bfd6      	itet	le
 800a7ec:	f1c3 0320 	rsble	r3, r3, #32
 800a7f0:	ea48 0003 	orrgt.w	r0, r8, r3
 800a7f4:	fa04 f003 	lslle.w	r0, r4, r3
 800a7f8:	f7f5 fdf4 	bl	80003e4 <__aeabi_ui2d>
 800a7fc:	2201      	movs	r2, #1
 800a7fe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a802:	3e01      	subs	r6, #1
 800a804:	9212      	str	r2, [sp, #72]	@ 0x48
 800a806:	e774      	b.n	800a6f2 <_dtoa_r+0x102>
 800a808:	2301      	movs	r3, #1
 800a80a:	e7b5      	b.n	800a778 <_dtoa_r+0x188>
 800a80c:	900f      	str	r0, [sp, #60]	@ 0x3c
 800a80e:	e7b4      	b.n	800a77a <_dtoa_r+0x18a>
 800a810:	9b04      	ldr	r3, [sp, #16]
 800a812:	1bdb      	subs	r3, r3, r7
 800a814:	9304      	str	r3, [sp, #16]
 800a816:	427b      	negs	r3, r7
 800a818:	930a      	str	r3, [sp, #40]	@ 0x28
 800a81a:	2300      	movs	r3, #0
 800a81c:	930e      	str	r3, [sp, #56]	@ 0x38
 800a81e:	e7c1      	b.n	800a7a4 <_dtoa_r+0x1b4>
 800a820:	2301      	movs	r3, #1
 800a822:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a824:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a826:	eb07 0b03 	add.w	fp, r7, r3
 800a82a:	f10b 0301 	add.w	r3, fp, #1
 800a82e:	2b01      	cmp	r3, #1
 800a830:	9308      	str	r3, [sp, #32]
 800a832:	bfb8      	it	lt
 800a834:	2301      	movlt	r3, #1
 800a836:	e006      	b.n	800a846 <_dtoa_r+0x256>
 800a838:	2301      	movs	r3, #1
 800a83a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a83c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a83e:	2b00      	cmp	r3, #0
 800a840:	dd28      	ble.n	800a894 <_dtoa_r+0x2a4>
 800a842:	469b      	mov	fp, r3
 800a844:	9308      	str	r3, [sp, #32]
 800a846:	2100      	movs	r1, #0
 800a848:	2204      	movs	r2, #4
 800a84a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800a84e:	f102 0514 	add.w	r5, r2, #20
 800a852:	429d      	cmp	r5, r3
 800a854:	d926      	bls.n	800a8a4 <_dtoa_r+0x2b4>
 800a856:	6041      	str	r1, [r0, #4]
 800a858:	4648      	mov	r0, r9
 800a85a:	f000 fd9b 	bl	800b394 <_Balloc>
 800a85e:	4682      	mov	sl, r0
 800a860:	2800      	cmp	r0, #0
 800a862:	d143      	bne.n	800a8ec <_dtoa_r+0x2fc>
 800a864:	4602      	mov	r2, r0
 800a866:	f240 11af 	movw	r1, #431	@ 0x1af
 800a86a:	4b1f      	ldr	r3, [pc, #124]	@ (800a8e8 <_dtoa_r+0x2f8>)
 800a86c:	e6d4      	b.n	800a618 <_dtoa_r+0x28>
 800a86e:	2300      	movs	r3, #0
 800a870:	e7e3      	b.n	800a83a <_dtoa_r+0x24a>
 800a872:	2300      	movs	r3, #0
 800a874:	e7d5      	b.n	800a822 <_dtoa_r+0x232>
 800a876:	2401      	movs	r4, #1
 800a878:	2300      	movs	r3, #0
 800a87a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a87c:	9320      	str	r3, [sp, #128]	@ 0x80
 800a87e:	f04f 3bff 	mov.w	fp, #4294967295
 800a882:	2200      	movs	r2, #0
 800a884:	2312      	movs	r3, #18
 800a886:	f8cd b020 	str.w	fp, [sp, #32]
 800a88a:	9221      	str	r2, [sp, #132]	@ 0x84
 800a88c:	e7db      	b.n	800a846 <_dtoa_r+0x256>
 800a88e:	2301      	movs	r3, #1
 800a890:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a892:	e7f4      	b.n	800a87e <_dtoa_r+0x28e>
 800a894:	f04f 0b01 	mov.w	fp, #1
 800a898:	465b      	mov	r3, fp
 800a89a:	f8cd b020 	str.w	fp, [sp, #32]
 800a89e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800a8a2:	e7d0      	b.n	800a846 <_dtoa_r+0x256>
 800a8a4:	3101      	adds	r1, #1
 800a8a6:	0052      	lsls	r2, r2, #1
 800a8a8:	e7d1      	b.n	800a84e <_dtoa_r+0x25e>
 800a8aa:	bf00      	nop
 800a8ac:	f3af 8000 	nop.w
 800a8b0:	636f4361 	.word	0x636f4361
 800a8b4:	3fd287a7 	.word	0x3fd287a7
 800a8b8:	8b60c8b3 	.word	0x8b60c8b3
 800a8bc:	3fc68a28 	.word	0x3fc68a28
 800a8c0:	509f79fb 	.word	0x509f79fb
 800a8c4:	3fd34413 	.word	0x3fd34413
 800a8c8:	0800d115 	.word	0x0800d115
 800a8cc:	0800d12c 	.word	0x0800d12c
 800a8d0:	7ff00000 	.word	0x7ff00000
 800a8d4:	0800d111 	.word	0x0800d111
 800a8d8:	0800d216 	.word	0x0800d216
 800a8dc:	0800d215 	.word	0x0800d215
 800a8e0:	3ff80000 	.word	0x3ff80000
 800a8e4:	0800d298 	.word	0x0800d298
 800a8e8:	0800d184 	.word	0x0800d184
 800a8ec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a8f0:	6018      	str	r0, [r3, #0]
 800a8f2:	9b08      	ldr	r3, [sp, #32]
 800a8f4:	2b0e      	cmp	r3, #14
 800a8f6:	f200 80a1 	bhi.w	800aa3c <_dtoa_r+0x44c>
 800a8fa:	2c00      	cmp	r4, #0
 800a8fc:	f000 809e 	beq.w	800aa3c <_dtoa_r+0x44c>
 800a900:	2f00      	cmp	r7, #0
 800a902:	dd33      	ble.n	800a96c <_dtoa_r+0x37c>
 800a904:	4b9c      	ldr	r3, [pc, #624]	@ (800ab78 <_dtoa_r+0x588>)
 800a906:	f007 020f 	and.w	r2, r7, #15
 800a90a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a90e:	05f8      	lsls	r0, r7, #23
 800a910:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a914:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 800a918:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a91c:	d516      	bpl.n	800a94c <_dtoa_r+0x35c>
 800a91e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a922:	4b96      	ldr	r3, [pc, #600]	@ (800ab7c <_dtoa_r+0x58c>)
 800a924:	2603      	movs	r6, #3
 800a926:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a92a:	f7f5 feff 	bl	800072c <__aeabi_ddiv>
 800a92e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a932:	f004 040f 	and.w	r4, r4, #15
 800a936:	4d91      	ldr	r5, [pc, #580]	@ (800ab7c <_dtoa_r+0x58c>)
 800a938:	b954      	cbnz	r4, 800a950 <_dtoa_r+0x360>
 800a93a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a93e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a942:	f7f5 fef3 	bl	800072c <__aeabi_ddiv>
 800a946:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a94a:	e028      	b.n	800a99e <_dtoa_r+0x3ae>
 800a94c:	2602      	movs	r6, #2
 800a94e:	e7f2      	b.n	800a936 <_dtoa_r+0x346>
 800a950:	07e1      	lsls	r1, r4, #31
 800a952:	d508      	bpl.n	800a966 <_dtoa_r+0x376>
 800a954:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a958:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a95c:	f7f5 fdbc 	bl	80004d8 <__aeabi_dmul>
 800a960:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a964:	3601      	adds	r6, #1
 800a966:	1064      	asrs	r4, r4, #1
 800a968:	3508      	adds	r5, #8
 800a96a:	e7e5      	b.n	800a938 <_dtoa_r+0x348>
 800a96c:	f000 80af 	beq.w	800aace <_dtoa_r+0x4de>
 800a970:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a974:	427c      	negs	r4, r7
 800a976:	4b80      	ldr	r3, [pc, #512]	@ (800ab78 <_dtoa_r+0x588>)
 800a978:	f004 020f 	and.w	r2, r4, #15
 800a97c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a980:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a984:	f7f5 fda8 	bl	80004d8 <__aeabi_dmul>
 800a988:	2602      	movs	r6, #2
 800a98a:	2300      	movs	r3, #0
 800a98c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a990:	4d7a      	ldr	r5, [pc, #488]	@ (800ab7c <_dtoa_r+0x58c>)
 800a992:	1124      	asrs	r4, r4, #4
 800a994:	2c00      	cmp	r4, #0
 800a996:	f040 808f 	bne.w	800aab8 <_dtoa_r+0x4c8>
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d1d3      	bne.n	800a946 <_dtoa_r+0x356>
 800a99e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800a9a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	f000 8094 	beq.w	800aad2 <_dtoa_r+0x4e2>
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	4620      	mov	r0, r4
 800a9ae:	4629      	mov	r1, r5
 800a9b0:	4b73      	ldr	r3, [pc, #460]	@ (800ab80 <_dtoa_r+0x590>)
 800a9b2:	f7f6 f803 	bl	80009bc <__aeabi_dcmplt>
 800a9b6:	2800      	cmp	r0, #0
 800a9b8:	f000 808b 	beq.w	800aad2 <_dtoa_r+0x4e2>
 800a9bc:	9b08      	ldr	r3, [sp, #32]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	f000 8087 	beq.w	800aad2 <_dtoa_r+0x4e2>
 800a9c4:	f1bb 0f00 	cmp.w	fp, #0
 800a9c8:	dd34      	ble.n	800aa34 <_dtoa_r+0x444>
 800a9ca:	4620      	mov	r0, r4
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	4629      	mov	r1, r5
 800a9d0:	4b6c      	ldr	r3, [pc, #432]	@ (800ab84 <_dtoa_r+0x594>)
 800a9d2:	f7f5 fd81 	bl	80004d8 <__aeabi_dmul>
 800a9d6:	465c      	mov	r4, fp
 800a9d8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a9dc:	f107 38ff 	add.w	r8, r7, #4294967295
 800a9e0:	3601      	adds	r6, #1
 800a9e2:	4630      	mov	r0, r6
 800a9e4:	f7f5 fd0e 	bl	8000404 <__aeabi_i2d>
 800a9e8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a9ec:	f7f5 fd74 	bl	80004d8 <__aeabi_dmul>
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	4b65      	ldr	r3, [pc, #404]	@ (800ab88 <_dtoa_r+0x598>)
 800a9f4:	f7f5 fbba 	bl	800016c <__adddf3>
 800a9f8:	4605      	mov	r5, r0
 800a9fa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a9fe:	2c00      	cmp	r4, #0
 800aa00:	d16a      	bne.n	800aad8 <_dtoa_r+0x4e8>
 800aa02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa06:	2200      	movs	r2, #0
 800aa08:	4b60      	ldr	r3, [pc, #384]	@ (800ab8c <_dtoa_r+0x59c>)
 800aa0a:	f7f5 fbad 	bl	8000168 <__aeabi_dsub>
 800aa0e:	4602      	mov	r2, r0
 800aa10:	460b      	mov	r3, r1
 800aa12:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800aa16:	462a      	mov	r2, r5
 800aa18:	4633      	mov	r3, r6
 800aa1a:	f7f5 ffed 	bl	80009f8 <__aeabi_dcmpgt>
 800aa1e:	2800      	cmp	r0, #0
 800aa20:	f040 8298 	bne.w	800af54 <_dtoa_r+0x964>
 800aa24:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa28:	462a      	mov	r2, r5
 800aa2a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800aa2e:	f7f5 ffc5 	bl	80009bc <__aeabi_dcmplt>
 800aa32:	bb38      	cbnz	r0, 800aa84 <_dtoa_r+0x494>
 800aa34:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800aa38:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800aa3c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	f2c0 8157 	blt.w	800acf2 <_dtoa_r+0x702>
 800aa44:	2f0e      	cmp	r7, #14
 800aa46:	f300 8154 	bgt.w	800acf2 <_dtoa_r+0x702>
 800aa4a:	4b4b      	ldr	r3, [pc, #300]	@ (800ab78 <_dtoa_r+0x588>)
 800aa4c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800aa50:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aa54:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800aa58:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	f280 80e5 	bge.w	800ac2a <_dtoa_r+0x63a>
 800aa60:	9b08      	ldr	r3, [sp, #32]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	f300 80e1 	bgt.w	800ac2a <_dtoa_r+0x63a>
 800aa68:	d10c      	bne.n	800aa84 <_dtoa_r+0x494>
 800aa6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa6e:	2200      	movs	r2, #0
 800aa70:	4b46      	ldr	r3, [pc, #280]	@ (800ab8c <_dtoa_r+0x59c>)
 800aa72:	f7f5 fd31 	bl	80004d8 <__aeabi_dmul>
 800aa76:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aa7a:	f7f5 ffb3 	bl	80009e4 <__aeabi_dcmpge>
 800aa7e:	2800      	cmp	r0, #0
 800aa80:	f000 8266 	beq.w	800af50 <_dtoa_r+0x960>
 800aa84:	2400      	movs	r4, #0
 800aa86:	4625      	mov	r5, r4
 800aa88:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800aa8a:	4656      	mov	r6, sl
 800aa8c:	ea6f 0803 	mvn.w	r8, r3
 800aa90:	2700      	movs	r7, #0
 800aa92:	4621      	mov	r1, r4
 800aa94:	4648      	mov	r0, r9
 800aa96:	f000 fcbd 	bl	800b414 <_Bfree>
 800aa9a:	2d00      	cmp	r5, #0
 800aa9c:	f000 80bd 	beq.w	800ac1a <_dtoa_r+0x62a>
 800aaa0:	b12f      	cbz	r7, 800aaae <_dtoa_r+0x4be>
 800aaa2:	42af      	cmp	r7, r5
 800aaa4:	d003      	beq.n	800aaae <_dtoa_r+0x4be>
 800aaa6:	4639      	mov	r1, r7
 800aaa8:	4648      	mov	r0, r9
 800aaaa:	f000 fcb3 	bl	800b414 <_Bfree>
 800aaae:	4629      	mov	r1, r5
 800aab0:	4648      	mov	r0, r9
 800aab2:	f000 fcaf 	bl	800b414 <_Bfree>
 800aab6:	e0b0      	b.n	800ac1a <_dtoa_r+0x62a>
 800aab8:	07e2      	lsls	r2, r4, #31
 800aaba:	d505      	bpl.n	800aac8 <_dtoa_r+0x4d8>
 800aabc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800aac0:	f7f5 fd0a 	bl	80004d8 <__aeabi_dmul>
 800aac4:	2301      	movs	r3, #1
 800aac6:	3601      	adds	r6, #1
 800aac8:	1064      	asrs	r4, r4, #1
 800aaca:	3508      	adds	r5, #8
 800aacc:	e762      	b.n	800a994 <_dtoa_r+0x3a4>
 800aace:	2602      	movs	r6, #2
 800aad0:	e765      	b.n	800a99e <_dtoa_r+0x3ae>
 800aad2:	46b8      	mov	r8, r7
 800aad4:	9c08      	ldr	r4, [sp, #32]
 800aad6:	e784      	b.n	800a9e2 <_dtoa_r+0x3f2>
 800aad8:	4b27      	ldr	r3, [pc, #156]	@ (800ab78 <_dtoa_r+0x588>)
 800aada:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800aadc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800aae0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aae4:	4454      	add	r4, sl
 800aae6:	2900      	cmp	r1, #0
 800aae8:	d054      	beq.n	800ab94 <_dtoa_r+0x5a4>
 800aaea:	2000      	movs	r0, #0
 800aaec:	4928      	ldr	r1, [pc, #160]	@ (800ab90 <_dtoa_r+0x5a0>)
 800aaee:	f7f5 fe1d 	bl	800072c <__aeabi_ddiv>
 800aaf2:	4633      	mov	r3, r6
 800aaf4:	462a      	mov	r2, r5
 800aaf6:	f7f5 fb37 	bl	8000168 <__aeabi_dsub>
 800aafa:	4656      	mov	r6, sl
 800aafc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ab00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ab04:	f7f5 ff98 	bl	8000a38 <__aeabi_d2iz>
 800ab08:	4605      	mov	r5, r0
 800ab0a:	f7f5 fc7b 	bl	8000404 <__aeabi_i2d>
 800ab0e:	4602      	mov	r2, r0
 800ab10:	460b      	mov	r3, r1
 800ab12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ab16:	f7f5 fb27 	bl	8000168 <__aeabi_dsub>
 800ab1a:	4602      	mov	r2, r0
 800ab1c:	460b      	mov	r3, r1
 800ab1e:	3530      	adds	r5, #48	@ 0x30
 800ab20:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ab24:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ab28:	f806 5b01 	strb.w	r5, [r6], #1
 800ab2c:	f7f5 ff46 	bl	80009bc <__aeabi_dcmplt>
 800ab30:	2800      	cmp	r0, #0
 800ab32:	d172      	bne.n	800ac1a <_dtoa_r+0x62a>
 800ab34:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ab38:	2000      	movs	r0, #0
 800ab3a:	4911      	ldr	r1, [pc, #68]	@ (800ab80 <_dtoa_r+0x590>)
 800ab3c:	f7f5 fb14 	bl	8000168 <__aeabi_dsub>
 800ab40:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ab44:	f7f5 ff3a 	bl	80009bc <__aeabi_dcmplt>
 800ab48:	2800      	cmp	r0, #0
 800ab4a:	f040 80b4 	bne.w	800acb6 <_dtoa_r+0x6c6>
 800ab4e:	42a6      	cmp	r6, r4
 800ab50:	f43f af70 	beq.w	800aa34 <_dtoa_r+0x444>
 800ab54:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ab58:	2200      	movs	r2, #0
 800ab5a:	4b0a      	ldr	r3, [pc, #40]	@ (800ab84 <_dtoa_r+0x594>)
 800ab5c:	f7f5 fcbc 	bl	80004d8 <__aeabi_dmul>
 800ab60:	2200      	movs	r2, #0
 800ab62:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ab66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ab6a:	4b06      	ldr	r3, [pc, #24]	@ (800ab84 <_dtoa_r+0x594>)
 800ab6c:	f7f5 fcb4 	bl	80004d8 <__aeabi_dmul>
 800ab70:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ab74:	e7c4      	b.n	800ab00 <_dtoa_r+0x510>
 800ab76:	bf00      	nop
 800ab78:	0800d298 	.word	0x0800d298
 800ab7c:	0800d270 	.word	0x0800d270
 800ab80:	3ff00000 	.word	0x3ff00000
 800ab84:	40240000 	.word	0x40240000
 800ab88:	401c0000 	.word	0x401c0000
 800ab8c:	40140000 	.word	0x40140000
 800ab90:	3fe00000 	.word	0x3fe00000
 800ab94:	4631      	mov	r1, r6
 800ab96:	4628      	mov	r0, r5
 800ab98:	f7f5 fc9e 	bl	80004d8 <__aeabi_dmul>
 800ab9c:	4656      	mov	r6, sl
 800ab9e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800aba2:	9413      	str	r4, [sp, #76]	@ 0x4c
 800aba4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aba8:	f7f5 ff46 	bl	8000a38 <__aeabi_d2iz>
 800abac:	4605      	mov	r5, r0
 800abae:	f7f5 fc29 	bl	8000404 <__aeabi_i2d>
 800abb2:	4602      	mov	r2, r0
 800abb4:	460b      	mov	r3, r1
 800abb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800abba:	f7f5 fad5 	bl	8000168 <__aeabi_dsub>
 800abbe:	4602      	mov	r2, r0
 800abc0:	460b      	mov	r3, r1
 800abc2:	3530      	adds	r5, #48	@ 0x30
 800abc4:	f806 5b01 	strb.w	r5, [r6], #1
 800abc8:	42a6      	cmp	r6, r4
 800abca:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800abce:	f04f 0200 	mov.w	r2, #0
 800abd2:	d124      	bne.n	800ac1e <_dtoa_r+0x62e>
 800abd4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800abd8:	4bae      	ldr	r3, [pc, #696]	@ (800ae94 <_dtoa_r+0x8a4>)
 800abda:	f7f5 fac7 	bl	800016c <__adddf3>
 800abde:	4602      	mov	r2, r0
 800abe0:	460b      	mov	r3, r1
 800abe2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800abe6:	f7f5 ff07 	bl	80009f8 <__aeabi_dcmpgt>
 800abea:	2800      	cmp	r0, #0
 800abec:	d163      	bne.n	800acb6 <_dtoa_r+0x6c6>
 800abee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800abf2:	2000      	movs	r0, #0
 800abf4:	49a7      	ldr	r1, [pc, #668]	@ (800ae94 <_dtoa_r+0x8a4>)
 800abf6:	f7f5 fab7 	bl	8000168 <__aeabi_dsub>
 800abfa:	4602      	mov	r2, r0
 800abfc:	460b      	mov	r3, r1
 800abfe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac02:	f7f5 fedb 	bl	80009bc <__aeabi_dcmplt>
 800ac06:	2800      	cmp	r0, #0
 800ac08:	f43f af14 	beq.w	800aa34 <_dtoa_r+0x444>
 800ac0c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800ac0e:	1e73      	subs	r3, r6, #1
 800ac10:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ac12:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ac16:	2b30      	cmp	r3, #48	@ 0x30
 800ac18:	d0f8      	beq.n	800ac0c <_dtoa_r+0x61c>
 800ac1a:	4647      	mov	r7, r8
 800ac1c:	e03b      	b.n	800ac96 <_dtoa_r+0x6a6>
 800ac1e:	4b9e      	ldr	r3, [pc, #632]	@ (800ae98 <_dtoa_r+0x8a8>)
 800ac20:	f7f5 fc5a 	bl	80004d8 <__aeabi_dmul>
 800ac24:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ac28:	e7bc      	b.n	800aba4 <_dtoa_r+0x5b4>
 800ac2a:	4656      	mov	r6, sl
 800ac2c:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800ac30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac34:	4620      	mov	r0, r4
 800ac36:	4629      	mov	r1, r5
 800ac38:	f7f5 fd78 	bl	800072c <__aeabi_ddiv>
 800ac3c:	f7f5 fefc 	bl	8000a38 <__aeabi_d2iz>
 800ac40:	4680      	mov	r8, r0
 800ac42:	f7f5 fbdf 	bl	8000404 <__aeabi_i2d>
 800ac46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac4a:	f7f5 fc45 	bl	80004d8 <__aeabi_dmul>
 800ac4e:	4602      	mov	r2, r0
 800ac50:	460b      	mov	r3, r1
 800ac52:	4620      	mov	r0, r4
 800ac54:	4629      	mov	r1, r5
 800ac56:	f7f5 fa87 	bl	8000168 <__aeabi_dsub>
 800ac5a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ac5e:	9d08      	ldr	r5, [sp, #32]
 800ac60:	f806 4b01 	strb.w	r4, [r6], #1
 800ac64:	eba6 040a 	sub.w	r4, r6, sl
 800ac68:	42a5      	cmp	r5, r4
 800ac6a:	4602      	mov	r2, r0
 800ac6c:	460b      	mov	r3, r1
 800ac6e:	d133      	bne.n	800acd8 <_dtoa_r+0x6e8>
 800ac70:	f7f5 fa7c 	bl	800016c <__adddf3>
 800ac74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac78:	4604      	mov	r4, r0
 800ac7a:	460d      	mov	r5, r1
 800ac7c:	f7f5 febc 	bl	80009f8 <__aeabi_dcmpgt>
 800ac80:	b9c0      	cbnz	r0, 800acb4 <_dtoa_r+0x6c4>
 800ac82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac86:	4620      	mov	r0, r4
 800ac88:	4629      	mov	r1, r5
 800ac8a:	f7f5 fe8d 	bl	80009a8 <__aeabi_dcmpeq>
 800ac8e:	b110      	cbz	r0, 800ac96 <_dtoa_r+0x6a6>
 800ac90:	f018 0f01 	tst.w	r8, #1
 800ac94:	d10e      	bne.n	800acb4 <_dtoa_r+0x6c4>
 800ac96:	4648      	mov	r0, r9
 800ac98:	9903      	ldr	r1, [sp, #12]
 800ac9a:	f000 fbbb 	bl	800b414 <_Bfree>
 800ac9e:	2300      	movs	r3, #0
 800aca0:	7033      	strb	r3, [r6, #0]
 800aca2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800aca4:	3701      	adds	r7, #1
 800aca6:	601f      	str	r7, [r3, #0]
 800aca8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800acaa:	2b00      	cmp	r3, #0
 800acac:	f000 824b 	beq.w	800b146 <_dtoa_r+0xb56>
 800acb0:	601e      	str	r6, [r3, #0]
 800acb2:	e248      	b.n	800b146 <_dtoa_r+0xb56>
 800acb4:	46b8      	mov	r8, r7
 800acb6:	4633      	mov	r3, r6
 800acb8:	461e      	mov	r6, r3
 800acba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800acbe:	2a39      	cmp	r2, #57	@ 0x39
 800acc0:	d106      	bne.n	800acd0 <_dtoa_r+0x6e0>
 800acc2:	459a      	cmp	sl, r3
 800acc4:	d1f8      	bne.n	800acb8 <_dtoa_r+0x6c8>
 800acc6:	2230      	movs	r2, #48	@ 0x30
 800acc8:	f108 0801 	add.w	r8, r8, #1
 800accc:	f88a 2000 	strb.w	r2, [sl]
 800acd0:	781a      	ldrb	r2, [r3, #0]
 800acd2:	3201      	adds	r2, #1
 800acd4:	701a      	strb	r2, [r3, #0]
 800acd6:	e7a0      	b.n	800ac1a <_dtoa_r+0x62a>
 800acd8:	2200      	movs	r2, #0
 800acda:	4b6f      	ldr	r3, [pc, #444]	@ (800ae98 <_dtoa_r+0x8a8>)
 800acdc:	f7f5 fbfc 	bl	80004d8 <__aeabi_dmul>
 800ace0:	2200      	movs	r2, #0
 800ace2:	2300      	movs	r3, #0
 800ace4:	4604      	mov	r4, r0
 800ace6:	460d      	mov	r5, r1
 800ace8:	f7f5 fe5e 	bl	80009a8 <__aeabi_dcmpeq>
 800acec:	2800      	cmp	r0, #0
 800acee:	d09f      	beq.n	800ac30 <_dtoa_r+0x640>
 800acf0:	e7d1      	b.n	800ac96 <_dtoa_r+0x6a6>
 800acf2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800acf4:	2a00      	cmp	r2, #0
 800acf6:	f000 80ea 	beq.w	800aece <_dtoa_r+0x8de>
 800acfa:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800acfc:	2a01      	cmp	r2, #1
 800acfe:	f300 80cd 	bgt.w	800ae9c <_dtoa_r+0x8ac>
 800ad02:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ad04:	2a00      	cmp	r2, #0
 800ad06:	f000 80c1 	beq.w	800ae8c <_dtoa_r+0x89c>
 800ad0a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ad0e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ad10:	9e04      	ldr	r6, [sp, #16]
 800ad12:	9a04      	ldr	r2, [sp, #16]
 800ad14:	2101      	movs	r1, #1
 800ad16:	441a      	add	r2, r3
 800ad18:	9204      	str	r2, [sp, #16]
 800ad1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ad1c:	4648      	mov	r0, r9
 800ad1e:	441a      	add	r2, r3
 800ad20:	9209      	str	r2, [sp, #36]	@ 0x24
 800ad22:	f000 fc2b 	bl	800b57c <__i2b>
 800ad26:	4605      	mov	r5, r0
 800ad28:	b166      	cbz	r6, 800ad44 <_dtoa_r+0x754>
 800ad2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	dd09      	ble.n	800ad44 <_dtoa_r+0x754>
 800ad30:	42b3      	cmp	r3, r6
 800ad32:	bfa8      	it	ge
 800ad34:	4633      	movge	r3, r6
 800ad36:	9a04      	ldr	r2, [sp, #16]
 800ad38:	1af6      	subs	r6, r6, r3
 800ad3a:	1ad2      	subs	r2, r2, r3
 800ad3c:	9204      	str	r2, [sp, #16]
 800ad3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ad40:	1ad3      	subs	r3, r2, r3
 800ad42:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ad46:	b30b      	cbz	r3, 800ad8c <_dtoa_r+0x79c>
 800ad48:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	f000 80c6 	beq.w	800aedc <_dtoa_r+0x8ec>
 800ad50:	2c00      	cmp	r4, #0
 800ad52:	f000 80c0 	beq.w	800aed6 <_dtoa_r+0x8e6>
 800ad56:	4629      	mov	r1, r5
 800ad58:	4622      	mov	r2, r4
 800ad5a:	4648      	mov	r0, r9
 800ad5c:	f000 fcc6 	bl	800b6ec <__pow5mult>
 800ad60:	9a03      	ldr	r2, [sp, #12]
 800ad62:	4601      	mov	r1, r0
 800ad64:	4605      	mov	r5, r0
 800ad66:	4648      	mov	r0, r9
 800ad68:	f000 fc1e 	bl	800b5a8 <__multiply>
 800ad6c:	9903      	ldr	r1, [sp, #12]
 800ad6e:	4680      	mov	r8, r0
 800ad70:	4648      	mov	r0, r9
 800ad72:	f000 fb4f 	bl	800b414 <_Bfree>
 800ad76:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ad78:	1b1b      	subs	r3, r3, r4
 800ad7a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ad7c:	f000 80b1 	beq.w	800aee2 <_dtoa_r+0x8f2>
 800ad80:	4641      	mov	r1, r8
 800ad82:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ad84:	4648      	mov	r0, r9
 800ad86:	f000 fcb1 	bl	800b6ec <__pow5mult>
 800ad8a:	9003      	str	r0, [sp, #12]
 800ad8c:	2101      	movs	r1, #1
 800ad8e:	4648      	mov	r0, r9
 800ad90:	f000 fbf4 	bl	800b57c <__i2b>
 800ad94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ad96:	4604      	mov	r4, r0
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	f000 81d8 	beq.w	800b14e <_dtoa_r+0xb5e>
 800ad9e:	461a      	mov	r2, r3
 800ada0:	4601      	mov	r1, r0
 800ada2:	4648      	mov	r0, r9
 800ada4:	f000 fca2 	bl	800b6ec <__pow5mult>
 800ada8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800adaa:	4604      	mov	r4, r0
 800adac:	2b01      	cmp	r3, #1
 800adae:	f300 809f 	bgt.w	800aef0 <_dtoa_r+0x900>
 800adb2:	9b06      	ldr	r3, [sp, #24]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	f040 8097 	bne.w	800aee8 <_dtoa_r+0x8f8>
 800adba:	9b07      	ldr	r3, [sp, #28]
 800adbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	f040 8093 	bne.w	800aeec <_dtoa_r+0x8fc>
 800adc6:	9b07      	ldr	r3, [sp, #28]
 800adc8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800adcc:	0d1b      	lsrs	r3, r3, #20
 800adce:	051b      	lsls	r3, r3, #20
 800add0:	b133      	cbz	r3, 800ade0 <_dtoa_r+0x7f0>
 800add2:	9b04      	ldr	r3, [sp, #16]
 800add4:	3301      	adds	r3, #1
 800add6:	9304      	str	r3, [sp, #16]
 800add8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800adda:	3301      	adds	r3, #1
 800addc:	9309      	str	r3, [sp, #36]	@ 0x24
 800adde:	2301      	movs	r3, #1
 800ade0:	930a      	str	r3, [sp, #40]	@ 0x28
 800ade2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	f000 81b8 	beq.w	800b15a <_dtoa_r+0xb6a>
 800adea:	6923      	ldr	r3, [r4, #16]
 800adec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800adf0:	6918      	ldr	r0, [r3, #16]
 800adf2:	f000 fb77 	bl	800b4e4 <__hi0bits>
 800adf6:	f1c0 0020 	rsb	r0, r0, #32
 800adfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800adfc:	4418      	add	r0, r3
 800adfe:	f010 001f 	ands.w	r0, r0, #31
 800ae02:	f000 8082 	beq.w	800af0a <_dtoa_r+0x91a>
 800ae06:	f1c0 0320 	rsb	r3, r0, #32
 800ae0a:	2b04      	cmp	r3, #4
 800ae0c:	dd73      	ble.n	800aef6 <_dtoa_r+0x906>
 800ae0e:	9b04      	ldr	r3, [sp, #16]
 800ae10:	f1c0 001c 	rsb	r0, r0, #28
 800ae14:	4403      	add	r3, r0
 800ae16:	9304      	str	r3, [sp, #16]
 800ae18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae1a:	4406      	add	r6, r0
 800ae1c:	4403      	add	r3, r0
 800ae1e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae20:	9b04      	ldr	r3, [sp, #16]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	dd05      	ble.n	800ae32 <_dtoa_r+0x842>
 800ae26:	461a      	mov	r2, r3
 800ae28:	4648      	mov	r0, r9
 800ae2a:	9903      	ldr	r1, [sp, #12]
 800ae2c:	f000 fcb8 	bl	800b7a0 <__lshift>
 800ae30:	9003      	str	r0, [sp, #12]
 800ae32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	dd05      	ble.n	800ae44 <_dtoa_r+0x854>
 800ae38:	4621      	mov	r1, r4
 800ae3a:	461a      	mov	r2, r3
 800ae3c:	4648      	mov	r0, r9
 800ae3e:	f000 fcaf 	bl	800b7a0 <__lshift>
 800ae42:	4604      	mov	r4, r0
 800ae44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d061      	beq.n	800af0e <_dtoa_r+0x91e>
 800ae4a:	4621      	mov	r1, r4
 800ae4c:	9803      	ldr	r0, [sp, #12]
 800ae4e:	f000 fd13 	bl	800b878 <__mcmp>
 800ae52:	2800      	cmp	r0, #0
 800ae54:	da5b      	bge.n	800af0e <_dtoa_r+0x91e>
 800ae56:	2300      	movs	r3, #0
 800ae58:	220a      	movs	r2, #10
 800ae5a:	4648      	mov	r0, r9
 800ae5c:	9903      	ldr	r1, [sp, #12]
 800ae5e:	f000 fafb 	bl	800b458 <__multadd>
 800ae62:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ae64:	f107 38ff 	add.w	r8, r7, #4294967295
 800ae68:	9003      	str	r0, [sp, #12]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	f000 8177 	beq.w	800b15e <_dtoa_r+0xb6e>
 800ae70:	4629      	mov	r1, r5
 800ae72:	2300      	movs	r3, #0
 800ae74:	220a      	movs	r2, #10
 800ae76:	4648      	mov	r0, r9
 800ae78:	f000 faee 	bl	800b458 <__multadd>
 800ae7c:	f1bb 0f00 	cmp.w	fp, #0
 800ae80:	4605      	mov	r5, r0
 800ae82:	dc6f      	bgt.n	800af64 <_dtoa_r+0x974>
 800ae84:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ae86:	2b02      	cmp	r3, #2
 800ae88:	dc49      	bgt.n	800af1e <_dtoa_r+0x92e>
 800ae8a:	e06b      	b.n	800af64 <_dtoa_r+0x974>
 800ae8c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ae8e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ae92:	e73c      	b.n	800ad0e <_dtoa_r+0x71e>
 800ae94:	3fe00000 	.word	0x3fe00000
 800ae98:	40240000 	.word	0x40240000
 800ae9c:	9b08      	ldr	r3, [sp, #32]
 800ae9e:	1e5c      	subs	r4, r3, #1
 800aea0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aea2:	42a3      	cmp	r3, r4
 800aea4:	db09      	blt.n	800aeba <_dtoa_r+0x8ca>
 800aea6:	1b1c      	subs	r4, r3, r4
 800aea8:	9b08      	ldr	r3, [sp, #32]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	f6bf af30 	bge.w	800ad10 <_dtoa_r+0x720>
 800aeb0:	9b04      	ldr	r3, [sp, #16]
 800aeb2:	9a08      	ldr	r2, [sp, #32]
 800aeb4:	1a9e      	subs	r6, r3, r2
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	e72b      	b.n	800ad12 <_dtoa_r+0x722>
 800aeba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aebc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aebe:	1ae3      	subs	r3, r4, r3
 800aec0:	441a      	add	r2, r3
 800aec2:	940a      	str	r4, [sp, #40]	@ 0x28
 800aec4:	9e04      	ldr	r6, [sp, #16]
 800aec6:	2400      	movs	r4, #0
 800aec8:	9b08      	ldr	r3, [sp, #32]
 800aeca:	920e      	str	r2, [sp, #56]	@ 0x38
 800aecc:	e721      	b.n	800ad12 <_dtoa_r+0x722>
 800aece:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800aed0:	9e04      	ldr	r6, [sp, #16]
 800aed2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800aed4:	e728      	b.n	800ad28 <_dtoa_r+0x738>
 800aed6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800aeda:	e751      	b.n	800ad80 <_dtoa_r+0x790>
 800aedc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800aede:	9903      	ldr	r1, [sp, #12]
 800aee0:	e750      	b.n	800ad84 <_dtoa_r+0x794>
 800aee2:	f8cd 800c 	str.w	r8, [sp, #12]
 800aee6:	e751      	b.n	800ad8c <_dtoa_r+0x79c>
 800aee8:	2300      	movs	r3, #0
 800aeea:	e779      	b.n	800ade0 <_dtoa_r+0x7f0>
 800aeec:	9b06      	ldr	r3, [sp, #24]
 800aeee:	e777      	b.n	800ade0 <_dtoa_r+0x7f0>
 800aef0:	2300      	movs	r3, #0
 800aef2:	930a      	str	r3, [sp, #40]	@ 0x28
 800aef4:	e779      	b.n	800adea <_dtoa_r+0x7fa>
 800aef6:	d093      	beq.n	800ae20 <_dtoa_r+0x830>
 800aef8:	9a04      	ldr	r2, [sp, #16]
 800aefa:	331c      	adds	r3, #28
 800aefc:	441a      	add	r2, r3
 800aefe:	9204      	str	r2, [sp, #16]
 800af00:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af02:	441e      	add	r6, r3
 800af04:	441a      	add	r2, r3
 800af06:	9209      	str	r2, [sp, #36]	@ 0x24
 800af08:	e78a      	b.n	800ae20 <_dtoa_r+0x830>
 800af0a:	4603      	mov	r3, r0
 800af0c:	e7f4      	b.n	800aef8 <_dtoa_r+0x908>
 800af0e:	9b08      	ldr	r3, [sp, #32]
 800af10:	46b8      	mov	r8, r7
 800af12:	2b00      	cmp	r3, #0
 800af14:	dc20      	bgt.n	800af58 <_dtoa_r+0x968>
 800af16:	469b      	mov	fp, r3
 800af18:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800af1a:	2b02      	cmp	r3, #2
 800af1c:	dd1e      	ble.n	800af5c <_dtoa_r+0x96c>
 800af1e:	f1bb 0f00 	cmp.w	fp, #0
 800af22:	f47f adb1 	bne.w	800aa88 <_dtoa_r+0x498>
 800af26:	4621      	mov	r1, r4
 800af28:	465b      	mov	r3, fp
 800af2a:	2205      	movs	r2, #5
 800af2c:	4648      	mov	r0, r9
 800af2e:	f000 fa93 	bl	800b458 <__multadd>
 800af32:	4601      	mov	r1, r0
 800af34:	4604      	mov	r4, r0
 800af36:	9803      	ldr	r0, [sp, #12]
 800af38:	f000 fc9e 	bl	800b878 <__mcmp>
 800af3c:	2800      	cmp	r0, #0
 800af3e:	f77f ada3 	ble.w	800aa88 <_dtoa_r+0x498>
 800af42:	4656      	mov	r6, sl
 800af44:	2331      	movs	r3, #49	@ 0x31
 800af46:	f108 0801 	add.w	r8, r8, #1
 800af4a:	f806 3b01 	strb.w	r3, [r6], #1
 800af4e:	e59f      	b.n	800aa90 <_dtoa_r+0x4a0>
 800af50:	46b8      	mov	r8, r7
 800af52:	9c08      	ldr	r4, [sp, #32]
 800af54:	4625      	mov	r5, r4
 800af56:	e7f4      	b.n	800af42 <_dtoa_r+0x952>
 800af58:	f8dd b020 	ldr.w	fp, [sp, #32]
 800af5c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af5e:	2b00      	cmp	r3, #0
 800af60:	f000 8101 	beq.w	800b166 <_dtoa_r+0xb76>
 800af64:	2e00      	cmp	r6, #0
 800af66:	dd05      	ble.n	800af74 <_dtoa_r+0x984>
 800af68:	4629      	mov	r1, r5
 800af6a:	4632      	mov	r2, r6
 800af6c:	4648      	mov	r0, r9
 800af6e:	f000 fc17 	bl	800b7a0 <__lshift>
 800af72:	4605      	mov	r5, r0
 800af74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af76:	2b00      	cmp	r3, #0
 800af78:	d05c      	beq.n	800b034 <_dtoa_r+0xa44>
 800af7a:	4648      	mov	r0, r9
 800af7c:	6869      	ldr	r1, [r5, #4]
 800af7e:	f000 fa09 	bl	800b394 <_Balloc>
 800af82:	4606      	mov	r6, r0
 800af84:	b928      	cbnz	r0, 800af92 <_dtoa_r+0x9a2>
 800af86:	4602      	mov	r2, r0
 800af88:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800af8c:	4b80      	ldr	r3, [pc, #512]	@ (800b190 <_dtoa_r+0xba0>)
 800af8e:	f7ff bb43 	b.w	800a618 <_dtoa_r+0x28>
 800af92:	692a      	ldr	r2, [r5, #16]
 800af94:	f105 010c 	add.w	r1, r5, #12
 800af98:	3202      	adds	r2, #2
 800af9a:	0092      	lsls	r2, r2, #2
 800af9c:	300c      	adds	r0, #12
 800af9e:	f7ff fa8e 	bl	800a4be <memcpy>
 800afa2:	2201      	movs	r2, #1
 800afa4:	4631      	mov	r1, r6
 800afa6:	4648      	mov	r0, r9
 800afa8:	f000 fbfa 	bl	800b7a0 <__lshift>
 800afac:	462f      	mov	r7, r5
 800afae:	4605      	mov	r5, r0
 800afb0:	f10a 0301 	add.w	r3, sl, #1
 800afb4:	9304      	str	r3, [sp, #16]
 800afb6:	eb0a 030b 	add.w	r3, sl, fp
 800afba:	930a      	str	r3, [sp, #40]	@ 0x28
 800afbc:	9b06      	ldr	r3, [sp, #24]
 800afbe:	f003 0301 	and.w	r3, r3, #1
 800afc2:	9309      	str	r3, [sp, #36]	@ 0x24
 800afc4:	9b04      	ldr	r3, [sp, #16]
 800afc6:	4621      	mov	r1, r4
 800afc8:	9803      	ldr	r0, [sp, #12]
 800afca:	f103 3bff 	add.w	fp, r3, #4294967295
 800afce:	f7ff fa84 	bl	800a4da <quorem>
 800afd2:	4603      	mov	r3, r0
 800afd4:	4639      	mov	r1, r7
 800afd6:	3330      	adds	r3, #48	@ 0x30
 800afd8:	9006      	str	r0, [sp, #24]
 800afda:	9803      	ldr	r0, [sp, #12]
 800afdc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800afde:	f000 fc4b 	bl	800b878 <__mcmp>
 800afe2:	462a      	mov	r2, r5
 800afe4:	9008      	str	r0, [sp, #32]
 800afe6:	4621      	mov	r1, r4
 800afe8:	4648      	mov	r0, r9
 800afea:	f000 fc61 	bl	800b8b0 <__mdiff>
 800afee:	68c2      	ldr	r2, [r0, #12]
 800aff0:	4606      	mov	r6, r0
 800aff2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aff4:	bb02      	cbnz	r2, 800b038 <_dtoa_r+0xa48>
 800aff6:	4601      	mov	r1, r0
 800aff8:	9803      	ldr	r0, [sp, #12]
 800affa:	f000 fc3d 	bl	800b878 <__mcmp>
 800affe:	4602      	mov	r2, r0
 800b000:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b002:	4631      	mov	r1, r6
 800b004:	4648      	mov	r0, r9
 800b006:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800b00a:	f000 fa03 	bl	800b414 <_Bfree>
 800b00e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b010:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b012:	9e04      	ldr	r6, [sp, #16]
 800b014:	ea42 0103 	orr.w	r1, r2, r3
 800b018:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b01a:	4319      	orrs	r1, r3
 800b01c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b01e:	d10d      	bne.n	800b03c <_dtoa_r+0xa4c>
 800b020:	2b39      	cmp	r3, #57	@ 0x39
 800b022:	d027      	beq.n	800b074 <_dtoa_r+0xa84>
 800b024:	9a08      	ldr	r2, [sp, #32]
 800b026:	2a00      	cmp	r2, #0
 800b028:	dd01      	ble.n	800b02e <_dtoa_r+0xa3e>
 800b02a:	9b06      	ldr	r3, [sp, #24]
 800b02c:	3331      	adds	r3, #49	@ 0x31
 800b02e:	f88b 3000 	strb.w	r3, [fp]
 800b032:	e52e      	b.n	800aa92 <_dtoa_r+0x4a2>
 800b034:	4628      	mov	r0, r5
 800b036:	e7b9      	b.n	800afac <_dtoa_r+0x9bc>
 800b038:	2201      	movs	r2, #1
 800b03a:	e7e2      	b.n	800b002 <_dtoa_r+0xa12>
 800b03c:	9908      	ldr	r1, [sp, #32]
 800b03e:	2900      	cmp	r1, #0
 800b040:	db04      	blt.n	800b04c <_dtoa_r+0xa5c>
 800b042:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800b044:	4301      	orrs	r1, r0
 800b046:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b048:	4301      	orrs	r1, r0
 800b04a:	d120      	bne.n	800b08e <_dtoa_r+0xa9e>
 800b04c:	2a00      	cmp	r2, #0
 800b04e:	ddee      	ble.n	800b02e <_dtoa_r+0xa3e>
 800b050:	2201      	movs	r2, #1
 800b052:	9903      	ldr	r1, [sp, #12]
 800b054:	4648      	mov	r0, r9
 800b056:	9304      	str	r3, [sp, #16]
 800b058:	f000 fba2 	bl	800b7a0 <__lshift>
 800b05c:	4621      	mov	r1, r4
 800b05e:	9003      	str	r0, [sp, #12]
 800b060:	f000 fc0a 	bl	800b878 <__mcmp>
 800b064:	2800      	cmp	r0, #0
 800b066:	9b04      	ldr	r3, [sp, #16]
 800b068:	dc02      	bgt.n	800b070 <_dtoa_r+0xa80>
 800b06a:	d1e0      	bne.n	800b02e <_dtoa_r+0xa3e>
 800b06c:	07da      	lsls	r2, r3, #31
 800b06e:	d5de      	bpl.n	800b02e <_dtoa_r+0xa3e>
 800b070:	2b39      	cmp	r3, #57	@ 0x39
 800b072:	d1da      	bne.n	800b02a <_dtoa_r+0xa3a>
 800b074:	2339      	movs	r3, #57	@ 0x39
 800b076:	f88b 3000 	strb.w	r3, [fp]
 800b07a:	4633      	mov	r3, r6
 800b07c:	461e      	mov	r6, r3
 800b07e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b082:	3b01      	subs	r3, #1
 800b084:	2a39      	cmp	r2, #57	@ 0x39
 800b086:	d04e      	beq.n	800b126 <_dtoa_r+0xb36>
 800b088:	3201      	adds	r2, #1
 800b08a:	701a      	strb	r2, [r3, #0]
 800b08c:	e501      	b.n	800aa92 <_dtoa_r+0x4a2>
 800b08e:	2a00      	cmp	r2, #0
 800b090:	dd03      	ble.n	800b09a <_dtoa_r+0xaaa>
 800b092:	2b39      	cmp	r3, #57	@ 0x39
 800b094:	d0ee      	beq.n	800b074 <_dtoa_r+0xa84>
 800b096:	3301      	adds	r3, #1
 800b098:	e7c9      	b.n	800b02e <_dtoa_r+0xa3e>
 800b09a:	9a04      	ldr	r2, [sp, #16]
 800b09c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b09e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b0a2:	428a      	cmp	r2, r1
 800b0a4:	d028      	beq.n	800b0f8 <_dtoa_r+0xb08>
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	220a      	movs	r2, #10
 800b0aa:	9903      	ldr	r1, [sp, #12]
 800b0ac:	4648      	mov	r0, r9
 800b0ae:	f000 f9d3 	bl	800b458 <__multadd>
 800b0b2:	42af      	cmp	r7, r5
 800b0b4:	9003      	str	r0, [sp, #12]
 800b0b6:	f04f 0300 	mov.w	r3, #0
 800b0ba:	f04f 020a 	mov.w	r2, #10
 800b0be:	4639      	mov	r1, r7
 800b0c0:	4648      	mov	r0, r9
 800b0c2:	d107      	bne.n	800b0d4 <_dtoa_r+0xae4>
 800b0c4:	f000 f9c8 	bl	800b458 <__multadd>
 800b0c8:	4607      	mov	r7, r0
 800b0ca:	4605      	mov	r5, r0
 800b0cc:	9b04      	ldr	r3, [sp, #16]
 800b0ce:	3301      	adds	r3, #1
 800b0d0:	9304      	str	r3, [sp, #16]
 800b0d2:	e777      	b.n	800afc4 <_dtoa_r+0x9d4>
 800b0d4:	f000 f9c0 	bl	800b458 <__multadd>
 800b0d8:	4629      	mov	r1, r5
 800b0da:	4607      	mov	r7, r0
 800b0dc:	2300      	movs	r3, #0
 800b0de:	220a      	movs	r2, #10
 800b0e0:	4648      	mov	r0, r9
 800b0e2:	f000 f9b9 	bl	800b458 <__multadd>
 800b0e6:	4605      	mov	r5, r0
 800b0e8:	e7f0      	b.n	800b0cc <_dtoa_r+0xadc>
 800b0ea:	f1bb 0f00 	cmp.w	fp, #0
 800b0ee:	bfcc      	ite	gt
 800b0f0:	465e      	movgt	r6, fp
 800b0f2:	2601      	movle	r6, #1
 800b0f4:	2700      	movs	r7, #0
 800b0f6:	4456      	add	r6, sl
 800b0f8:	2201      	movs	r2, #1
 800b0fa:	9903      	ldr	r1, [sp, #12]
 800b0fc:	4648      	mov	r0, r9
 800b0fe:	9304      	str	r3, [sp, #16]
 800b100:	f000 fb4e 	bl	800b7a0 <__lshift>
 800b104:	4621      	mov	r1, r4
 800b106:	9003      	str	r0, [sp, #12]
 800b108:	f000 fbb6 	bl	800b878 <__mcmp>
 800b10c:	2800      	cmp	r0, #0
 800b10e:	dcb4      	bgt.n	800b07a <_dtoa_r+0xa8a>
 800b110:	d102      	bne.n	800b118 <_dtoa_r+0xb28>
 800b112:	9b04      	ldr	r3, [sp, #16]
 800b114:	07db      	lsls	r3, r3, #31
 800b116:	d4b0      	bmi.n	800b07a <_dtoa_r+0xa8a>
 800b118:	4633      	mov	r3, r6
 800b11a:	461e      	mov	r6, r3
 800b11c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b120:	2a30      	cmp	r2, #48	@ 0x30
 800b122:	d0fa      	beq.n	800b11a <_dtoa_r+0xb2a>
 800b124:	e4b5      	b.n	800aa92 <_dtoa_r+0x4a2>
 800b126:	459a      	cmp	sl, r3
 800b128:	d1a8      	bne.n	800b07c <_dtoa_r+0xa8c>
 800b12a:	2331      	movs	r3, #49	@ 0x31
 800b12c:	f108 0801 	add.w	r8, r8, #1
 800b130:	f88a 3000 	strb.w	r3, [sl]
 800b134:	e4ad      	b.n	800aa92 <_dtoa_r+0x4a2>
 800b136:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b138:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800b194 <_dtoa_r+0xba4>
 800b13c:	b11b      	cbz	r3, 800b146 <_dtoa_r+0xb56>
 800b13e:	f10a 0308 	add.w	r3, sl, #8
 800b142:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b144:	6013      	str	r3, [r2, #0]
 800b146:	4650      	mov	r0, sl
 800b148:	b017      	add	sp, #92	@ 0x5c
 800b14a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b14e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b150:	2b01      	cmp	r3, #1
 800b152:	f77f ae2e 	ble.w	800adb2 <_dtoa_r+0x7c2>
 800b156:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b158:	930a      	str	r3, [sp, #40]	@ 0x28
 800b15a:	2001      	movs	r0, #1
 800b15c:	e64d      	b.n	800adfa <_dtoa_r+0x80a>
 800b15e:	f1bb 0f00 	cmp.w	fp, #0
 800b162:	f77f aed9 	ble.w	800af18 <_dtoa_r+0x928>
 800b166:	4656      	mov	r6, sl
 800b168:	4621      	mov	r1, r4
 800b16a:	9803      	ldr	r0, [sp, #12]
 800b16c:	f7ff f9b5 	bl	800a4da <quorem>
 800b170:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800b174:	f806 3b01 	strb.w	r3, [r6], #1
 800b178:	eba6 020a 	sub.w	r2, r6, sl
 800b17c:	4593      	cmp	fp, r2
 800b17e:	ddb4      	ble.n	800b0ea <_dtoa_r+0xafa>
 800b180:	2300      	movs	r3, #0
 800b182:	220a      	movs	r2, #10
 800b184:	4648      	mov	r0, r9
 800b186:	9903      	ldr	r1, [sp, #12]
 800b188:	f000 f966 	bl	800b458 <__multadd>
 800b18c:	9003      	str	r0, [sp, #12]
 800b18e:	e7eb      	b.n	800b168 <_dtoa_r+0xb78>
 800b190:	0800d184 	.word	0x0800d184
 800b194:	0800d108 	.word	0x0800d108

0800b198 <_free_r>:
 800b198:	b538      	push	{r3, r4, r5, lr}
 800b19a:	4605      	mov	r5, r0
 800b19c:	2900      	cmp	r1, #0
 800b19e:	d040      	beq.n	800b222 <_free_r+0x8a>
 800b1a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1a4:	1f0c      	subs	r4, r1, #4
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	bfb8      	it	lt
 800b1aa:	18e4      	addlt	r4, r4, r3
 800b1ac:	f000 f8e6 	bl	800b37c <__malloc_lock>
 800b1b0:	4a1c      	ldr	r2, [pc, #112]	@ (800b224 <_free_r+0x8c>)
 800b1b2:	6813      	ldr	r3, [r2, #0]
 800b1b4:	b933      	cbnz	r3, 800b1c4 <_free_r+0x2c>
 800b1b6:	6063      	str	r3, [r4, #4]
 800b1b8:	6014      	str	r4, [r2, #0]
 800b1ba:	4628      	mov	r0, r5
 800b1bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b1c0:	f000 b8e2 	b.w	800b388 <__malloc_unlock>
 800b1c4:	42a3      	cmp	r3, r4
 800b1c6:	d908      	bls.n	800b1da <_free_r+0x42>
 800b1c8:	6820      	ldr	r0, [r4, #0]
 800b1ca:	1821      	adds	r1, r4, r0
 800b1cc:	428b      	cmp	r3, r1
 800b1ce:	bf01      	itttt	eq
 800b1d0:	6819      	ldreq	r1, [r3, #0]
 800b1d2:	685b      	ldreq	r3, [r3, #4]
 800b1d4:	1809      	addeq	r1, r1, r0
 800b1d6:	6021      	streq	r1, [r4, #0]
 800b1d8:	e7ed      	b.n	800b1b6 <_free_r+0x1e>
 800b1da:	461a      	mov	r2, r3
 800b1dc:	685b      	ldr	r3, [r3, #4]
 800b1de:	b10b      	cbz	r3, 800b1e4 <_free_r+0x4c>
 800b1e0:	42a3      	cmp	r3, r4
 800b1e2:	d9fa      	bls.n	800b1da <_free_r+0x42>
 800b1e4:	6811      	ldr	r1, [r2, #0]
 800b1e6:	1850      	adds	r0, r2, r1
 800b1e8:	42a0      	cmp	r0, r4
 800b1ea:	d10b      	bne.n	800b204 <_free_r+0x6c>
 800b1ec:	6820      	ldr	r0, [r4, #0]
 800b1ee:	4401      	add	r1, r0
 800b1f0:	1850      	adds	r0, r2, r1
 800b1f2:	4283      	cmp	r3, r0
 800b1f4:	6011      	str	r1, [r2, #0]
 800b1f6:	d1e0      	bne.n	800b1ba <_free_r+0x22>
 800b1f8:	6818      	ldr	r0, [r3, #0]
 800b1fa:	685b      	ldr	r3, [r3, #4]
 800b1fc:	4408      	add	r0, r1
 800b1fe:	6010      	str	r0, [r2, #0]
 800b200:	6053      	str	r3, [r2, #4]
 800b202:	e7da      	b.n	800b1ba <_free_r+0x22>
 800b204:	d902      	bls.n	800b20c <_free_r+0x74>
 800b206:	230c      	movs	r3, #12
 800b208:	602b      	str	r3, [r5, #0]
 800b20a:	e7d6      	b.n	800b1ba <_free_r+0x22>
 800b20c:	6820      	ldr	r0, [r4, #0]
 800b20e:	1821      	adds	r1, r4, r0
 800b210:	428b      	cmp	r3, r1
 800b212:	bf01      	itttt	eq
 800b214:	6819      	ldreq	r1, [r3, #0]
 800b216:	685b      	ldreq	r3, [r3, #4]
 800b218:	1809      	addeq	r1, r1, r0
 800b21a:	6021      	streq	r1, [r4, #0]
 800b21c:	6063      	str	r3, [r4, #4]
 800b21e:	6054      	str	r4, [r2, #4]
 800b220:	e7cb      	b.n	800b1ba <_free_r+0x22>
 800b222:	bd38      	pop	{r3, r4, r5, pc}
 800b224:	20002acc 	.word	0x20002acc

0800b228 <malloc>:
 800b228:	4b02      	ldr	r3, [pc, #8]	@ (800b234 <malloc+0xc>)
 800b22a:	4601      	mov	r1, r0
 800b22c:	6818      	ldr	r0, [r3, #0]
 800b22e:	f000 b825 	b.w	800b27c <_malloc_r>
 800b232:	bf00      	nop
 800b234:	20000030 	.word	0x20000030

0800b238 <sbrk_aligned>:
 800b238:	b570      	push	{r4, r5, r6, lr}
 800b23a:	4e0f      	ldr	r6, [pc, #60]	@ (800b278 <sbrk_aligned+0x40>)
 800b23c:	460c      	mov	r4, r1
 800b23e:	6831      	ldr	r1, [r6, #0]
 800b240:	4605      	mov	r5, r0
 800b242:	b911      	cbnz	r1, 800b24a <sbrk_aligned+0x12>
 800b244:	f001 f9c6 	bl	800c5d4 <_sbrk_r>
 800b248:	6030      	str	r0, [r6, #0]
 800b24a:	4621      	mov	r1, r4
 800b24c:	4628      	mov	r0, r5
 800b24e:	f001 f9c1 	bl	800c5d4 <_sbrk_r>
 800b252:	1c43      	adds	r3, r0, #1
 800b254:	d103      	bne.n	800b25e <sbrk_aligned+0x26>
 800b256:	f04f 34ff 	mov.w	r4, #4294967295
 800b25a:	4620      	mov	r0, r4
 800b25c:	bd70      	pop	{r4, r5, r6, pc}
 800b25e:	1cc4      	adds	r4, r0, #3
 800b260:	f024 0403 	bic.w	r4, r4, #3
 800b264:	42a0      	cmp	r0, r4
 800b266:	d0f8      	beq.n	800b25a <sbrk_aligned+0x22>
 800b268:	1a21      	subs	r1, r4, r0
 800b26a:	4628      	mov	r0, r5
 800b26c:	f001 f9b2 	bl	800c5d4 <_sbrk_r>
 800b270:	3001      	adds	r0, #1
 800b272:	d1f2      	bne.n	800b25a <sbrk_aligned+0x22>
 800b274:	e7ef      	b.n	800b256 <sbrk_aligned+0x1e>
 800b276:	bf00      	nop
 800b278:	20002ac8 	.word	0x20002ac8

0800b27c <_malloc_r>:
 800b27c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b280:	1ccd      	adds	r5, r1, #3
 800b282:	f025 0503 	bic.w	r5, r5, #3
 800b286:	3508      	adds	r5, #8
 800b288:	2d0c      	cmp	r5, #12
 800b28a:	bf38      	it	cc
 800b28c:	250c      	movcc	r5, #12
 800b28e:	2d00      	cmp	r5, #0
 800b290:	4606      	mov	r6, r0
 800b292:	db01      	blt.n	800b298 <_malloc_r+0x1c>
 800b294:	42a9      	cmp	r1, r5
 800b296:	d904      	bls.n	800b2a2 <_malloc_r+0x26>
 800b298:	230c      	movs	r3, #12
 800b29a:	6033      	str	r3, [r6, #0]
 800b29c:	2000      	movs	r0, #0
 800b29e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b378 <_malloc_r+0xfc>
 800b2a6:	f000 f869 	bl	800b37c <__malloc_lock>
 800b2aa:	f8d8 3000 	ldr.w	r3, [r8]
 800b2ae:	461c      	mov	r4, r3
 800b2b0:	bb44      	cbnz	r4, 800b304 <_malloc_r+0x88>
 800b2b2:	4629      	mov	r1, r5
 800b2b4:	4630      	mov	r0, r6
 800b2b6:	f7ff ffbf 	bl	800b238 <sbrk_aligned>
 800b2ba:	1c43      	adds	r3, r0, #1
 800b2bc:	4604      	mov	r4, r0
 800b2be:	d158      	bne.n	800b372 <_malloc_r+0xf6>
 800b2c0:	f8d8 4000 	ldr.w	r4, [r8]
 800b2c4:	4627      	mov	r7, r4
 800b2c6:	2f00      	cmp	r7, #0
 800b2c8:	d143      	bne.n	800b352 <_malloc_r+0xd6>
 800b2ca:	2c00      	cmp	r4, #0
 800b2cc:	d04b      	beq.n	800b366 <_malloc_r+0xea>
 800b2ce:	6823      	ldr	r3, [r4, #0]
 800b2d0:	4639      	mov	r1, r7
 800b2d2:	4630      	mov	r0, r6
 800b2d4:	eb04 0903 	add.w	r9, r4, r3
 800b2d8:	f001 f97c 	bl	800c5d4 <_sbrk_r>
 800b2dc:	4581      	cmp	r9, r0
 800b2de:	d142      	bne.n	800b366 <_malloc_r+0xea>
 800b2e0:	6821      	ldr	r1, [r4, #0]
 800b2e2:	4630      	mov	r0, r6
 800b2e4:	1a6d      	subs	r5, r5, r1
 800b2e6:	4629      	mov	r1, r5
 800b2e8:	f7ff ffa6 	bl	800b238 <sbrk_aligned>
 800b2ec:	3001      	adds	r0, #1
 800b2ee:	d03a      	beq.n	800b366 <_malloc_r+0xea>
 800b2f0:	6823      	ldr	r3, [r4, #0]
 800b2f2:	442b      	add	r3, r5
 800b2f4:	6023      	str	r3, [r4, #0]
 800b2f6:	f8d8 3000 	ldr.w	r3, [r8]
 800b2fa:	685a      	ldr	r2, [r3, #4]
 800b2fc:	bb62      	cbnz	r2, 800b358 <_malloc_r+0xdc>
 800b2fe:	f8c8 7000 	str.w	r7, [r8]
 800b302:	e00f      	b.n	800b324 <_malloc_r+0xa8>
 800b304:	6822      	ldr	r2, [r4, #0]
 800b306:	1b52      	subs	r2, r2, r5
 800b308:	d420      	bmi.n	800b34c <_malloc_r+0xd0>
 800b30a:	2a0b      	cmp	r2, #11
 800b30c:	d917      	bls.n	800b33e <_malloc_r+0xc2>
 800b30e:	1961      	adds	r1, r4, r5
 800b310:	42a3      	cmp	r3, r4
 800b312:	6025      	str	r5, [r4, #0]
 800b314:	bf18      	it	ne
 800b316:	6059      	strne	r1, [r3, #4]
 800b318:	6863      	ldr	r3, [r4, #4]
 800b31a:	bf08      	it	eq
 800b31c:	f8c8 1000 	streq.w	r1, [r8]
 800b320:	5162      	str	r2, [r4, r5]
 800b322:	604b      	str	r3, [r1, #4]
 800b324:	4630      	mov	r0, r6
 800b326:	f000 f82f 	bl	800b388 <__malloc_unlock>
 800b32a:	f104 000b 	add.w	r0, r4, #11
 800b32e:	1d23      	adds	r3, r4, #4
 800b330:	f020 0007 	bic.w	r0, r0, #7
 800b334:	1ac2      	subs	r2, r0, r3
 800b336:	bf1c      	itt	ne
 800b338:	1a1b      	subne	r3, r3, r0
 800b33a:	50a3      	strne	r3, [r4, r2]
 800b33c:	e7af      	b.n	800b29e <_malloc_r+0x22>
 800b33e:	6862      	ldr	r2, [r4, #4]
 800b340:	42a3      	cmp	r3, r4
 800b342:	bf0c      	ite	eq
 800b344:	f8c8 2000 	streq.w	r2, [r8]
 800b348:	605a      	strne	r2, [r3, #4]
 800b34a:	e7eb      	b.n	800b324 <_malloc_r+0xa8>
 800b34c:	4623      	mov	r3, r4
 800b34e:	6864      	ldr	r4, [r4, #4]
 800b350:	e7ae      	b.n	800b2b0 <_malloc_r+0x34>
 800b352:	463c      	mov	r4, r7
 800b354:	687f      	ldr	r7, [r7, #4]
 800b356:	e7b6      	b.n	800b2c6 <_malloc_r+0x4a>
 800b358:	461a      	mov	r2, r3
 800b35a:	685b      	ldr	r3, [r3, #4]
 800b35c:	42a3      	cmp	r3, r4
 800b35e:	d1fb      	bne.n	800b358 <_malloc_r+0xdc>
 800b360:	2300      	movs	r3, #0
 800b362:	6053      	str	r3, [r2, #4]
 800b364:	e7de      	b.n	800b324 <_malloc_r+0xa8>
 800b366:	230c      	movs	r3, #12
 800b368:	4630      	mov	r0, r6
 800b36a:	6033      	str	r3, [r6, #0]
 800b36c:	f000 f80c 	bl	800b388 <__malloc_unlock>
 800b370:	e794      	b.n	800b29c <_malloc_r+0x20>
 800b372:	6005      	str	r5, [r0, #0]
 800b374:	e7d6      	b.n	800b324 <_malloc_r+0xa8>
 800b376:	bf00      	nop
 800b378:	20002acc 	.word	0x20002acc

0800b37c <__malloc_lock>:
 800b37c:	4801      	ldr	r0, [pc, #4]	@ (800b384 <__malloc_lock+0x8>)
 800b37e:	f7ff b88e 	b.w	800a49e <__retarget_lock_acquire_recursive>
 800b382:	bf00      	nop
 800b384:	20002ac4 	.word	0x20002ac4

0800b388 <__malloc_unlock>:
 800b388:	4801      	ldr	r0, [pc, #4]	@ (800b390 <__malloc_unlock+0x8>)
 800b38a:	f7ff b889 	b.w	800a4a0 <__retarget_lock_release_recursive>
 800b38e:	bf00      	nop
 800b390:	20002ac4 	.word	0x20002ac4

0800b394 <_Balloc>:
 800b394:	b570      	push	{r4, r5, r6, lr}
 800b396:	69c6      	ldr	r6, [r0, #28]
 800b398:	4604      	mov	r4, r0
 800b39a:	460d      	mov	r5, r1
 800b39c:	b976      	cbnz	r6, 800b3bc <_Balloc+0x28>
 800b39e:	2010      	movs	r0, #16
 800b3a0:	f7ff ff42 	bl	800b228 <malloc>
 800b3a4:	4602      	mov	r2, r0
 800b3a6:	61e0      	str	r0, [r4, #28]
 800b3a8:	b920      	cbnz	r0, 800b3b4 <_Balloc+0x20>
 800b3aa:	216b      	movs	r1, #107	@ 0x6b
 800b3ac:	4b17      	ldr	r3, [pc, #92]	@ (800b40c <_Balloc+0x78>)
 800b3ae:	4818      	ldr	r0, [pc, #96]	@ (800b410 <_Balloc+0x7c>)
 800b3b0:	f001 f920 	bl	800c5f4 <__assert_func>
 800b3b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b3b8:	6006      	str	r6, [r0, #0]
 800b3ba:	60c6      	str	r6, [r0, #12]
 800b3bc:	69e6      	ldr	r6, [r4, #28]
 800b3be:	68f3      	ldr	r3, [r6, #12]
 800b3c0:	b183      	cbz	r3, 800b3e4 <_Balloc+0x50>
 800b3c2:	69e3      	ldr	r3, [r4, #28]
 800b3c4:	68db      	ldr	r3, [r3, #12]
 800b3c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b3ca:	b9b8      	cbnz	r0, 800b3fc <_Balloc+0x68>
 800b3cc:	2101      	movs	r1, #1
 800b3ce:	fa01 f605 	lsl.w	r6, r1, r5
 800b3d2:	1d72      	adds	r2, r6, #5
 800b3d4:	4620      	mov	r0, r4
 800b3d6:	0092      	lsls	r2, r2, #2
 800b3d8:	f001 f92a 	bl	800c630 <_calloc_r>
 800b3dc:	b160      	cbz	r0, 800b3f8 <_Balloc+0x64>
 800b3de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b3e2:	e00e      	b.n	800b402 <_Balloc+0x6e>
 800b3e4:	2221      	movs	r2, #33	@ 0x21
 800b3e6:	2104      	movs	r1, #4
 800b3e8:	4620      	mov	r0, r4
 800b3ea:	f001 f921 	bl	800c630 <_calloc_r>
 800b3ee:	69e3      	ldr	r3, [r4, #28]
 800b3f0:	60f0      	str	r0, [r6, #12]
 800b3f2:	68db      	ldr	r3, [r3, #12]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d1e4      	bne.n	800b3c2 <_Balloc+0x2e>
 800b3f8:	2000      	movs	r0, #0
 800b3fa:	bd70      	pop	{r4, r5, r6, pc}
 800b3fc:	6802      	ldr	r2, [r0, #0]
 800b3fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b402:	2300      	movs	r3, #0
 800b404:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b408:	e7f7      	b.n	800b3fa <_Balloc+0x66>
 800b40a:	bf00      	nop
 800b40c:	0800d115 	.word	0x0800d115
 800b410:	0800d195 	.word	0x0800d195

0800b414 <_Bfree>:
 800b414:	b570      	push	{r4, r5, r6, lr}
 800b416:	69c6      	ldr	r6, [r0, #28]
 800b418:	4605      	mov	r5, r0
 800b41a:	460c      	mov	r4, r1
 800b41c:	b976      	cbnz	r6, 800b43c <_Bfree+0x28>
 800b41e:	2010      	movs	r0, #16
 800b420:	f7ff ff02 	bl	800b228 <malloc>
 800b424:	4602      	mov	r2, r0
 800b426:	61e8      	str	r0, [r5, #28]
 800b428:	b920      	cbnz	r0, 800b434 <_Bfree+0x20>
 800b42a:	218f      	movs	r1, #143	@ 0x8f
 800b42c:	4b08      	ldr	r3, [pc, #32]	@ (800b450 <_Bfree+0x3c>)
 800b42e:	4809      	ldr	r0, [pc, #36]	@ (800b454 <_Bfree+0x40>)
 800b430:	f001 f8e0 	bl	800c5f4 <__assert_func>
 800b434:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b438:	6006      	str	r6, [r0, #0]
 800b43a:	60c6      	str	r6, [r0, #12]
 800b43c:	b13c      	cbz	r4, 800b44e <_Bfree+0x3a>
 800b43e:	69eb      	ldr	r3, [r5, #28]
 800b440:	6862      	ldr	r2, [r4, #4]
 800b442:	68db      	ldr	r3, [r3, #12]
 800b444:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b448:	6021      	str	r1, [r4, #0]
 800b44a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b44e:	bd70      	pop	{r4, r5, r6, pc}
 800b450:	0800d115 	.word	0x0800d115
 800b454:	0800d195 	.word	0x0800d195

0800b458 <__multadd>:
 800b458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b45c:	4607      	mov	r7, r0
 800b45e:	460c      	mov	r4, r1
 800b460:	461e      	mov	r6, r3
 800b462:	2000      	movs	r0, #0
 800b464:	690d      	ldr	r5, [r1, #16]
 800b466:	f101 0c14 	add.w	ip, r1, #20
 800b46a:	f8dc 3000 	ldr.w	r3, [ip]
 800b46e:	3001      	adds	r0, #1
 800b470:	b299      	uxth	r1, r3
 800b472:	fb02 6101 	mla	r1, r2, r1, r6
 800b476:	0c1e      	lsrs	r6, r3, #16
 800b478:	0c0b      	lsrs	r3, r1, #16
 800b47a:	fb02 3306 	mla	r3, r2, r6, r3
 800b47e:	b289      	uxth	r1, r1
 800b480:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b484:	4285      	cmp	r5, r0
 800b486:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b48a:	f84c 1b04 	str.w	r1, [ip], #4
 800b48e:	dcec      	bgt.n	800b46a <__multadd+0x12>
 800b490:	b30e      	cbz	r6, 800b4d6 <__multadd+0x7e>
 800b492:	68a3      	ldr	r3, [r4, #8]
 800b494:	42ab      	cmp	r3, r5
 800b496:	dc19      	bgt.n	800b4cc <__multadd+0x74>
 800b498:	6861      	ldr	r1, [r4, #4]
 800b49a:	4638      	mov	r0, r7
 800b49c:	3101      	adds	r1, #1
 800b49e:	f7ff ff79 	bl	800b394 <_Balloc>
 800b4a2:	4680      	mov	r8, r0
 800b4a4:	b928      	cbnz	r0, 800b4b2 <__multadd+0x5a>
 800b4a6:	4602      	mov	r2, r0
 800b4a8:	21ba      	movs	r1, #186	@ 0xba
 800b4aa:	4b0c      	ldr	r3, [pc, #48]	@ (800b4dc <__multadd+0x84>)
 800b4ac:	480c      	ldr	r0, [pc, #48]	@ (800b4e0 <__multadd+0x88>)
 800b4ae:	f001 f8a1 	bl	800c5f4 <__assert_func>
 800b4b2:	6922      	ldr	r2, [r4, #16]
 800b4b4:	f104 010c 	add.w	r1, r4, #12
 800b4b8:	3202      	adds	r2, #2
 800b4ba:	0092      	lsls	r2, r2, #2
 800b4bc:	300c      	adds	r0, #12
 800b4be:	f7fe fffe 	bl	800a4be <memcpy>
 800b4c2:	4621      	mov	r1, r4
 800b4c4:	4638      	mov	r0, r7
 800b4c6:	f7ff ffa5 	bl	800b414 <_Bfree>
 800b4ca:	4644      	mov	r4, r8
 800b4cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b4d0:	3501      	adds	r5, #1
 800b4d2:	615e      	str	r6, [r3, #20]
 800b4d4:	6125      	str	r5, [r4, #16]
 800b4d6:	4620      	mov	r0, r4
 800b4d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4dc:	0800d184 	.word	0x0800d184
 800b4e0:	0800d195 	.word	0x0800d195

0800b4e4 <__hi0bits>:
 800b4e4:	4603      	mov	r3, r0
 800b4e6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b4ea:	bf3a      	itte	cc
 800b4ec:	0403      	lslcc	r3, r0, #16
 800b4ee:	2010      	movcc	r0, #16
 800b4f0:	2000      	movcs	r0, #0
 800b4f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b4f6:	bf3c      	itt	cc
 800b4f8:	021b      	lslcc	r3, r3, #8
 800b4fa:	3008      	addcc	r0, #8
 800b4fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b500:	bf3c      	itt	cc
 800b502:	011b      	lslcc	r3, r3, #4
 800b504:	3004      	addcc	r0, #4
 800b506:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b50a:	bf3c      	itt	cc
 800b50c:	009b      	lslcc	r3, r3, #2
 800b50e:	3002      	addcc	r0, #2
 800b510:	2b00      	cmp	r3, #0
 800b512:	db05      	blt.n	800b520 <__hi0bits+0x3c>
 800b514:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b518:	f100 0001 	add.w	r0, r0, #1
 800b51c:	bf08      	it	eq
 800b51e:	2020      	moveq	r0, #32
 800b520:	4770      	bx	lr

0800b522 <__lo0bits>:
 800b522:	6803      	ldr	r3, [r0, #0]
 800b524:	4602      	mov	r2, r0
 800b526:	f013 0007 	ands.w	r0, r3, #7
 800b52a:	d00b      	beq.n	800b544 <__lo0bits+0x22>
 800b52c:	07d9      	lsls	r1, r3, #31
 800b52e:	d421      	bmi.n	800b574 <__lo0bits+0x52>
 800b530:	0798      	lsls	r0, r3, #30
 800b532:	bf49      	itett	mi
 800b534:	085b      	lsrmi	r3, r3, #1
 800b536:	089b      	lsrpl	r3, r3, #2
 800b538:	2001      	movmi	r0, #1
 800b53a:	6013      	strmi	r3, [r2, #0]
 800b53c:	bf5c      	itt	pl
 800b53e:	2002      	movpl	r0, #2
 800b540:	6013      	strpl	r3, [r2, #0]
 800b542:	4770      	bx	lr
 800b544:	b299      	uxth	r1, r3
 800b546:	b909      	cbnz	r1, 800b54c <__lo0bits+0x2a>
 800b548:	2010      	movs	r0, #16
 800b54a:	0c1b      	lsrs	r3, r3, #16
 800b54c:	b2d9      	uxtb	r1, r3
 800b54e:	b909      	cbnz	r1, 800b554 <__lo0bits+0x32>
 800b550:	3008      	adds	r0, #8
 800b552:	0a1b      	lsrs	r3, r3, #8
 800b554:	0719      	lsls	r1, r3, #28
 800b556:	bf04      	itt	eq
 800b558:	091b      	lsreq	r3, r3, #4
 800b55a:	3004      	addeq	r0, #4
 800b55c:	0799      	lsls	r1, r3, #30
 800b55e:	bf04      	itt	eq
 800b560:	089b      	lsreq	r3, r3, #2
 800b562:	3002      	addeq	r0, #2
 800b564:	07d9      	lsls	r1, r3, #31
 800b566:	d403      	bmi.n	800b570 <__lo0bits+0x4e>
 800b568:	085b      	lsrs	r3, r3, #1
 800b56a:	f100 0001 	add.w	r0, r0, #1
 800b56e:	d003      	beq.n	800b578 <__lo0bits+0x56>
 800b570:	6013      	str	r3, [r2, #0]
 800b572:	4770      	bx	lr
 800b574:	2000      	movs	r0, #0
 800b576:	4770      	bx	lr
 800b578:	2020      	movs	r0, #32
 800b57a:	4770      	bx	lr

0800b57c <__i2b>:
 800b57c:	b510      	push	{r4, lr}
 800b57e:	460c      	mov	r4, r1
 800b580:	2101      	movs	r1, #1
 800b582:	f7ff ff07 	bl	800b394 <_Balloc>
 800b586:	4602      	mov	r2, r0
 800b588:	b928      	cbnz	r0, 800b596 <__i2b+0x1a>
 800b58a:	f240 1145 	movw	r1, #325	@ 0x145
 800b58e:	4b04      	ldr	r3, [pc, #16]	@ (800b5a0 <__i2b+0x24>)
 800b590:	4804      	ldr	r0, [pc, #16]	@ (800b5a4 <__i2b+0x28>)
 800b592:	f001 f82f 	bl	800c5f4 <__assert_func>
 800b596:	2301      	movs	r3, #1
 800b598:	6144      	str	r4, [r0, #20]
 800b59a:	6103      	str	r3, [r0, #16]
 800b59c:	bd10      	pop	{r4, pc}
 800b59e:	bf00      	nop
 800b5a0:	0800d184 	.word	0x0800d184
 800b5a4:	0800d195 	.word	0x0800d195

0800b5a8 <__multiply>:
 800b5a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5ac:	4617      	mov	r7, r2
 800b5ae:	690a      	ldr	r2, [r1, #16]
 800b5b0:	693b      	ldr	r3, [r7, #16]
 800b5b2:	4689      	mov	r9, r1
 800b5b4:	429a      	cmp	r2, r3
 800b5b6:	bfa2      	ittt	ge
 800b5b8:	463b      	movge	r3, r7
 800b5ba:	460f      	movge	r7, r1
 800b5bc:	4699      	movge	r9, r3
 800b5be:	693d      	ldr	r5, [r7, #16]
 800b5c0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b5c4:	68bb      	ldr	r3, [r7, #8]
 800b5c6:	6879      	ldr	r1, [r7, #4]
 800b5c8:	eb05 060a 	add.w	r6, r5, sl
 800b5cc:	42b3      	cmp	r3, r6
 800b5ce:	b085      	sub	sp, #20
 800b5d0:	bfb8      	it	lt
 800b5d2:	3101      	addlt	r1, #1
 800b5d4:	f7ff fede 	bl	800b394 <_Balloc>
 800b5d8:	b930      	cbnz	r0, 800b5e8 <__multiply+0x40>
 800b5da:	4602      	mov	r2, r0
 800b5dc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b5e0:	4b40      	ldr	r3, [pc, #256]	@ (800b6e4 <__multiply+0x13c>)
 800b5e2:	4841      	ldr	r0, [pc, #260]	@ (800b6e8 <__multiply+0x140>)
 800b5e4:	f001 f806 	bl	800c5f4 <__assert_func>
 800b5e8:	f100 0414 	add.w	r4, r0, #20
 800b5ec:	4623      	mov	r3, r4
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800b5f4:	4573      	cmp	r3, lr
 800b5f6:	d320      	bcc.n	800b63a <__multiply+0x92>
 800b5f8:	f107 0814 	add.w	r8, r7, #20
 800b5fc:	f109 0114 	add.w	r1, r9, #20
 800b600:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800b604:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800b608:	9302      	str	r3, [sp, #8]
 800b60a:	1beb      	subs	r3, r5, r7
 800b60c:	3b15      	subs	r3, #21
 800b60e:	f023 0303 	bic.w	r3, r3, #3
 800b612:	3304      	adds	r3, #4
 800b614:	3715      	adds	r7, #21
 800b616:	42bd      	cmp	r5, r7
 800b618:	bf38      	it	cc
 800b61a:	2304      	movcc	r3, #4
 800b61c:	9301      	str	r3, [sp, #4]
 800b61e:	9b02      	ldr	r3, [sp, #8]
 800b620:	9103      	str	r1, [sp, #12]
 800b622:	428b      	cmp	r3, r1
 800b624:	d80c      	bhi.n	800b640 <__multiply+0x98>
 800b626:	2e00      	cmp	r6, #0
 800b628:	dd03      	ble.n	800b632 <__multiply+0x8a>
 800b62a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d055      	beq.n	800b6de <__multiply+0x136>
 800b632:	6106      	str	r6, [r0, #16]
 800b634:	b005      	add	sp, #20
 800b636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b63a:	f843 2b04 	str.w	r2, [r3], #4
 800b63e:	e7d9      	b.n	800b5f4 <__multiply+0x4c>
 800b640:	f8b1 a000 	ldrh.w	sl, [r1]
 800b644:	f1ba 0f00 	cmp.w	sl, #0
 800b648:	d01f      	beq.n	800b68a <__multiply+0xe2>
 800b64a:	46c4      	mov	ip, r8
 800b64c:	46a1      	mov	r9, r4
 800b64e:	2700      	movs	r7, #0
 800b650:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b654:	f8d9 3000 	ldr.w	r3, [r9]
 800b658:	fa1f fb82 	uxth.w	fp, r2
 800b65c:	b29b      	uxth	r3, r3
 800b65e:	fb0a 330b 	mla	r3, sl, fp, r3
 800b662:	443b      	add	r3, r7
 800b664:	f8d9 7000 	ldr.w	r7, [r9]
 800b668:	0c12      	lsrs	r2, r2, #16
 800b66a:	0c3f      	lsrs	r7, r7, #16
 800b66c:	fb0a 7202 	mla	r2, sl, r2, r7
 800b670:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800b674:	b29b      	uxth	r3, r3
 800b676:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b67a:	4565      	cmp	r5, ip
 800b67c:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800b680:	f849 3b04 	str.w	r3, [r9], #4
 800b684:	d8e4      	bhi.n	800b650 <__multiply+0xa8>
 800b686:	9b01      	ldr	r3, [sp, #4]
 800b688:	50e7      	str	r7, [r4, r3]
 800b68a:	9b03      	ldr	r3, [sp, #12]
 800b68c:	3104      	adds	r1, #4
 800b68e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b692:	f1b9 0f00 	cmp.w	r9, #0
 800b696:	d020      	beq.n	800b6da <__multiply+0x132>
 800b698:	4647      	mov	r7, r8
 800b69a:	46a4      	mov	ip, r4
 800b69c:	f04f 0a00 	mov.w	sl, #0
 800b6a0:	6823      	ldr	r3, [r4, #0]
 800b6a2:	f8b7 b000 	ldrh.w	fp, [r7]
 800b6a6:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800b6aa:	b29b      	uxth	r3, r3
 800b6ac:	fb09 220b 	mla	r2, r9, fp, r2
 800b6b0:	4452      	add	r2, sl
 800b6b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b6b6:	f84c 3b04 	str.w	r3, [ip], #4
 800b6ba:	f857 3b04 	ldr.w	r3, [r7], #4
 800b6be:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b6c2:	f8bc 3000 	ldrh.w	r3, [ip]
 800b6c6:	42bd      	cmp	r5, r7
 800b6c8:	fb09 330a 	mla	r3, r9, sl, r3
 800b6cc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800b6d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b6d4:	d8e5      	bhi.n	800b6a2 <__multiply+0xfa>
 800b6d6:	9a01      	ldr	r2, [sp, #4]
 800b6d8:	50a3      	str	r3, [r4, r2]
 800b6da:	3404      	adds	r4, #4
 800b6dc:	e79f      	b.n	800b61e <__multiply+0x76>
 800b6de:	3e01      	subs	r6, #1
 800b6e0:	e7a1      	b.n	800b626 <__multiply+0x7e>
 800b6e2:	bf00      	nop
 800b6e4:	0800d184 	.word	0x0800d184
 800b6e8:	0800d195 	.word	0x0800d195

0800b6ec <__pow5mult>:
 800b6ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6f0:	4615      	mov	r5, r2
 800b6f2:	f012 0203 	ands.w	r2, r2, #3
 800b6f6:	4607      	mov	r7, r0
 800b6f8:	460e      	mov	r6, r1
 800b6fa:	d007      	beq.n	800b70c <__pow5mult+0x20>
 800b6fc:	4c25      	ldr	r4, [pc, #148]	@ (800b794 <__pow5mult+0xa8>)
 800b6fe:	3a01      	subs	r2, #1
 800b700:	2300      	movs	r3, #0
 800b702:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b706:	f7ff fea7 	bl	800b458 <__multadd>
 800b70a:	4606      	mov	r6, r0
 800b70c:	10ad      	asrs	r5, r5, #2
 800b70e:	d03d      	beq.n	800b78c <__pow5mult+0xa0>
 800b710:	69fc      	ldr	r4, [r7, #28]
 800b712:	b97c      	cbnz	r4, 800b734 <__pow5mult+0x48>
 800b714:	2010      	movs	r0, #16
 800b716:	f7ff fd87 	bl	800b228 <malloc>
 800b71a:	4602      	mov	r2, r0
 800b71c:	61f8      	str	r0, [r7, #28]
 800b71e:	b928      	cbnz	r0, 800b72c <__pow5mult+0x40>
 800b720:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b724:	4b1c      	ldr	r3, [pc, #112]	@ (800b798 <__pow5mult+0xac>)
 800b726:	481d      	ldr	r0, [pc, #116]	@ (800b79c <__pow5mult+0xb0>)
 800b728:	f000 ff64 	bl	800c5f4 <__assert_func>
 800b72c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b730:	6004      	str	r4, [r0, #0]
 800b732:	60c4      	str	r4, [r0, #12]
 800b734:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b738:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b73c:	b94c      	cbnz	r4, 800b752 <__pow5mult+0x66>
 800b73e:	f240 2171 	movw	r1, #625	@ 0x271
 800b742:	4638      	mov	r0, r7
 800b744:	f7ff ff1a 	bl	800b57c <__i2b>
 800b748:	2300      	movs	r3, #0
 800b74a:	4604      	mov	r4, r0
 800b74c:	f8c8 0008 	str.w	r0, [r8, #8]
 800b750:	6003      	str	r3, [r0, #0]
 800b752:	f04f 0900 	mov.w	r9, #0
 800b756:	07eb      	lsls	r3, r5, #31
 800b758:	d50a      	bpl.n	800b770 <__pow5mult+0x84>
 800b75a:	4631      	mov	r1, r6
 800b75c:	4622      	mov	r2, r4
 800b75e:	4638      	mov	r0, r7
 800b760:	f7ff ff22 	bl	800b5a8 <__multiply>
 800b764:	4680      	mov	r8, r0
 800b766:	4631      	mov	r1, r6
 800b768:	4638      	mov	r0, r7
 800b76a:	f7ff fe53 	bl	800b414 <_Bfree>
 800b76e:	4646      	mov	r6, r8
 800b770:	106d      	asrs	r5, r5, #1
 800b772:	d00b      	beq.n	800b78c <__pow5mult+0xa0>
 800b774:	6820      	ldr	r0, [r4, #0]
 800b776:	b938      	cbnz	r0, 800b788 <__pow5mult+0x9c>
 800b778:	4622      	mov	r2, r4
 800b77a:	4621      	mov	r1, r4
 800b77c:	4638      	mov	r0, r7
 800b77e:	f7ff ff13 	bl	800b5a8 <__multiply>
 800b782:	6020      	str	r0, [r4, #0]
 800b784:	f8c0 9000 	str.w	r9, [r0]
 800b788:	4604      	mov	r4, r0
 800b78a:	e7e4      	b.n	800b756 <__pow5mult+0x6a>
 800b78c:	4630      	mov	r0, r6
 800b78e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b792:	bf00      	nop
 800b794:	0800d260 	.word	0x0800d260
 800b798:	0800d115 	.word	0x0800d115
 800b79c:	0800d195 	.word	0x0800d195

0800b7a0 <__lshift>:
 800b7a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7a4:	460c      	mov	r4, r1
 800b7a6:	4607      	mov	r7, r0
 800b7a8:	4691      	mov	r9, r2
 800b7aa:	6923      	ldr	r3, [r4, #16]
 800b7ac:	6849      	ldr	r1, [r1, #4]
 800b7ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b7b2:	68a3      	ldr	r3, [r4, #8]
 800b7b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b7b8:	f108 0601 	add.w	r6, r8, #1
 800b7bc:	42b3      	cmp	r3, r6
 800b7be:	db0b      	blt.n	800b7d8 <__lshift+0x38>
 800b7c0:	4638      	mov	r0, r7
 800b7c2:	f7ff fde7 	bl	800b394 <_Balloc>
 800b7c6:	4605      	mov	r5, r0
 800b7c8:	b948      	cbnz	r0, 800b7de <__lshift+0x3e>
 800b7ca:	4602      	mov	r2, r0
 800b7cc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b7d0:	4b27      	ldr	r3, [pc, #156]	@ (800b870 <__lshift+0xd0>)
 800b7d2:	4828      	ldr	r0, [pc, #160]	@ (800b874 <__lshift+0xd4>)
 800b7d4:	f000 ff0e 	bl	800c5f4 <__assert_func>
 800b7d8:	3101      	adds	r1, #1
 800b7da:	005b      	lsls	r3, r3, #1
 800b7dc:	e7ee      	b.n	800b7bc <__lshift+0x1c>
 800b7de:	2300      	movs	r3, #0
 800b7e0:	f100 0114 	add.w	r1, r0, #20
 800b7e4:	f100 0210 	add.w	r2, r0, #16
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	4553      	cmp	r3, sl
 800b7ec:	db33      	blt.n	800b856 <__lshift+0xb6>
 800b7ee:	6920      	ldr	r0, [r4, #16]
 800b7f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b7f4:	f104 0314 	add.w	r3, r4, #20
 800b7f8:	f019 091f 	ands.w	r9, r9, #31
 800b7fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b800:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b804:	d02b      	beq.n	800b85e <__lshift+0xbe>
 800b806:	468a      	mov	sl, r1
 800b808:	2200      	movs	r2, #0
 800b80a:	f1c9 0e20 	rsb	lr, r9, #32
 800b80e:	6818      	ldr	r0, [r3, #0]
 800b810:	fa00 f009 	lsl.w	r0, r0, r9
 800b814:	4310      	orrs	r0, r2
 800b816:	f84a 0b04 	str.w	r0, [sl], #4
 800b81a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b81e:	459c      	cmp	ip, r3
 800b820:	fa22 f20e 	lsr.w	r2, r2, lr
 800b824:	d8f3      	bhi.n	800b80e <__lshift+0x6e>
 800b826:	ebac 0304 	sub.w	r3, ip, r4
 800b82a:	3b15      	subs	r3, #21
 800b82c:	f023 0303 	bic.w	r3, r3, #3
 800b830:	3304      	adds	r3, #4
 800b832:	f104 0015 	add.w	r0, r4, #21
 800b836:	4560      	cmp	r0, ip
 800b838:	bf88      	it	hi
 800b83a:	2304      	movhi	r3, #4
 800b83c:	50ca      	str	r2, [r1, r3]
 800b83e:	b10a      	cbz	r2, 800b844 <__lshift+0xa4>
 800b840:	f108 0602 	add.w	r6, r8, #2
 800b844:	3e01      	subs	r6, #1
 800b846:	4638      	mov	r0, r7
 800b848:	4621      	mov	r1, r4
 800b84a:	612e      	str	r6, [r5, #16]
 800b84c:	f7ff fde2 	bl	800b414 <_Bfree>
 800b850:	4628      	mov	r0, r5
 800b852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b856:	f842 0f04 	str.w	r0, [r2, #4]!
 800b85a:	3301      	adds	r3, #1
 800b85c:	e7c5      	b.n	800b7ea <__lshift+0x4a>
 800b85e:	3904      	subs	r1, #4
 800b860:	f853 2b04 	ldr.w	r2, [r3], #4
 800b864:	459c      	cmp	ip, r3
 800b866:	f841 2f04 	str.w	r2, [r1, #4]!
 800b86a:	d8f9      	bhi.n	800b860 <__lshift+0xc0>
 800b86c:	e7ea      	b.n	800b844 <__lshift+0xa4>
 800b86e:	bf00      	nop
 800b870:	0800d184 	.word	0x0800d184
 800b874:	0800d195 	.word	0x0800d195

0800b878 <__mcmp>:
 800b878:	4603      	mov	r3, r0
 800b87a:	690a      	ldr	r2, [r1, #16]
 800b87c:	6900      	ldr	r0, [r0, #16]
 800b87e:	b530      	push	{r4, r5, lr}
 800b880:	1a80      	subs	r0, r0, r2
 800b882:	d10e      	bne.n	800b8a2 <__mcmp+0x2a>
 800b884:	3314      	adds	r3, #20
 800b886:	3114      	adds	r1, #20
 800b888:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b88c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b890:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b894:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b898:	4295      	cmp	r5, r2
 800b89a:	d003      	beq.n	800b8a4 <__mcmp+0x2c>
 800b89c:	d205      	bcs.n	800b8aa <__mcmp+0x32>
 800b89e:	f04f 30ff 	mov.w	r0, #4294967295
 800b8a2:	bd30      	pop	{r4, r5, pc}
 800b8a4:	42a3      	cmp	r3, r4
 800b8a6:	d3f3      	bcc.n	800b890 <__mcmp+0x18>
 800b8a8:	e7fb      	b.n	800b8a2 <__mcmp+0x2a>
 800b8aa:	2001      	movs	r0, #1
 800b8ac:	e7f9      	b.n	800b8a2 <__mcmp+0x2a>
	...

0800b8b0 <__mdiff>:
 800b8b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8b4:	4689      	mov	r9, r1
 800b8b6:	4606      	mov	r6, r0
 800b8b8:	4611      	mov	r1, r2
 800b8ba:	4648      	mov	r0, r9
 800b8bc:	4614      	mov	r4, r2
 800b8be:	f7ff ffdb 	bl	800b878 <__mcmp>
 800b8c2:	1e05      	subs	r5, r0, #0
 800b8c4:	d112      	bne.n	800b8ec <__mdiff+0x3c>
 800b8c6:	4629      	mov	r1, r5
 800b8c8:	4630      	mov	r0, r6
 800b8ca:	f7ff fd63 	bl	800b394 <_Balloc>
 800b8ce:	4602      	mov	r2, r0
 800b8d0:	b928      	cbnz	r0, 800b8de <__mdiff+0x2e>
 800b8d2:	f240 2137 	movw	r1, #567	@ 0x237
 800b8d6:	4b3e      	ldr	r3, [pc, #248]	@ (800b9d0 <__mdiff+0x120>)
 800b8d8:	483e      	ldr	r0, [pc, #248]	@ (800b9d4 <__mdiff+0x124>)
 800b8da:	f000 fe8b 	bl	800c5f4 <__assert_func>
 800b8de:	2301      	movs	r3, #1
 800b8e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b8e4:	4610      	mov	r0, r2
 800b8e6:	b003      	add	sp, #12
 800b8e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8ec:	bfbc      	itt	lt
 800b8ee:	464b      	movlt	r3, r9
 800b8f0:	46a1      	movlt	r9, r4
 800b8f2:	4630      	mov	r0, r6
 800b8f4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b8f8:	bfba      	itte	lt
 800b8fa:	461c      	movlt	r4, r3
 800b8fc:	2501      	movlt	r5, #1
 800b8fe:	2500      	movge	r5, #0
 800b900:	f7ff fd48 	bl	800b394 <_Balloc>
 800b904:	4602      	mov	r2, r0
 800b906:	b918      	cbnz	r0, 800b910 <__mdiff+0x60>
 800b908:	f240 2145 	movw	r1, #581	@ 0x245
 800b90c:	4b30      	ldr	r3, [pc, #192]	@ (800b9d0 <__mdiff+0x120>)
 800b90e:	e7e3      	b.n	800b8d8 <__mdiff+0x28>
 800b910:	f100 0b14 	add.w	fp, r0, #20
 800b914:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b918:	f109 0310 	add.w	r3, r9, #16
 800b91c:	60c5      	str	r5, [r0, #12]
 800b91e:	f04f 0c00 	mov.w	ip, #0
 800b922:	f109 0514 	add.w	r5, r9, #20
 800b926:	46d9      	mov	r9, fp
 800b928:	6926      	ldr	r6, [r4, #16]
 800b92a:	f104 0e14 	add.w	lr, r4, #20
 800b92e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b932:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b936:	9301      	str	r3, [sp, #4]
 800b938:	9b01      	ldr	r3, [sp, #4]
 800b93a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b93e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b942:	b281      	uxth	r1, r0
 800b944:	9301      	str	r3, [sp, #4]
 800b946:	fa1f f38a 	uxth.w	r3, sl
 800b94a:	1a5b      	subs	r3, r3, r1
 800b94c:	0c00      	lsrs	r0, r0, #16
 800b94e:	4463      	add	r3, ip
 800b950:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b954:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b958:	b29b      	uxth	r3, r3
 800b95a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b95e:	4576      	cmp	r6, lr
 800b960:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b964:	f849 3b04 	str.w	r3, [r9], #4
 800b968:	d8e6      	bhi.n	800b938 <__mdiff+0x88>
 800b96a:	1b33      	subs	r3, r6, r4
 800b96c:	3b15      	subs	r3, #21
 800b96e:	f023 0303 	bic.w	r3, r3, #3
 800b972:	3415      	adds	r4, #21
 800b974:	3304      	adds	r3, #4
 800b976:	42a6      	cmp	r6, r4
 800b978:	bf38      	it	cc
 800b97a:	2304      	movcc	r3, #4
 800b97c:	441d      	add	r5, r3
 800b97e:	445b      	add	r3, fp
 800b980:	461e      	mov	r6, r3
 800b982:	462c      	mov	r4, r5
 800b984:	4544      	cmp	r4, r8
 800b986:	d30e      	bcc.n	800b9a6 <__mdiff+0xf6>
 800b988:	f108 0103 	add.w	r1, r8, #3
 800b98c:	1b49      	subs	r1, r1, r5
 800b98e:	f021 0103 	bic.w	r1, r1, #3
 800b992:	3d03      	subs	r5, #3
 800b994:	45a8      	cmp	r8, r5
 800b996:	bf38      	it	cc
 800b998:	2100      	movcc	r1, #0
 800b99a:	440b      	add	r3, r1
 800b99c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b9a0:	b199      	cbz	r1, 800b9ca <__mdiff+0x11a>
 800b9a2:	6117      	str	r7, [r2, #16]
 800b9a4:	e79e      	b.n	800b8e4 <__mdiff+0x34>
 800b9a6:	46e6      	mov	lr, ip
 800b9a8:	f854 1b04 	ldr.w	r1, [r4], #4
 800b9ac:	fa1f fc81 	uxth.w	ip, r1
 800b9b0:	44f4      	add	ip, lr
 800b9b2:	0c08      	lsrs	r0, r1, #16
 800b9b4:	4471      	add	r1, lr
 800b9b6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b9ba:	b289      	uxth	r1, r1
 800b9bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b9c0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b9c4:	f846 1b04 	str.w	r1, [r6], #4
 800b9c8:	e7dc      	b.n	800b984 <__mdiff+0xd4>
 800b9ca:	3f01      	subs	r7, #1
 800b9cc:	e7e6      	b.n	800b99c <__mdiff+0xec>
 800b9ce:	bf00      	nop
 800b9d0:	0800d184 	.word	0x0800d184
 800b9d4:	0800d195 	.word	0x0800d195

0800b9d8 <__d2b>:
 800b9d8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800b9dc:	2101      	movs	r1, #1
 800b9de:	4690      	mov	r8, r2
 800b9e0:	4699      	mov	r9, r3
 800b9e2:	9e08      	ldr	r6, [sp, #32]
 800b9e4:	f7ff fcd6 	bl	800b394 <_Balloc>
 800b9e8:	4604      	mov	r4, r0
 800b9ea:	b930      	cbnz	r0, 800b9fa <__d2b+0x22>
 800b9ec:	4602      	mov	r2, r0
 800b9ee:	f240 310f 	movw	r1, #783	@ 0x30f
 800b9f2:	4b23      	ldr	r3, [pc, #140]	@ (800ba80 <__d2b+0xa8>)
 800b9f4:	4823      	ldr	r0, [pc, #140]	@ (800ba84 <__d2b+0xac>)
 800b9f6:	f000 fdfd 	bl	800c5f4 <__assert_func>
 800b9fa:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b9fe:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ba02:	b10d      	cbz	r5, 800ba08 <__d2b+0x30>
 800ba04:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ba08:	9301      	str	r3, [sp, #4]
 800ba0a:	f1b8 0300 	subs.w	r3, r8, #0
 800ba0e:	d024      	beq.n	800ba5a <__d2b+0x82>
 800ba10:	4668      	mov	r0, sp
 800ba12:	9300      	str	r3, [sp, #0]
 800ba14:	f7ff fd85 	bl	800b522 <__lo0bits>
 800ba18:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ba1c:	b1d8      	cbz	r0, 800ba56 <__d2b+0x7e>
 800ba1e:	f1c0 0320 	rsb	r3, r0, #32
 800ba22:	fa02 f303 	lsl.w	r3, r2, r3
 800ba26:	430b      	orrs	r3, r1
 800ba28:	40c2      	lsrs	r2, r0
 800ba2a:	6163      	str	r3, [r4, #20]
 800ba2c:	9201      	str	r2, [sp, #4]
 800ba2e:	9b01      	ldr	r3, [sp, #4]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	bf0c      	ite	eq
 800ba34:	2201      	moveq	r2, #1
 800ba36:	2202      	movne	r2, #2
 800ba38:	61a3      	str	r3, [r4, #24]
 800ba3a:	6122      	str	r2, [r4, #16]
 800ba3c:	b1ad      	cbz	r5, 800ba6a <__d2b+0x92>
 800ba3e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ba42:	4405      	add	r5, r0
 800ba44:	6035      	str	r5, [r6, #0]
 800ba46:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ba4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba4c:	6018      	str	r0, [r3, #0]
 800ba4e:	4620      	mov	r0, r4
 800ba50:	b002      	add	sp, #8
 800ba52:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800ba56:	6161      	str	r1, [r4, #20]
 800ba58:	e7e9      	b.n	800ba2e <__d2b+0x56>
 800ba5a:	a801      	add	r0, sp, #4
 800ba5c:	f7ff fd61 	bl	800b522 <__lo0bits>
 800ba60:	9b01      	ldr	r3, [sp, #4]
 800ba62:	2201      	movs	r2, #1
 800ba64:	6163      	str	r3, [r4, #20]
 800ba66:	3020      	adds	r0, #32
 800ba68:	e7e7      	b.n	800ba3a <__d2b+0x62>
 800ba6a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ba6e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ba72:	6030      	str	r0, [r6, #0]
 800ba74:	6918      	ldr	r0, [r3, #16]
 800ba76:	f7ff fd35 	bl	800b4e4 <__hi0bits>
 800ba7a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ba7e:	e7e4      	b.n	800ba4a <__d2b+0x72>
 800ba80:	0800d184 	.word	0x0800d184
 800ba84:	0800d195 	.word	0x0800d195

0800ba88 <__ssputs_r>:
 800ba88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba8c:	461f      	mov	r7, r3
 800ba8e:	688e      	ldr	r6, [r1, #8]
 800ba90:	4682      	mov	sl, r0
 800ba92:	42be      	cmp	r6, r7
 800ba94:	460c      	mov	r4, r1
 800ba96:	4690      	mov	r8, r2
 800ba98:	680b      	ldr	r3, [r1, #0]
 800ba9a:	d82d      	bhi.n	800baf8 <__ssputs_r+0x70>
 800ba9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800baa0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800baa4:	d026      	beq.n	800baf4 <__ssputs_r+0x6c>
 800baa6:	6965      	ldr	r5, [r4, #20]
 800baa8:	6909      	ldr	r1, [r1, #16]
 800baaa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800baae:	eba3 0901 	sub.w	r9, r3, r1
 800bab2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bab6:	1c7b      	adds	r3, r7, #1
 800bab8:	444b      	add	r3, r9
 800baba:	106d      	asrs	r5, r5, #1
 800babc:	429d      	cmp	r5, r3
 800babe:	bf38      	it	cc
 800bac0:	461d      	movcc	r5, r3
 800bac2:	0553      	lsls	r3, r2, #21
 800bac4:	d527      	bpl.n	800bb16 <__ssputs_r+0x8e>
 800bac6:	4629      	mov	r1, r5
 800bac8:	f7ff fbd8 	bl	800b27c <_malloc_r>
 800bacc:	4606      	mov	r6, r0
 800bace:	b360      	cbz	r0, 800bb2a <__ssputs_r+0xa2>
 800bad0:	464a      	mov	r2, r9
 800bad2:	6921      	ldr	r1, [r4, #16]
 800bad4:	f7fe fcf3 	bl	800a4be <memcpy>
 800bad8:	89a3      	ldrh	r3, [r4, #12]
 800bada:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bade:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bae2:	81a3      	strh	r3, [r4, #12]
 800bae4:	6126      	str	r6, [r4, #16]
 800bae6:	444e      	add	r6, r9
 800bae8:	6026      	str	r6, [r4, #0]
 800baea:	463e      	mov	r6, r7
 800baec:	6165      	str	r5, [r4, #20]
 800baee:	eba5 0509 	sub.w	r5, r5, r9
 800baf2:	60a5      	str	r5, [r4, #8]
 800baf4:	42be      	cmp	r6, r7
 800baf6:	d900      	bls.n	800bafa <__ssputs_r+0x72>
 800baf8:	463e      	mov	r6, r7
 800bafa:	4632      	mov	r2, r6
 800bafc:	4641      	mov	r1, r8
 800bafe:	6820      	ldr	r0, [r4, #0]
 800bb00:	f000 fd4d 	bl	800c59e <memmove>
 800bb04:	2000      	movs	r0, #0
 800bb06:	68a3      	ldr	r3, [r4, #8]
 800bb08:	1b9b      	subs	r3, r3, r6
 800bb0a:	60a3      	str	r3, [r4, #8]
 800bb0c:	6823      	ldr	r3, [r4, #0]
 800bb0e:	4433      	add	r3, r6
 800bb10:	6023      	str	r3, [r4, #0]
 800bb12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb16:	462a      	mov	r2, r5
 800bb18:	f000 fdb0 	bl	800c67c <_realloc_r>
 800bb1c:	4606      	mov	r6, r0
 800bb1e:	2800      	cmp	r0, #0
 800bb20:	d1e0      	bne.n	800bae4 <__ssputs_r+0x5c>
 800bb22:	4650      	mov	r0, sl
 800bb24:	6921      	ldr	r1, [r4, #16]
 800bb26:	f7ff fb37 	bl	800b198 <_free_r>
 800bb2a:	230c      	movs	r3, #12
 800bb2c:	f8ca 3000 	str.w	r3, [sl]
 800bb30:	89a3      	ldrh	r3, [r4, #12]
 800bb32:	f04f 30ff 	mov.w	r0, #4294967295
 800bb36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb3a:	81a3      	strh	r3, [r4, #12]
 800bb3c:	e7e9      	b.n	800bb12 <__ssputs_r+0x8a>
	...

0800bb40 <_svfiprintf_r>:
 800bb40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb44:	4698      	mov	r8, r3
 800bb46:	898b      	ldrh	r3, [r1, #12]
 800bb48:	4607      	mov	r7, r0
 800bb4a:	061b      	lsls	r3, r3, #24
 800bb4c:	460d      	mov	r5, r1
 800bb4e:	4614      	mov	r4, r2
 800bb50:	b09d      	sub	sp, #116	@ 0x74
 800bb52:	d510      	bpl.n	800bb76 <_svfiprintf_r+0x36>
 800bb54:	690b      	ldr	r3, [r1, #16]
 800bb56:	b973      	cbnz	r3, 800bb76 <_svfiprintf_r+0x36>
 800bb58:	2140      	movs	r1, #64	@ 0x40
 800bb5a:	f7ff fb8f 	bl	800b27c <_malloc_r>
 800bb5e:	6028      	str	r0, [r5, #0]
 800bb60:	6128      	str	r0, [r5, #16]
 800bb62:	b930      	cbnz	r0, 800bb72 <_svfiprintf_r+0x32>
 800bb64:	230c      	movs	r3, #12
 800bb66:	603b      	str	r3, [r7, #0]
 800bb68:	f04f 30ff 	mov.w	r0, #4294967295
 800bb6c:	b01d      	add	sp, #116	@ 0x74
 800bb6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb72:	2340      	movs	r3, #64	@ 0x40
 800bb74:	616b      	str	r3, [r5, #20]
 800bb76:	2300      	movs	r3, #0
 800bb78:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb7a:	2320      	movs	r3, #32
 800bb7c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bb80:	2330      	movs	r3, #48	@ 0x30
 800bb82:	f04f 0901 	mov.w	r9, #1
 800bb86:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb8a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800bd24 <_svfiprintf_r+0x1e4>
 800bb8e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bb92:	4623      	mov	r3, r4
 800bb94:	469a      	mov	sl, r3
 800bb96:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb9a:	b10a      	cbz	r2, 800bba0 <_svfiprintf_r+0x60>
 800bb9c:	2a25      	cmp	r2, #37	@ 0x25
 800bb9e:	d1f9      	bne.n	800bb94 <_svfiprintf_r+0x54>
 800bba0:	ebba 0b04 	subs.w	fp, sl, r4
 800bba4:	d00b      	beq.n	800bbbe <_svfiprintf_r+0x7e>
 800bba6:	465b      	mov	r3, fp
 800bba8:	4622      	mov	r2, r4
 800bbaa:	4629      	mov	r1, r5
 800bbac:	4638      	mov	r0, r7
 800bbae:	f7ff ff6b 	bl	800ba88 <__ssputs_r>
 800bbb2:	3001      	adds	r0, #1
 800bbb4:	f000 80a7 	beq.w	800bd06 <_svfiprintf_r+0x1c6>
 800bbb8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bbba:	445a      	add	r2, fp
 800bbbc:	9209      	str	r2, [sp, #36]	@ 0x24
 800bbbe:	f89a 3000 	ldrb.w	r3, [sl]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	f000 809f 	beq.w	800bd06 <_svfiprintf_r+0x1c6>
 800bbc8:	2300      	movs	r3, #0
 800bbca:	f04f 32ff 	mov.w	r2, #4294967295
 800bbce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bbd2:	f10a 0a01 	add.w	sl, sl, #1
 800bbd6:	9304      	str	r3, [sp, #16]
 800bbd8:	9307      	str	r3, [sp, #28]
 800bbda:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bbde:	931a      	str	r3, [sp, #104]	@ 0x68
 800bbe0:	4654      	mov	r4, sl
 800bbe2:	2205      	movs	r2, #5
 800bbe4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbe8:	484e      	ldr	r0, [pc, #312]	@ (800bd24 <_svfiprintf_r+0x1e4>)
 800bbea:	f7fe fc5a 	bl	800a4a2 <memchr>
 800bbee:	9a04      	ldr	r2, [sp, #16]
 800bbf0:	b9d8      	cbnz	r0, 800bc2a <_svfiprintf_r+0xea>
 800bbf2:	06d0      	lsls	r0, r2, #27
 800bbf4:	bf44      	itt	mi
 800bbf6:	2320      	movmi	r3, #32
 800bbf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bbfc:	0711      	lsls	r1, r2, #28
 800bbfe:	bf44      	itt	mi
 800bc00:	232b      	movmi	r3, #43	@ 0x2b
 800bc02:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bc06:	f89a 3000 	ldrb.w	r3, [sl]
 800bc0a:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc0c:	d015      	beq.n	800bc3a <_svfiprintf_r+0xfa>
 800bc0e:	4654      	mov	r4, sl
 800bc10:	2000      	movs	r0, #0
 800bc12:	f04f 0c0a 	mov.w	ip, #10
 800bc16:	9a07      	ldr	r2, [sp, #28]
 800bc18:	4621      	mov	r1, r4
 800bc1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc1e:	3b30      	subs	r3, #48	@ 0x30
 800bc20:	2b09      	cmp	r3, #9
 800bc22:	d94b      	bls.n	800bcbc <_svfiprintf_r+0x17c>
 800bc24:	b1b0      	cbz	r0, 800bc54 <_svfiprintf_r+0x114>
 800bc26:	9207      	str	r2, [sp, #28]
 800bc28:	e014      	b.n	800bc54 <_svfiprintf_r+0x114>
 800bc2a:	eba0 0308 	sub.w	r3, r0, r8
 800bc2e:	fa09 f303 	lsl.w	r3, r9, r3
 800bc32:	4313      	orrs	r3, r2
 800bc34:	46a2      	mov	sl, r4
 800bc36:	9304      	str	r3, [sp, #16]
 800bc38:	e7d2      	b.n	800bbe0 <_svfiprintf_r+0xa0>
 800bc3a:	9b03      	ldr	r3, [sp, #12]
 800bc3c:	1d19      	adds	r1, r3, #4
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	9103      	str	r1, [sp, #12]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	bfbb      	ittet	lt
 800bc46:	425b      	neglt	r3, r3
 800bc48:	f042 0202 	orrlt.w	r2, r2, #2
 800bc4c:	9307      	strge	r3, [sp, #28]
 800bc4e:	9307      	strlt	r3, [sp, #28]
 800bc50:	bfb8      	it	lt
 800bc52:	9204      	strlt	r2, [sp, #16]
 800bc54:	7823      	ldrb	r3, [r4, #0]
 800bc56:	2b2e      	cmp	r3, #46	@ 0x2e
 800bc58:	d10a      	bne.n	800bc70 <_svfiprintf_r+0x130>
 800bc5a:	7863      	ldrb	r3, [r4, #1]
 800bc5c:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc5e:	d132      	bne.n	800bcc6 <_svfiprintf_r+0x186>
 800bc60:	9b03      	ldr	r3, [sp, #12]
 800bc62:	3402      	adds	r4, #2
 800bc64:	1d1a      	adds	r2, r3, #4
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	9203      	str	r2, [sp, #12]
 800bc6a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bc6e:	9305      	str	r3, [sp, #20]
 800bc70:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800bd28 <_svfiprintf_r+0x1e8>
 800bc74:	2203      	movs	r2, #3
 800bc76:	4650      	mov	r0, sl
 800bc78:	7821      	ldrb	r1, [r4, #0]
 800bc7a:	f7fe fc12 	bl	800a4a2 <memchr>
 800bc7e:	b138      	cbz	r0, 800bc90 <_svfiprintf_r+0x150>
 800bc80:	2240      	movs	r2, #64	@ 0x40
 800bc82:	9b04      	ldr	r3, [sp, #16]
 800bc84:	eba0 000a 	sub.w	r0, r0, sl
 800bc88:	4082      	lsls	r2, r0
 800bc8a:	4313      	orrs	r3, r2
 800bc8c:	3401      	adds	r4, #1
 800bc8e:	9304      	str	r3, [sp, #16]
 800bc90:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc94:	2206      	movs	r2, #6
 800bc96:	4825      	ldr	r0, [pc, #148]	@ (800bd2c <_svfiprintf_r+0x1ec>)
 800bc98:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bc9c:	f7fe fc01 	bl	800a4a2 <memchr>
 800bca0:	2800      	cmp	r0, #0
 800bca2:	d036      	beq.n	800bd12 <_svfiprintf_r+0x1d2>
 800bca4:	4b22      	ldr	r3, [pc, #136]	@ (800bd30 <_svfiprintf_r+0x1f0>)
 800bca6:	bb1b      	cbnz	r3, 800bcf0 <_svfiprintf_r+0x1b0>
 800bca8:	9b03      	ldr	r3, [sp, #12]
 800bcaa:	3307      	adds	r3, #7
 800bcac:	f023 0307 	bic.w	r3, r3, #7
 800bcb0:	3308      	adds	r3, #8
 800bcb2:	9303      	str	r3, [sp, #12]
 800bcb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcb6:	4433      	add	r3, r6
 800bcb8:	9309      	str	r3, [sp, #36]	@ 0x24
 800bcba:	e76a      	b.n	800bb92 <_svfiprintf_r+0x52>
 800bcbc:	460c      	mov	r4, r1
 800bcbe:	2001      	movs	r0, #1
 800bcc0:	fb0c 3202 	mla	r2, ip, r2, r3
 800bcc4:	e7a8      	b.n	800bc18 <_svfiprintf_r+0xd8>
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	f04f 0c0a 	mov.w	ip, #10
 800bccc:	4619      	mov	r1, r3
 800bcce:	3401      	adds	r4, #1
 800bcd0:	9305      	str	r3, [sp, #20]
 800bcd2:	4620      	mov	r0, r4
 800bcd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bcd8:	3a30      	subs	r2, #48	@ 0x30
 800bcda:	2a09      	cmp	r2, #9
 800bcdc:	d903      	bls.n	800bce6 <_svfiprintf_r+0x1a6>
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d0c6      	beq.n	800bc70 <_svfiprintf_r+0x130>
 800bce2:	9105      	str	r1, [sp, #20]
 800bce4:	e7c4      	b.n	800bc70 <_svfiprintf_r+0x130>
 800bce6:	4604      	mov	r4, r0
 800bce8:	2301      	movs	r3, #1
 800bcea:	fb0c 2101 	mla	r1, ip, r1, r2
 800bcee:	e7f0      	b.n	800bcd2 <_svfiprintf_r+0x192>
 800bcf0:	ab03      	add	r3, sp, #12
 800bcf2:	9300      	str	r3, [sp, #0]
 800bcf4:	462a      	mov	r2, r5
 800bcf6:	4638      	mov	r0, r7
 800bcf8:	4b0e      	ldr	r3, [pc, #56]	@ (800bd34 <_svfiprintf_r+0x1f4>)
 800bcfa:	a904      	add	r1, sp, #16
 800bcfc:	f7fd fde2 	bl	80098c4 <_printf_float>
 800bd00:	1c42      	adds	r2, r0, #1
 800bd02:	4606      	mov	r6, r0
 800bd04:	d1d6      	bne.n	800bcb4 <_svfiprintf_r+0x174>
 800bd06:	89ab      	ldrh	r3, [r5, #12]
 800bd08:	065b      	lsls	r3, r3, #25
 800bd0a:	f53f af2d 	bmi.w	800bb68 <_svfiprintf_r+0x28>
 800bd0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bd10:	e72c      	b.n	800bb6c <_svfiprintf_r+0x2c>
 800bd12:	ab03      	add	r3, sp, #12
 800bd14:	9300      	str	r3, [sp, #0]
 800bd16:	462a      	mov	r2, r5
 800bd18:	4638      	mov	r0, r7
 800bd1a:	4b06      	ldr	r3, [pc, #24]	@ (800bd34 <_svfiprintf_r+0x1f4>)
 800bd1c:	a904      	add	r1, sp, #16
 800bd1e:	f7fe f86f 	bl	8009e00 <_printf_i>
 800bd22:	e7ed      	b.n	800bd00 <_svfiprintf_r+0x1c0>
 800bd24:	0800d1ee 	.word	0x0800d1ee
 800bd28:	0800d1f4 	.word	0x0800d1f4
 800bd2c:	0800d1f8 	.word	0x0800d1f8
 800bd30:	080098c5 	.word	0x080098c5
 800bd34:	0800ba89 	.word	0x0800ba89

0800bd38 <_sungetc_r>:
 800bd38:	b538      	push	{r3, r4, r5, lr}
 800bd3a:	1c4b      	adds	r3, r1, #1
 800bd3c:	4614      	mov	r4, r2
 800bd3e:	d103      	bne.n	800bd48 <_sungetc_r+0x10>
 800bd40:	f04f 35ff 	mov.w	r5, #4294967295
 800bd44:	4628      	mov	r0, r5
 800bd46:	bd38      	pop	{r3, r4, r5, pc}
 800bd48:	8993      	ldrh	r3, [r2, #12]
 800bd4a:	b2cd      	uxtb	r5, r1
 800bd4c:	f023 0320 	bic.w	r3, r3, #32
 800bd50:	8193      	strh	r3, [r2, #12]
 800bd52:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bd54:	6852      	ldr	r2, [r2, #4]
 800bd56:	b18b      	cbz	r3, 800bd7c <_sungetc_r+0x44>
 800bd58:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800bd5a:	4293      	cmp	r3, r2
 800bd5c:	dd08      	ble.n	800bd70 <_sungetc_r+0x38>
 800bd5e:	6823      	ldr	r3, [r4, #0]
 800bd60:	1e5a      	subs	r2, r3, #1
 800bd62:	6022      	str	r2, [r4, #0]
 800bd64:	f803 5c01 	strb.w	r5, [r3, #-1]
 800bd68:	6863      	ldr	r3, [r4, #4]
 800bd6a:	3301      	adds	r3, #1
 800bd6c:	6063      	str	r3, [r4, #4]
 800bd6e:	e7e9      	b.n	800bd44 <_sungetc_r+0xc>
 800bd70:	4621      	mov	r1, r4
 800bd72:	f000 fbdc 	bl	800c52e <__submore>
 800bd76:	2800      	cmp	r0, #0
 800bd78:	d0f1      	beq.n	800bd5e <_sungetc_r+0x26>
 800bd7a:	e7e1      	b.n	800bd40 <_sungetc_r+0x8>
 800bd7c:	6921      	ldr	r1, [r4, #16]
 800bd7e:	6823      	ldr	r3, [r4, #0]
 800bd80:	b151      	cbz	r1, 800bd98 <_sungetc_r+0x60>
 800bd82:	4299      	cmp	r1, r3
 800bd84:	d208      	bcs.n	800bd98 <_sungetc_r+0x60>
 800bd86:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800bd8a:	42a9      	cmp	r1, r5
 800bd8c:	d104      	bne.n	800bd98 <_sungetc_r+0x60>
 800bd8e:	3b01      	subs	r3, #1
 800bd90:	3201      	adds	r2, #1
 800bd92:	6023      	str	r3, [r4, #0]
 800bd94:	6062      	str	r2, [r4, #4]
 800bd96:	e7d5      	b.n	800bd44 <_sungetc_r+0xc>
 800bd98:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 800bd9c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bda0:	6363      	str	r3, [r4, #52]	@ 0x34
 800bda2:	2303      	movs	r3, #3
 800bda4:	63a3      	str	r3, [r4, #56]	@ 0x38
 800bda6:	4623      	mov	r3, r4
 800bda8:	f803 5f46 	strb.w	r5, [r3, #70]!
 800bdac:	6023      	str	r3, [r4, #0]
 800bdae:	2301      	movs	r3, #1
 800bdb0:	e7dc      	b.n	800bd6c <_sungetc_r+0x34>

0800bdb2 <__ssrefill_r>:
 800bdb2:	b510      	push	{r4, lr}
 800bdb4:	460c      	mov	r4, r1
 800bdb6:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800bdb8:	b169      	cbz	r1, 800bdd6 <__ssrefill_r+0x24>
 800bdba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bdbe:	4299      	cmp	r1, r3
 800bdc0:	d001      	beq.n	800bdc6 <__ssrefill_r+0x14>
 800bdc2:	f7ff f9e9 	bl	800b198 <_free_r>
 800bdc6:	2000      	movs	r0, #0
 800bdc8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bdca:	6360      	str	r0, [r4, #52]	@ 0x34
 800bdcc:	6063      	str	r3, [r4, #4]
 800bdce:	b113      	cbz	r3, 800bdd6 <__ssrefill_r+0x24>
 800bdd0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800bdd2:	6023      	str	r3, [r4, #0]
 800bdd4:	bd10      	pop	{r4, pc}
 800bdd6:	6923      	ldr	r3, [r4, #16]
 800bdd8:	f04f 30ff 	mov.w	r0, #4294967295
 800bddc:	6023      	str	r3, [r4, #0]
 800bdde:	2300      	movs	r3, #0
 800bde0:	6063      	str	r3, [r4, #4]
 800bde2:	89a3      	ldrh	r3, [r4, #12]
 800bde4:	f043 0320 	orr.w	r3, r3, #32
 800bde8:	81a3      	strh	r3, [r4, #12]
 800bdea:	e7f3      	b.n	800bdd4 <__ssrefill_r+0x22>

0800bdec <__ssvfiscanf_r>:
 800bdec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdf0:	460c      	mov	r4, r1
 800bdf2:	2100      	movs	r1, #0
 800bdf4:	4606      	mov	r6, r0
 800bdf6:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800bdfa:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800bdfe:	49ab      	ldr	r1, [pc, #684]	@ (800c0ac <__ssvfiscanf_r+0x2c0>)
 800be00:	f10d 0804 	add.w	r8, sp, #4
 800be04:	91a0      	str	r1, [sp, #640]	@ 0x280
 800be06:	49aa      	ldr	r1, [pc, #680]	@ (800c0b0 <__ssvfiscanf_r+0x2c4>)
 800be08:	4faa      	ldr	r7, [pc, #680]	@ (800c0b4 <__ssvfiscanf_r+0x2c8>)
 800be0a:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800be0e:	91a1      	str	r1, [sp, #644]	@ 0x284
 800be10:	9300      	str	r3, [sp, #0]
 800be12:	f892 9000 	ldrb.w	r9, [r2]
 800be16:	f1b9 0f00 	cmp.w	r9, #0
 800be1a:	f000 8159 	beq.w	800c0d0 <__ssvfiscanf_r+0x2e4>
 800be1e:	f817 3009 	ldrb.w	r3, [r7, r9]
 800be22:	1c55      	adds	r5, r2, #1
 800be24:	f013 0308 	ands.w	r3, r3, #8
 800be28:	d019      	beq.n	800be5e <__ssvfiscanf_r+0x72>
 800be2a:	6863      	ldr	r3, [r4, #4]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	dd0f      	ble.n	800be50 <__ssvfiscanf_r+0x64>
 800be30:	6823      	ldr	r3, [r4, #0]
 800be32:	781a      	ldrb	r2, [r3, #0]
 800be34:	5cba      	ldrb	r2, [r7, r2]
 800be36:	0712      	lsls	r2, r2, #28
 800be38:	d401      	bmi.n	800be3e <__ssvfiscanf_r+0x52>
 800be3a:	462a      	mov	r2, r5
 800be3c:	e7e9      	b.n	800be12 <__ssvfiscanf_r+0x26>
 800be3e:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800be40:	3301      	adds	r3, #1
 800be42:	3201      	adds	r2, #1
 800be44:	9245      	str	r2, [sp, #276]	@ 0x114
 800be46:	6862      	ldr	r2, [r4, #4]
 800be48:	6023      	str	r3, [r4, #0]
 800be4a:	3a01      	subs	r2, #1
 800be4c:	6062      	str	r2, [r4, #4]
 800be4e:	e7ec      	b.n	800be2a <__ssvfiscanf_r+0x3e>
 800be50:	4621      	mov	r1, r4
 800be52:	4630      	mov	r0, r6
 800be54:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800be56:	4798      	blx	r3
 800be58:	2800      	cmp	r0, #0
 800be5a:	d0e9      	beq.n	800be30 <__ssvfiscanf_r+0x44>
 800be5c:	e7ed      	b.n	800be3a <__ssvfiscanf_r+0x4e>
 800be5e:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 800be62:	f040 8086 	bne.w	800bf72 <__ssvfiscanf_r+0x186>
 800be66:	9341      	str	r3, [sp, #260]	@ 0x104
 800be68:	9343      	str	r3, [sp, #268]	@ 0x10c
 800be6a:	7853      	ldrb	r3, [r2, #1]
 800be6c:	2b2a      	cmp	r3, #42	@ 0x2a
 800be6e:	bf04      	itt	eq
 800be70:	2310      	moveq	r3, #16
 800be72:	1c95      	addeq	r5, r2, #2
 800be74:	f04f 020a 	mov.w	r2, #10
 800be78:	bf08      	it	eq
 800be7a:	9341      	streq	r3, [sp, #260]	@ 0x104
 800be7c:	46aa      	mov	sl, r5
 800be7e:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800be82:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800be86:	2b09      	cmp	r3, #9
 800be88:	d91e      	bls.n	800bec8 <__ssvfiscanf_r+0xdc>
 800be8a:	f8df b22c 	ldr.w	fp, [pc, #556]	@ 800c0b8 <__ssvfiscanf_r+0x2cc>
 800be8e:	2203      	movs	r2, #3
 800be90:	4658      	mov	r0, fp
 800be92:	f7fe fb06 	bl	800a4a2 <memchr>
 800be96:	b138      	cbz	r0, 800bea8 <__ssvfiscanf_r+0xbc>
 800be98:	2301      	movs	r3, #1
 800be9a:	4655      	mov	r5, sl
 800be9c:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800be9e:	eba0 000b 	sub.w	r0, r0, fp
 800bea2:	4083      	lsls	r3, r0
 800bea4:	4313      	orrs	r3, r2
 800bea6:	9341      	str	r3, [sp, #260]	@ 0x104
 800bea8:	f815 3b01 	ldrb.w	r3, [r5], #1
 800beac:	2b78      	cmp	r3, #120	@ 0x78
 800beae:	d806      	bhi.n	800bebe <__ssvfiscanf_r+0xd2>
 800beb0:	2b57      	cmp	r3, #87	@ 0x57
 800beb2:	d810      	bhi.n	800bed6 <__ssvfiscanf_r+0xea>
 800beb4:	2b25      	cmp	r3, #37	@ 0x25
 800beb6:	d05c      	beq.n	800bf72 <__ssvfiscanf_r+0x186>
 800beb8:	d856      	bhi.n	800bf68 <__ssvfiscanf_r+0x17c>
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d074      	beq.n	800bfa8 <__ssvfiscanf_r+0x1bc>
 800bebe:	2303      	movs	r3, #3
 800bec0:	9347      	str	r3, [sp, #284]	@ 0x11c
 800bec2:	230a      	movs	r3, #10
 800bec4:	9342      	str	r3, [sp, #264]	@ 0x108
 800bec6:	e087      	b.n	800bfd8 <__ssvfiscanf_r+0x1ec>
 800bec8:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800beca:	4655      	mov	r5, sl
 800becc:	fb02 1103 	mla	r1, r2, r3, r1
 800bed0:	3930      	subs	r1, #48	@ 0x30
 800bed2:	9143      	str	r1, [sp, #268]	@ 0x10c
 800bed4:	e7d2      	b.n	800be7c <__ssvfiscanf_r+0x90>
 800bed6:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800beda:	2a20      	cmp	r2, #32
 800bedc:	d8ef      	bhi.n	800bebe <__ssvfiscanf_r+0xd2>
 800bede:	a101      	add	r1, pc, #4	@ (adr r1, 800bee4 <__ssvfiscanf_r+0xf8>)
 800bee0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800bee4:	0800bfb7 	.word	0x0800bfb7
 800bee8:	0800bebf 	.word	0x0800bebf
 800beec:	0800bebf 	.word	0x0800bebf
 800bef0:	0800c011 	.word	0x0800c011
 800bef4:	0800bebf 	.word	0x0800bebf
 800bef8:	0800bebf 	.word	0x0800bebf
 800befc:	0800bebf 	.word	0x0800bebf
 800bf00:	0800bebf 	.word	0x0800bebf
 800bf04:	0800bebf 	.word	0x0800bebf
 800bf08:	0800bebf 	.word	0x0800bebf
 800bf0c:	0800bebf 	.word	0x0800bebf
 800bf10:	0800c027 	.word	0x0800c027
 800bf14:	0800c00d 	.word	0x0800c00d
 800bf18:	0800bf6f 	.word	0x0800bf6f
 800bf1c:	0800bf6f 	.word	0x0800bf6f
 800bf20:	0800bf6f 	.word	0x0800bf6f
 800bf24:	0800bebf 	.word	0x0800bebf
 800bf28:	0800bfc9 	.word	0x0800bfc9
 800bf2c:	0800bebf 	.word	0x0800bebf
 800bf30:	0800bebf 	.word	0x0800bebf
 800bf34:	0800bebf 	.word	0x0800bebf
 800bf38:	0800bebf 	.word	0x0800bebf
 800bf3c:	0800c037 	.word	0x0800c037
 800bf40:	0800bfd1 	.word	0x0800bfd1
 800bf44:	0800bfaf 	.word	0x0800bfaf
 800bf48:	0800bebf 	.word	0x0800bebf
 800bf4c:	0800bebf 	.word	0x0800bebf
 800bf50:	0800c033 	.word	0x0800c033
 800bf54:	0800bebf 	.word	0x0800bebf
 800bf58:	0800c00d 	.word	0x0800c00d
 800bf5c:	0800bebf 	.word	0x0800bebf
 800bf60:	0800bebf 	.word	0x0800bebf
 800bf64:	0800bfb7 	.word	0x0800bfb7
 800bf68:	3b45      	subs	r3, #69	@ 0x45
 800bf6a:	2b02      	cmp	r3, #2
 800bf6c:	d8a7      	bhi.n	800bebe <__ssvfiscanf_r+0xd2>
 800bf6e:	2305      	movs	r3, #5
 800bf70:	e031      	b.n	800bfd6 <__ssvfiscanf_r+0x1ea>
 800bf72:	6863      	ldr	r3, [r4, #4]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	dd0d      	ble.n	800bf94 <__ssvfiscanf_r+0x1a8>
 800bf78:	6823      	ldr	r3, [r4, #0]
 800bf7a:	781a      	ldrb	r2, [r3, #0]
 800bf7c:	454a      	cmp	r2, r9
 800bf7e:	f040 80a7 	bne.w	800c0d0 <__ssvfiscanf_r+0x2e4>
 800bf82:	3301      	adds	r3, #1
 800bf84:	6862      	ldr	r2, [r4, #4]
 800bf86:	6023      	str	r3, [r4, #0]
 800bf88:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800bf8a:	3a01      	subs	r2, #1
 800bf8c:	3301      	adds	r3, #1
 800bf8e:	6062      	str	r2, [r4, #4]
 800bf90:	9345      	str	r3, [sp, #276]	@ 0x114
 800bf92:	e752      	b.n	800be3a <__ssvfiscanf_r+0x4e>
 800bf94:	4621      	mov	r1, r4
 800bf96:	4630      	mov	r0, r6
 800bf98:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800bf9a:	4798      	blx	r3
 800bf9c:	2800      	cmp	r0, #0
 800bf9e:	d0eb      	beq.n	800bf78 <__ssvfiscanf_r+0x18c>
 800bfa0:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800bfa2:	2800      	cmp	r0, #0
 800bfa4:	f040 808c 	bne.w	800c0c0 <__ssvfiscanf_r+0x2d4>
 800bfa8:	f04f 30ff 	mov.w	r0, #4294967295
 800bfac:	e08c      	b.n	800c0c8 <__ssvfiscanf_r+0x2dc>
 800bfae:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800bfb0:	f042 0220 	orr.w	r2, r2, #32
 800bfb4:	9241      	str	r2, [sp, #260]	@ 0x104
 800bfb6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800bfb8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bfbc:	9241      	str	r2, [sp, #260]	@ 0x104
 800bfbe:	2210      	movs	r2, #16
 800bfc0:	2b6e      	cmp	r3, #110	@ 0x6e
 800bfc2:	9242      	str	r2, [sp, #264]	@ 0x108
 800bfc4:	d902      	bls.n	800bfcc <__ssvfiscanf_r+0x1e0>
 800bfc6:	e005      	b.n	800bfd4 <__ssvfiscanf_r+0x1e8>
 800bfc8:	2300      	movs	r3, #0
 800bfca:	9342      	str	r3, [sp, #264]	@ 0x108
 800bfcc:	2303      	movs	r3, #3
 800bfce:	e002      	b.n	800bfd6 <__ssvfiscanf_r+0x1ea>
 800bfd0:	2308      	movs	r3, #8
 800bfd2:	9342      	str	r3, [sp, #264]	@ 0x108
 800bfd4:	2304      	movs	r3, #4
 800bfd6:	9347      	str	r3, [sp, #284]	@ 0x11c
 800bfd8:	6863      	ldr	r3, [r4, #4]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	dd39      	ble.n	800c052 <__ssvfiscanf_r+0x266>
 800bfde:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800bfe0:	0659      	lsls	r1, r3, #25
 800bfe2:	d404      	bmi.n	800bfee <__ssvfiscanf_r+0x202>
 800bfe4:	6823      	ldr	r3, [r4, #0]
 800bfe6:	781a      	ldrb	r2, [r3, #0]
 800bfe8:	5cba      	ldrb	r2, [r7, r2]
 800bfea:	0712      	lsls	r2, r2, #28
 800bfec:	d438      	bmi.n	800c060 <__ssvfiscanf_r+0x274>
 800bfee:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800bff0:	2b02      	cmp	r3, #2
 800bff2:	dc47      	bgt.n	800c084 <__ssvfiscanf_r+0x298>
 800bff4:	466b      	mov	r3, sp
 800bff6:	4622      	mov	r2, r4
 800bff8:	4630      	mov	r0, r6
 800bffa:	a941      	add	r1, sp, #260	@ 0x104
 800bffc:	f000 f86a 	bl	800c0d4 <_scanf_chars>
 800c000:	2801      	cmp	r0, #1
 800c002:	d065      	beq.n	800c0d0 <__ssvfiscanf_r+0x2e4>
 800c004:	2802      	cmp	r0, #2
 800c006:	f47f af18 	bne.w	800be3a <__ssvfiscanf_r+0x4e>
 800c00a:	e7c9      	b.n	800bfa0 <__ssvfiscanf_r+0x1b4>
 800c00c:	220a      	movs	r2, #10
 800c00e:	e7d7      	b.n	800bfc0 <__ssvfiscanf_r+0x1d4>
 800c010:	4629      	mov	r1, r5
 800c012:	4640      	mov	r0, r8
 800c014:	f000 fa52 	bl	800c4bc <__sccl>
 800c018:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800c01a:	4605      	mov	r5, r0
 800c01c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c020:	9341      	str	r3, [sp, #260]	@ 0x104
 800c022:	2301      	movs	r3, #1
 800c024:	e7d7      	b.n	800bfd6 <__ssvfiscanf_r+0x1ea>
 800c026:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800c028:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c02c:	9341      	str	r3, [sp, #260]	@ 0x104
 800c02e:	2300      	movs	r3, #0
 800c030:	e7d1      	b.n	800bfd6 <__ssvfiscanf_r+0x1ea>
 800c032:	2302      	movs	r3, #2
 800c034:	e7cf      	b.n	800bfd6 <__ssvfiscanf_r+0x1ea>
 800c036:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800c038:	06c3      	lsls	r3, r0, #27
 800c03a:	f53f aefe 	bmi.w	800be3a <__ssvfiscanf_r+0x4e>
 800c03e:	9b00      	ldr	r3, [sp, #0]
 800c040:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800c042:	1d19      	adds	r1, r3, #4
 800c044:	9100      	str	r1, [sp, #0]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	07c0      	lsls	r0, r0, #31
 800c04a:	bf4c      	ite	mi
 800c04c:	801a      	strhmi	r2, [r3, #0]
 800c04e:	601a      	strpl	r2, [r3, #0]
 800c050:	e6f3      	b.n	800be3a <__ssvfiscanf_r+0x4e>
 800c052:	4621      	mov	r1, r4
 800c054:	4630      	mov	r0, r6
 800c056:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c058:	4798      	blx	r3
 800c05a:	2800      	cmp	r0, #0
 800c05c:	d0bf      	beq.n	800bfde <__ssvfiscanf_r+0x1f2>
 800c05e:	e79f      	b.n	800bfa0 <__ssvfiscanf_r+0x1b4>
 800c060:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800c062:	3201      	adds	r2, #1
 800c064:	9245      	str	r2, [sp, #276]	@ 0x114
 800c066:	6862      	ldr	r2, [r4, #4]
 800c068:	3a01      	subs	r2, #1
 800c06a:	2a00      	cmp	r2, #0
 800c06c:	6062      	str	r2, [r4, #4]
 800c06e:	dd02      	ble.n	800c076 <__ssvfiscanf_r+0x28a>
 800c070:	3301      	adds	r3, #1
 800c072:	6023      	str	r3, [r4, #0]
 800c074:	e7b6      	b.n	800bfe4 <__ssvfiscanf_r+0x1f8>
 800c076:	4621      	mov	r1, r4
 800c078:	4630      	mov	r0, r6
 800c07a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c07c:	4798      	blx	r3
 800c07e:	2800      	cmp	r0, #0
 800c080:	d0b0      	beq.n	800bfe4 <__ssvfiscanf_r+0x1f8>
 800c082:	e78d      	b.n	800bfa0 <__ssvfiscanf_r+0x1b4>
 800c084:	2b04      	cmp	r3, #4
 800c086:	dc06      	bgt.n	800c096 <__ssvfiscanf_r+0x2aa>
 800c088:	466b      	mov	r3, sp
 800c08a:	4622      	mov	r2, r4
 800c08c:	4630      	mov	r0, r6
 800c08e:	a941      	add	r1, sp, #260	@ 0x104
 800c090:	f000 f87a 	bl	800c188 <_scanf_i>
 800c094:	e7b4      	b.n	800c000 <__ssvfiscanf_r+0x214>
 800c096:	4b09      	ldr	r3, [pc, #36]	@ (800c0bc <__ssvfiscanf_r+0x2d0>)
 800c098:	2b00      	cmp	r3, #0
 800c09a:	f43f aece 	beq.w	800be3a <__ssvfiscanf_r+0x4e>
 800c09e:	466b      	mov	r3, sp
 800c0a0:	4622      	mov	r2, r4
 800c0a2:	4630      	mov	r0, r6
 800c0a4:	a941      	add	r1, sp, #260	@ 0x104
 800c0a6:	f3af 8000 	nop.w
 800c0aa:	e7a9      	b.n	800c000 <__ssvfiscanf_r+0x214>
 800c0ac:	0800bd39 	.word	0x0800bd39
 800c0b0:	0800bdb3 	.word	0x0800bdb3
 800c0b4:	0800d361 	.word	0x0800d361
 800c0b8:	0800d1f4 	.word	0x0800d1f4
 800c0bc:	00000000 	.word	0x00000000
 800c0c0:	89a3      	ldrh	r3, [r4, #12]
 800c0c2:	065b      	lsls	r3, r3, #25
 800c0c4:	f53f af70 	bmi.w	800bfa8 <__ssvfiscanf_r+0x1bc>
 800c0c8:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 800c0cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0d0:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800c0d2:	e7f9      	b.n	800c0c8 <__ssvfiscanf_r+0x2dc>

0800c0d4 <_scanf_chars>:
 800c0d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0d8:	4615      	mov	r5, r2
 800c0da:	688a      	ldr	r2, [r1, #8]
 800c0dc:	4680      	mov	r8, r0
 800c0de:	460c      	mov	r4, r1
 800c0e0:	b932      	cbnz	r2, 800c0f0 <_scanf_chars+0x1c>
 800c0e2:	698a      	ldr	r2, [r1, #24]
 800c0e4:	2a00      	cmp	r2, #0
 800c0e6:	bf14      	ite	ne
 800c0e8:	f04f 32ff 	movne.w	r2, #4294967295
 800c0ec:	2201      	moveq	r2, #1
 800c0ee:	608a      	str	r2, [r1, #8]
 800c0f0:	2700      	movs	r7, #0
 800c0f2:	6822      	ldr	r2, [r4, #0]
 800c0f4:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 800c184 <_scanf_chars+0xb0>
 800c0f8:	06d1      	lsls	r1, r2, #27
 800c0fa:	bf5f      	itttt	pl
 800c0fc:	681a      	ldrpl	r2, [r3, #0]
 800c0fe:	1d11      	addpl	r1, r2, #4
 800c100:	6019      	strpl	r1, [r3, #0]
 800c102:	6816      	ldrpl	r6, [r2, #0]
 800c104:	69a0      	ldr	r0, [r4, #24]
 800c106:	b188      	cbz	r0, 800c12c <_scanf_chars+0x58>
 800c108:	2801      	cmp	r0, #1
 800c10a:	d107      	bne.n	800c11c <_scanf_chars+0x48>
 800c10c:	682b      	ldr	r3, [r5, #0]
 800c10e:	781a      	ldrb	r2, [r3, #0]
 800c110:	6963      	ldr	r3, [r4, #20]
 800c112:	5c9b      	ldrb	r3, [r3, r2]
 800c114:	b953      	cbnz	r3, 800c12c <_scanf_chars+0x58>
 800c116:	2f00      	cmp	r7, #0
 800c118:	d031      	beq.n	800c17e <_scanf_chars+0xaa>
 800c11a:	e022      	b.n	800c162 <_scanf_chars+0x8e>
 800c11c:	2802      	cmp	r0, #2
 800c11e:	d120      	bne.n	800c162 <_scanf_chars+0x8e>
 800c120:	682b      	ldr	r3, [r5, #0]
 800c122:	781b      	ldrb	r3, [r3, #0]
 800c124:	f819 3003 	ldrb.w	r3, [r9, r3]
 800c128:	071b      	lsls	r3, r3, #28
 800c12a:	d41a      	bmi.n	800c162 <_scanf_chars+0x8e>
 800c12c:	6823      	ldr	r3, [r4, #0]
 800c12e:	3701      	adds	r7, #1
 800c130:	06da      	lsls	r2, r3, #27
 800c132:	bf5e      	ittt	pl
 800c134:	682b      	ldrpl	r3, [r5, #0]
 800c136:	781b      	ldrbpl	r3, [r3, #0]
 800c138:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c13c:	682a      	ldr	r2, [r5, #0]
 800c13e:	686b      	ldr	r3, [r5, #4]
 800c140:	3201      	adds	r2, #1
 800c142:	602a      	str	r2, [r5, #0]
 800c144:	68a2      	ldr	r2, [r4, #8]
 800c146:	3b01      	subs	r3, #1
 800c148:	3a01      	subs	r2, #1
 800c14a:	606b      	str	r3, [r5, #4]
 800c14c:	60a2      	str	r2, [r4, #8]
 800c14e:	b142      	cbz	r2, 800c162 <_scanf_chars+0x8e>
 800c150:	2b00      	cmp	r3, #0
 800c152:	dcd7      	bgt.n	800c104 <_scanf_chars+0x30>
 800c154:	4629      	mov	r1, r5
 800c156:	4640      	mov	r0, r8
 800c158:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c15c:	4798      	blx	r3
 800c15e:	2800      	cmp	r0, #0
 800c160:	d0d0      	beq.n	800c104 <_scanf_chars+0x30>
 800c162:	6823      	ldr	r3, [r4, #0]
 800c164:	f013 0310 	ands.w	r3, r3, #16
 800c168:	d105      	bne.n	800c176 <_scanf_chars+0xa2>
 800c16a:	68e2      	ldr	r2, [r4, #12]
 800c16c:	3201      	adds	r2, #1
 800c16e:	60e2      	str	r2, [r4, #12]
 800c170:	69a2      	ldr	r2, [r4, #24]
 800c172:	b102      	cbz	r2, 800c176 <_scanf_chars+0xa2>
 800c174:	7033      	strb	r3, [r6, #0]
 800c176:	2000      	movs	r0, #0
 800c178:	6923      	ldr	r3, [r4, #16]
 800c17a:	443b      	add	r3, r7
 800c17c:	6123      	str	r3, [r4, #16]
 800c17e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c182:	bf00      	nop
 800c184:	0800d361 	.word	0x0800d361

0800c188 <_scanf_i>:
 800c188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c18c:	460c      	mov	r4, r1
 800c18e:	4698      	mov	r8, r3
 800c190:	4b72      	ldr	r3, [pc, #456]	@ (800c35c <_scanf_i+0x1d4>)
 800c192:	b087      	sub	sp, #28
 800c194:	4682      	mov	sl, r0
 800c196:	4616      	mov	r6, r2
 800c198:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c19c:	ab03      	add	r3, sp, #12
 800c19e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c1a2:	4b6f      	ldr	r3, [pc, #444]	@ (800c360 <_scanf_i+0x1d8>)
 800c1a4:	69a1      	ldr	r1, [r4, #24]
 800c1a6:	4a6f      	ldr	r2, [pc, #444]	@ (800c364 <_scanf_i+0x1dc>)
 800c1a8:	4627      	mov	r7, r4
 800c1aa:	2903      	cmp	r1, #3
 800c1ac:	bf08      	it	eq
 800c1ae:	461a      	moveq	r2, r3
 800c1b0:	68a3      	ldr	r3, [r4, #8]
 800c1b2:	9201      	str	r2, [sp, #4]
 800c1b4:	1e5a      	subs	r2, r3, #1
 800c1b6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800c1ba:	bf81      	itttt	hi
 800c1bc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800c1c0:	eb03 0905 	addhi.w	r9, r3, r5
 800c1c4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800c1c8:	60a3      	strhi	r3, [r4, #8]
 800c1ca:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c1ce:	bf98      	it	ls
 800c1d0:	f04f 0900 	movls.w	r9, #0
 800c1d4:	463d      	mov	r5, r7
 800c1d6:	f04f 0b00 	mov.w	fp, #0
 800c1da:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800c1de:	6023      	str	r3, [r4, #0]
 800c1e0:	6831      	ldr	r1, [r6, #0]
 800c1e2:	ab03      	add	r3, sp, #12
 800c1e4:	2202      	movs	r2, #2
 800c1e6:	7809      	ldrb	r1, [r1, #0]
 800c1e8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c1ec:	f7fe f959 	bl	800a4a2 <memchr>
 800c1f0:	b328      	cbz	r0, 800c23e <_scanf_i+0xb6>
 800c1f2:	f1bb 0f01 	cmp.w	fp, #1
 800c1f6:	d159      	bne.n	800c2ac <_scanf_i+0x124>
 800c1f8:	6862      	ldr	r2, [r4, #4]
 800c1fa:	b92a      	cbnz	r2, 800c208 <_scanf_i+0x80>
 800c1fc:	2108      	movs	r1, #8
 800c1fe:	6822      	ldr	r2, [r4, #0]
 800c200:	6061      	str	r1, [r4, #4]
 800c202:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c206:	6022      	str	r2, [r4, #0]
 800c208:	6822      	ldr	r2, [r4, #0]
 800c20a:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800c20e:	6022      	str	r2, [r4, #0]
 800c210:	68a2      	ldr	r2, [r4, #8]
 800c212:	1e51      	subs	r1, r2, #1
 800c214:	60a1      	str	r1, [r4, #8]
 800c216:	b192      	cbz	r2, 800c23e <_scanf_i+0xb6>
 800c218:	6832      	ldr	r2, [r6, #0]
 800c21a:	1c51      	adds	r1, r2, #1
 800c21c:	6031      	str	r1, [r6, #0]
 800c21e:	7812      	ldrb	r2, [r2, #0]
 800c220:	f805 2b01 	strb.w	r2, [r5], #1
 800c224:	6872      	ldr	r2, [r6, #4]
 800c226:	3a01      	subs	r2, #1
 800c228:	2a00      	cmp	r2, #0
 800c22a:	6072      	str	r2, [r6, #4]
 800c22c:	dc07      	bgt.n	800c23e <_scanf_i+0xb6>
 800c22e:	4631      	mov	r1, r6
 800c230:	4650      	mov	r0, sl
 800c232:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800c236:	4790      	blx	r2
 800c238:	2800      	cmp	r0, #0
 800c23a:	f040 8085 	bne.w	800c348 <_scanf_i+0x1c0>
 800c23e:	f10b 0b01 	add.w	fp, fp, #1
 800c242:	f1bb 0f03 	cmp.w	fp, #3
 800c246:	d1cb      	bne.n	800c1e0 <_scanf_i+0x58>
 800c248:	6863      	ldr	r3, [r4, #4]
 800c24a:	b90b      	cbnz	r3, 800c250 <_scanf_i+0xc8>
 800c24c:	230a      	movs	r3, #10
 800c24e:	6063      	str	r3, [r4, #4]
 800c250:	6863      	ldr	r3, [r4, #4]
 800c252:	4945      	ldr	r1, [pc, #276]	@ (800c368 <_scanf_i+0x1e0>)
 800c254:	6960      	ldr	r0, [r4, #20]
 800c256:	1ac9      	subs	r1, r1, r3
 800c258:	f000 f930 	bl	800c4bc <__sccl>
 800c25c:	f04f 0b00 	mov.w	fp, #0
 800c260:	68a3      	ldr	r3, [r4, #8]
 800c262:	6822      	ldr	r2, [r4, #0]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d03d      	beq.n	800c2e4 <_scanf_i+0x15c>
 800c268:	6831      	ldr	r1, [r6, #0]
 800c26a:	6960      	ldr	r0, [r4, #20]
 800c26c:	f891 c000 	ldrb.w	ip, [r1]
 800c270:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c274:	2800      	cmp	r0, #0
 800c276:	d035      	beq.n	800c2e4 <_scanf_i+0x15c>
 800c278:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800c27c:	d124      	bne.n	800c2c8 <_scanf_i+0x140>
 800c27e:	0510      	lsls	r0, r2, #20
 800c280:	d522      	bpl.n	800c2c8 <_scanf_i+0x140>
 800c282:	f10b 0b01 	add.w	fp, fp, #1
 800c286:	f1b9 0f00 	cmp.w	r9, #0
 800c28a:	d003      	beq.n	800c294 <_scanf_i+0x10c>
 800c28c:	3301      	adds	r3, #1
 800c28e:	f109 39ff 	add.w	r9, r9, #4294967295
 800c292:	60a3      	str	r3, [r4, #8]
 800c294:	6873      	ldr	r3, [r6, #4]
 800c296:	3b01      	subs	r3, #1
 800c298:	2b00      	cmp	r3, #0
 800c29a:	6073      	str	r3, [r6, #4]
 800c29c:	dd1b      	ble.n	800c2d6 <_scanf_i+0x14e>
 800c29e:	6833      	ldr	r3, [r6, #0]
 800c2a0:	3301      	adds	r3, #1
 800c2a2:	6033      	str	r3, [r6, #0]
 800c2a4:	68a3      	ldr	r3, [r4, #8]
 800c2a6:	3b01      	subs	r3, #1
 800c2a8:	60a3      	str	r3, [r4, #8]
 800c2aa:	e7d9      	b.n	800c260 <_scanf_i+0xd8>
 800c2ac:	f1bb 0f02 	cmp.w	fp, #2
 800c2b0:	d1ae      	bne.n	800c210 <_scanf_i+0x88>
 800c2b2:	6822      	ldr	r2, [r4, #0]
 800c2b4:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800c2b8:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800c2bc:	d1c4      	bne.n	800c248 <_scanf_i+0xc0>
 800c2be:	2110      	movs	r1, #16
 800c2c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c2c4:	6061      	str	r1, [r4, #4]
 800c2c6:	e7a2      	b.n	800c20e <_scanf_i+0x86>
 800c2c8:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800c2cc:	6022      	str	r2, [r4, #0]
 800c2ce:	780b      	ldrb	r3, [r1, #0]
 800c2d0:	f805 3b01 	strb.w	r3, [r5], #1
 800c2d4:	e7de      	b.n	800c294 <_scanf_i+0x10c>
 800c2d6:	4631      	mov	r1, r6
 800c2d8:	4650      	mov	r0, sl
 800c2da:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c2de:	4798      	blx	r3
 800c2e0:	2800      	cmp	r0, #0
 800c2e2:	d0df      	beq.n	800c2a4 <_scanf_i+0x11c>
 800c2e4:	6823      	ldr	r3, [r4, #0]
 800c2e6:	05d9      	lsls	r1, r3, #23
 800c2e8:	d50d      	bpl.n	800c306 <_scanf_i+0x17e>
 800c2ea:	42bd      	cmp	r5, r7
 800c2ec:	d909      	bls.n	800c302 <_scanf_i+0x17a>
 800c2ee:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c2f2:	4632      	mov	r2, r6
 800c2f4:	4650      	mov	r0, sl
 800c2f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c2fa:	f105 39ff 	add.w	r9, r5, #4294967295
 800c2fe:	4798      	blx	r3
 800c300:	464d      	mov	r5, r9
 800c302:	42bd      	cmp	r5, r7
 800c304:	d028      	beq.n	800c358 <_scanf_i+0x1d0>
 800c306:	6822      	ldr	r2, [r4, #0]
 800c308:	f012 0210 	ands.w	r2, r2, #16
 800c30c:	d113      	bne.n	800c336 <_scanf_i+0x1ae>
 800c30e:	702a      	strb	r2, [r5, #0]
 800c310:	4639      	mov	r1, r7
 800c312:	6863      	ldr	r3, [r4, #4]
 800c314:	4650      	mov	r0, sl
 800c316:	9e01      	ldr	r6, [sp, #4]
 800c318:	47b0      	blx	r6
 800c31a:	f8d8 3000 	ldr.w	r3, [r8]
 800c31e:	6821      	ldr	r1, [r4, #0]
 800c320:	1d1a      	adds	r2, r3, #4
 800c322:	f8c8 2000 	str.w	r2, [r8]
 800c326:	f011 0f20 	tst.w	r1, #32
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	d00f      	beq.n	800c34e <_scanf_i+0x1c6>
 800c32e:	6018      	str	r0, [r3, #0]
 800c330:	68e3      	ldr	r3, [r4, #12]
 800c332:	3301      	adds	r3, #1
 800c334:	60e3      	str	r3, [r4, #12]
 800c336:	2000      	movs	r0, #0
 800c338:	6923      	ldr	r3, [r4, #16]
 800c33a:	1bed      	subs	r5, r5, r7
 800c33c:	445d      	add	r5, fp
 800c33e:	442b      	add	r3, r5
 800c340:	6123      	str	r3, [r4, #16]
 800c342:	b007      	add	sp, #28
 800c344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c348:	f04f 0b00 	mov.w	fp, #0
 800c34c:	e7ca      	b.n	800c2e4 <_scanf_i+0x15c>
 800c34e:	07ca      	lsls	r2, r1, #31
 800c350:	bf4c      	ite	mi
 800c352:	8018      	strhmi	r0, [r3, #0]
 800c354:	6018      	strpl	r0, [r3, #0]
 800c356:	e7eb      	b.n	800c330 <_scanf_i+0x1a8>
 800c358:	2001      	movs	r0, #1
 800c35a:	e7f2      	b.n	800c342 <_scanf_i+0x1ba>
 800c35c:	0800cfbc 	.word	0x0800cfbc
 800c360:	0800c7cd 	.word	0x0800c7cd
 800c364:	0800c8ad 	.word	0x0800c8ad
 800c368:	0800d20f 	.word	0x0800d20f

0800c36c <__sflush_r>:
 800c36c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c372:	0716      	lsls	r6, r2, #28
 800c374:	4605      	mov	r5, r0
 800c376:	460c      	mov	r4, r1
 800c378:	d454      	bmi.n	800c424 <__sflush_r+0xb8>
 800c37a:	684b      	ldr	r3, [r1, #4]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	dc02      	bgt.n	800c386 <__sflush_r+0x1a>
 800c380:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c382:	2b00      	cmp	r3, #0
 800c384:	dd48      	ble.n	800c418 <__sflush_r+0xac>
 800c386:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c388:	2e00      	cmp	r6, #0
 800c38a:	d045      	beq.n	800c418 <__sflush_r+0xac>
 800c38c:	2300      	movs	r3, #0
 800c38e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c392:	682f      	ldr	r7, [r5, #0]
 800c394:	6a21      	ldr	r1, [r4, #32]
 800c396:	602b      	str	r3, [r5, #0]
 800c398:	d030      	beq.n	800c3fc <__sflush_r+0x90>
 800c39a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c39c:	89a3      	ldrh	r3, [r4, #12]
 800c39e:	0759      	lsls	r1, r3, #29
 800c3a0:	d505      	bpl.n	800c3ae <__sflush_r+0x42>
 800c3a2:	6863      	ldr	r3, [r4, #4]
 800c3a4:	1ad2      	subs	r2, r2, r3
 800c3a6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c3a8:	b10b      	cbz	r3, 800c3ae <__sflush_r+0x42>
 800c3aa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c3ac:	1ad2      	subs	r2, r2, r3
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	4628      	mov	r0, r5
 800c3b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c3b4:	6a21      	ldr	r1, [r4, #32]
 800c3b6:	47b0      	blx	r6
 800c3b8:	1c43      	adds	r3, r0, #1
 800c3ba:	89a3      	ldrh	r3, [r4, #12]
 800c3bc:	d106      	bne.n	800c3cc <__sflush_r+0x60>
 800c3be:	6829      	ldr	r1, [r5, #0]
 800c3c0:	291d      	cmp	r1, #29
 800c3c2:	d82b      	bhi.n	800c41c <__sflush_r+0xb0>
 800c3c4:	4a28      	ldr	r2, [pc, #160]	@ (800c468 <__sflush_r+0xfc>)
 800c3c6:	40ca      	lsrs	r2, r1
 800c3c8:	07d6      	lsls	r6, r2, #31
 800c3ca:	d527      	bpl.n	800c41c <__sflush_r+0xb0>
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	6062      	str	r2, [r4, #4]
 800c3d0:	6922      	ldr	r2, [r4, #16]
 800c3d2:	04d9      	lsls	r1, r3, #19
 800c3d4:	6022      	str	r2, [r4, #0]
 800c3d6:	d504      	bpl.n	800c3e2 <__sflush_r+0x76>
 800c3d8:	1c42      	adds	r2, r0, #1
 800c3da:	d101      	bne.n	800c3e0 <__sflush_r+0x74>
 800c3dc:	682b      	ldr	r3, [r5, #0]
 800c3de:	b903      	cbnz	r3, 800c3e2 <__sflush_r+0x76>
 800c3e0:	6560      	str	r0, [r4, #84]	@ 0x54
 800c3e2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c3e4:	602f      	str	r7, [r5, #0]
 800c3e6:	b1b9      	cbz	r1, 800c418 <__sflush_r+0xac>
 800c3e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c3ec:	4299      	cmp	r1, r3
 800c3ee:	d002      	beq.n	800c3f6 <__sflush_r+0x8a>
 800c3f0:	4628      	mov	r0, r5
 800c3f2:	f7fe fed1 	bl	800b198 <_free_r>
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	6363      	str	r3, [r4, #52]	@ 0x34
 800c3fa:	e00d      	b.n	800c418 <__sflush_r+0xac>
 800c3fc:	2301      	movs	r3, #1
 800c3fe:	4628      	mov	r0, r5
 800c400:	47b0      	blx	r6
 800c402:	4602      	mov	r2, r0
 800c404:	1c50      	adds	r0, r2, #1
 800c406:	d1c9      	bne.n	800c39c <__sflush_r+0x30>
 800c408:	682b      	ldr	r3, [r5, #0]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d0c6      	beq.n	800c39c <__sflush_r+0x30>
 800c40e:	2b1d      	cmp	r3, #29
 800c410:	d001      	beq.n	800c416 <__sflush_r+0xaa>
 800c412:	2b16      	cmp	r3, #22
 800c414:	d11d      	bne.n	800c452 <__sflush_r+0xe6>
 800c416:	602f      	str	r7, [r5, #0]
 800c418:	2000      	movs	r0, #0
 800c41a:	e021      	b.n	800c460 <__sflush_r+0xf4>
 800c41c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c420:	b21b      	sxth	r3, r3
 800c422:	e01a      	b.n	800c45a <__sflush_r+0xee>
 800c424:	690f      	ldr	r7, [r1, #16]
 800c426:	2f00      	cmp	r7, #0
 800c428:	d0f6      	beq.n	800c418 <__sflush_r+0xac>
 800c42a:	0793      	lsls	r3, r2, #30
 800c42c:	bf18      	it	ne
 800c42e:	2300      	movne	r3, #0
 800c430:	680e      	ldr	r6, [r1, #0]
 800c432:	bf08      	it	eq
 800c434:	694b      	ldreq	r3, [r1, #20]
 800c436:	1bf6      	subs	r6, r6, r7
 800c438:	600f      	str	r7, [r1, #0]
 800c43a:	608b      	str	r3, [r1, #8]
 800c43c:	2e00      	cmp	r6, #0
 800c43e:	ddeb      	ble.n	800c418 <__sflush_r+0xac>
 800c440:	4633      	mov	r3, r6
 800c442:	463a      	mov	r2, r7
 800c444:	4628      	mov	r0, r5
 800c446:	6a21      	ldr	r1, [r4, #32]
 800c448:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800c44c:	47e0      	blx	ip
 800c44e:	2800      	cmp	r0, #0
 800c450:	dc07      	bgt.n	800c462 <__sflush_r+0xf6>
 800c452:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c456:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c45a:	f04f 30ff 	mov.w	r0, #4294967295
 800c45e:	81a3      	strh	r3, [r4, #12]
 800c460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c462:	4407      	add	r7, r0
 800c464:	1a36      	subs	r6, r6, r0
 800c466:	e7e9      	b.n	800c43c <__sflush_r+0xd0>
 800c468:	20400001 	.word	0x20400001

0800c46c <_fflush_r>:
 800c46c:	b538      	push	{r3, r4, r5, lr}
 800c46e:	690b      	ldr	r3, [r1, #16]
 800c470:	4605      	mov	r5, r0
 800c472:	460c      	mov	r4, r1
 800c474:	b913      	cbnz	r3, 800c47c <_fflush_r+0x10>
 800c476:	2500      	movs	r5, #0
 800c478:	4628      	mov	r0, r5
 800c47a:	bd38      	pop	{r3, r4, r5, pc}
 800c47c:	b118      	cbz	r0, 800c486 <_fflush_r+0x1a>
 800c47e:	6a03      	ldr	r3, [r0, #32]
 800c480:	b90b      	cbnz	r3, 800c486 <_fflush_r+0x1a>
 800c482:	f7fd fe67 	bl	800a154 <__sinit>
 800c486:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d0f3      	beq.n	800c476 <_fflush_r+0xa>
 800c48e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c490:	07d0      	lsls	r0, r2, #31
 800c492:	d404      	bmi.n	800c49e <_fflush_r+0x32>
 800c494:	0599      	lsls	r1, r3, #22
 800c496:	d402      	bmi.n	800c49e <_fflush_r+0x32>
 800c498:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c49a:	f7fe f800 	bl	800a49e <__retarget_lock_acquire_recursive>
 800c49e:	4628      	mov	r0, r5
 800c4a0:	4621      	mov	r1, r4
 800c4a2:	f7ff ff63 	bl	800c36c <__sflush_r>
 800c4a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c4a8:	4605      	mov	r5, r0
 800c4aa:	07da      	lsls	r2, r3, #31
 800c4ac:	d4e4      	bmi.n	800c478 <_fflush_r+0xc>
 800c4ae:	89a3      	ldrh	r3, [r4, #12]
 800c4b0:	059b      	lsls	r3, r3, #22
 800c4b2:	d4e1      	bmi.n	800c478 <_fflush_r+0xc>
 800c4b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c4b6:	f7fd fff3 	bl	800a4a0 <__retarget_lock_release_recursive>
 800c4ba:	e7dd      	b.n	800c478 <_fflush_r+0xc>

0800c4bc <__sccl>:
 800c4bc:	b570      	push	{r4, r5, r6, lr}
 800c4be:	780b      	ldrb	r3, [r1, #0]
 800c4c0:	4604      	mov	r4, r0
 800c4c2:	2b5e      	cmp	r3, #94	@ 0x5e
 800c4c4:	bf0b      	itete	eq
 800c4c6:	784b      	ldrbeq	r3, [r1, #1]
 800c4c8:	1c4a      	addne	r2, r1, #1
 800c4ca:	1c8a      	addeq	r2, r1, #2
 800c4cc:	2100      	movne	r1, #0
 800c4ce:	bf08      	it	eq
 800c4d0:	2101      	moveq	r1, #1
 800c4d2:	3801      	subs	r0, #1
 800c4d4:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800c4d8:	f800 1f01 	strb.w	r1, [r0, #1]!
 800c4dc:	42a8      	cmp	r0, r5
 800c4de:	d1fb      	bne.n	800c4d8 <__sccl+0x1c>
 800c4e0:	b90b      	cbnz	r3, 800c4e6 <__sccl+0x2a>
 800c4e2:	1e50      	subs	r0, r2, #1
 800c4e4:	bd70      	pop	{r4, r5, r6, pc}
 800c4e6:	f081 0101 	eor.w	r1, r1, #1
 800c4ea:	4610      	mov	r0, r2
 800c4ec:	54e1      	strb	r1, [r4, r3]
 800c4ee:	4602      	mov	r2, r0
 800c4f0:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c4f4:	2d2d      	cmp	r5, #45	@ 0x2d
 800c4f6:	d005      	beq.n	800c504 <__sccl+0x48>
 800c4f8:	2d5d      	cmp	r5, #93	@ 0x5d
 800c4fa:	d016      	beq.n	800c52a <__sccl+0x6e>
 800c4fc:	2d00      	cmp	r5, #0
 800c4fe:	d0f1      	beq.n	800c4e4 <__sccl+0x28>
 800c500:	462b      	mov	r3, r5
 800c502:	e7f2      	b.n	800c4ea <__sccl+0x2e>
 800c504:	7846      	ldrb	r6, [r0, #1]
 800c506:	2e5d      	cmp	r6, #93	@ 0x5d
 800c508:	d0fa      	beq.n	800c500 <__sccl+0x44>
 800c50a:	42b3      	cmp	r3, r6
 800c50c:	dcf8      	bgt.n	800c500 <__sccl+0x44>
 800c50e:	461a      	mov	r2, r3
 800c510:	3002      	adds	r0, #2
 800c512:	3201      	adds	r2, #1
 800c514:	4296      	cmp	r6, r2
 800c516:	54a1      	strb	r1, [r4, r2]
 800c518:	dcfb      	bgt.n	800c512 <__sccl+0x56>
 800c51a:	1af2      	subs	r2, r6, r3
 800c51c:	3a01      	subs	r2, #1
 800c51e:	42b3      	cmp	r3, r6
 800c520:	bfa8      	it	ge
 800c522:	2200      	movge	r2, #0
 800c524:	1c5d      	adds	r5, r3, #1
 800c526:	18ab      	adds	r3, r5, r2
 800c528:	e7e1      	b.n	800c4ee <__sccl+0x32>
 800c52a:	4610      	mov	r0, r2
 800c52c:	e7da      	b.n	800c4e4 <__sccl+0x28>

0800c52e <__submore>:
 800c52e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c532:	460c      	mov	r4, r1
 800c534:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800c536:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c53a:	4299      	cmp	r1, r3
 800c53c:	d11b      	bne.n	800c576 <__submore+0x48>
 800c53e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800c542:	f7fe fe9b 	bl	800b27c <_malloc_r>
 800c546:	b918      	cbnz	r0, 800c550 <__submore+0x22>
 800c548:	f04f 30ff 	mov.w	r0, #4294967295
 800c54c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c550:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c554:	63a3      	str	r3, [r4, #56]	@ 0x38
 800c556:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800c55a:	6360      	str	r0, [r4, #52]	@ 0x34
 800c55c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800c560:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800c564:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800c568:	7043      	strb	r3, [r0, #1]
 800c56a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800c56e:	7003      	strb	r3, [r0, #0]
 800c570:	6020      	str	r0, [r4, #0]
 800c572:	2000      	movs	r0, #0
 800c574:	e7ea      	b.n	800c54c <__submore+0x1e>
 800c576:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800c578:	0077      	lsls	r7, r6, #1
 800c57a:	463a      	mov	r2, r7
 800c57c:	f000 f87e 	bl	800c67c <_realloc_r>
 800c580:	4605      	mov	r5, r0
 800c582:	2800      	cmp	r0, #0
 800c584:	d0e0      	beq.n	800c548 <__submore+0x1a>
 800c586:	eb00 0806 	add.w	r8, r0, r6
 800c58a:	4601      	mov	r1, r0
 800c58c:	4632      	mov	r2, r6
 800c58e:	4640      	mov	r0, r8
 800c590:	f7fd ff95 	bl	800a4be <memcpy>
 800c594:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800c598:	f8c4 8000 	str.w	r8, [r4]
 800c59c:	e7e9      	b.n	800c572 <__submore+0x44>

0800c59e <memmove>:
 800c59e:	4288      	cmp	r0, r1
 800c5a0:	b510      	push	{r4, lr}
 800c5a2:	eb01 0402 	add.w	r4, r1, r2
 800c5a6:	d902      	bls.n	800c5ae <memmove+0x10>
 800c5a8:	4284      	cmp	r4, r0
 800c5aa:	4623      	mov	r3, r4
 800c5ac:	d807      	bhi.n	800c5be <memmove+0x20>
 800c5ae:	1e43      	subs	r3, r0, #1
 800c5b0:	42a1      	cmp	r1, r4
 800c5b2:	d008      	beq.n	800c5c6 <memmove+0x28>
 800c5b4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c5b8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c5bc:	e7f8      	b.n	800c5b0 <memmove+0x12>
 800c5be:	4601      	mov	r1, r0
 800c5c0:	4402      	add	r2, r0
 800c5c2:	428a      	cmp	r2, r1
 800c5c4:	d100      	bne.n	800c5c8 <memmove+0x2a>
 800c5c6:	bd10      	pop	{r4, pc}
 800c5c8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c5cc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c5d0:	e7f7      	b.n	800c5c2 <memmove+0x24>
	...

0800c5d4 <_sbrk_r>:
 800c5d4:	b538      	push	{r3, r4, r5, lr}
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	4d05      	ldr	r5, [pc, #20]	@ (800c5f0 <_sbrk_r+0x1c>)
 800c5da:	4604      	mov	r4, r0
 800c5dc:	4608      	mov	r0, r1
 800c5de:	602b      	str	r3, [r5, #0]
 800c5e0:	f7f5 fcb4 	bl	8001f4c <_sbrk>
 800c5e4:	1c43      	adds	r3, r0, #1
 800c5e6:	d102      	bne.n	800c5ee <_sbrk_r+0x1a>
 800c5e8:	682b      	ldr	r3, [r5, #0]
 800c5ea:	b103      	cbz	r3, 800c5ee <_sbrk_r+0x1a>
 800c5ec:	6023      	str	r3, [r4, #0]
 800c5ee:	bd38      	pop	{r3, r4, r5, pc}
 800c5f0:	20002ac0 	.word	0x20002ac0

0800c5f4 <__assert_func>:
 800c5f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c5f6:	4614      	mov	r4, r2
 800c5f8:	461a      	mov	r2, r3
 800c5fa:	4b09      	ldr	r3, [pc, #36]	@ (800c620 <__assert_func+0x2c>)
 800c5fc:	4605      	mov	r5, r0
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	68d8      	ldr	r0, [r3, #12]
 800c602:	b14c      	cbz	r4, 800c618 <__assert_func+0x24>
 800c604:	4b07      	ldr	r3, [pc, #28]	@ (800c624 <__assert_func+0x30>)
 800c606:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c60a:	9100      	str	r1, [sp, #0]
 800c60c:	462b      	mov	r3, r5
 800c60e:	4906      	ldr	r1, [pc, #24]	@ (800c628 <__assert_func+0x34>)
 800c610:	f000 f95c 	bl	800c8cc <fiprintf>
 800c614:	f000 f96c 	bl	800c8f0 <abort>
 800c618:	4b04      	ldr	r3, [pc, #16]	@ (800c62c <__assert_func+0x38>)
 800c61a:	461c      	mov	r4, r3
 800c61c:	e7f3      	b.n	800c606 <__assert_func+0x12>
 800c61e:	bf00      	nop
 800c620:	20000030 	.word	0x20000030
 800c624:	0800d224 	.word	0x0800d224
 800c628:	0800d231 	.word	0x0800d231
 800c62c:	0800d25f 	.word	0x0800d25f

0800c630 <_calloc_r>:
 800c630:	b570      	push	{r4, r5, r6, lr}
 800c632:	fba1 5402 	umull	r5, r4, r1, r2
 800c636:	b934      	cbnz	r4, 800c646 <_calloc_r+0x16>
 800c638:	4629      	mov	r1, r5
 800c63a:	f7fe fe1f 	bl	800b27c <_malloc_r>
 800c63e:	4606      	mov	r6, r0
 800c640:	b928      	cbnz	r0, 800c64e <_calloc_r+0x1e>
 800c642:	4630      	mov	r0, r6
 800c644:	bd70      	pop	{r4, r5, r6, pc}
 800c646:	220c      	movs	r2, #12
 800c648:	2600      	movs	r6, #0
 800c64a:	6002      	str	r2, [r0, #0]
 800c64c:	e7f9      	b.n	800c642 <_calloc_r+0x12>
 800c64e:	462a      	mov	r2, r5
 800c650:	4621      	mov	r1, r4
 800c652:	f7fd fe48 	bl	800a2e6 <memset>
 800c656:	e7f4      	b.n	800c642 <_calloc_r+0x12>

0800c658 <__ascii_mbtowc>:
 800c658:	b082      	sub	sp, #8
 800c65a:	b901      	cbnz	r1, 800c65e <__ascii_mbtowc+0x6>
 800c65c:	a901      	add	r1, sp, #4
 800c65e:	b142      	cbz	r2, 800c672 <__ascii_mbtowc+0x1a>
 800c660:	b14b      	cbz	r3, 800c676 <__ascii_mbtowc+0x1e>
 800c662:	7813      	ldrb	r3, [r2, #0]
 800c664:	600b      	str	r3, [r1, #0]
 800c666:	7812      	ldrb	r2, [r2, #0]
 800c668:	1e10      	subs	r0, r2, #0
 800c66a:	bf18      	it	ne
 800c66c:	2001      	movne	r0, #1
 800c66e:	b002      	add	sp, #8
 800c670:	4770      	bx	lr
 800c672:	4610      	mov	r0, r2
 800c674:	e7fb      	b.n	800c66e <__ascii_mbtowc+0x16>
 800c676:	f06f 0001 	mvn.w	r0, #1
 800c67a:	e7f8      	b.n	800c66e <__ascii_mbtowc+0x16>

0800c67c <_realloc_r>:
 800c67c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c680:	4607      	mov	r7, r0
 800c682:	4614      	mov	r4, r2
 800c684:	460d      	mov	r5, r1
 800c686:	b921      	cbnz	r1, 800c692 <_realloc_r+0x16>
 800c688:	4611      	mov	r1, r2
 800c68a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c68e:	f7fe bdf5 	b.w	800b27c <_malloc_r>
 800c692:	b92a      	cbnz	r2, 800c6a0 <_realloc_r+0x24>
 800c694:	f7fe fd80 	bl	800b198 <_free_r>
 800c698:	4625      	mov	r5, r4
 800c69a:	4628      	mov	r0, r5
 800c69c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6a0:	f000 f92d 	bl	800c8fe <_malloc_usable_size_r>
 800c6a4:	4284      	cmp	r4, r0
 800c6a6:	4606      	mov	r6, r0
 800c6a8:	d802      	bhi.n	800c6b0 <_realloc_r+0x34>
 800c6aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c6ae:	d8f4      	bhi.n	800c69a <_realloc_r+0x1e>
 800c6b0:	4621      	mov	r1, r4
 800c6b2:	4638      	mov	r0, r7
 800c6b4:	f7fe fde2 	bl	800b27c <_malloc_r>
 800c6b8:	4680      	mov	r8, r0
 800c6ba:	b908      	cbnz	r0, 800c6c0 <_realloc_r+0x44>
 800c6bc:	4645      	mov	r5, r8
 800c6be:	e7ec      	b.n	800c69a <_realloc_r+0x1e>
 800c6c0:	42b4      	cmp	r4, r6
 800c6c2:	4622      	mov	r2, r4
 800c6c4:	4629      	mov	r1, r5
 800c6c6:	bf28      	it	cs
 800c6c8:	4632      	movcs	r2, r6
 800c6ca:	f7fd fef8 	bl	800a4be <memcpy>
 800c6ce:	4629      	mov	r1, r5
 800c6d0:	4638      	mov	r0, r7
 800c6d2:	f7fe fd61 	bl	800b198 <_free_r>
 800c6d6:	e7f1      	b.n	800c6bc <_realloc_r+0x40>

0800c6d8 <_strtol_l.isra.0>:
 800c6d8:	2b24      	cmp	r3, #36	@ 0x24
 800c6da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6de:	4686      	mov	lr, r0
 800c6e0:	4690      	mov	r8, r2
 800c6e2:	d801      	bhi.n	800c6e8 <_strtol_l.isra.0+0x10>
 800c6e4:	2b01      	cmp	r3, #1
 800c6e6:	d106      	bne.n	800c6f6 <_strtol_l.isra.0+0x1e>
 800c6e8:	f7fd feae 	bl	800a448 <__errno>
 800c6ec:	2316      	movs	r3, #22
 800c6ee:	6003      	str	r3, [r0, #0]
 800c6f0:	2000      	movs	r0, #0
 800c6f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6f6:	460d      	mov	r5, r1
 800c6f8:	4833      	ldr	r0, [pc, #204]	@ (800c7c8 <_strtol_l.isra.0+0xf0>)
 800c6fa:	462a      	mov	r2, r5
 800c6fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c700:	5d06      	ldrb	r6, [r0, r4]
 800c702:	f016 0608 	ands.w	r6, r6, #8
 800c706:	d1f8      	bne.n	800c6fa <_strtol_l.isra.0+0x22>
 800c708:	2c2d      	cmp	r4, #45	@ 0x2d
 800c70a:	d110      	bne.n	800c72e <_strtol_l.isra.0+0x56>
 800c70c:	2601      	movs	r6, #1
 800c70e:	782c      	ldrb	r4, [r5, #0]
 800c710:	1c95      	adds	r5, r2, #2
 800c712:	f033 0210 	bics.w	r2, r3, #16
 800c716:	d115      	bne.n	800c744 <_strtol_l.isra.0+0x6c>
 800c718:	2c30      	cmp	r4, #48	@ 0x30
 800c71a:	d10d      	bne.n	800c738 <_strtol_l.isra.0+0x60>
 800c71c:	782a      	ldrb	r2, [r5, #0]
 800c71e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c722:	2a58      	cmp	r2, #88	@ 0x58
 800c724:	d108      	bne.n	800c738 <_strtol_l.isra.0+0x60>
 800c726:	786c      	ldrb	r4, [r5, #1]
 800c728:	3502      	adds	r5, #2
 800c72a:	2310      	movs	r3, #16
 800c72c:	e00a      	b.n	800c744 <_strtol_l.isra.0+0x6c>
 800c72e:	2c2b      	cmp	r4, #43	@ 0x2b
 800c730:	bf04      	itt	eq
 800c732:	782c      	ldrbeq	r4, [r5, #0]
 800c734:	1c95      	addeq	r5, r2, #2
 800c736:	e7ec      	b.n	800c712 <_strtol_l.isra.0+0x3a>
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d1f6      	bne.n	800c72a <_strtol_l.isra.0+0x52>
 800c73c:	2c30      	cmp	r4, #48	@ 0x30
 800c73e:	bf14      	ite	ne
 800c740:	230a      	movne	r3, #10
 800c742:	2308      	moveq	r3, #8
 800c744:	2200      	movs	r2, #0
 800c746:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c74a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c74e:	fbbc f9f3 	udiv	r9, ip, r3
 800c752:	4610      	mov	r0, r2
 800c754:	fb03 ca19 	mls	sl, r3, r9, ip
 800c758:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c75c:	2f09      	cmp	r7, #9
 800c75e:	d80f      	bhi.n	800c780 <_strtol_l.isra.0+0xa8>
 800c760:	463c      	mov	r4, r7
 800c762:	42a3      	cmp	r3, r4
 800c764:	dd1b      	ble.n	800c79e <_strtol_l.isra.0+0xc6>
 800c766:	1c57      	adds	r7, r2, #1
 800c768:	d007      	beq.n	800c77a <_strtol_l.isra.0+0xa2>
 800c76a:	4581      	cmp	r9, r0
 800c76c:	d314      	bcc.n	800c798 <_strtol_l.isra.0+0xc0>
 800c76e:	d101      	bne.n	800c774 <_strtol_l.isra.0+0x9c>
 800c770:	45a2      	cmp	sl, r4
 800c772:	db11      	blt.n	800c798 <_strtol_l.isra.0+0xc0>
 800c774:	2201      	movs	r2, #1
 800c776:	fb00 4003 	mla	r0, r0, r3, r4
 800c77a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c77e:	e7eb      	b.n	800c758 <_strtol_l.isra.0+0x80>
 800c780:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c784:	2f19      	cmp	r7, #25
 800c786:	d801      	bhi.n	800c78c <_strtol_l.isra.0+0xb4>
 800c788:	3c37      	subs	r4, #55	@ 0x37
 800c78a:	e7ea      	b.n	800c762 <_strtol_l.isra.0+0x8a>
 800c78c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c790:	2f19      	cmp	r7, #25
 800c792:	d804      	bhi.n	800c79e <_strtol_l.isra.0+0xc6>
 800c794:	3c57      	subs	r4, #87	@ 0x57
 800c796:	e7e4      	b.n	800c762 <_strtol_l.isra.0+0x8a>
 800c798:	f04f 32ff 	mov.w	r2, #4294967295
 800c79c:	e7ed      	b.n	800c77a <_strtol_l.isra.0+0xa2>
 800c79e:	1c53      	adds	r3, r2, #1
 800c7a0:	d108      	bne.n	800c7b4 <_strtol_l.isra.0+0xdc>
 800c7a2:	2322      	movs	r3, #34	@ 0x22
 800c7a4:	4660      	mov	r0, ip
 800c7a6:	f8ce 3000 	str.w	r3, [lr]
 800c7aa:	f1b8 0f00 	cmp.w	r8, #0
 800c7ae:	d0a0      	beq.n	800c6f2 <_strtol_l.isra.0+0x1a>
 800c7b0:	1e69      	subs	r1, r5, #1
 800c7b2:	e006      	b.n	800c7c2 <_strtol_l.isra.0+0xea>
 800c7b4:	b106      	cbz	r6, 800c7b8 <_strtol_l.isra.0+0xe0>
 800c7b6:	4240      	negs	r0, r0
 800c7b8:	f1b8 0f00 	cmp.w	r8, #0
 800c7bc:	d099      	beq.n	800c6f2 <_strtol_l.isra.0+0x1a>
 800c7be:	2a00      	cmp	r2, #0
 800c7c0:	d1f6      	bne.n	800c7b0 <_strtol_l.isra.0+0xd8>
 800c7c2:	f8c8 1000 	str.w	r1, [r8]
 800c7c6:	e794      	b.n	800c6f2 <_strtol_l.isra.0+0x1a>
 800c7c8:	0800d361 	.word	0x0800d361

0800c7cc <_strtol_r>:
 800c7cc:	f7ff bf84 	b.w	800c6d8 <_strtol_l.isra.0>

0800c7d0 <_strtoul_l.isra.0>:
 800c7d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c7d4:	4686      	mov	lr, r0
 800c7d6:	460d      	mov	r5, r1
 800c7d8:	4e33      	ldr	r6, [pc, #204]	@ (800c8a8 <_strtoul_l.isra.0+0xd8>)
 800c7da:	4628      	mov	r0, r5
 800c7dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c7e0:	5d37      	ldrb	r7, [r6, r4]
 800c7e2:	f017 0708 	ands.w	r7, r7, #8
 800c7e6:	d1f8      	bne.n	800c7da <_strtoul_l.isra.0+0xa>
 800c7e8:	2c2d      	cmp	r4, #45	@ 0x2d
 800c7ea:	d110      	bne.n	800c80e <_strtoul_l.isra.0+0x3e>
 800c7ec:	2701      	movs	r7, #1
 800c7ee:	782c      	ldrb	r4, [r5, #0]
 800c7f0:	1c85      	adds	r5, r0, #2
 800c7f2:	f033 0010 	bics.w	r0, r3, #16
 800c7f6:	d115      	bne.n	800c824 <_strtoul_l.isra.0+0x54>
 800c7f8:	2c30      	cmp	r4, #48	@ 0x30
 800c7fa:	d10d      	bne.n	800c818 <_strtoul_l.isra.0+0x48>
 800c7fc:	7828      	ldrb	r0, [r5, #0]
 800c7fe:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800c802:	2858      	cmp	r0, #88	@ 0x58
 800c804:	d108      	bne.n	800c818 <_strtoul_l.isra.0+0x48>
 800c806:	786c      	ldrb	r4, [r5, #1]
 800c808:	3502      	adds	r5, #2
 800c80a:	2310      	movs	r3, #16
 800c80c:	e00a      	b.n	800c824 <_strtoul_l.isra.0+0x54>
 800c80e:	2c2b      	cmp	r4, #43	@ 0x2b
 800c810:	bf04      	itt	eq
 800c812:	782c      	ldrbeq	r4, [r5, #0]
 800c814:	1c85      	addeq	r5, r0, #2
 800c816:	e7ec      	b.n	800c7f2 <_strtoul_l.isra.0+0x22>
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d1f6      	bne.n	800c80a <_strtoul_l.isra.0+0x3a>
 800c81c:	2c30      	cmp	r4, #48	@ 0x30
 800c81e:	bf14      	ite	ne
 800c820:	230a      	movne	r3, #10
 800c822:	2308      	moveq	r3, #8
 800c824:	f04f 38ff 	mov.w	r8, #4294967295
 800c828:	fbb8 f8f3 	udiv	r8, r8, r3
 800c82c:	2600      	movs	r6, #0
 800c82e:	fb03 f908 	mul.w	r9, r3, r8
 800c832:	4630      	mov	r0, r6
 800c834:	ea6f 0909 	mvn.w	r9, r9
 800c838:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800c83c:	f1bc 0f09 	cmp.w	ip, #9
 800c840:	d810      	bhi.n	800c864 <_strtoul_l.isra.0+0x94>
 800c842:	4664      	mov	r4, ip
 800c844:	42a3      	cmp	r3, r4
 800c846:	dd1e      	ble.n	800c886 <_strtoul_l.isra.0+0xb6>
 800c848:	f1b6 3fff 	cmp.w	r6, #4294967295
 800c84c:	d007      	beq.n	800c85e <_strtoul_l.isra.0+0x8e>
 800c84e:	4580      	cmp	r8, r0
 800c850:	d316      	bcc.n	800c880 <_strtoul_l.isra.0+0xb0>
 800c852:	d101      	bne.n	800c858 <_strtoul_l.isra.0+0x88>
 800c854:	45a1      	cmp	r9, r4
 800c856:	db13      	blt.n	800c880 <_strtoul_l.isra.0+0xb0>
 800c858:	2601      	movs	r6, #1
 800c85a:	fb00 4003 	mla	r0, r0, r3, r4
 800c85e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c862:	e7e9      	b.n	800c838 <_strtoul_l.isra.0+0x68>
 800c864:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800c868:	f1bc 0f19 	cmp.w	ip, #25
 800c86c:	d801      	bhi.n	800c872 <_strtoul_l.isra.0+0xa2>
 800c86e:	3c37      	subs	r4, #55	@ 0x37
 800c870:	e7e8      	b.n	800c844 <_strtoul_l.isra.0+0x74>
 800c872:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800c876:	f1bc 0f19 	cmp.w	ip, #25
 800c87a:	d804      	bhi.n	800c886 <_strtoul_l.isra.0+0xb6>
 800c87c:	3c57      	subs	r4, #87	@ 0x57
 800c87e:	e7e1      	b.n	800c844 <_strtoul_l.isra.0+0x74>
 800c880:	f04f 36ff 	mov.w	r6, #4294967295
 800c884:	e7eb      	b.n	800c85e <_strtoul_l.isra.0+0x8e>
 800c886:	1c73      	adds	r3, r6, #1
 800c888:	d106      	bne.n	800c898 <_strtoul_l.isra.0+0xc8>
 800c88a:	2322      	movs	r3, #34	@ 0x22
 800c88c:	4630      	mov	r0, r6
 800c88e:	f8ce 3000 	str.w	r3, [lr]
 800c892:	b932      	cbnz	r2, 800c8a2 <_strtoul_l.isra.0+0xd2>
 800c894:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c898:	b107      	cbz	r7, 800c89c <_strtoul_l.isra.0+0xcc>
 800c89a:	4240      	negs	r0, r0
 800c89c:	2a00      	cmp	r2, #0
 800c89e:	d0f9      	beq.n	800c894 <_strtoul_l.isra.0+0xc4>
 800c8a0:	b106      	cbz	r6, 800c8a4 <_strtoul_l.isra.0+0xd4>
 800c8a2:	1e69      	subs	r1, r5, #1
 800c8a4:	6011      	str	r1, [r2, #0]
 800c8a6:	e7f5      	b.n	800c894 <_strtoul_l.isra.0+0xc4>
 800c8a8:	0800d361 	.word	0x0800d361

0800c8ac <_strtoul_r>:
 800c8ac:	f7ff bf90 	b.w	800c7d0 <_strtoul_l.isra.0>

0800c8b0 <__ascii_wctomb>:
 800c8b0:	4603      	mov	r3, r0
 800c8b2:	4608      	mov	r0, r1
 800c8b4:	b141      	cbz	r1, 800c8c8 <__ascii_wctomb+0x18>
 800c8b6:	2aff      	cmp	r2, #255	@ 0xff
 800c8b8:	d904      	bls.n	800c8c4 <__ascii_wctomb+0x14>
 800c8ba:	228a      	movs	r2, #138	@ 0x8a
 800c8bc:	f04f 30ff 	mov.w	r0, #4294967295
 800c8c0:	601a      	str	r2, [r3, #0]
 800c8c2:	4770      	bx	lr
 800c8c4:	2001      	movs	r0, #1
 800c8c6:	700a      	strb	r2, [r1, #0]
 800c8c8:	4770      	bx	lr
	...

0800c8cc <fiprintf>:
 800c8cc:	b40e      	push	{r1, r2, r3}
 800c8ce:	b503      	push	{r0, r1, lr}
 800c8d0:	4601      	mov	r1, r0
 800c8d2:	ab03      	add	r3, sp, #12
 800c8d4:	4805      	ldr	r0, [pc, #20]	@ (800c8ec <fiprintf+0x20>)
 800c8d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8da:	6800      	ldr	r0, [r0, #0]
 800c8dc:	9301      	str	r3, [sp, #4]
 800c8de:	f000 f83d 	bl	800c95c <_vfiprintf_r>
 800c8e2:	b002      	add	sp, #8
 800c8e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c8e8:	b003      	add	sp, #12
 800c8ea:	4770      	bx	lr
 800c8ec:	20000030 	.word	0x20000030

0800c8f0 <abort>:
 800c8f0:	2006      	movs	r0, #6
 800c8f2:	b508      	push	{r3, lr}
 800c8f4:	f000 fa06 	bl	800cd04 <raise>
 800c8f8:	2001      	movs	r0, #1
 800c8fa:	f7f5 fab2 	bl	8001e62 <_exit>

0800c8fe <_malloc_usable_size_r>:
 800c8fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c902:	1f18      	subs	r0, r3, #4
 800c904:	2b00      	cmp	r3, #0
 800c906:	bfbc      	itt	lt
 800c908:	580b      	ldrlt	r3, [r1, r0]
 800c90a:	18c0      	addlt	r0, r0, r3
 800c90c:	4770      	bx	lr

0800c90e <__sfputc_r>:
 800c90e:	6893      	ldr	r3, [r2, #8]
 800c910:	b410      	push	{r4}
 800c912:	3b01      	subs	r3, #1
 800c914:	2b00      	cmp	r3, #0
 800c916:	6093      	str	r3, [r2, #8]
 800c918:	da07      	bge.n	800c92a <__sfputc_r+0x1c>
 800c91a:	6994      	ldr	r4, [r2, #24]
 800c91c:	42a3      	cmp	r3, r4
 800c91e:	db01      	blt.n	800c924 <__sfputc_r+0x16>
 800c920:	290a      	cmp	r1, #10
 800c922:	d102      	bne.n	800c92a <__sfputc_r+0x1c>
 800c924:	bc10      	pop	{r4}
 800c926:	f000 b931 	b.w	800cb8c <__swbuf_r>
 800c92a:	6813      	ldr	r3, [r2, #0]
 800c92c:	1c58      	adds	r0, r3, #1
 800c92e:	6010      	str	r0, [r2, #0]
 800c930:	7019      	strb	r1, [r3, #0]
 800c932:	4608      	mov	r0, r1
 800c934:	bc10      	pop	{r4}
 800c936:	4770      	bx	lr

0800c938 <__sfputs_r>:
 800c938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c93a:	4606      	mov	r6, r0
 800c93c:	460f      	mov	r7, r1
 800c93e:	4614      	mov	r4, r2
 800c940:	18d5      	adds	r5, r2, r3
 800c942:	42ac      	cmp	r4, r5
 800c944:	d101      	bne.n	800c94a <__sfputs_r+0x12>
 800c946:	2000      	movs	r0, #0
 800c948:	e007      	b.n	800c95a <__sfputs_r+0x22>
 800c94a:	463a      	mov	r2, r7
 800c94c:	4630      	mov	r0, r6
 800c94e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c952:	f7ff ffdc 	bl	800c90e <__sfputc_r>
 800c956:	1c43      	adds	r3, r0, #1
 800c958:	d1f3      	bne.n	800c942 <__sfputs_r+0xa>
 800c95a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c95c <_vfiprintf_r>:
 800c95c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c960:	460d      	mov	r5, r1
 800c962:	4614      	mov	r4, r2
 800c964:	4698      	mov	r8, r3
 800c966:	4606      	mov	r6, r0
 800c968:	b09d      	sub	sp, #116	@ 0x74
 800c96a:	b118      	cbz	r0, 800c974 <_vfiprintf_r+0x18>
 800c96c:	6a03      	ldr	r3, [r0, #32]
 800c96e:	b90b      	cbnz	r3, 800c974 <_vfiprintf_r+0x18>
 800c970:	f7fd fbf0 	bl	800a154 <__sinit>
 800c974:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c976:	07d9      	lsls	r1, r3, #31
 800c978:	d405      	bmi.n	800c986 <_vfiprintf_r+0x2a>
 800c97a:	89ab      	ldrh	r3, [r5, #12]
 800c97c:	059a      	lsls	r2, r3, #22
 800c97e:	d402      	bmi.n	800c986 <_vfiprintf_r+0x2a>
 800c980:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c982:	f7fd fd8c 	bl	800a49e <__retarget_lock_acquire_recursive>
 800c986:	89ab      	ldrh	r3, [r5, #12]
 800c988:	071b      	lsls	r3, r3, #28
 800c98a:	d501      	bpl.n	800c990 <_vfiprintf_r+0x34>
 800c98c:	692b      	ldr	r3, [r5, #16]
 800c98e:	b99b      	cbnz	r3, 800c9b8 <_vfiprintf_r+0x5c>
 800c990:	4629      	mov	r1, r5
 800c992:	4630      	mov	r0, r6
 800c994:	f000 f938 	bl	800cc08 <__swsetup_r>
 800c998:	b170      	cbz	r0, 800c9b8 <_vfiprintf_r+0x5c>
 800c99a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c99c:	07dc      	lsls	r4, r3, #31
 800c99e:	d504      	bpl.n	800c9aa <_vfiprintf_r+0x4e>
 800c9a0:	f04f 30ff 	mov.w	r0, #4294967295
 800c9a4:	b01d      	add	sp, #116	@ 0x74
 800c9a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9aa:	89ab      	ldrh	r3, [r5, #12]
 800c9ac:	0598      	lsls	r0, r3, #22
 800c9ae:	d4f7      	bmi.n	800c9a0 <_vfiprintf_r+0x44>
 800c9b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c9b2:	f7fd fd75 	bl	800a4a0 <__retarget_lock_release_recursive>
 800c9b6:	e7f3      	b.n	800c9a0 <_vfiprintf_r+0x44>
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	9309      	str	r3, [sp, #36]	@ 0x24
 800c9bc:	2320      	movs	r3, #32
 800c9be:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c9c2:	2330      	movs	r3, #48	@ 0x30
 800c9c4:	f04f 0901 	mov.w	r9, #1
 800c9c8:	f8cd 800c 	str.w	r8, [sp, #12]
 800c9cc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800cb78 <_vfiprintf_r+0x21c>
 800c9d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c9d4:	4623      	mov	r3, r4
 800c9d6:	469a      	mov	sl, r3
 800c9d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c9dc:	b10a      	cbz	r2, 800c9e2 <_vfiprintf_r+0x86>
 800c9de:	2a25      	cmp	r2, #37	@ 0x25
 800c9e0:	d1f9      	bne.n	800c9d6 <_vfiprintf_r+0x7a>
 800c9e2:	ebba 0b04 	subs.w	fp, sl, r4
 800c9e6:	d00b      	beq.n	800ca00 <_vfiprintf_r+0xa4>
 800c9e8:	465b      	mov	r3, fp
 800c9ea:	4622      	mov	r2, r4
 800c9ec:	4629      	mov	r1, r5
 800c9ee:	4630      	mov	r0, r6
 800c9f0:	f7ff ffa2 	bl	800c938 <__sfputs_r>
 800c9f4:	3001      	adds	r0, #1
 800c9f6:	f000 80a7 	beq.w	800cb48 <_vfiprintf_r+0x1ec>
 800c9fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c9fc:	445a      	add	r2, fp
 800c9fe:	9209      	str	r2, [sp, #36]	@ 0x24
 800ca00:	f89a 3000 	ldrb.w	r3, [sl]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	f000 809f 	beq.w	800cb48 <_vfiprintf_r+0x1ec>
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	f04f 32ff 	mov.w	r2, #4294967295
 800ca10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ca14:	f10a 0a01 	add.w	sl, sl, #1
 800ca18:	9304      	str	r3, [sp, #16]
 800ca1a:	9307      	str	r3, [sp, #28]
 800ca1c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ca20:	931a      	str	r3, [sp, #104]	@ 0x68
 800ca22:	4654      	mov	r4, sl
 800ca24:	2205      	movs	r2, #5
 800ca26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca2a:	4853      	ldr	r0, [pc, #332]	@ (800cb78 <_vfiprintf_r+0x21c>)
 800ca2c:	f7fd fd39 	bl	800a4a2 <memchr>
 800ca30:	9a04      	ldr	r2, [sp, #16]
 800ca32:	b9d8      	cbnz	r0, 800ca6c <_vfiprintf_r+0x110>
 800ca34:	06d1      	lsls	r1, r2, #27
 800ca36:	bf44      	itt	mi
 800ca38:	2320      	movmi	r3, #32
 800ca3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ca3e:	0713      	lsls	r3, r2, #28
 800ca40:	bf44      	itt	mi
 800ca42:	232b      	movmi	r3, #43	@ 0x2b
 800ca44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ca48:	f89a 3000 	ldrb.w	r3, [sl]
 800ca4c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ca4e:	d015      	beq.n	800ca7c <_vfiprintf_r+0x120>
 800ca50:	4654      	mov	r4, sl
 800ca52:	2000      	movs	r0, #0
 800ca54:	f04f 0c0a 	mov.w	ip, #10
 800ca58:	9a07      	ldr	r2, [sp, #28]
 800ca5a:	4621      	mov	r1, r4
 800ca5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca60:	3b30      	subs	r3, #48	@ 0x30
 800ca62:	2b09      	cmp	r3, #9
 800ca64:	d94b      	bls.n	800cafe <_vfiprintf_r+0x1a2>
 800ca66:	b1b0      	cbz	r0, 800ca96 <_vfiprintf_r+0x13a>
 800ca68:	9207      	str	r2, [sp, #28]
 800ca6a:	e014      	b.n	800ca96 <_vfiprintf_r+0x13a>
 800ca6c:	eba0 0308 	sub.w	r3, r0, r8
 800ca70:	fa09 f303 	lsl.w	r3, r9, r3
 800ca74:	4313      	orrs	r3, r2
 800ca76:	46a2      	mov	sl, r4
 800ca78:	9304      	str	r3, [sp, #16]
 800ca7a:	e7d2      	b.n	800ca22 <_vfiprintf_r+0xc6>
 800ca7c:	9b03      	ldr	r3, [sp, #12]
 800ca7e:	1d19      	adds	r1, r3, #4
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	9103      	str	r1, [sp, #12]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	bfbb      	ittet	lt
 800ca88:	425b      	neglt	r3, r3
 800ca8a:	f042 0202 	orrlt.w	r2, r2, #2
 800ca8e:	9307      	strge	r3, [sp, #28]
 800ca90:	9307      	strlt	r3, [sp, #28]
 800ca92:	bfb8      	it	lt
 800ca94:	9204      	strlt	r2, [sp, #16]
 800ca96:	7823      	ldrb	r3, [r4, #0]
 800ca98:	2b2e      	cmp	r3, #46	@ 0x2e
 800ca9a:	d10a      	bne.n	800cab2 <_vfiprintf_r+0x156>
 800ca9c:	7863      	ldrb	r3, [r4, #1]
 800ca9e:	2b2a      	cmp	r3, #42	@ 0x2a
 800caa0:	d132      	bne.n	800cb08 <_vfiprintf_r+0x1ac>
 800caa2:	9b03      	ldr	r3, [sp, #12]
 800caa4:	3402      	adds	r4, #2
 800caa6:	1d1a      	adds	r2, r3, #4
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	9203      	str	r2, [sp, #12]
 800caac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cab0:	9305      	str	r3, [sp, #20]
 800cab2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800cb7c <_vfiprintf_r+0x220>
 800cab6:	2203      	movs	r2, #3
 800cab8:	4650      	mov	r0, sl
 800caba:	7821      	ldrb	r1, [r4, #0]
 800cabc:	f7fd fcf1 	bl	800a4a2 <memchr>
 800cac0:	b138      	cbz	r0, 800cad2 <_vfiprintf_r+0x176>
 800cac2:	2240      	movs	r2, #64	@ 0x40
 800cac4:	9b04      	ldr	r3, [sp, #16]
 800cac6:	eba0 000a 	sub.w	r0, r0, sl
 800caca:	4082      	lsls	r2, r0
 800cacc:	4313      	orrs	r3, r2
 800cace:	3401      	adds	r4, #1
 800cad0:	9304      	str	r3, [sp, #16]
 800cad2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cad6:	2206      	movs	r2, #6
 800cad8:	4829      	ldr	r0, [pc, #164]	@ (800cb80 <_vfiprintf_r+0x224>)
 800cada:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cade:	f7fd fce0 	bl	800a4a2 <memchr>
 800cae2:	2800      	cmp	r0, #0
 800cae4:	d03f      	beq.n	800cb66 <_vfiprintf_r+0x20a>
 800cae6:	4b27      	ldr	r3, [pc, #156]	@ (800cb84 <_vfiprintf_r+0x228>)
 800cae8:	bb1b      	cbnz	r3, 800cb32 <_vfiprintf_r+0x1d6>
 800caea:	9b03      	ldr	r3, [sp, #12]
 800caec:	3307      	adds	r3, #7
 800caee:	f023 0307 	bic.w	r3, r3, #7
 800caf2:	3308      	adds	r3, #8
 800caf4:	9303      	str	r3, [sp, #12]
 800caf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800caf8:	443b      	add	r3, r7
 800cafa:	9309      	str	r3, [sp, #36]	@ 0x24
 800cafc:	e76a      	b.n	800c9d4 <_vfiprintf_r+0x78>
 800cafe:	460c      	mov	r4, r1
 800cb00:	2001      	movs	r0, #1
 800cb02:	fb0c 3202 	mla	r2, ip, r2, r3
 800cb06:	e7a8      	b.n	800ca5a <_vfiprintf_r+0xfe>
 800cb08:	2300      	movs	r3, #0
 800cb0a:	f04f 0c0a 	mov.w	ip, #10
 800cb0e:	4619      	mov	r1, r3
 800cb10:	3401      	adds	r4, #1
 800cb12:	9305      	str	r3, [sp, #20]
 800cb14:	4620      	mov	r0, r4
 800cb16:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb1a:	3a30      	subs	r2, #48	@ 0x30
 800cb1c:	2a09      	cmp	r2, #9
 800cb1e:	d903      	bls.n	800cb28 <_vfiprintf_r+0x1cc>
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d0c6      	beq.n	800cab2 <_vfiprintf_r+0x156>
 800cb24:	9105      	str	r1, [sp, #20]
 800cb26:	e7c4      	b.n	800cab2 <_vfiprintf_r+0x156>
 800cb28:	4604      	mov	r4, r0
 800cb2a:	2301      	movs	r3, #1
 800cb2c:	fb0c 2101 	mla	r1, ip, r1, r2
 800cb30:	e7f0      	b.n	800cb14 <_vfiprintf_r+0x1b8>
 800cb32:	ab03      	add	r3, sp, #12
 800cb34:	9300      	str	r3, [sp, #0]
 800cb36:	462a      	mov	r2, r5
 800cb38:	4630      	mov	r0, r6
 800cb3a:	4b13      	ldr	r3, [pc, #76]	@ (800cb88 <_vfiprintf_r+0x22c>)
 800cb3c:	a904      	add	r1, sp, #16
 800cb3e:	f7fc fec1 	bl	80098c4 <_printf_float>
 800cb42:	4607      	mov	r7, r0
 800cb44:	1c78      	adds	r0, r7, #1
 800cb46:	d1d6      	bne.n	800caf6 <_vfiprintf_r+0x19a>
 800cb48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cb4a:	07d9      	lsls	r1, r3, #31
 800cb4c:	d405      	bmi.n	800cb5a <_vfiprintf_r+0x1fe>
 800cb4e:	89ab      	ldrh	r3, [r5, #12]
 800cb50:	059a      	lsls	r2, r3, #22
 800cb52:	d402      	bmi.n	800cb5a <_vfiprintf_r+0x1fe>
 800cb54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cb56:	f7fd fca3 	bl	800a4a0 <__retarget_lock_release_recursive>
 800cb5a:	89ab      	ldrh	r3, [r5, #12]
 800cb5c:	065b      	lsls	r3, r3, #25
 800cb5e:	f53f af1f 	bmi.w	800c9a0 <_vfiprintf_r+0x44>
 800cb62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cb64:	e71e      	b.n	800c9a4 <_vfiprintf_r+0x48>
 800cb66:	ab03      	add	r3, sp, #12
 800cb68:	9300      	str	r3, [sp, #0]
 800cb6a:	462a      	mov	r2, r5
 800cb6c:	4630      	mov	r0, r6
 800cb6e:	4b06      	ldr	r3, [pc, #24]	@ (800cb88 <_vfiprintf_r+0x22c>)
 800cb70:	a904      	add	r1, sp, #16
 800cb72:	f7fd f945 	bl	8009e00 <_printf_i>
 800cb76:	e7e4      	b.n	800cb42 <_vfiprintf_r+0x1e6>
 800cb78:	0800d1ee 	.word	0x0800d1ee
 800cb7c:	0800d1f4 	.word	0x0800d1f4
 800cb80:	0800d1f8 	.word	0x0800d1f8
 800cb84:	080098c5 	.word	0x080098c5
 800cb88:	0800c939 	.word	0x0800c939

0800cb8c <__swbuf_r>:
 800cb8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb8e:	460e      	mov	r6, r1
 800cb90:	4614      	mov	r4, r2
 800cb92:	4605      	mov	r5, r0
 800cb94:	b118      	cbz	r0, 800cb9e <__swbuf_r+0x12>
 800cb96:	6a03      	ldr	r3, [r0, #32]
 800cb98:	b90b      	cbnz	r3, 800cb9e <__swbuf_r+0x12>
 800cb9a:	f7fd fadb 	bl	800a154 <__sinit>
 800cb9e:	69a3      	ldr	r3, [r4, #24]
 800cba0:	60a3      	str	r3, [r4, #8]
 800cba2:	89a3      	ldrh	r3, [r4, #12]
 800cba4:	071a      	lsls	r2, r3, #28
 800cba6:	d501      	bpl.n	800cbac <__swbuf_r+0x20>
 800cba8:	6923      	ldr	r3, [r4, #16]
 800cbaa:	b943      	cbnz	r3, 800cbbe <__swbuf_r+0x32>
 800cbac:	4621      	mov	r1, r4
 800cbae:	4628      	mov	r0, r5
 800cbb0:	f000 f82a 	bl	800cc08 <__swsetup_r>
 800cbb4:	b118      	cbz	r0, 800cbbe <__swbuf_r+0x32>
 800cbb6:	f04f 37ff 	mov.w	r7, #4294967295
 800cbba:	4638      	mov	r0, r7
 800cbbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cbbe:	6823      	ldr	r3, [r4, #0]
 800cbc0:	6922      	ldr	r2, [r4, #16]
 800cbc2:	b2f6      	uxtb	r6, r6
 800cbc4:	1a98      	subs	r0, r3, r2
 800cbc6:	6963      	ldr	r3, [r4, #20]
 800cbc8:	4637      	mov	r7, r6
 800cbca:	4283      	cmp	r3, r0
 800cbcc:	dc05      	bgt.n	800cbda <__swbuf_r+0x4e>
 800cbce:	4621      	mov	r1, r4
 800cbd0:	4628      	mov	r0, r5
 800cbd2:	f7ff fc4b 	bl	800c46c <_fflush_r>
 800cbd6:	2800      	cmp	r0, #0
 800cbd8:	d1ed      	bne.n	800cbb6 <__swbuf_r+0x2a>
 800cbda:	68a3      	ldr	r3, [r4, #8]
 800cbdc:	3b01      	subs	r3, #1
 800cbde:	60a3      	str	r3, [r4, #8]
 800cbe0:	6823      	ldr	r3, [r4, #0]
 800cbe2:	1c5a      	adds	r2, r3, #1
 800cbe4:	6022      	str	r2, [r4, #0]
 800cbe6:	701e      	strb	r6, [r3, #0]
 800cbe8:	6962      	ldr	r2, [r4, #20]
 800cbea:	1c43      	adds	r3, r0, #1
 800cbec:	429a      	cmp	r2, r3
 800cbee:	d004      	beq.n	800cbfa <__swbuf_r+0x6e>
 800cbf0:	89a3      	ldrh	r3, [r4, #12]
 800cbf2:	07db      	lsls	r3, r3, #31
 800cbf4:	d5e1      	bpl.n	800cbba <__swbuf_r+0x2e>
 800cbf6:	2e0a      	cmp	r6, #10
 800cbf8:	d1df      	bne.n	800cbba <__swbuf_r+0x2e>
 800cbfa:	4621      	mov	r1, r4
 800cbfc:	4628      	mov	r0, r5
 800cbfe:	f7ff fc35 	bl	800c46c <_fflush_r>
 800cc02:	2800      	cmp	r0, #0
 800cc04:	d0d9      	beq.n	800cbba <__swbuf_r+0x2e>
 800cc06:	e7d6      	b.n	800cbb6 <__swbuf_r+0x2a>

0800cc08 <__swsetup_r>:
 800cc08:	b538      	push	{r3, r4, r5, lr}
 800cc0a:	4b29      	ldr	r3, [pc, #164]	@ (800ccb0 <__swsetup_r+0xa8>)
 800cc0c:	4605      	mov	r5, r0
 800cc0e:	6818      	ldr	r0, [r3, #0]
 800cc10:	460c      	mov	r4, r1
 800cc12:	b118      	cbz	r0, 800cc1c <__swsetup_r+0x14>
 800cc14:	6a03      	ldr	r3, [r0, #32]
 800cc16:	b90b      	cbnz	r3, 800cc1c <__swsetup_r+0x14>
 800cc18:	f7fd fa9c 	bl	800a154 <__sinit>
 800cc1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc20:	0719      	lsls	r1, r3, #28
 800cc22:	d422      	bmi.n	800cc6a <__swsetup_r+0x62>
 800cc24:	06da      	lsls	r2, r3, #27
 800cc26:	d407      	bmi.n	800cc38 <__swsetup_r+0x30>
 800cc28:	2209      	movs	r2, #9
 800cc2a:	602a      	str	r2, [r5, #0]
 800cc2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cc30:	f04f 30ff 	mov.w	r0, #4294967295
 800cc34:	81a3      	strh	r3, [r4, #12]
 800cc36:	e033      	b.n	800cca0 <__swsetup_r+0x98>
 800cc38:	0758      	lsls	r0, r3, #29
 800cc3a:	d512      	bpl.n	800cc62 <__swsetup_r+0x5a>
 800cc3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cc3e:	b141      	cbz	r1, 800cc52 <__swsetup_r+0x4a>
 800cc40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cc44:	4299      	cmp	r1, r3
 800cc46:	d002      	beq.n	800cc4e <__swsetup_r+0x46>
 800cc48:	4628      	mov	r0, r5
 800cc4a:	f7fe faa5 	bl	800b198 <_free_r>
 800cc4e:	2300      	movs	r3, #0
 800cc50:	6363      	str	r3, [r4, #52]	@ 0x34
 800cc52:	89a3      	ldrh	r3, [r4, #12]
 800cc54:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cc58:	81a3      	strh	r3, [r4, #12]
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	6063      	str	r3, [r4, #4]
 800cc5e:	6923      	ldr	r3, [r4, #16]
 800cc60:	6023      	str	r3, [r4, #0]
 800cc62:	89a3      	ldrh	r3, [r4, #12]
 800cc64:	f043 0308 	orr.w	r3, r3, #8
 800cc68:	81a3      	strh	r3, [r4, #12]
 800cc6a:	6923      	ldr	r3, [r4, #16]
 800cc6c:	b94b      	cbnz	r3, 800cc82 <__swsetup_r+0x7a>
 800cc6e:	89a3      	ldrh	r3, [r4, #12]
 800cc70:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cc74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cc78:	d003      	beq.n	800cc82 <__swsetup_r+0x7a>
 800cc7a:	4621      	mov	r1, r4
 800cc7c:	4628      	mov	r0, r5
 800cc7e:	f000 f882 	bl	800cd86 <__smakebuf_r>
 800cc82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc86:	f013 0201 	ands.w	r2, r3, #1
 800cc8a:	d00a      	beq.n	800cca2 <__swsetup_r+0x9a>
 800cc8c:	2200      	movs	r2, #0
 800cc8e:	60a2      	str	r2, [r4, #8]
 800cc90:	6962      	ldr	r2, [r4, #20]
 800cc92:	4252      	negs	r2, r2
 800cc94:	61a2      	str	r2, [r4, #24]
 800cc96:	6922      	ldr	r2, [r4, #16]
 800cc98:	b942      	cbnz	r2, 800ccac <__swsetup_r+0xa4>
 800cc9a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cc9e:	d1c5      	bne.n	800cc2c <__swsetup_r+0x24>
 800cca0:	bd38      	pop	{r3, r4, r5, pc}
 800cca2:	0799      	lsls	r1, r3, #30
 800cca4:	bf58      	it	pl
 800cca6:	6962      	ldrpl	r2, [r4, #20]
 800cca8:	60a2      	str	r2, [r4, #8]
 800ccaa:	e7f4      	b.n	800cc96 <__swsetup_r+0x8e>
 800ccac:	2000      	movs	r0, #0
 800ccae:	e7f7      	b.n	800cca0 <__swsetup_r+0x98>
 800ccb0:	20000030 	.word	0x20000030

0800ccb4 <_raise_r>:
 800ccb4:	291f      	cmp	r1, #31
 800ccb6:	b538      	push	{r3, r4, r5, lr}
 800ccb8:	4605      	mov	r5, r0
 800ccba:	460c      	mov	r4, r1
 800ccbc:	d904      	bls.n	800ccc8 <_raise_r+0x14>
 800ccbe:	2316      	movs	r3, #22
 800ccc0:	6003      	str	r3, [r0, #0]
 800ccc2:	f04f 30ff 	mov.w	r0, #4294967295
 800ccc6:	bd38      	pop	{r3, r4, r5, pc}
 800ccc8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ccca:	b112      	cbz	r2, 800ccd2 <_raise_r+0x1e>
 800cccc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ccd0:	b94b      	cbnz	r3, 800cce6 <_raise_r+0x32>
 800ccd2:	4628      	mov	r0, r5
 800ccd4:	f000 f830 	bl	800cd38 <_getpid_r>
 800ccd8:	4622      	mov	r2, r4
 800ccda:	4601      	mov	r1, r0
 800ccdc:	4628      	mov	r0, r5
 800ccde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cce2:	f000 b817 	b.w	800cd14 <_kill_r>
 800cce6:	2b01      	cmp	r3, #1
 800cce8:	d00a      	beq.n	800cd00 <_raise_r+0x4c>
 800ccea:	1c59      	adds	r1, r3, #1
 800ccec:	d103      	bne.n	800ccf6 <_raise_r+0x42>
 800ccee:	2316      	movs	r3, #22
 800ccf0:	6003      	str	r3, [r0, #0]
 800ccf2:	2001      	movs	r0, #1
 800ccf4:	e7e7      	b.n	800ccc6 <_raise_r+0x12>
 800ccf6:	2100      	movs	r1, #0
 800ccf8:	4620      	mov	r0, r4
 800ccfa:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ccfe:	4798      	blx	r3
 800cd00:	2000      	movs	r0, #0
 800cd02:	e7e0      	b.n	800ccc6 <_raise_r+0x12>

0800cd04 <raise>:
 800cd04:	4b02      	ldr	r3, [pc, #8]	@ (800cd10 <raise+0xc>)
 800cd06:	4601      	mov	r1, r0
 800cd08:	6818      	ldr	r0, [r3, #0]
 800cd0a:	f7ff bfd3 	b.w	800ccb4 <_raise_r>
 800cd0e:	bf00      	nop
 800cd10:	20000030 	.word	0x20000030

0800cd14 <_kill_r>:
 800cd14:	b538      	push	{r3, r4, r5, lr}
 800cd16:	2300      	movs	r3, #0
 800cd18:	4d06      	ldr	r5, [pc, #24]	@ (800cd34 <_kill_r+0x20>)
 800cd1a:	4604      	mov	r4, r0
 800cd1c:	4608      	mov	r0, r1
 800cd1e:	4611      	mov	r1, r2
 800cd20:	602b      	str	r3, [r5, #0]
 800cd22:	f7f5 f88e 	bl	8001e42 <_kill>
 800cd26:	1c43      	adds	r3, r0, #1
 800cd28:	d102      	bne.n	800cd30 <_kill_r+0x1c>
 800cd2a:	682b      	ldr	r3, [r5, #0]
 800cd2c:	b103      	cbz	r3, 800cd30 <_kill_r+0x1c>
 800cd2e:	6023      	str	r3, [r4, #0]
 800cd30:	bd38      	pop	{r3, r4, r5, pc}
 800cd32:	bf00      	nop
 800cd34:	20002ac0 	.word	0x20002ac0

0800cd38 <_getpid_r>:
 800cd38:	f7f5 b87c 	b.w	8001e34 <_getpid>

0800cd3c <__swhatbuf_r>:
 800cd3c:	b570      	push	{r4, r5, r6, lr}
 800cd3e:	460c      	mov	r4, r1
 800cd40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd44:	4615      	mov	r5, r2
 800cd46:	2900      	cmp	r1, #0
 800cd48:	461e      	mov	r6, r3
 800cd4a:	b096      	sub	sp, #88	@ 0x58
 800cd4c:	da0c      	bge.n	800cd68 <__swhatbuf_r+0x2c>
 800cd4e:	89a3      	ldrh	r3, [r4, #12]
 800cd50:	2100      	movs	r1, #0
 800cd52:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cd56:	bf14      	ite	ne
 800cd58:	2340      	movne	r3, #64	@ 0x40
 800cd5a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cd5e:	2000      	movs	r0, #0
 800cd60:	6031      	str	r1, [r6, #0]
 800cd62:	602b      	str	r3, [r5, #0]
 800cd64:	b016      	add	sp, #88	@ 0x58
 800cd66:	bd70      	pop	{r4, r5, r6, pc}
 800cd68:	466a      	mov	r2, sp
 800cd6a:	f000 f849 	bl	800ce00 <_fstat_r>
 800cd6e:	2800      	cmp	r0, #0
 800cd70:	dbed      	blt.n	800cd4e <__swhatbuf_r+0x12>
 800cd72:	9901      	ldr	r1, [sp, #4]
 800cd74:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cd78:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cd7c:	4259      	negs	r1, r3
 800cd7e:	4159      	adcs	r1, r3
 800cd80:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cd84:	e7eb      	b.n	800cd5e <__swhatbuf_r+0x22>

0800cd86 <__smakebuf_r>:
 800cd86:	898b      	ldrh	r3, [r1, #12]
 800cd88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cd8a:	079d      	lsls	r5, r3, #30
 800cd8c:	4606      	mov	r6, r0
 800cd8e:	460c      	mov	r4, r1
 800cd90:	d507      	bpl.n	800cda2 <__smakebuf_r+0x1c>
 800cd92:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cd96:	6023      	str	r3, [r4, #0]
 800cd98:	6123      	str	r3, [r4, #16]
 800cd9a:	2301      	movs	r3, #1
 800cd9c:	6163      	str	r3, [r4, #20]
 800cd9e:	b003      	add	sp, #12
 800cda0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cda2:	466a      	mov	r2, sp
 800cda4:	ab01      	add	r3, sp, #4
 800cda6:	f7ff ffc9 	bl	800cd3c <__swhatbuf_r>
 800cdaa:	9f00      	ldr	r7, [sp, #0]
 800cdac:	4605      	mov	r5, r0
 800cdae:	4639      	mov	r1, r7
 800cdb0:	4630      	mov	r0, r6
 800cdb2:	f7fe fa63 	bl	800b27c <_malloc_r>
 800cdb6:	b948      	cbnz	r0, 800cdcc <__smakebuf_r+0x46>
 800cdb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cdbc:	059a      	lsls	r2, r3, #22
 800cdbe:	d4ee      	bmi.n	800cd9e <__smakebuf_r+0x18>
 800cdc0:	f023 0303 	bic.w	r3, r3, #3
 800cdc4:	f043 0302 	orr.w	r3, r3, #2
 800cdc8:	81a3      	strh	r3, [r4, #12]
 800cdca:	e7e2      	b.n	800cd92 <__smakebuf_r+0xc>
 800cdcc:	89a3      	ldrh	r3, [r4, #12]
 800cdce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cdd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cdd6:	81a3      	strh	r3, [r4, #12]
 800cdd8:	9b01      	ldr	r3, [sp, #4]
 800cdda:	6020      	str	r0, [r4, #0]
 800cddc:	b15b      	cbz	r3, 800cdf6 <__smakebuf_r+0x70>
 800cdde:	4630      	mov	r0, r6
 800cde0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cde4:	f000 f81e 	bl	800ce24 <_isatty_r>
 800cde8:	b128      	cbz	r0, 800cdf6 <__smakebuf_r+0x70>
 800cdea:	89a3      	ldrh	r3, [r4, #12]
 800cdec:	f023 0303 	bic.w	r3, r3, #3
 800cdf0:	f043 0301 	orr.w	r3, r3, #1
 800cdf4:	81a3      	strh	r3, [r4, #12]
 800cdf6:	89a3      	ldrh	r3, [r4, #12]
 800cdf8:	431d      	orrs	r5, r3
 800cdfa:	81a5      	strh	r5, [r4, #12]
 800cdfc:	e7cf      	b.n	800cd9e <__smakebuf_r+0x18>
	...

0800ce00 <_fstat_r>:
 800ce00:	b538      	push	{r3, r4, r5, lr}
 800ce02:	2300      	movs	r3, #0
 800ce04:	4d06      	ldr	r5, [pc, #24]	@ (800ce20 <_fstat_r+0x20>)
 800ce06:	4604      	mov	r4, r0
 800ce08:	4608      	mov	r0, r1
 800ce0a:	4611      	mov	r1, r2
 800ce0c:	602b      	str	r3, [r5, #0]
 800ce0e:	f7f5 f877 	bl	8001f00 <_fstat>
 800ce12:	1c43      	adds	r3, r0, #1
 800ce14:	d102      	bne.n	800ce1c <_fstat_r+0x1c>
 800ce16:	682b      	ldr	r3, [r5, #0]
 800ce18:	b103      	cbz	r3, 800ce1c <_fstat_r+0x1c>
 800ce1a:	6023      	str	r3, [r4, #0]
 800ce1c:	bd38      	pop	{r3, r4, r5, pc}
 800ce1e:	bf00      	nop
 800ce20:	20002ac0 	.word	0x20002ac0

0800ce24 <_isatty_r>:
 800ce24:	b538      	push	{r3, r4, r5, lr}
 800ce26:	2300      	movs	r3, #0
 800ce28:	4d05      	ldr	r5, [pc, #20]	@ (800ce40 <_isatty_r+0x1c>)
 800ce2a:	4604      	mov	r4, r0
 800ce2c:	4608      	mov	r0, r1
 800ce2e:	602b      	str	r3, [r5, #0]
 800ce30:	f7f5 f875 	bl	8001f1e <_isatty>
 800ce34:	1c43      	adds	r3, r0, #1
 800ce36:	d102      	bne.n	800ce3e <_isatty_r+0x1a>
 800ce38:	682b      	ldr	r3, [r5, #0]
 800ce3a:	b103      	cbz	r3, 800ce3e <_isatty_r+0x1a>
 800ce3c:	6023      	str	r3, [r4, #0]
 800ce3e:	bd38      	pop	{r3, r4, r5, pc}
 800ce40:	20002ac0 	.word	0x20002ac0

0800ce44 <_init>:
 800ce44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce46:	bf00      	nop
 800ce48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce4a:	bc08      	pop	{r3}
 800ce4c:	469e      	mov	lr, r3
 800ce4e:	4770      	bx	lr

0800ce50 <_fini>:
 800ce50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce52:	bf00      	nop
 800ce54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce56:	bc08      	pop	{r3}
 800ce58:	469e      	mov	lr, r3
 800ce5a:	4770      	bx	lr
