
BTL_STM32_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d03c  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005fc  0800d150  0800d150  0000e150  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d74c  0800d74c  0000f1f0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d74c  0800d74c  0000e74c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d754  0800d754  0000f1f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d754  0800d754  0000e754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d758  0800d758  0000e758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  0800d75c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000028e8  200001f0  0800d94c  0000f1f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002ad8  0800d94c  0000fad8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000f1f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cd7b  00000000  00000000  0000f219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f08  00000000  00000000  0002bf94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a00  00000000  00000000  0002fea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000144e  00000000  00000000  000318a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004b83  00000000  00000000  00032cee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cdfa  00000000  00000000  00037871  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e9d3  00000000  00000000  0005466b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f303e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008250  00000000  00000000  000f3084  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000fb2d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d134 	.word	0x0800d134

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	0800d134 	.word	0x0800d134

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	@ 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	@ 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000f4e:	4a38      	ldr	r2, [pc, #224]	@ (8001030 <HD44780_Init+0xec>)
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000f54:	4b37      	ldr	r3, [pc, #220]	@ (8001034 <HD44780_Init+0xf0>)
 8000f56:	2208      	movs	r2, #8
 8000f58:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000f5a:	4b37      	ldr	r3, [pc, #220]	@ (8001038 <HD44780_Init+0xf4>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000f60:	4b33      	ldr	r3, [pc, #204]	@ (8001030 <HD44780_Init+0xec>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d907      	bls.n	8000f78 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000f68:	4b33      	ldr	r3, [pc, #204]	@ (8001038 <HD44780_Init+0xf4>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	f043 0308 	orr.w	r3, r3, #8
 8000f70:	b2da      	uxtb	r2, r3
 8000f72:	4b31      	ldr	r3, [pc, #196]	@ (8001038 <HD44780_Init+0xf4>)
 8000f74:	701a      	strb	r2, [r3, #0]
 8000f76:	e006      	b.n	8000f86 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000f78:	4b2f      	ldr	r3, [pc, #188]	@ (8001038 <HD44780_Init+0xf4>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	f043 0304 	orr.w	r3, r3, #4
 8000f80:	b2da      	uxtb	r2, r3
 8000f82:	4b2d      	ldr	r3, [pc, #180]	@ (8001038 <HD44780_Init+0xf4>)
 8000f84:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000f86:	f000 f987 	bl	8001298 <DelayInit>
  HAL_Delay(50);
 8000f8a:	2032      	movs	r0, #50	@ 0x32
 8000f8c:	f001 f986 	bl	800229c <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000f90:	4b28      	ldr	r3, [pc, #160]	@ (8001034 <HD44780_Init+0xf0>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f000 f945 	bl	8001224 <ExpanderWrite>
  HAL_Delay(1000);
 8000f9a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f9e:	f001 f97d 	bl	800229c <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000fa2:	2030      	movs	r0, #48	@ 0x30
 8000fa4:	f000 f92c 	bl	8001200 <Write4Bits>
  DelayUS(4500);
 8000fa8:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000fac:	f000 f99c 	bl	80012e8 <DelayUS>

  Write4Bits(0x03 << 4);
 8000fb0:	2030      	movs	r0, #48	@ 0x30
 8000fb2:	f000 f925 	bl	8001200 <Write4Bits>
  DelayUS(4500);
 8000fb6:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000fba:	f000 f995 	bl	80012e8 <DelayUS>

  Write4Bits(0x03 << 4);
 8000fbe:	2030      	movs	r0, #48	@ 0x30
 8000fc0:	f000 f91e 	bl	8001200 <Write4Bits>
  DelayUS(4500);
 8000fc4:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000fc8:	f000 f98e 	bl	80012e8 <DelayUS>

  Write4Bits(0x02 << 4);
 8000fcc:	2020      	movs	r0, #32
 8000fce:	f000 f917 	bl	8001200 <Write4Bits>
  DelayUS(100);
 8000fd2:	2064      	movs	r0, #100	@ 0x64
 8000fd4:	f000 f988 	bl	80012e8 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000fd8:	4b17      	ldr	r3, [pc, #92]	@ (8001038 <HD44780_Init+0xf4>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	f043 0320 	orr.w	r3, r3, #32
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f000 f8cf 	bl	8001186 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000fe8:	4b14      	ldr	r3, [pc, #80]	@ (800103c <HD44780_Init+0xf8>)
 8000fea:	2204      	movs	r2, #4
 8000fec:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8000fee:	f000 f875 	bl	80010dc <HD44780_Display>
  HD44780_Clear();
 8000ff2:	f000 f82b 	bl	800104c <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000ff6:	4b12      	ldr	r3, [pc, #72]	@ (8001040 <HD44780_Init+0xfc>)
 8000ff8:	2202      	movs	r2, #2
 8000ffa:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000ffc:	4b10      	ldr	r3, [pc, #64]	@ (8001040 <HD44780_Init+0xfc>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	f043 0304 	orr.w	r3, r3, #4
 8001004:	b2db      	uxtb	r3, r3
 8001006:	4618      	mov	r0, r3
 8001008:	f000 f8bd 	bl	8001186 <SendCommand>
  DelayUS(4500);
 800100c:	f241 1094 	movw	r0, #4500	@ 0x1194
 8001010:	f000 f96a 	bl	80012e8 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8001014:	490b      	ldr	r1, [pc, #44]	@ (8001044 <HD44780_Init+0x100>)
 8001016:	2000      	movs	r0, #0
 8001018:	f000 f876 	bl	8001108 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 800101c:	490a      	ldr	r1, [pc, #40]	@ (8001048 <HD44780_Init+0x104>)
 800101e:	2001      	movs	r0, #1
 8001020:	f000 f872 	bl	8001108 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8001024:	f000 f81d 	bl	8001062 <HD44780_Home>
}
 8001028:	bf00      	nop
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	2000020f 	.word	0x2000020f
 8001034:	20000210 	.word	0x20000210
 8001038:	2000020c 	.word	0x2000020c
 800103c:	2000020d 	.word	0x2000020d
 8001040:	2000020e 	.word	0x2000020e
 8001044:	20000000 	.word	0x20000000
 8001048:	20000008 	.word	0x20000008

0800104c <HD44780_Clear>:

void HD44780_Clear()
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8001050:	2001      	movs	r0, #1
 8001052:	f000 f898 	bl	8001186 <SendCommand>
  DelayUS(2000);
 8001056:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800105a:	f000 f945 	bl	80012e8 <DelayUS>
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}

08001062 <HD44780_Home>:

void HD44780_Home()
{
 8001062:	b580      	push	{r7, lr}
 8001064:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8001066:	2002      	movs	r0, #2
 8001068:	f000 f88d 	bl	8001186 <SendCommand>
  DelayUS(2000);
 800106c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001070:	f000 f93a 	bl	80012e8 <DelayUS>
}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}

08001078 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8001078:	b590      	push	{r4, r7, lr}
 800107a:	b087      	sub	sp, #28
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	460a      	mov	r2, r1
 8001082:	71fb      	strb	r3, [r7, #7]
 8001084:	4613      	mov	r3, r2
 8001086:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8001088:	4b12      	ldr	r3, [pc, #72]	@ (80010d4 <HD44780_SetCursor+0x5c>)
 800108a:	f107 0408 	add.w	r4, r7, #8
 800108e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001090:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8001094:	4b10      	ldr	r3, [pc, #64]	@ (80010d8 <HD44780_SetCursor+0x60>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	79ba      	ldrb	r2, [r7, #6]
 800109a:	429a      	cmp	r2, r3
 800109c:	d303      	bcc.n	80010a6 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 800109e:	4b0e      	ldr	r3, [pc, #56]	@ (80010d8 <HD44780_SetCursor+0x60>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	3b01      	subs	r3, #1
 80010a4:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80010a6:	79bb      	ldrb	r3, [r7, #6]
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	3318      	adds	r3, #24
 80010ac:	443b      	add	r3, r7
 80010ae:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80010b2:	b2da      	uxtb	r2, r3
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	4413      	add	r3, r2
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	b25b      	sxtb	r3, r3
 80010bc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80010c0:	b25b      	sxtb	r3, r3
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	4618      	mov	r0, r3
 80010c6:	f000 f85e 	bl	8001186 <SendCommand>
}
 80010ca:	bf00      	nop
 80010cc:	371c      	adds	r7, #28
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd90      	pop	{r4, r7, pc}
 80010d2:	bf00      	nop
 80010d4:	0800d150 	.word	0x0800d150
 80010d8:	2000020f 	.word	0x2000020f

080010dc <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 80010e0:	4b08      	ldr	r3, [pc, #32]	@ (8001104 <HD44780_Display+0x28>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	f043 0304 	orr.w	r3, r3, #4
 80010e8:	b2da      	uxtb	r2, r3
 80010ea:	4b06      	ldr	r3, [pc, #24]	@ (8001104 <HD44780_Display+0x28>)
 80010ec:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80010ee:	4b05      	ldr	r3, [pc, #20]	@ (8001104 <HD44780_Display+0x28>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	f043 0308 	orr.w	r3, r3, #8
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	4618      	mov	r0, r3
 80010fa:	f000 f844 	bl	8001186 <SendCommand>
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	2000020d 	.word	0x2000020d

08001108 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	6039      	str	r1, [r7, #0]
 8001112:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	f003 0307 	and.w	r3, r3, #7
 800111a:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 800111c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001120:	00db      	lsls	r3, r3, #3
 8001122:	b25b      	sxtb	r3, r3
 8001124:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001128:	b25b      	sxtb	r3, r3
 800112a:	b2db      	uxtb	r3, r3
 800112c:	4618      	mov	r0, r3
 800112e:	f000 f82a 	bl	8001186 <SendCommand>
  for (int i=0; i<8; i++)
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	e009      	b.n	800114c <HD44780_CreateSpecialChar+0x44>
  {
    SendChar(charmap[i]);
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	683a      	ldr	r2, [r7, #0]
 800113c:	4413      	add	r3, r2
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	4618      	mov	r0, r3
 8001142:	f000 f82e 	bl	80011a2 <SendChar>
  for (int i=0; i<8; i++)
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	3301      	adds	r3, #1
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	2b07      	cmp	r3, #7
 8001150:	ddf2      	ble.n	8001138 <HD44780_CreateSpecialChar+0x30>
  }
}
 8001152:	bf00      	nop
 8001154:	bf00      	nop
 8001156:	3710      	adds	r7, #16
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8001164:	e006      	b.n	8001174 <HD44780_PrintStr+0x18>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	1c5a      	adds	r2, r3, #1
 800116a:	607a      	str	r2, [r7, #4]
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	4618      	mov	r0, r3
 8001170:	f000 f817 	bl	80011a2 <SendChar>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d1f4      	bne.n	8001166 <HD44780_PrintStr+0xa>
}
 800117c:	bf00      	nop
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	b082      	sub	sp, #8
 800118a:	af00      	add	r7, sp, #0
 800118c:	4603      	mov	r3, r0
 800118e:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	2100      	movs	r1, #0
 8001194:	4618      	mov	r0, r3
 8001196:	f000 f812 	bl	80011be <Send>
}
 800119a:	bf00      	nop
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <SendChar>:

static void SendChar(uint8_t ch)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b082      	sub	sp, #8
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	4603      	mov	r3, r0
 80011aa:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 80011ac:	79fb      	ldrb	r3, [r7, #7]
 80011ae:	2101      	movs	r1, #1
 80011b0:	4618      	mov	r0, r3
 80011b2:	f000 f804 	bl	80011be <Send>
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b084      	sub	sp, #16
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	4603      	mov	r3, r0
 80011c6:	460a      	mov	r2, r1
 80011c8:	71fb      	strb	r3, [r7, #7]
 80011ca:	4613      	mov	r3, r2
 80011cc:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	f023 030f 	bic.w	r3, r3, #15
 80011d4:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	011b      	lsls	r3, r3, #4
 80011da:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 80011dc:	7bfa      	ldrb	r2, [r7, #15]
 80011de:	79bb      	ldrb	r3, [r7, #6]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	4618      	mov	r0, r3
 80011e6:	f000 f80b 	bl	8001200 <Write4Bits>
  Write4Bits((lownib)|mode);
 80011ea:	7bba      	ldrb	r2, [r7, #14]
 80011ec:	79bb      	ldrb	r3, [r7, #6]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 f804 	bl	8001200 <Write4Bits>
}
 80011f8:	bf00      	nop
 80011fa:	3710      	adds	r7, #16
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	4618      	mov	r0, r3
 800120e:	f000 f809 	bl	8001224 <ExpanderWrite>
  PulseEnable(value);
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	4618      	mov	r0, r3
 8001216:	f000 f821 	bl	800125c <PulseEnable>
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
	...

08001224 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af02      	add	r7, sp, #8
 800122a:	4603      	mov	r3, r0
 800122c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 800122e:	4b09      	ldr	r3, [pc, #36]	@ (8001254 <ExpanderWrite+0x30>)
 8001230:	781a      	ldrb	r2, [r3, #0]
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	4313      	orrs	r3, r2
 8001236:	b2db      	uxtb	r3, r3
 8001238:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 800123a:	f107 020f 	add.w	r2, r7, #15
 800123e:	230a      	movs	r3, #10
 8001240:	9300      	str	r3, [sp, #0]
 8001242:	2301      	movs	r3, #1
 8001244:	214e      	movs	r1, #78	@ 0x4e
 8001246:	4804      	ldr	r0, [pc, #16]	@ (8001258 <ExpanderWrite+0x34>)
 8001248:	f002 f8fe 	bl	8003448 <HAL_I2C_Master_Transmit>
}
 800124c:	bf00      	nop
 800124e:	3710      	adds	r7, #16
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20000210 	.word	0x20000210
 8001258:	20000244 	.word	0x20000244

0800125c <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	f043 0304 	orr.w	r3, r3, #4
 800126c:	b2db      	uxtb	r3, r3
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff ffd8 	bl	8001224 <ExpanderWrite>
  DelayUS(20);
 8001274:	2014      	movs	r0, #20
 8001276:	f000 f837 	bl	80012e8 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	f023 0304 	bic.w	r3, r3, #4
 8001280:	b2db      	uxtb	r3, r3
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff ffce 	bl	8001224 <ExpanderWrite>
  DelayUS(20);
 8001288:	2014      	movs	r0, #20
 800128a:	f000 f82d 	bl	80012e8 <DelayUS>
}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
	...

08001298 <DelayInit>:

static void DelayInit(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 800129c:	4b10      	ldr	r3, [pc, #64]	@ (80012e0 <DelayInit+0x48>)
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	4a0f      	ldr	r2, [pc, #60]	@ (80012e0 <DelayInit+0x48>)
 80012a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80012a6:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 80012a8:	4b0d      	ldr	r3, [pc, #52]	@ (80012e0 <DelayInit+0x48>)
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	4a0c      	ldr	r2, [pc, #48]	@ (80012e0 <DelayInit+0x48>)
 80012ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80012b2:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80012b4:	4b0b      	ldr	r3, [pc, #44]	@ (80012e4 <DelayInit+0x4c>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a0a      	ldr	r2, [pc, #40]	@ (80012e4 <DelayInit+0x4c>)
 80012ba:	f023 0301 	bic.w	r3, r3, #1
 80012be:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80012c0:	4b08      	ldr	r3, [pc, #32]	@ (80012e4 <DelayInit+0x4c>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a07      	ldr	r2, [pc, #28]	@ (80012e4 <DelayInit+0x4c>)
 80012c6:	f043 0301 	orr.w	r3, r3, #1
 80012ca:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 80012cc:	4b05      	ldr	r3, [pc, #20]	@ (80012e4 <DelayInit+0x4c>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 80012d2:	bf00      	nop
  __ASM volatile ("NOP");
 80012d4:	bf00      	nop
  __ASM volatile ("NOP");
 80012d6:	bf00      	nop
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	bc80      	pop	{r7}
 80012de:	4770      	bx	lr
 80012e0:	e000edf0 	.word	0xe000edf0
 80012e4:	e0001000 	.word	0xe0001000

080012e8 <DelayUS>:

static void DelayUS(uint32_t us) {
 80012e8:	b480      	push	{r7}
 80012ea:	b087      	sub	sp, #28
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 80012f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001328 <DelayUS+0x40>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a0d      	ldr	r2, [pc, #52]	@ (800132c <DelayUS+0x44>)
 80012f6:	fba2 2303 	umull	r2, r3, r2, r3
 80012fa:	0c9a      	lsrs	r2, r3, #18
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	fb02 f303 	mul.w	r3, r2, r3
 8001302:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8001304:	4b0a      	ldr	r3, [pc, #40]	@ (8001330 <DelayUS+0x48>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 800130a:	4b09      	ldr	r3, [pc, #36]	@ (8001330 <DelayUS+0x48>)
 800130c:	685a      	ldr	r2, [r3, #4]
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	697a      	ldr	r2, [r7, #20]
 8001318:	429a      	cmp	r2, r3
 800131a:	d8f6      	bhi.n	800130a <DelayUS+0x22>
}
 800131c:	bf00      	nop
 800131e:	bf00      	nop
 8001320:	371c      	adds	r7, #28
 8001322:	46bd      	mov	sp, r7
 8001324:	bc80      	pop	{r7}
 8001326:	4770      	bx	lr
 8001328:	20000018 	.word	0x20000018
 800132c:	431bde83 	.word	0x431bde83
 8001330:	e0001000 	.word	0xe0001000

08001334 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a09      	ldr	r2, [pc, #36]	@ (8001368 <HAL_UART_RxCpltCallback+0x34>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d10b      	bne.n	800135e <HAL_UART_RxCpltCallback+0x2a>
    {
        osMessageQueuePut(commandQueueHandle, &rxByte, 0, 0);
 8001346:	4b09      	ldr	r3, [pc, #36]	@ (800136c <HAL_UART_RxCpltCallback+0x38>)
 8001348:	6818      	ldr	r0, [r3, #0]
 800134a:	2300      	movs	r3, #0
 800134c:	2200      	movs	r2, #0
 800134e:	4908      	ldr	r1, [pc, #32]	@ (8001370 <HAL_UART_RxCpltCallback+0x3c>)
 8001350:	f005 fa88 	bl	8006864 <osMessageQueuePut>
        HAL_UART_Receive_IT(&huart1, &rxByte, 1);
 8001354:	2201      	movs	r2, #1
 8001356:	4906      	ldr	r1, [pc, #24]	@ (8001370 <HAL_UART_RxCpltCallback+0x3c>)
 8001358:	4806      	ldr	r0, [pc, #24]	@ (8001374 <HAL_UART_RxCpltCallback+0x40>)
 800135a:	f004 fa12 	bl	8005782 <HAL_UART_Receive_IT>
    }
}
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40013800 	.word	0x40013800
 800136c:	2000033c 	.word	0x2000033c
 8001370:	20000344 	.word	0x20000344
 8001374:	200002e0 	.word	0x200002e0

08001378 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800137c:	f000 ff5c 	bl	8002238 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001380:	f000 f894 	bl	80014ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001384:	f000 f9fa 	bl	800177c <MX_GPIO_Init>
  MX_ADC1_Init();
 8001388:	f000 f8ec 	bl	8001564 <MX_ADC1_Init>
  MX_I2C1_Init();
 800138c:	f000 f928 	bl	80015e0 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001390:	f000 f954 	bl	800163c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001394:	f000 f9c8 	bl	8001728 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HD44780_Init(2);
 8001398:	2002      	movs	r0, #2
 800139a:	f7ff fdd3 	bl	8000f44 <HD44780_Init>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800139e:	210c      	movs	r1, #12
 80013a0:	482a      	ldr	r0, [pc, #168]	@ (800144c <main+0xd4>)
 80013a2:	f003 fa4f 	bl	8004844 <HAL_TIM_PWM_Start>
  HAL_ADC_Start(&hadc1);
 80013a6:	482a      	ldr	r0, [pc, #168]	@ (8001450 <main+0xd8>)
 80013a8:	f001 f874 	bl	8002494 <HAL_ADC_Start>
  HAL_UART_Receive_IT(&huart1, &rxByte, 1);
 80013ac:	2201      	movs	r2, #1
 80013ae:	4929      	ldr	r1, [pc, #164]	@ (8001454 <main+0xdc>)
 80013b0:	4829      	ldr	r0, [pc, #164]	@ (8001458 <main+0xe0>)
 80013b2:	f004 f9e6 	bl	8005782 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80013b6:	f004 ffb7 	bl	8006328 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of uartMutex */
  uartMutexHandle = osMutexNew(&uartMutex_attributes);
 80013ba:	4828      	ldr	r0, [pc, #160]	@ (800145c <main+0xe4>)
 80013bc:	f005 f8d0 	bl	8006560 <osMutexNew>
 80013c0:	4603      	mov	r3, r0
 80013c2:	4a27      	ldr	r2, [pc, #156]	@ (8001460 <main+0xe8>)
 80013c4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_MUTEX */
    // Tao mutex de bao ve bien nhiet do
    tempMutexHandle = osMutexNew(NULL);
 80013c6:	2000      	movs	r0, #0
 80013c8:	f005 f8ca 	bl	8006560 <osMutexNew>
 80013cc:	4603      	mov	r3, r0
 80013ce:	4a25      	ldr	r2, [pc, #148]	@ (8001464 <main+0xec>)
 80013d0:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of temperatureQueue */
  temperatureQueueHandle = osMessageQueueNew (1, sizeof(float), &temperatureQueue_attributes);
 80013d2:	4a25      	ldr	r2, [pc, #148]	@ (8001468 <main+0xf0>)
 80013d4:	2104      	movs	r1, #4
 80013d6:	2001      	movs	r0, #1
 80013d8:	f005 f9d0 	bl	800677c <osMessageQueueNew>
 80013dc:	4603      	mov	r3, r0
 80013de:	4a23      	ldr	r2, [pc, #140]	@ (800146c <main+0xf4>)
 80013e0:	6013      	str	r3, [r2, #0]

  /* creation of commandQueue */
  commandQueueHandle = osMessageQueueNew (32, sizeof(uint8_t), &commandQueue_attributes);
 80013e2:	4a23      	ldr	r2, [pc, #140]	@ (8001470 <main+0xf8>)
 80013e4:	2101      	movs	r1, #1
 80013e6:	2020      	movs	r0, #32
 80013e8:	f005 f9c8 	bl	800677c <osMessageQueueNew>
 80013ec:	4603      	mov	r3, r0
 80013ee:	4a21      	ldr	r2, [pc, #132]	@ (8001474 <main+0xfc>)
 80013f0:	6013      	str	r3, [r2, #0]

  lcdQueueHandle = osMessageQueueNew(5, sizeof(float), NULL);
 80013f2:	2200      	movs	r2, #0
 80013f4:	2104      	movs	r1, #4
 80013f6:	2005      	movs	r0, #5
 80013f8:	f005 f9c0 	bl	800677c <osMessageQueueNew>
 80013fc:	4603      	mov	r3, r0
 80013fe:	4a1e      	ldr	r2, [pc, #120]	@ (8001478 <main+0x100>)
 8001400:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of readTempTask */
  readTempTaskHandle = osThreadNew(StartReadTempTask, NULL, &readTempTask_attributes);
 8001402:	4a1e      	ldr	r2, [pc, #120]	@ (800147c <main+0x104>)
 8001404:	2100      	movs	r1, #0
 8001406:	481e      	ldr	r0, [pc, #120]	@ (8001480 <main+0x108>)
 8001408:	f004 ffeb 	bl	80063e2 <osThreadNew>
 800140c:	4603      	mov	r3, r0
 800140e:	4a1d      	ldr	r2, [pc, #116]	@ (8001484 <main+0x10c>)
 8001410:	6013      	str	r3, [r2, #0]

  /* creation of updateLcdTask */
  updateLcdTaskHandle = osThreadNew(StartUpdateLcdTask, NULL, &updateLcdTask_attributes);
 8001412:	4a1d      	ldr	r2, [pc, #116]	@ (8001488 <main+0x110>)
 8001414:	2100      	movs	r1, #0
 8001416:	481d      	ldr	r0, [pc, #116]	@ (800148c <main+0x114>)
 8001418:	f004 ffe3 	bl	80063e2 <osThreadNew>
 800141c:	4603      	mov	r3, r0
 800141e:	4a1c      	ldr	r2, [pc, #112]	@ (8001490 <main+0x118>)
 8001420:	6013      	str	r3, [r2, #0]

  /* creation of sendTempTask */
  sendTempTaskHandle = osThreadNew(StartSendTempTask, NULL, &sendTempTask_attributes);
 8001422:	4a1c      	ldr	r2, [pc, #112]	@ (8001494 <main+0x11c>)
 8001424:	2100      	movs	r1, #0
 8001426:	481c      	ldr	r0, [pc, #112]	@ (8001498 <main+0x120>)
 8001428:	f004 ffdb 	bl	80063e2 <osThreadNew>
 800142c:	4603      	mov	r3, r0
 800142e:	4a1b      	ldr	r2, [pc, #108]	@ (800149c <main+0x124>)
 8001430:	6013      	str	r3, [r2, #0]

  /* creation of processCmdTask */
  processCmdTaskHandle = osThreadNew(StartProcessCmdTask, NULL, &processCmdTask_attributes);
 8001432:	4a1b      	ldr	r2, [pc, #108]	@ (80014a0 <main+0x128>)
 8001434:	2100      	movs	r1, #0
 8001436:	481b      	ldr	r0, [pc, #108]	@ (80014a4 <main+0x12c>)
 8001438:	f004 ffd3 	bl	80063e2 <osThreadNew>
 800143c:	4603      	mov	r3, r0
 800143e:	4a1a      	ldr	r2, [pc, #104]	@ (80014a8 <main+0x130>)
 8001440:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001442:	f004 ff93 	bl	800636c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001446:	bf00      	nop
 8001448:	e7fd      	b.n	8001446 <main+0xce>
 800144a:	bf00      	nop
 800144c:	20000298 	.word	0x20000298
 8001450:	20000214 	.word	0x20000214
 8001454:	20000344 	.word	0x20000344
 8001458:	200002e0 	.word	0x200002e0
 800145c:	0800d374 	.word	0x0800d374
 8001460:	20000340 	.word	0x20000340
 8001464:	2000034c 	.word	0x2000034c
 8001468:	0800d344 	.word	0x0800d344
 800146c:	20000338 	.word	0x20000338
 8001470:	0800d35c 	.word	0x0800d35c
 8001474:	2000033c 	.word	0x2000033c
 8001478:	20000350 	.word	0x20000350
 800147c:	0800d2b4 	.word	0x0800d2b4
 8001480:	080017d9 	.word	0x080017d9
 8001484:	20000328 	.word	0x20000328
 8001488:	0800d2d8 	.word	0x0800d2d8
 800148c:	080018d9 	.word	0x080018d9
 8001490:	2000032c 	.word	0x2000032c
 8001494:	0800d2fc 	.word	0x0800d2fc
 8001498:	08001975 	.word	0x08001975
 800149c:	20000330 	.word	0x20000330
 80014a0:	0800d320 	.word	0x0800d320
 80014a4:	08001a25 	.word	0x08001a25
 80014a8:	20000334 	.word	0x20000334

080014ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b094      	sub	sp, #80	@ 0x50
 80014b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014b6:	2228      	movs	r2, #40	@ 0x28
 80014b8:	2100      	movs	r1, #0
 80014ba:	4618      	mov	r0, r3
 80014bc:	f009 f88b 	bl	800a5d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014d0:	1d3b      	adds	r3, r7, #4
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	605a      	str	r2, [r3, #4]
 80014d8:	609a      	str	r2, [r3, #8]
 80014da:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014dc:	2301      	movs	r3, #1
 80014de:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80014e6:	2300      	movs	r3, #0
 80014e8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014ea:	2301      	movs	r3, #1
 80014ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014ee:	2302      	movs	r3, #2
 80014f0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014f2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80014f8:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80014fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001502:	4618      	mov	r0, r3
 8001504:	f002 faf8 	bl	8003af8 <HAL_RCC_OscConfig>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800150e:	f000 fbbf 	bl	8001c90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001512:	230f      	movs	r3, #15
 8001514:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001516:	2302      	movs	r3, #2
 8001518:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800151a:	2300      	movs	r3, #0
 800151c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800151e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001522:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001524:	2300      	movs	r3, #0
 8001526:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001528:	f107 0314 	add.w	r3, r7, #20
 800152c:	2102      	movs	r1, #2
 800152e:	4618      	mov	r0, r3
 8001530:	f002 fd64 	bl	8003ffc <HAL_RCC_ClockConfig>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800153a:	f000 fba9 	bl	8001c90 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800153e:	2302      	movs	r3, #2
 8001540:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001542:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001546:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001548:	1d3b      	adds	r3, r7, #4
 800154a:	4618      	mov	r0, r3
 800154c:	f002 ff14 	bl	8004378 <HAL_RCCEx_PeriphCLKConfig>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001556:	f000 fb9b 	bl	8001c90 <Error_Handler>
  }
}
 800155a:	bf00      	nop
 800155c:	3750      	adds	r7, #80	@ 0x50
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
	...

08001564 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800156a:	1d3b      	adds	r3, r7, #4
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001574:	4b18      	ldr	r3, [pc, #96]	@ (80015d8 <MX_ADC1_Init+0x74>)
 8001576:	4a19      	ldr	r2, [pc, #100]	@ (80015dc <MX_ADC1_Init+0x78>)
 8001578:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800157a:	4b17      	ldr	r3, [pc, #92]	@ (80015d8 <MX_ADC1_Init+0x74>)
 800157c:	2200      	movs	r2, #0
 800157e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001580:	4b15      	ldr	r3, [pc, #84]	@ (80015d8 <MX_ADC1_Init+0x74>)
 8001582:	2200      	movs	r2, #0
 8001584:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001586:	4b14      	ldr	r3, [pc, #80]	@ (80015d8 <MX_ADC1_Init+0x74>)
 8001588:	2200      	movs	r2, #0
 800158a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800158c:	4b12      	ldr	r3, [pc, #72]	@ (80015d8 <MX_ADC1_Init+0x74>)
 800158e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001592:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001594:	4b10      	ldr	r3, [pc, #64]	@ (80015d8 <MX_ADC1_Init+0x74>)
 8001596:	2200      	movs	r2, #0
 8001598:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800159a:	4b0f      	ldr	r3, [pc, #60]	@ (80015d8 <MX_ADC1_Init+0x74>)
 800159c:	2201      	movs	r2, #1
 800159e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015a0:	480d      	ldr	r0, [pc, #52]	@ (80015d8 <MX_ADC1_Init+0x74>)
 80015a2:	f000 fe9f 	bl	80022e4 <HAL_ADC_Init>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80015ac:	f000 fb70 	bl	8001c90 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80015b0:	2310      	movs	r3, #16
 80015b2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015b4:	2301      	movs	r3, #1
 80015b6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80015b8:	2307      	movs	r3, #7
 80015ba:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015bc:	1d3b      	adds	r3, r7, #4
 80015be:	4619      	mov	r1, r3
 80015c0:	4805      	ldr	r0, [pc, #20]	@ (80015d8 <MX_ADC1_Init+0x74>)
 80015c2:	f001 f953 	bl	800286c <HAL_ADC_ConfigChannel>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80015cc:	f000 fb60 	bl	8001c90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015d0:	bf00      	nop
 80015d2:	3710      	adds	r7, #16
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20000214 	.word	0x20000214
 80015dc:	40012400 	.word	0x40012400

080015e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015e4:	4b12      	ldr	r3, [pc, #72]	@ (8001630 <MX_I2C1_Init+0x50>)
 80015e6:	4a13      	ldr	r2, [pc, #76]	@ (8001634 <MX_I2C1_Init+0x54>)
 80015e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80015ea:	4b11      	ldr	r3, [pc, #68]	@ (8001630 <MX_I2C1_Init+0x50>)
 80015ec:	4a12      	ldr	r2, [pc, #72]	@ (8001638 <MX_I2C1_Init+0x58>)
 80015ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001630 <MX_I2C1_Init+0x50>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001630 <MX_I2C1_Init+0x50>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001630 <MX_I2C1_Init+0x50>)
 80015fe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001602:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001604:	4b0a      	ldr	r3, [pc, #40]	@ (8001630 <MX_I2C1_Init+0x50>)
 8001606:	2200      	movs	r2, #0
 8001608:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800160a:	4b09      	ldr	r3, [pc, #36]	@ (8001630 <MX_I2C1_Init+0x50>)
 800160c:	2200      	movs	r2, #0
 800160e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001610:	4b07      	ldr	r3, [pc, #28]	@ (8001630 <MX_I2C1_Init+0x50>)
 8001612:	2200      	movs	r2, #0
 8001614:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001616:	4b06      	ldr	r3, [pc, #24]	@ (8001630 <MX_I2C1_Init+0x50>)
 8001618:	2200      	movs	r2, #0
 800161a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800161c:	4804      	ldr	r0, [pc, #16]	@ (8001630 <MX_I2C1_Init+0x50>)
 800161e:	f001 fdcf 	bl	80031c0 <HAL_I2C_Init>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001628:	f000 fb32 	bl	8001c90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800162c:	bf00      	nop
 800162e:	bd80      	pop	{r7, pc}
 8001630:	20000244 	.word	0x20000244
 8001634:	40005400 	.word	0x40005400
 8001638:	000186a0 	.word	0x000186a0

0800163c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08e      	sub	sp, #56	@ 0x38
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001642:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	605a      	str	r2, [r3, #4]
 800164c:	609a      	str	r2, [r3, #8]
 800164e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001650:	f107 0320 	add.w	r3, r7, #32
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800165a:	1d3b      	adds	r3, r7, #4
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]
 8001664:	60da      	str	r2, [r3, #12]
 8001666:	611a      	str	r2, [r3, #16]
 8001668:	615a      	str	r2, [r3, #20]
 800166a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800166c:	4b2d      	ldr	r3, [pc, #180]	@ (8001724 <MX_TIM2_Init+0xe8>)
 800166e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001672:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001674:	4b2b      	ldr	r3, [pc, #172]	@ (8001724 <MX_TIM2_Init+0xe8>)
 8001676:	2247      	movs	r2, #71	@ 0x47
 8001678:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800167a:	4b2a      	ldr	r3, [pc, #168]	@ (8001724 <MX_TIM2_Init+0xe8>)
 800167c:	2200      	movs	r2, #0
 800167e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001680:	4b28      	ldr	r3, [pc, #160]	@ (8001724 <MX_TIM2_Init+0xe8>)
 8001682:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001686:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001688:	4b26      	ldr	r3, [pc, #152]	@ (8001724 <MX_TIM2_Init+0xe8>)
 800168a:	2200      	movs	r2, #0
 800168c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800168e:	4b25      	ldr	r3, [pc, #148]	@ (8001724 <MX_TIM2_Init+0xe8>)
 8001690:	2200      	movs	r2, #0
 8001692:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001694:	4823      	ldr	r0, [pc, #140]	@ (8001724 <MX_TIM2_Init+0xe8>)
 8001696:	f002 ffdb 	bl	8004650 <HAL_TIM_Base_Init>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80016a0:	f000 faf6 	bl	8001c90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016ae:	4619      	mov	r1, r3
 80016b0:	481c      	ldr	r0, [pc, #112]	@ (8001724 <MX_TIM2_Init+0xe8>)
 80016b2:	f003 fb7f 	bl	8004db4 <HAL_TIM_ConfigClockSource>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80016bc:	f000 fae8 	bl	8001c90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80016c0:	4818      	ldr	r0, [pc, #96]	@ (8001724 <MX_TIM2_Init+0xe8>)
 80016c2:	f003 f867 	bl	8004794 <HAL_TIM_PWM_Init>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80016cc:	f000 fae0 	bl	8001c90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016d0:	2300      	movs	r3, #0
 80016d2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016d4:	2300      	movs	r3, #0
 80016d6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016d8:	f107 0320 	add.w	r3, r7, #32
 80016dc:	4619      	mov	r1, r3
 80016de:	4811      	ldr	r0, [pc, #68]	@ (8001724 <MX_TIM2_Init+0xe8>)
 80016e0:	f003 ff04 	bl	80054ec <HAL_TIMEx_MasterConfigSynchronization>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80016ea:	f000 fad1 	bl	8001c90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016ee:	2360      	movs	r3, #96	@ 0x60
 80016f0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 80016f2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80016f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016f8:	2300      	movs	r3, #0
 80016fa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001700:	1d3b      	adds	r3, r7, #4
 8001702:	220c      	movs	r2, #12
 8001704:	4619      	mov	r1, r3
 8001706:	4807      	ldr	r0, [pc, #28]	@ (8001724 <MX_TIM2_Init+0xe8>)
 8001708:	f003 fa92 	bl	8004c30 <HAL_TIM_PWM_ConfigChannel>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001712:	f000 fabd 	bl	8001c90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001716:	4803      	ldr	r0, [pc, #12]	@ (8001724 <MX_TIM2_Init+0xe8>)
 8001718:	f000 fb70 	bl	8001dfc <HAL_TIM_MspPostInit>

}
 800171c:	bf00      	nop
 800171e:	3738      	adds	r7, #56	@ 0x38
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	20000298 	.word	0x20000298

08001728 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800172c:	4b11      	ldr	r3, [pc, #68]	@ (8001774 <MX_USART1_UART_Init+0x4c>)
 800172e:	4a12      	ldr	r2, [pc, #72]	@ (8001778 <MX_USART1_UART_Init+0x50>)
 8001730:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001732:	4b10      	ldr	r3, [pc, #64]	@ (8001774 <MX_USART1_UART_Init+0x4c>)
 8001734:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001738:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800173a:	4b0e      	ldr	r3, [pc, #56]	@ (8001774 <MX_USART1_UART_Init+0x4c>)
 800173c:	2200      	movs	r2, #0
 800173e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001740:	4b0c      	ldr	r3, [pc, #48]	@ (8001774 <MX_USART1_UART_Init+0x4c>)
 8001742:	2200      	movs	r2, #0
 8001744:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001746:	4b0b      	ldr	r3, [pc, #44]	@ (8001774 <MX_USART1_UART_Init+0x4c>)
 8001748:	2200      	movs	r2, #0
 800174a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800174c:	4b09      	ldr	r3, [pc, #36]	@ (8001774 <MX_USART1_UART_Init+0x4c>)
 800174e:	220c      	movs	r2, #12
 8001750:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001752:	4b08      	ldr	r3, [pc, #32]	@ (8001774 <MX_USART1_UART_Init+0x4c>)
 8001754:	2200      	movs	r2, #0
 8001756:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001758:	4b06      	ldr	r3, [pc, #24]	@ (8001774 <MX_USART1_UART_Init+0x4c>)
 800175a:	2200      	movs	r2, #0
 800175c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800175e:	4805      	ldr	r0, [pc, #20]	@ (8001774 <MX_USART1_UART_Init+0x4c>)
 8001760:	f003 ff34 	bl	80055cc <HAL_UART_Init>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800176a:	f000 fa91 	bl	8001c90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	200002e0 	.word	0x200002e0
 8001778:	40013800 	.word	0x40013800

0800177c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001782:	4b14      	ldr	r3, [pc, #80]	@ (80017d4 <MX_GPIO_Init+0x58>)
 8001784:	699b      	ldr	r3, [r3, #24]
 8001786:	4a13      	ldr	r2, [pc, #76]	@ (80017d4 <MX_GPIO_Init+0x58>)
 8001788:	f043 0320 	orr.w	r3, r3, #32
 800178c:	6193      	str	r3, [r2, #24]
 800178e:	4b11      	ldr	r3, [pc, #68]	@ (80017d4 <MX_GPIO_Init+0x58>)
 8001790:	699b      	ldr	r3, [r3, #24]
 8001792:	f003 0320 	and.w	r3, r3, #32
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800179a:	4b0e      	ldr	r3, [pc, #56]	@ (80017d4 <MX_GPIO_Init+0x58>)
 800179c:	699b      	ldr	r3, [r3, #24]
 800179e:	4a0d      	ldr	r2, [pc, #52]	@ (80017d4 <MX_GPIO_Init+0x58>)
 80017a0:	f043 0304 	orr.w	r3, r3, #4
 80017a4:	6193      	str	r3, [r2, #24]
 80017a6:	4b0b      	ldr	r3, [pc, #44]	@ (80017d4 <MX_GPIO_Init+0x58>)
 80017a8:	699b      	ldr	r3, [r3, #24]
 80017aa:	f003 0304 	and.w	r3, r3, #4
 80017ae:	60bb      	str	r3, [r7, #8]
 80017b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b2:	4b08      	ldr	r3, [pc, #32]	@ (80017d4 <MX_GPIO_Init+0x58>)
 80017b4:	699b      	ldr	r3, [r3, #24]
 80017b6:	4a07      	ldr	r2, [pc, #28]	@ (80017d4 <MX_GPIO_Init+0x58>)
 80017b8:	f043 0308 	orr.w	r3, r3, #8
 80017bc:	6193      	str	r3, [r2, #24]
 80017be:	4b05      	ldr	r3, [pc, #20]	@ (80017d4 <MX_GPIO_Init+0x58>)
 80017c0:	699b      	ldr	r3, [r3, #24]
 80017c2:	f003 0308 	and.w	r3, r3, #8
 80017c6:	607b      	str	r3, [r7, #4]
 80017c8:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80017ca:	bf00      	nop
 80017cc:	3714      	adds	r7, #20
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bc80      	pop	{r7}
 80017d2:	4770      	bx	lr
 80017d4:	40021000 	.word	0x40021000

080017d8 <StartReadTempTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartReadTempTask */
void StartReadTempTask(void *argument)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint32_t xLastWakeTime = osKernelGetTickCount();
 80017e0:	f004 fdea 	bl	80063b8 <osKernelGetTickCount>
 80017e4:	6178      	str	r0, [r7, #20]
	for (;;)
	    {
	        uint32_t period;

	        // Lấy chu kỳ đo
	        osMutexAcquire(tempMutexHandle, osWaitForever);
 80017e6:	4b31      	ldr	r3, [pc, #196]	@ (80018ac <StartReadTempTask+0xd4>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f04f 31ff 	mov.w	r1, #4294967295
 80017ee:	4618      	mov	r0, r3
 80017f0:	f004 ff3c 	bl	800666c <osMutexAcquire>
	        period = g_sensorPeriod;
 80017f4:	4b2e      	ldr	r3, [pc, #184]	@ (80018b0 <StartReadTempTask+0xd8>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	613b      	str	r3, [r7, #16]
	        osMutexRelease(tempMutexHandle);
 80017fa:	4b2c      	ldr	r3, [pc, #176]	@ (80018ac <StartReadTempTask+0xd4>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f004 ff7f 	bl	8006702 <osMutexRelease>

	        xLastWakeTime += period;
 8001804:	697a      	ldr	r2, [r7, #20]
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	4413      	add	r3, r2
 800180a:	617b      	str	r3, [r7, #20]
	        osDelayUntil(xLastWakeTime);
 800180c:	6978      	ldr	r0, [r7, #20]
 800180e:	f004 fe7a 	bl	8006506 <osDelayUntil>

	        // Đọc ADC
	        HAL_ADC_Start(&hadc1);
 8001812:	4828      	ldr	r0, [pc, #160]	@ (80018b4 <StartReadTempTask+0xdc>)
 8001814:	f000 fe3e 	bl	8002494 <HAL_ADC_Start>
	        HAL_ADC_PollForConversion(&hadc1, 100);
 8001818:	2164      	movs	r1, #100	@ 0x64
 800181a:	4826      	ldr	r0, [pc, #152]	@ (80018b4 <StartReadTempTask+0xdc>)
 800181c:	f000 ff14 	bl	8002648 <HAL_ADC_PollForConversion>
	        uint32_t adcVal = HAL_ADC_GetValue(&hadc1);
 8001820:	4824      	ldr	r0, [pc, #144]	@ (80018b4 <StartReadTempTask+0xdc>)
 8001822:	f001 f817 	bl	8002854 <HAL_ADC_GetValue>
 8001826:	60f8      	str	r0, [r7, #12]
	        HAL_ADC_Stop(&hadc1);
 8001828:	4822      	ldr	r0, [pc, #136]	@ (80018b4 <StartReadTempTask+0xdc>)
 800182a:	f000 fee1 	bl	80025f0 <HAL_ADC_Stop>

	        // Tính nhiệt độ
	        float temperature = ((1.43f - (float)adcVal * 3.3f / 4095.0f) / 0.0043f) + 25.0f;
 800182e:	68f8      	ldr	r0, [r7, #12]
 8001830:	f7ff f9e0 	bl	8000bf4 <__aeabi_ui2f>
 8001834:	4603      	mov	r3, r0
 8001836:	4920      	ldr	r1, [pc, #128]	@ (80018b8 <StartReadTempTask+0xe0>)
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff fa33 	bl	8000ca4 <__aeabi_fmul>
 800183e:	4603      	mov	r3, r0
 8001840:	491e      	ldr	r1, [pc, #120]	@ (80018bc <StartReadTempTask+0xe4>)
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff fae2 	bl	8000e0c <__aeabi_fdiv>
 8001848:	4603      	mov	r3, r0
 800184a:	4619      	mov	r1, r3
 800184c:	481c      	ldr	r0, [pc, #112]	@ (80018c0 <StartReadTempTask+0xe8>)
 800184e:	f7ff f91f 	bl	8000a90 <__aeabi_fsub>
 8001852:	4603      	mov	r3, r0
 8001854:	491b      	ldr	r1, [pc, #108]	@ (80018c4 <StartReadTempTask+0xec>)
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff fad8 	bl	8000e0c <__aeabi_fdiv>
 800185c:	4603      	mov	r3, r0
 800185e:	491a      	ldr	r1, [pc, #104]	@ (80018c8 <StartReadTempTask+0xf0>)
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff f917 	bl	8000a94 <__addsf3>
 8001866:	4603      	mov	r3, r0
 8001868:	60bb      	str	r3, [r7, #8]

	        // Cập nhật biến toàn cục
	        osMutexAcquire(tempMutexHandle, osWaitForever);
 800186a:	4b10      	ldr	r3, [pc, #64]	@ (80018ac <StartReadTempTask+0xd4>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f04f 31ff 	mov.w	r1, #4294967295
 8001872:	4618      	mov	r0, r3
 8001874:	f004 fefa 	bl	800666c <osMutexAcquire>
	        g_currentTemperature = temperature;
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	4a14      	ldr	r2, [pc, #80]	@ (80018cc <StartReadTempTask+0xf4>)
 800187c:	6013      	str	r3, [r2, #0]
	        osMessageQueuePut(lcdQueueHandle, &temperature, 0, 0);  // gửi cho LCD
 800187e:	4b14      	ldr	r3, [pc, #80]	@ (80018d0 <StartReadTempTask+0xf8>)
 8001880:	6818      	ldr	r0, [r3, #0]
 8001882:	f107 0108 	add.w	r1, r7, #8
 8001886:	2300      	movs	r3, #0
 8001888:	2200      	movs	r2, #0
 800188a:	f004 ffeb 	bl	8006864 <osMessageQueuePut>
	        osMutexRelease(tempMutexHandle);
 800188e:	4b07      	ldr	r3, [pc, #28]	@ (80018ac <StartReadTempTask+0xd4>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4618      	mov	r0, r3
 8001894:	f004 ff35 	bl	8006702 <osMutexRelease>

	        osMessageQueuePut(temperatureQueueHandle, &temperature, 0, 0); // Gửi nhiệt độ vào queue để task UART xử lý
 8001898:	4b0e      	ldr	r3, [pc, #56]	@ (80018d4 <StartReadTempTask+0xfc>)
 800189a:	6818      	ldr	r0, [r3, #0]
 800189c:	f107 0108 	add.w	r1, r7, #8
 80018a0:	2300      	movs	r3, #0
 80018a2:	2200      	movs	r2, #0
 80018a4:	f004 ffde 	bl	8006864 <osMessageQueuePut>
	    {
 80018a8:	bf00      	nop
 80018aa:	e79c      	b.n	80017e6 <StartReadTempTask+0xe>
 80018ac:	2000034c 	.word	0x2000034c
 80018b0:	20000010 	.word	0x20000010
 80018b4:	20000214 	.word	0x20000214
 80018b8:	40533333 	.word	0x40533333
 80018bc:	457ff000 	.word	0x457ff000
 80018c0:	3fb70a3d 	.word	0x3fb70a3d
 80018c4:	3b8ce704 	.word	0x3b8ce704
 80018c8:	41c80000 	.word	0x41c80000
 80018cc:	20000348 	.word	0x20000348
 80018d0:	20000350 	.word	0x20000350
 80018d4:	20000338 	.word	0x20000338

080018d8 <StartUpdateLcdTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUpdateLcdTask */
void StartUpdateLcdTask(void *argument)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b08a      	sub	sp, #40	@ 0x28
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
    char lcdBuffer[20];
  /* Infinite loop */
    for (;;)
    {
        // Chờ dữ liệu mới từ queue
        if (osMessageQueueGet(lcdQueueHandle, &temp, NULL, osWaitForever) == osOK)
 80018e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001960 <StartUpdateLcdTask+0x88>)
 80018e2:	6818      	ldr	r0, [r3, #0]
 80018e4:	f107 0120 	add.w	r1, r7, #32
 80018e8:	f04f 33ff 	mov.w	r3, #4294967295
 80018ec:	2200      	movs	r2, #0
 80018ee:	f005 f819 	bl	8006924 <osMessageQueueGet>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d1f3      	bne.n	80018e0 <StartUpdateLcdTask+0x8>
        {
            // Đọc tần số hiện tại
            osMutexAcquire(tempMutexHandle, osWaitForever);
 80018f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001964 <StartUpdateLcdTask+0x8c>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001900:	4618      	mov	r0, r3
 8001902:	f004 feb3 	bl	800666c <osMutexAcquire>
            freq = g_currentFrequency;
 8001906:	4b18      	ldr	r3, [pc, #96]	@ (8001968 <StartUpdateLcdTask+0x90>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	627b      	str	r3, [r7, #36]	@ 0x24
            osMutexRelease(tempMutexHandle);
 800190c:	4b15      	ldr	r3, [pc, #84]	@ (8001964 <StartUpdateLcdTask+0x8c>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4618      	mov	r0, r3
 8001912:	f004 fef6 	bl	8006702 <osMutexRelease>

            sprintf(lcdBuffer, "Temp: %.1fC    ", temp);
 8001916:	6a3b      	ldr	r3, [r7, #32]
 8001918:	4618      	mov	r0, r3
 800191a:	f7fe fd85 	bl	8000428 <__aeabi_f2d>
 800191e:	4602      	mov	r2, r0
 8001920:	460b      	mov	r3, r1
 8001922:	f107 000c 	add.w	r0, r7, #12
 8001926:	4911      	ldr	r1, [pc, #68]	@ (800196c <StartUpdateLcdTask+0x94>)
 8001928:	f008 fdc2 	bl	800a4b0 <siprintf>
            HD44780_SetCursor(0, 0);
 800192c:	2100      	movs	r1, #0
 800192e:	2000      	movs	r0, #0
 8001930:	f7ff fba2 	bl	8001078 <HD44780_SetCursor>
            HD44780_PrintStr(lcdBuffer);
 8001934:	f107 030c 	add.w	r3, r7, #12
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff fc0f 	bl	800115c <HD44780_PrintStr>

            sprintf(lcdBuffer, "Freq: %luHz   ", freq);
 800193e:	f107 030c 	add.w	r3, r7, #12
 8001942:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001944:	490a      	ldr	r1, [pc, #40]	@ (8001970 <StartUpdateLcdTask+0x98>)
 8001946:	4618      	mov	r0, r3
 8001948:	f008 fdb2 	bl	800a4b0 <siprintf>
            HD44780_SetCursor(0, 1);
 800194c:	2101      	movs	r1, #1
 800194e:	2000      	movs	r0, #0
 8001950:	f7ff fb92 	bl	8001078 <HD44780_SetCursor>
            HD44780_PrintStr(lcdBuffer);
 8001954:	f107 030c 	add.w	r3, r7, #12
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff fbff 	bl	800115c <HD44780_PrintStr>
        if (osMessageQueueGet(lcdQueueHandle, &temp, NULL, osWaitForever) == osOK)
 800195e:	e7bf      	b.n	80018e0 <StartUpdateLcdTask+0x8>
 8001960:	20000350 	.word	0x20000350
 8001964:	2000034c 	.word	0x2000034c
 8001968:	20000014 	.word	0x20000014
 800196c:	0800d1d0 	.word	0x0800d1d0
 8001970:	0800d1e0 	.word	0x0800d1e0

08001974 <StartSendTempTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSendTempTask */
void StartSendTempTask(void *argument)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b094      	sub	sp, #80	@ 0x50
 8001978:	af02      	add	r7, sp, #8
 800197a:	6078      	str	r0, [r7, #4]
	char txBuffer[50];
  /* Infinite loop */
    for(;;)
      {
        // Chờ nhận nhiệt độ mới từ queue
        if (osMessageQueueGet(temperatureQueueHandle, &receivedTemp, NULL, osWaitForever) == osOK)
 800197c:	4b23      	ldr	r3, [pc, #140]	@ (8001a0c <StartSendTempTask+0x98>)
 800197e:	6818      	ldr	r0, [r3, #0]
 8001980:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8001984:	f04f 33ff 	mov.w	r3, #4294967295
 8001988:	2200      	movs	r2, #0
 800198a:	f004 ffcb 	bl	8006924 <osMessageQueueGet>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d1f3      	bne.n	800197c <StartSendTempTask+0x8>
        {
          // Lấy tần số hiện tại từ biến global
          if (osMutexAcquire(tempMutexHandle, osWaitForever) == osOK)
 8001994:	4b1e      	ldr	r3, [pc, #120]	@ (8001a10 <StartSendTempTask+0x9c>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f04f 31ff 	mov.w	r1, #4294967295
 800199c:	4618      	mov	r0, r3
 800199e:	f004 fe65 	bl	800666c <osMutexAcquire>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d107      	bne.n	80019b8 <StartSendTempTask+0x44>
          {
            localFreq = g_currentFrequency;
 80019a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001a14 <StartSendTempTask+0xa0>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	647b      	str	r3, [r7, #68]	@ 0x44
            osMutexRelease(tempMutexHandle);
 80019ae:	4b18      	ldr	r3, [pc, #96]	@ (8001a10 <StartSendTempTask+0x9c>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f004 fea5 	bl	8006702 <osMutexRelease>
          }

          // Gửi UART
          if (osMutexAcquire(uartMutexHandle, osWaitForever) == osOK)
 80019b8:	4b17      	ldr	r3, [pc, #92]	@ (8001a18 <StartSendTempTask+0xa4>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f04f 31ff 	mov.w	r1, #4294967295
 80019c0:	4618      	mov	r0, r3
 80019c2:	f004 fe53 	bl	800666c <osMutexAcquire>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d1d7      	bne.n	800197c <StartSendTempTask+0x8>
          {
            sprintf(txBuffer, "Temp: %.1f C, Freq: %lu Hz\r\n", receivedTemp, localFreq);
 80019cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7fe fd2a 	bl	8000428 <__aeabi_f2d>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	f107 000c 	add.w	r0, r7, #12
 80019dc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80019de:	9100      	str	r1, [sp, #0]
 80019e0:	490e      	ldr	r1, [pc, #56]	@ (8001a1c <StartSendTempTask+0xa8>)
 80019e2:	f008 fd65 	bl	800a4b0 <siprintf>
            HAL_UART_Transmit(&huart1, (uint8_t*)txBuffer, strlen(txBuffer), 100);
 80019e6:	f107 030c 	add.w	r3, r7, #12
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7fe fbb0 	bl	8000150 <strlen>
 80019f0:	4603      	mov	r3, r0
 80019f2:	b29a      	uxth	r2, r3
 80019f4:	f107 010c 	add.w	r1, r7, #12
 80019f8:	2364      	movs	r3, #100	@ 0x64
 80019fa:	4809      	ldr	r0, [pc, #36]	@ (8001a20 <StartSendTempTask+0xac>)
 80019fc:	f003 fe36 	bl	800566c <HAL_UART_Transmit>
            osMutexRelease(uartMutexHandle);
 8001a00:	4b05      	ldr	r3, [pc, #20]	@ (8001a18 <StartSendTempTask+0xa4>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f004 fe7c 	bl	8006702 <osMutexRelease>
        if (osMessageQueueGet(temperatureQueueHandle, &receivedTemp, NULL, osWaitForever) == osOK)
 8001a0a:	e7b7      	b.n	800197c <StartSendTempTask+0x8>
 8001a0c:	20000338 	.word	0x20000338
 8001a10:	2000034c 	.word	0x2000034c
 8001a14:	20000014 	.word	0x20000014
 8001a18:	20000340 	.word	0x20000340
 8001a1c:	0800d1f0 	.word	0x0800d1f0
 8001a20:	200002e0 	.word	0x200002e0

08001a24 <StartProcessCmdTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartProcessCmdTask */
void StartProcessCmdTask(void *argument)
{
 8001a24:	b5b0      	push	{r4, r5, r7, lr}
 8001a26:	b09c      	sub	sp, #112	@ 0x70
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartProcessCmdTask */
    char cmdBuffer[32];
    uint8_t cmdIndex = 0;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    uint8_t ch;
  /* Infinite loop */
	for (;;)
	    {
	        if (osMessageQueueGet(commandQueueHandle, &ch, NULL, osWaitForever) == osOK)
 8001a32:	4b81      	ldr	r3, [pc, #516]	@ (8001c38 <StartProcessCmdTask+0x214>)
 8001a34:	6818      	ldr	r0, [r3, #0]
 8001a36:	f107 0147 	add.w	r1, r7, #71	@ 0x47
 8001a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f004 ff70 	bl	8006924 <osMessageQueueGet>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d1f3      	bne.n	8001a32 <StartProcessCmdTask+0xe>
	        {
	            if (ch >= 32 && ch <= 126 && cmdIndex < sizeof(cmdBuffer) - 1)
 8001a4a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001a4e:	2b1f      	cmp	r3, #31
 8001a50:	d912      	bls.n	8001a78 <StartProcessCmdTask+0x54>
 8001a52:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001a56:	2b7e      	cmp	r3, #126	@ 0x7e
 8001a58:	d80e      	bhi.n	8001a78 <StartProcessCmdTask+0x54>
 8001a5a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001a5e:	2b1e      	cmp	r3, #30
 8001a60:	d80a      	bhi.n	8001a78 <StartProcessCmdTask+0x54>
	            {
	                cmdBuffer[cmdIndex++] = ch;
 8001a62:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001a66:	1c5a      	adds	r2, r3, #1
 8001a68:	f887 206f 	strb.w	r2, [r7, #111]	@ 0x6f
 8001a6c:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8001a70:	3370      	adds	r3, #112	@ 0x70
 8001a72:	443b      	add	r3, r7
 8001a74:	f803 2c28 	strb.w	r2, [r3, #-40]
	            }
	            if (ch == '\n' || ch == '\r')
 8001a78:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001a7c:	2b0a      	cmp	r3, #10
 8001a7e:	d003      	beq.n	8001a88 <StartProcessCmdTask+0x64>
 8001a80:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001a84:	2b0d      	cmp	r3, #13
 8001a86:	d1d4      	bne.n	8001a32 <StartProcessCmdTask+0xe>
	            {
	                cmdBuffer[cmdIndex] = '\0';
 8001a88:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001a8c:	3370      	adds	r3, #112	@ 0x70
 8001a8e:	443b      	add	r3, r7
 8001a90:	2200      	movs	r2, #0
 8001a92:	f803 2c28 	strb.w	r2, [r3, #-40]

	                int freq, period;
	                if (sscanf(cmdBuffer, "FREQ=%d", &freq) == 1 && freq > 0 && freq <= 20000)
 8001a96:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001a9a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001a9e:	4967      	ldr	r1, [pc, #412]	@ (8001c3c <StartProcessCmdTask+0x218>)
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f008 fd27 	bl	800a4f4 <siscanf>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d157      	bne.n	8001b5c <StartProcessCmdTask+0x138>
 8001aac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	dd54      	ble.n	8001b5c <StartProcessCmdTask+0x138>
 8001ab2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ab4:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	dc4f      	bgt.n	8001b5c <StartProcessCmdTask+0x138>
	                {
	                    uint32_t new_arr = (72000000 / (72 * freq));
 8001abc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001abe:	4613      	mov	r3, r2
 8001ac0:	00db      	lsls	r3, r3, #3
 8001ac2:	4413      	add	r3, r2
 8001ac4:	00db      	lsls	r3, r3, #3
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	4b5d      	ldr	r3, [pc, #372]	@ (8001c40 <StartProcessCmdTask+0x21c>)
 8001aca:	fb93 f3f2 	sdiv	r3, r3, r2
 8001ace:	66bb      	str	r3, [r7, #104]	@ 0x68
	                    if (new_arr > 0) new_arr -= 1;
 8001ad0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d002      	beq.n	8001adc <StartProcessCmdTask+0xb8>
 8001ad6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001ad8:	3b01      	subs	r3, #1
 8001ada:	66bb      	str	r3, [r7, #104]	@ 0x68

	                    HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
 8001adc:	210c      	movs	r1, #12
 8001ade:	4859      	ldr	r0, [pc, #356]	@ (8001c44 <StartProcessCmdTask+0x220>)
 8001ae0:	f002 ff52 	bl	8004988 <HAL_TIM_PWM_Stop>
	                    __HAL_TIM_SET_AUTORELOAD(&htim2, new_arr);
 8001ae4:	4b57      	ldr	r3, [pc, #348]	@ (8001c44 <StartProcessCmdTask+0x220>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8001aea:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001aec:	4a55      	ldr	r2, [pc, #340]	@ (8001c44 <StartProcessCmdTask+0x220>)
 8001aee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001af0:	60d3      	str	r3, [r2, #12]
	                    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001af2:	210c      	movs	r1, #12
 8001af4:	4853      	ldr	r0, [pc, #332]	@ (8001c44 <StartProcessCmdTask+0x220>)
 8001af6:	f002 fea5 	bl	8004844 <HAL_TIM_PWM_Start>

	                    osMutexAcquire(tempMutexHandle, osWaitForever);
 8001afa:	4b53      	ldr	r3, [pc, #332]	@ (8001c48 <StartProcessCmdTask+0x224>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f04f 31ff 	mov.w	r1, #4294967295
 8001b02:	4618      	mov	r0, r3
 8001b04:	f004 fdb2 	bl	800666c <osMutexAcquire>
	                    g_currentFrequency = freq;
 8001b08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	4b4f      	ldr	r3, [pc, #316]	@ (8001c4c <StartProcessCmdTask+0x228>)
 8001b0e:	601a      	str	r2, [r3, #0]
	                    osMutexRelease(tempMutexHandle);
 8001b10:	4b4d      	ldr	r3, [pc, #308]	@ (8001c48 <StartProcessCmdTask+0x224>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f004 fdf4 	bl	8006702 <osMutexRelease>

	                    osMutexAcquire(uartMutexHandle, osWaitForever);
 8001b1a:	4b4d      	ldr	r3, [pc, #308]	@ (8001c50 <StartProcessCmdTask+0x22c>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f04f 31ff 	mov.w	r1, #4294967295
 8001b22:	4618      	mov	r0, r3
 8001b24:	f004 fda2 	bl	800666c <osMutexAcquire>
	                    sprintf(cmdBuffer, "OK! Frequency set to %d Hz\r\n", freq);
 8001b28:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001b2a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001b2e:	4949      	ldr	r1, [pc, #292]	@ (8001c54 <StartProcessCmdTask+0x230>)
 8001b30:	4618      	mov	r0, r3
 8001b32:	f008 fcbd 	bl	800a4b0 <siprintf>
	                    HAL_UART_Transmit(&huart1, (uint8_t*)cmdBuffer, strlen(cmdBuffer), 100);
 8001b36:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7fe fb08 	bl	8000150 <strlen>
 8001b40:	4603      	mov	r3, r0
 8001b42:	b29a      	uxth	r2, r3
 8001b44:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8001b48:	2364      	movs	r3, #100	@ 0x64
 8001b4a:	4843      	ldr	r0, [pc, #268]	@ (8001c58 <StartProcessCmdTask+0x234>)
 8001b4c:	f003 fd8e 	bl	800566c <HAL_UART_Transmit>
	                    osMutexRelease(uartMutexHandle);
 8001b50:	4b3f      	ldr	r3, [pc, #252]	@ (8001c50 <StartProcessCmdTask+0x22c>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f004 fdd4 	bl	8006702 <osMutexRelease>
	                {
 8001b5a:	e062      	b.n	8001c22 <StartProcessCmdTask+0x1fe>
	                }
	                else if (sscanf(cmdBuffer, "PERIOD=%d", &period) == 1 && period >= 100 && period <= 10000)
 8001b5c:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001b60:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001b64:	493d      	ldr	r1, [pc, #244]	@ (8001c5c <StartProcessCmdTask+0x238>)
 8001b66:	4618      	mov	r0, r3
 8001b68:	f008 fcc4 	bl	800a4f4 <siscanf>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d138      	bne.n	8001be4 <StartProcessCmdTask+0x1c0>
 8001b72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b74:	2b63      	cmp	r3, #99	@ 0x63
 8001b76:	dd35      	ble.n	8001be4 <StartProcessCmdTask+0x1c0>
 8001b78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b7a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	dc30      	bgt.n	8001be4 <StartProcessCmdTask+0x1c0>
	                {
	                    osMutexAcquire(tempMutexHandle, osWaitForever);
 8001b82:	4b31      	ldr	r3, [pc, #196]	@ (8001c48 <StartProcessCmdTask+0x224>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f04f 31ff 	mov.w	r1, #4294967295
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f004 fd6e 	bl	800666c <osMutexAcquire>
	                    g_sensorPeriod = period;
 8001b90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b92:	461a      	mov	r2, r3
 8001b94:	4b32      	ldr	r3, [pc, #200]	@ (8001c60 <StartProcessCmdTask+0x23c>)
 8001b96:	601a      	str	r2, [r3, #0]
	                    osMutexRelease(tempMutexHandle);
 8001b98:	4b2b      	ldr	r3, [pc, #172]	@ (8001c48 <StartProcessCmdTask+0x224>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f004 fdb0 	bl	8006702 <osMutexRelease>

	                    osMutexAcquire(uartMutexHandle, osWaitForever);
 8001ba2:	4b2b      	ldr	r3, [pc, #172]	@ (8001c50 <StartProcessCmdTask+0x22c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f04f 31ff 	mov.w	r1, #4294967295
 8001baa:	4618      	mov	r0, r3
 8001bac:	f004 fd5e 	bl	800666c <osMutexAcquire>
	                    sprintf(cmdBuffer, "OK! Period set to %d ms\r\n", period);
 8001bb0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001bb2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001bb6:	492b      	ldr	r1, [pc, #172]	@ (8001c64 <StartProcessCmdTask+0x240>)
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f008 fc79 	bl	800a4b0 <siprintf>
	                    HAL_UART_Transmit(&huart1, (uint8_t*)cmdBuffer, strlen(cmdBuffer), 100);
 8001bbe:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7fe fac4 	bl	8000150 <strlen>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8001bd0:	2364      	movs	r3, #100	@ 0x64
 8001bd2:	4821      	ldr	r0, [pc, #132]	@ (8001c58 <StartProcessCmdTask+0x234>)
 8001bd4:	f003 fd4a 	bl	800566c <HAL_UART_Transmit>
	                    osMutexRelease(uartMutexHandle);
 8001bd8:	4b1d      	ldr	r3, [pc, #116]	@ (8001c50 <StartProcessCmdTask+0x22c>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f004 fd90 	bl	8006702 <osMutexRelease>
 8001be2:	e01e      	b.n	8001c22 <StartProcessCmdTask+0x1fe>
	                }
	                else
	                {
	                    osMutexAcquire(uartMutexHandle, osWaitForever);
 8001be4:	4b1a      	ldr	r3, [pc, #104]	@ (8001c50 <StartProcessCmdTask+0x22c>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bec:	4618      	mov	r0, r3
 8001bee:	f004 fd3d 	bl	800666c <osMutexAcquire>
	                    char errMsg[] = "Invalid command. Use FREQ=xxx or PERIOD=xxx\r\n";
 8001bf2:	4b1d      	ldr	r3, [pc, #116]	@ (8001c68 <StartProcessCmdTask+0x244>)
 8001bf4:	f107 040c 	add.w	r4, r7, #12
 8001bf8:	461d      	mov	r5, r3
 8001bfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c02:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001c06:	c407      	stmia	r4!, {r0, r1, r2}
 8001c08:	8023      	strh	r3, [r4, #0]
	                    HAL_UART_Transmit(&huart1, (uint8_t*)errMsg, sizeof(errMsg)-1, 100);
 8001c0a:	f107 010c 	add.w	r1, r7, #12
 8001c0e:	2364      	movs	r3, #100	@ 0x64
 8001c10:	222d      	movs	r2, #45	@ 0x2d
 8001c12:	4811      	ldr	r0, [pc, #68]	@ (8001c58 <StartProcessCmdTask+0x234>)
 8001c14:	f003 fd2a 	bl	800566c <HAL_UART_Transmit>
	                    osMutexRelease(uartMutexHandle);
 8001c18:	4b0d      	ldr	r3, [pc, #52]	@ (8001c50 <StartProcessCmdTask+0x22c>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f004 fd70 	bl	8006702 <osMutexRelease>
	                }

	                cmdIndex = 0;
 8001c22:	2300      	movs	r3, #0
 8001c24:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	                memset(cmdBuffer, 0, sizeof(cmdBuffer));
 8001c28:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001c2c:	2220      	movs	r2, #32
 8001c2e:	2100      	movs	r1, #0
 8001c30:	4618      	mov	r0, r3
 8001c32:	f008 fcd0 	bl	800a5d6 <memset>
	        if (osMessageQueueGet(commandQueueHandle, &ch, NULL, osWaitForever) == osOK)
 8001c36:	e6fc      	b.n	8001a32 <StartProcessCmdTask+0xe>
 8001c38:	2000033c 	.word	0x2000033c
 8001c3c:	0800d210 	.word	0x0800d210
 8001c40:	044aa200 	.word	0x044aa200
 8001c44:	20000298 	.word	0x20000298
 8001c48:	2000034c 	.word	0x2000034c
 8001c4c:	20000014 	.word	0x20000014
 8001c50:	20000340 	.word	0x20000340
 8001c54:	0800d218 	.word	0x0800d218
 8001c58:	200002e0 	.word	0x200002e0
 8001c5c:	0800d238 	.word	0x0800d238
 8001c60:	20000010 	.word	0x20000010
 8001c64:	0800d244 	.word	0x0800d244
 8001c68:	0800d260 	.word	0x0800d260

08001c6c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a04      	ldr	r2, [pc, #16]	@ (8001c8c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d101      	bne.n	8001c82 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001c7e:	f000 faf1 	bl	8002264 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001c82:	bf00      	nop
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40000800 	.word	0x40000800

08001c90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c94:	b672      	cpsid	i
}
 8001c96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c98:	bf00      	nop
 8001c9a:	e7fd      	b.n	8001c98 <Error_Handler+0x8>

08001c9c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ca2:	4b18      	ldr	r3, [pc, #96]	@ (8001d04 <HAL_MspInit+0x68>)
 8001ca4:	699b      	ldr	r3, [r3, #24]
 8001ca6:	4a17      	ldr	r2, [pc, #92]	@ (8001d04 <HAL_MspInit+0x68>)
 8001ca8:	f043 0301 	orr.w	r3, r3, #1
 8001cac:	6193      	str	r3, [r2, #24]
 8001cae:	4b15      	ldr	r3, [pc, #84]	@ (8001d04 <HAL_MspInit+0x68>)
 8001cb0:	699b      	ldr	r3, [r3, #24]
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	60bb      	str	r3, [r7, #8]
 8001cb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cba:	4b12      	ldr	r3, [pc, #72]	@ (8001d04 <HAL_MspInit+0x68>)
 8001cbc:	69db      	ldr	r3, [r3, #28]
 8001cbe:	4a11      	ldr	r2, [pc, #68]	@ (8001d04 <HAL_MspInit+0x68>)
 8001cc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cc4:	61d3      	str	r3, [r2, #28]
 8001cc6:	4b0f      	ldr	r3, [pc, #60]	@ (8001d04 <HAL_MspInit+0x68>)
 8001cc8:	69db      	ldr	r3, [r3, #28]
 8001cca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cce:	607b      	str	r3, [r7, #4]
 8001cd0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	210f      	movs	r1, #15
 8001cd6:	f06f 0001 	mvn.w	r0, #1
 8001cda:	f001 f810 	bl	8002cfe <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001cde:	4b0a      	ldr	r3, [pc, #40]	@ (8001d08 <HAL_MspInit+0x6c>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	4a04      	ldr	r2, [pc, #16]	@ (8001d08 <HAL_MspInit+0x6c>)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	3710      	adds	r7, #16
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	40021000 	.word	0x40021000
 8001d08:	40010000 	.word	0x40010000

08001d0c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a09      	ldr	r2, [pc, #36]	@ (8001d40 <HAL_ADC_MspInit+0x34>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d10b      	bne.n	8001d36 <HAL_ADC_MspInit+0x2a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d1e:	4b09      	ldr	r3, [pc, #36]	@ (8001d44 <HAL_ADC_MspInit+0x38>)
 8001d20:	699b      	ldr	r3, [r3, #24]
 8001d22:	4a08      	ldr	r2, [pc, #32]	@ (8001d44 <HAL_ADC_MspInit+0x38>)
 8001d24:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d28:	6193      	str	r3, [r2, #24]
 8001d2a:	4b06      	ldr	r3, [pc, #24]	@ (8001d44 <HAL_ADC_MspInit+0x38>)
 8001d2c:	699b      	ldr	r3, [r3, #24]
 8001d2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001d36:	bf00      	nop
 8001d38:	3714      	adds	r7, #20
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc80      	pop	{r7}
 8001d3e:	4770      	bx	lr
 8001d40:	40012400 	.word	0x40012400
 8001d44:	40021000 	.word	0x40021000

08001d48 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b088      	sub	sp, #32
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d50:	f107 0310 	add.w	r3, r7, #16
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	605a      	str	r2, [r3, #4]
 8001d5a:	609a      	str	r2, [r3, #8]
 8001d5c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a15      	ldr	r2, [pc, #84]	@ (8001db8 <HAL_I2C_MspInit+0x70>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d123      	bne.n	8001db0 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d68:	4b14      	ldr	r3, [pc, #80]	@ (8001dbc <HAL_I2C_MspInit+0x74>)
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	4a13      	ldr	r2, [pc, #76]	@ (8001dbc <HAL_I2C_MspInit+0x74>)
 8001d6e:	f043 0308 	orr.w	r3, r3, #8
 8001d72:	6193      	str	r3, [r2, #24]
 8001d74:	4b11      	ldr	r3, [pc, #68]	@ (8001dbc <HAL_I2C_MspInit+0x74>)
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	f003 0308 	and.w	r3, r3, #8
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d80:	23c0      	movs	r3, #192	@ 0xc0
 8001d82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d84:	2312      	movs	r3, #18
 8001d86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d8c:	f107 0310 	add.w	r3, r7, #16
 8001d90:	4619      	mov	r1, r3
 8001d92:	480b      	ldr	r0, [pc, #44]	@ (8001dc0 <HAL_I2C_MspInit+0x78>)
 8001d94:	f001 f890 	bl	8002eb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d98:	4b08      	ldr	r3, [pc, #32]	@ (8001dbc <HAL_I2C_MspInit+0x74>)
 8001d9a:	69db      	ldr	r3, [r3, #28]
 8001d9c:	4a07      	ldr	r2, [pc, #28]	@ (8001dbc <HAL_I2C_MspInit+0x74>)
 8001d9e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001da2:	61d3      	str	r3, [r2, #28]
 8001da4:	4b05      	ldr	r3, [pc, #20]	@ (8001dbc <HAL_I2C_MspInit+0x74>)
 8001da6:	69db      	ldr	r3, [r3, #28]
 8001da8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dac:	60bb      	str	r3, [r7, #8]
 8001dae:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001db0:	bf00      	nop
 8001db2:	3720      	adds	r7, #32
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40005400 	.word	0x40005400
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	40010c00 	.word	0x40010c00

08001dc4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001dd4:	d10b      	bne.n	8001dee <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001dd6:	4b08      	ldr	r3, [pc, #32]	@ (8001df8 <HAL_TIM_Base_MspInit+0x34>)
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	4a07      	ldr	r2, [pc, #28]	@ (8001df8 <HAL_TIM_Base_MspInit+0x34>)
 8001ddc:	f043 0301 	orr.w	r3, r3, #1
 8001de0:	61d3      	str	r3, [r2, #28]
 8001de2:	4b05      	ldr	r3, [pc, #20]	@ (8001df8 <HAL_TIM_Base_MspInit+0x34>)
 8001de4:	69db      	ldr	r3, [r3, #28]
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001dee:	bf00      	nop
 8001df0:	3714      	adds	r7, #20
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bc80      	pop	{r7}
 8001df6:	4770      	bx	lr
 8001df8:	40021000 	.word	0x40021000

08001dfc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b088      	sub	sp, #32
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e04:	f107 0310 	add.w	r3, r7, #16
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	605a      	str	r2, [r3, #4]
 8001e0e:	609a      	str	r2, [r3, #8]
 8001e10:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e1a:	d117      	bne.n	8001e4c <HAL_TIM_MspPostInit+0x50>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e1c:	4b0d      	ldr	r3, [pc, #52]	@ (8001e54 <HAL_TIM_MspPostInit+0x58>)
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	4a0c      	ldr	r2, [pc, #48]	@ (8001e54 <HAL_TIM_MspPostInit+0x58>)
 8001e22:	f043 0304 	orr.w	r3, r3, #4
 8001e26:	6193      	str	r3, [r2, #24]
 8001e28:	4b0a      	ldr	r3, [pc, #40]	@ (8001e54 <HAL_TIM_MspPostInit+0x58>)
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	f003 0304 	and.w	r3, r3, #4
 8001e30:	60fb      	str	r3, [r7, #12]
 8001e32:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e34:	2308      	movs	r3, #8
 8001e36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e38:	2302      	movs	r3, #2
 8001e3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e40:	f107 0310 	add.w	r3, r7, #16
 8001e44:	4619      	mov	r1, r3
 8001e46:	4804      	ldr	r0, [pc, #16]	@ (8001e58 <HAL_TIM_MspPostInit+0x5c>)
 8001e48:	f001 f836 	bl	8002eb8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001e4c:	bf00      	nop
 8001e4e:	3720      	adds	r7, #32
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40021000 	.word	0x40021000
 8001e58:	40010800 	.word	0x40010800

08001e5c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b088      	sub	sp, #32
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e64:	f107 0310 	add.w	r3, r7, #16
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	605a      	str	r2, [r3, #4]
 8001e6e:	609a      	str	r2, [r3, #8]
 8001e70:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a20      	ldr	r2, [pc, #128]	@ (8001ef8 <HAL_UART_MspInit+0x9c>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d139      	bne.n	8001ef0 <HAL_UART_MspInit+0x94>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e7c:	4b1f      	ldr	r3, [pc, #124]	@ (8001efc <HAL_UART_MspInit+0xa0>)
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	4a1e      	ldr	r2, [pc, #120]	@ (8001efc <HAL_UART_MspInit+0xa0>)
 8001e82:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e86:	6193      	str	r3, [r2, #24]
 8001e88:	4b1c      	ldr	r3, [pc, #112]	@ (8001efc <HAL_UART_MspInit+0xa0>)
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e90:	60fb      	str	r3, [r7, #12]
 8001e92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e94:	4b19      	ldr	r3, [pc, #100]	@ (8001efc <HAL_UART_MspInit+0xa0>)
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	4a18      	ldr	r2, [pc, #96]	@ (8001efc <HAL_UART_MspInit+0xa0>)
 8001e9a:	f043 0304 	orr.w	r3, r3, #4
 8001e9e:	6193      	str	r3, [r2, #24]
 8001ea0:	4b16      	ldr	r3, [pc, #88]	@ (8001efc <HAL_UART_MspInit+0xa0>)
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	60bb      	str	r3, [r7, #8]
 8001eaa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001eac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001eb0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eba:	f107 0310 	add.w	r3, r7, #16
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	480f      	ldr	r0, [pc, #60]	@ (8001f00 <HAL_UART_MspInit+0xa4>)
 8001ec2:	f000 fff9 	bl	8002eb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ec6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001eca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed4:	f107 0310 	add.w	r3, r7, #16
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4809      	ldr	r0, [pc, #36]	@ (8001f00 <HAL_UART_MspInit+0xa4>)
 8001edc:	f000 ffec 	bl	8002eb8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	2105      	movs	r1, #5
 8001ee4:	2025      	movs	r0, #37	@ 0x25
 8001ee6:	f000 ff0a 	bl	8002cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001eea:	2025      	movs	r0, #37	@ 0x25
 8001eec:	f000 ff23 	bl	8002d36 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001ef0:	bf00      	nop
 8001ef2:	3720      	adds	r7, #32
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40013800 	.word	0x40013800
 8001efc:	40021000 	.word	0x40021000
 8001f00:	40010800 	.word	0x40010800

08001f04 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b08e      	sub	sp, #56	@ 0x38
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001f10:	2300      	movs	r3, #0
 8001f12:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8001f14:	2300      	movs	r3, #0
 8001f16:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001f1a:	4b34      	ldr	r3, [pc, #208]	@ (8001fec <HAL_InitTick+0xe8>)
 8001f1c:	69db      	ldr	r3, [r3, #28]
 8001f1e:	4a33      	ldr	r2, [pc, #204]	@ (8001fec <HAL_InitTick+0xe8>)
 8001f20:	f043 0304 	orr.w	r3, r3, #4
 8001f24:	61d3      	str	r3, [r2, #28]
 8001f26:	4b31      	ldr	r3, [pc, #196]	@ (8001fec <HAL_InitTick+0xe8>)
 8001f28:	69db      	ldr	r3, [r3, #28]
 8001f2a:	f003 0304 	and.w	r3, r3, #4
 8001f2e:	60fb      	str	r3, [r7, #12]
 8001f30:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f32:	f107 0210 	add.w	r2, r7, #16
 8001f36:	f107 0314 	add.w	r3, r7, #20
 8001f3a:	4611      	mov	r1, r2
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f002 f9cd 	bl	80042dc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001f42:	6a3b      	ldr	r3, [r7, #32]
 8001f44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001f46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d103      	bne.n	8001f54 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001f4c:	f002 f99e 	bl	800428c <HAL_RCC_GetPCLK1Freq>
 8001f50:	6378      	str	r0, [r7, #52]	@ 0x34
 8001f52:	e004      	b.n	8001f5e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001f54:	f002 f99a 	bl	800428c <HAL_RCC_GetPCLK1Freq>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f60:	4a23      	ldr	r2, [pc, #140]	@ (8001ff0 <HAL_InitTick+0xec>)
 8001f62:	fba2 2303 	umull	r2, r3, r2, r3
 8001f66:	0c9b      	lsrs	r3, r3, #18
 8001f68:	3b01      	subs	r3, #1
 8001f6a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001f6c:	4b21      	ldr	r3, [pc, #132]	@ (8001ff4 <HAL_InitTick+0xf0>)
 8001f6e:	4a22      	ldr	r2, [pc, #136]	@ (8001ff8 <HAL_InitTick+0xf4>)
 8001f70:	601a      	str	r2, [r3, #0]
   * Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001f72:	4b20      	ldr	r3, [pc, #128]	@ (8001ff4 <HAL_InitTick+0xf0>)
 8001f74:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001f78:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001f7a:	4a1e      	ldr	r2, [pc, #120]	@ (8001ff4 <HAL_InitTick+0xf0>)
 8001f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f7e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001f80:	4b1c      	ldr	r3, [pc, #112]	@ (8001ff4 <HAL_InitTick+0xf0>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f86:	4b1b      	ldr	r3, [pc, #108]	@ (8001ff4 <HAL_InitTick+0xf0>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f8c:	4b19      	ldr	r3, [pc, #100]	@ (8001ff4 <HAL_InitTick+0xf0>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8001f92:	4818      	ldr	r0, [pc, #96]	@ (8001ff4 <HAL_InitTick+0xf0>)
 8001f94:	f002 fb5c 	bl	8004650 <HAL_TIM_Base_Init>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001f9e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d11b      	bne.n	8001fde <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8001fa6:	4813      	ldr	r0, [pc, #76]	@ (8001ff4 <HAL_InitTick+0xf0>)
 8001fa8:	f002 fba2 	bl	80046f0 <HAL_TIM_Base_Start_IT>
 8001fac:	4603      	mov	r3, r0
 8001fae:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001fb2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d111      	bne.n	8001fde <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001fba:	201e      	movs	r0, #30
 8001fbc:	f000 febb 	bl	8002d36 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2b0f      	cmp	r3, #15
 8001fc4:	d808      	bhi.n	8001fd8 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	6879      	ldr	r1, [r7, #4]
 8001fca:	201e      	movs	r0, #30
 8001fcc:	f000 fe97 	bl	8002cfe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fd0:	4a0a      	ldr	r2, [pc, #40]	@ (8001ffc <HAL_InitTick+0xf8>)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6013      	str	r3, [r2, #0]
 8001fd6:	e002      	b.n	8001fde <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001fde:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3738      	adds	r7, #56	@ 0x38
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	431bde83 	.word	0x431bde83
 8001ff4:	20000354 	.word	0x20000354
 8001ff8:	40000800 	.word	0x40000800
 8001ffc:	2000001c 	.word	0x2000001c

08002000 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002004:	bf00      	nop
 8002006:	e7fd      	b.n	8002004 <NMI_Handler+0x4>

08002008 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800200c:	bf00      	nop
 800200e:	e7fd      	b.n	800200c <HardFault_Handler+0x4>

08002010 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002014:	bf00      	nop
 8002016:	e7fd      	b.n	8002014 <MemManage_Handler+0x4>

08002018 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800201c:	bf00      	nop
 800201e:	e7fd      	b.n	800201c <BusFault_Handler+0x4>

08002020 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002024:	bf00      	nop
 8002026:	e7fd      	b.n	8002024 <UsageFault_Handler+0x4>

08002028 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800202c:	bf00      	nop
 800202e:	46bd      	mov	sp, r7
 8002030:	bc80      	pop	{r7}
 8002032:	4770      	bx	lr

08002034 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002038:	4802      	ldr	r0, [pc, #8]	@ (8002044 <TIM4_IRQHandler+0x10>)
 800203a:	f002 fd09 	bl	8004a50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800203e:	bf00      	nop
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	20000354 	.word	0x20000354

08002048 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800204c:	4802      	ldr	r0, [pc, #8]	@ (8002058 <USART1_IRQHandler+0x10>)
 800204e:	f003 fbbd 	bl	80057cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002052:	bf00      	nop
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	200002e0 	.word	0x200002e0

0800205c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  return 1;
 8002060:	2301      	movs	r3, #1
}
 8002062:	4618      	mov	r0, r3
 8002064:	46bd      	mov	sp, r7
 8002066:	bc80      	pop	{r7}
 8002068:	4770      	bx	lr

0800206a <_kill>:

int _kill(int pid, int sig)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b082      	sub	sp, #8
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
 8002072:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002074:	f008 fb60 	bl	800a738 <__errno>
 8002078:	4603      	mov	r3, r0
 800207a:	2216      	movs	r2, #22
 800207c:	601a      	str	r2, [r3, #0]
  return -1;
 800207e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002082:	4618      	mov	r0, r3
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <_exit>:

void _exit (int status)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b082      	sub	sp, #8
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002092:	f04f 31ff 	mov.w	r1, #4294967295
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f7ff ffe7 	bl	800206a <_kill>
  while (1) {}    /* Make sure we hang here */
 800209c:	bf00      	nop
 800209e:	e7fd      	b.n	800209c <_exit+0x12>

080020a0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ac:	2300      	movs	r3, #0
 80020ae:	617b      	str	r3, [r7, #20]
 80020b0:	e00a      	b.n	80020c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020b2:	f3af 8000 	nop.w
 80020b6:	4601      	mov	r1, r0
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	1c5a      	adds	r2, r3, #1
 80020bc:	60ba      	str	r2, [r7, #8]
 80020be:	b2ca      	uxtb	r2, r1
 80020c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	3301      	adds	r3, #1
 80020c6:	617b      	str	r3, [r7, #20]
 80020c8:	697a      	ldr	r2, [r7, #20]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	dbf0      	blt.n	80020b2 <_read+0x12>
  }

  return len;
 80020d0:	687b      	ldr	r3, [r7, #4]
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3718      	adds	r7, #24
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b086      	sub	sp, #24
 80020de:	af00      	add	r7, sp, #0
 80020e0:	60f8      	str	r0, [r7, #12]
 80020e2:	60b9      	str	r1, [r7, #8]
 80020e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020e6:	2300      	movs	r3, #0
 80020e8:	617b      	str	r3, [r7, #20]
 80020ea:	e009      	b.n	8002100 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	1c5a      	adds	r2, r3, #1
 80020f0:	60ba      	str	r2, [r7, #8]
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	3301      	adds	r3, #1
 80020fe:	617b      	str	r3, [r7, #20]
 8002100:	697a      	ldr	r2, [r7, #20]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	429a      	cmp	r2, r3
 8002106:	dbf1      	blt.n	80020ec <_write+0x12>
  }
  return len;
 8002108:	687b      	ldr	r3, [r7, #4]
}
 800210a:	4618      	mov	r0, r3
 800210c:	3718      	adds	r7, #24
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <_close>:

int _close(int file)
{
 8002112:	b480      	push	{r7}
 8002114:	b083      	sub	sp, #12
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800211a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800211e:	4618      	mov	r0, r3
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	bc80      	pop	{r7}
 8002126:	4770      	bx	lr

08002128 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002138:	605a      	str	r2, [r3, #4]
  return 0;
 800213a:	2300      	movs	r3, #0
}
 800213c:	4618      	mov	r0, r3
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	bc80      	pop	{r7}
 8002144:	4770      	bx	lr

08002146 <_isatty>:

int _isatty(int file)
{
 8002146:	b480      	push	{r7}
 8002148:	b083      	sub	sp, #12
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800214e:	2301      	movs	r3, #1
}
 8002150:	4618      	mov	r0, r3
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	bc80      	pop	{r7}
 8002158:	4770      	bx	lr

0800215a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800215a:	b480      	push	{r7}
 800215c:	b085      	sub	sp, #20
 800215e:	af00      	add	r7, sp, #0
 8002160:	60f8      	str	r0, [r7, #12]
 8002162:	60b9      	str	r1, [r7, #8]
 8002164:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002166:	2300      	movs	r3, #0
}
 8002168:	4618      	mov	r0, r3
 800216a:	3714      	adds	r7, #20
 800216c:	46bd      	mov	sp, r7
 800216e:	bc80      	pop	{r7}
 8002170:	4770      	bx	lr
	...

08002174 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b086      	sub	sp, #24
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800217c:	4a14      	ldr	r2, [pc, #80]	@ (80021d0 <_sbrk+0x5c>)
 800217e:	4b15      	ldr	r3, [pc, #84]	@ (80021d4 <_sbrk+0x60>)
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002188:	4b13      	ldr	r3, [pc, #76]	@ (80021d8 <_sbrk+0x64>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d102      	bne.n	8002196 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002190:	4b11      	ldr	r3, [pc, #68]	@ (80021d8 <_sbrk+0x64>)
 8002192:	4a12      	ldr	r2, [pc, #72]	@ (80021dc <_sbrk+0x68>)
 8002194:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002196:	4b10      	ldr	r3, [pc, #64]	@ (80021d8 <_sbrk+0x64>)
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4413      	add	r3, r2
 800219e:	693a      	ldr	r2, [r7, #16]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d207      	bcs.n	80021b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021a4:	f008 fac8 	bl	800a738 <__errno>
 80021a8:	4603      	mov	r3, r0
 80021aa:	220c      	movs	r2, #12
 80021ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021ae:	f04f 33ff 	mov.w	r3, #4294967295
 80021b2:	e009      	b.n	80021c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021b4:	4b08      	ldr	r3, [pc, #32]	@ (80021d8 <_sbrk+0x64>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021ba:	4b07      	ldr	r3, [pc, #28]	@ (80021d8 <_sbrk+0x64>)
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4413      	add	r3, r2
 80021c2:	4a05      	ldr	r2, [pc, #20]	@ (80021d8 <_sbrk+0x64>)
 80021c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021c6:	68fb      	ldr	r3, [r7, #12]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3718      	adds	r7, #24
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	20005000 	.word	0x20005000
 80021d4:	00000400 	.word	0x00000400
 80021d8:	2000039c 	.word	0x2000039c
 80021dc:	20002ad8 	.word	0x20002ad8

080021e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021e4:	bf00      	nop
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bc80      	pop	{r7}
 80021ea:	4770      	bx	lr

080021ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80021ec:	f7ff fff8 	bl	80021e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021f0:	480b      	ldr	r0, [pc, #44]	@ (8002220 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80021f2:	490c      	ldr	r1, [pc, #48]	@ (8002224 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80021f4:	4a0c      	ldr	r2, [pc, #48]	@ (8002228 <LoopFillZerobss+0x16>)
  movs r3, #0
 80021f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021f8:	e002      	b.n	8002200 <LoopCopyDataInit>

080021fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021fe:	3304      	adds	r3, #4

08002200 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002200:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002202:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002204:	d3f9      	bcc.n	80021fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002206:	4a09      	ldr	r2, [pc, #36]	@ (800222c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002208:	4c09      	ldr	r4, [pc, #36]	@ (8002230 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800220a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800220c:	e001      	b.n	8002212 <LoopFillZerobss>

0800220e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800220e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002210:	3204      	adds	r2, #4

08002212 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002212:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002214:	d3fb      	bcc.n	800220e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002216:	f008 fa95 	bl	800a744 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800221a:	f7ff f8ad 	bl	8001378 <main>
  bx lr
 800221e:	4770      	bx	lr
  ldr r0, =_sdata
 8002220:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002224:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002228:	0800d75c 	.word	0x0800d75c
  ldr r2, =_sbss
 800222c:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002230:	20002ad8 	.word	0x20002ad8

08002234 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002234:	e7fe      	b.n	8002234 <ADC1_2_IRQHandler>
	...

08002238 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800223c:	4b08      	ldr	r3, [pc, #32]	@ (8002260 <HAL_Init+0x28>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a07      	ldr	r2, [pc, #28]	@ (8002260 <HAL_Init+0x28>)
 8002242:	f043 0310 	orr.w	r3, r3, #16
 8002246:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002248:	2003      	movs	r0, #3
 800224a:	f000 fd4d 	bl	8002ce8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800224e:	200f      	movs	r0, #15
 8002250:	f7ff fe58 	bl	8001f04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002254:	f7ff fd22 	bl	8001c9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	40022000 	.word	0x40022000

08002264 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002268:	4b05      	ldr	r3, [pc, #20]	@ (8002280 <HAL_IncTick+0x1c>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	461a      	mov	r2, r3
 800226e:	4b05      	ldr	r3, [pc, #20]	@ (8002284 <HAL_IncTick+0x20>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4413      	add	r3, r2
 8002274:	4a03      	ldr	r2, [pc, #12]	@ (8002284 <HAL_IncTick+0x20>)
 8002276:	6013      	str	r3, [r2, #0]
}
 8002278:	bf00      	nop
 800227a:	46bd      	mov	sp, r7
 800227c:	bc80      	pop	{r7}
 800227e:	4770      	bx	lr
 8002280:	20000020 	.word	0x20000020
 8002284:	200003a0 	.word	0x200003a0

08002288 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  return uwTick;
 800228c:	4b02      	ldr	r3, [pc, #8]	@ (8002298 <HAL_GetTick+0x10>)
 800228e:	681b      	ldr	r3, [r3, #0]
}
 8002290:	4618      	mov	r0, r3
 8002292:	46bd      	mov	sp, r7
 8002294:	bc80      	pop	{r7}
 8002296:	4770      	bx	lr
 8002298:	200003a0 	.word	0x200003a0

0800229c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022a4:	f7ff fff0 	bl	8002288 <HAL_GetTick>
 80022a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022b4:	d005      	beq.n	80022c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022b6:	4b0a      	ldr	r3, [pc, #40]	@ (80022e0 <HAL_Delay+0x44>)
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	461a      	mov	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	4413      	add	r3, r2
 80022c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022c2:	bf00      	nop
 80022c4:	f7ff ffe0 	bl	8002288 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	68fa      	ldr	r2, [r7, #12]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d8f7      	bhi.n	80022c4 <HAL_Delay+0x28>
  {
  }
}
 80022d4:	bf00      	nop
 80022d6:	bf00      	nop
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	20000020 	.word	0x20000020

080022e4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022ec:	2300      	movs	r3, #0
 80022ee:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80022f0:	2300      	movs	r3, #0
 80022f2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80022f4:	2300      	movs	r3, #0
 80022f6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80022f8:	2300      	movs	r3, #0
 80022fa:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e0be      	b.n	8002484 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002310:	2b00      	cmp	r3, #0
 8002312:	d109      	bne.n	8002328 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f7ff fcf2 	bl	8001d0c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f000 fbf1 	bl	8002b10 <ADC_ConversionStop_Disable>
 800232e:	4603      	mov	r3, r0
 8002330:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002336:	f003 0310 	and.w	r3, r3, #16
 800233a:	2b00      	cmp	r3, #0
 800233c:	f040 8099 	bne.w	8002472 <HAL_ADC_Init+0x18e>
 8002340:	7dfb      	ldrb	r3, [r7, #23]
 8002342:	2b00      	cmp	r3, #0
 8002344:	f040 8095 	bne.w	8002472 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800234c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002350:	f023 0302 	bic.w	r3, r3, #2
 8002354:	f043 0202 	orr.w	r2, r3, #2
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002364:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	7b1b      	ldrb	r3, [r3, #12]
 800236a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800236c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800236e:	68ba      	ldr	r2, [r7, #8]
 8002370:	4313      	orrs	r3, r2
 8002372:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800237c:	d003      	beq.n	8002386 <HAL_ADC_Init+0xa2>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d102      	bne.n	800238c <HAL_ADC_Init+0xa8>
 8002386:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800238a:	e000      	b.n	800238e <HAL_ADC_Init+0xaa>
 800238c:	2300      	movs	r3, #0
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	4313      	orrs	r3, r2
 8002392:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	7d1b      	ldrb	r3, [r3, #20]
 8002398:	2b01      	cmp	r3, #1
 800239a:	d119      	bne.n	80023d0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	7b1b      	ldrb	r3, [r3, #12]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d109      	bne.n	80023b8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	699b      	ldr	r3, [r3, #24]
 80023a8:	3b01      	subs	r3, #1
 80023aa:	035a      	lsls	r2, r3, #13
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80023b4:	613b      	str	r3, [r7, #16]
 80023b6:	e00b      	b.n	80023d0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023bc:	f043 0220 	orr.w	r2, r3, #32
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023c8:	f043 0201 	orr.w	r2, r3, #1
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	430a      	orrs	r2, r1
 80023e2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	689a      	ldr	r2, [r3, #8]
 80023ea:	4b28      	ldr	r3, [pc, #160]	@ (800248c <HAL_ADC_Init+0x1a8>)
 80023ec:	4013      	ands	r3, r2
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	6812      	ldr	r2, [r2, #0]
 80023f2:	68b9      	ldr	r1, [r7, #8]
 80023f4:	430b      	orrs	r3, r1
 80023f6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002400:	d003      	beq.n	800240a <HAL_ADC_Init+0x126>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	2b01      	cmp	r3, #1
 8002408:	d104      	bne.n	8002414 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	3b01      	subs	r3, #1
 8002410:	051b      	lsls	r3, r3, #20
 8002412:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800241a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	430a      	orrs	r2, r1
 8002426:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	689a      	ldr	r2, [r3, #8]
 800242e:	4b18      	ldr	r3, [pc, #96]	@ (8002490 <HAL_ADC_Init+0x1ac>)
 8002430:	4013      	ands	r3, r2
 8002432:	68ba      	ldr	r2, [r7, #8]
 8002434:	429a      	cmp	r2, r3
 8002436:	d10b      	bne.n	8002450 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002442:	f023 0303 	bic.w	r3, r3, #3
 8002446:	f043 0201 	orr.w	r2, r3, #1
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800244e:	e018      	b.n	8002482 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002454:	f023 0312 	bic.w	r3, r3, #18
 8002458:	f043 0210 	orr.w	r2, r3, #16
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002464:	f043 0201 	orr.w	r2, r3, #1
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002470:	e007      	b.n	8002482 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002476:	f043 0210 	orr.w	r2, r3, #16
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002482:	7dfb      	ldrb	r3, [r7, #23]
}
 8002484:	4618      	mov	r0, r3
 8002486:	3718      	adds	r7, #24
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	ffe1f7fd 	.word	0xffe1f7fd
 8002490:	ff1f0efe 	.word	0xff1f0efe

08002494 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800249c:	2300      	movs	r3, #0
 800249e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d101      	bne.n	80024ae <HAL_ADC_Start+0x1a>
 80024aa:	2302      	movs	r3, #2
 80024ac:	e098      	b.n	80025e0 <HAL_ADC_Start+0x14c>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2201      	movs	r2, #1
 80024b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f000 fad0 	bl	8002a5c <ADC_Enable>
 80024bc:	4603      	mov	r3, r0
 80024be:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80024c0:	7bfb      	ldrb	r3, [r7, #15]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	f040 8087 	bne.w	80025d6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024d0:	f023 0301 	bic.w	r3, r3, #1
 80024d4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a41      	ldr	r2, [pc, #260]	@ (80025e8 <HAL_ADC_Start+0x154>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d105      	bne.n	80024f2 <HAL_ADC_Start+0x5e>
 80024e6:	4b41      	ldr	r3, [pc, #260]	@ (80025ec <HAL_ADC_Start+0x158>)
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d115      	bne.n	800251e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024f6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002508:	2b00      	cmp	r3, #0
 800250a:	d026      	beq.n	800255a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002510:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002514:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800251c:	e01d      	b.n	800255a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002522:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a2f      	ldr	r2, [pc, #188]	@ (80025ec <HAL_ADC_Start+0x158>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d004      	beq.n	800253e <HAL_ADC_Start+0xaa>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a2b      	ldr	r2, [pc, #172]	@ (80025e8 <HAL_ADC_Start+0x154>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d10d      	bne.n	800255a <HAL_ADC_Start+0xc6>
 800253e:	4b2b      	ldr	r3, [pc, #172]	@ (80025ec <HAL_ADC_Start+0x158>)
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002546:	2b00      	cmp	r3, #0
 8002548:	d007      	beq.n	800255a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800254e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002552:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800255e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d006      	beq.n	8002574 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800256a:	f023 0206 	bic.w	r2, r3, #6
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002572:	e002      	b.n	800257a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f06f 0202 	mvn.w	r2, #2
 800258a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002596:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800259a:	d113      	bne.n	80025c4 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80025a0:	4a11      	ldr	r2, [pc, #68]	@ (80025e8 <HAL_ADC_Start+0x154>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d105      	bne.n	80025b2 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80025a6:	4b11      	ldr	r3, [pc, #68]	@ (80025ec <HAL_ADC_Start+0x158>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d108      	bne.n	80025c4 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	689a      	ldr	r2, [r3, #8]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80025c0:	609a      	str	r2, [r3, #8]
 80025c2:	e00c      	b.n	80025de <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	689a      	ldr	r2, [r3, #8]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80025d2:	609a      	str	r2, [r3, #8]
 80025d4:	e003      	b.n	80025de <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80025de:	7bfb      	ldrb	r3, [r7, #15]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3710      	adds	r7, #16
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	40012800 	.word	0x40012800
 80025ec:	40012400 	.word	0x40012400

080025f0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025f8:	2300      	movs	r3, #0
 80025fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002602:	2b01      	cmp	r3, #1
 8002604:	d101      	bne.n	800260a <HAL_ADC_Stop+0x1a>
 8002606:	2302      	movs	r3, #2
 8002608:	e01a      	b.n	8002640 <HAL_ADC_Stop+0x50>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2201      	movs	r2, #1
 800260e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f000 fa7c 	bl	8002b10 <ADC_ConversionStop_Disable>
 8002618:	4603      	mov	r3, r0
 800261a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800261c:	7bfb      	ldrb	r3, [r7, #15]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d109      	bne.n	8002636 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002626:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800262a:	f023 0301 	bic.w	r3, r3, #1
 800262e:	f043 0201 	orr.w	r2, r3, #1
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800263e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002640:	4618      	mov	r0, r3
 8002642:	3710      	adds	r7, #16
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002648:	b590      	push	{r4, r7, lr}
 800264a:	b087      	sub	sp, #28
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002652:	2300      	movs	r3, #0
 8002654:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002656:	2300      	movs	r3, #0
 8002658:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800265a:	2300      	movs	r3, #0
 800265c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800265e:	f7ff fe13 	bl	8002288 <HAL_GetTick>
 8002662:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00b      	beq.n	800268a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002676:	f043 0220 	orr.w	r2, r3, #32
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e0d3      	b.n	8002832 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002694:	2b00      	cmp	r3, #0
 8002696:	d131      	bne.n	80026fc <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800269e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d12a      	bne.n	80026fc <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80026a6:	e021      	b.n	80026ec <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ae:	d01d      	beq.n	80026ec <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d007      	beq.n	80026c6 <HAL_ADC_PollForConversion+0x7e>
 80026b6:	f7ff fde7 	bl	8002288 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	683a      	ldr	r2, [r7, #0]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d212      	bcs.n	80026ec <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d10b      	bne.n	80026ec <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026d8:	f043 0204 	orr.w	r2, r3, #4
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e0a2      	b.n	8002832 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d0d6      	beq.n	80026a8 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80026fa:	e070      	b.n	80027de <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80026fc:	4b4f      	ldr	r3, [pc, #316]	@ (800283c <HAL_ADC_PollForConversion+0x1f4>)
 80026fe:	681c      	ldr	r4, [r3, #0]
 8002700:	2002      	movs	r0, #2
 8002702:	f001 feef 	bl	80044e4 <HAL_RCCEx_GetPeriphCLKFreq>
 8002706:	4603      	mov	r3, r0
 8002708:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	6919      	ldr	r1, [r3, #16]
 8002712:	4b4b      	ldr	r3, [pc, #300]	@ (8002840 <HAL_ADC_PollForConversion+0x1f8>)
 8002714:	400b      	ands	r3, r1
 8002716:	2b00      	cmp	r3, #0
 8002718:	d118      	bne.n	800274c <HAL_ADC_PollForConversion+0x104>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68d9      	ldr	r1, [r3, #12]
 8002720:	4b48      	ldr	r3, [pc, #288]	@ (8002844 <HAL_ADC_PollForConversion+0x1fc>)
 8002722:	400b      	ands	r3, r1
 8002724:	2b00      	cmp	r3, #0
 8002726:	d111      	bne.n	800274c <HAL_ADC_PollForConversion+0x104>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6919      	ldr	r1, [r3, #16]
 800272e:	4b46      	ldr	r3, [pc, #280]	@ (8002848 <HAL_ADC_PollForConversion+0x200>)
 8002730:	400b      	ands	r3, r1
 8002732:	2b00      	cmp	r3, #0
 8002734:	d108      	bne.n	8002748 <HAL_ADC_PollForConversion+0x100>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68d9      	ldr	r1, [r3, #12]
 800273c:	4b43      	ldr	r3, [pc, #268]	@ (800284c <HAL_ADC_PollForConversion+0x204>)
 800273e:	400b      	ands	r3, r1
 8002740:	2b00      	cmp	r3, #0
 8002742:	d101      	bne.n	8002748 <HAL_ADC_PollForConversion+0x100>
 8002744:	2314      	movs	r3, #20
 8002746:	e020      	b.n	800278a <HAL_ADC_PollForConversion+0x142>
 8002748:	2329      	movs	r3, #41	@ 0x29
 800274a:	e01e      	b.n	800278a <HAL_ADC_PollForConversion+0x142>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6919      	ldr	r1, [r3, #16]
 8002752:	4b3d      	ldr	r3, [pc, #244]	@ (8002848 <HAL_ADC_PollForConversion+0x200>)
 8002754:	400b      	ands	r3, r1
 8002756:	2b00      	cmp	r3, #0
 8002758:	d106      	bne.n	8002768 <HAL_ADC_PollForConversion+0x120>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	68d9      	ldr	r1, [r3, #12]
 8002760:	4b3a      	ldr	r3, [pc, #232]	@ (800284c <HAL_ADC_PollForConversion+0x204>)
 8002762:	400b      	ands	r3, r1
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00d      	beq.n	8002784 <HAL_ADC_PollForConversion+0x13c>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	6919      	ldr	r1, [r3, #16]
 800276e:	4b38      	ldr	r3, [pc, #224]	@ (8002850 <HAL_ADC_PollForConversion+0x208>)
 8002770:	400b      	ands	r3, r1
 8002772:	2b00      	cmp	r3, #0
 8002774:	d108      	bne.n	8002788 <HAL_ADC_PollForConversion+0x140>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68d9      	ldr	r1, [r3, #12]
 800277c:	4b34      	ldr	r3, [pc, #208]	@ (8002850 <HAL_ADC_PollForConversion+0x208>)
 800277e:	400b      	ands	r3, r1
 8002780:	2b00      	cmp	r3, #0
 8002782:	d101      	bne.n	8002788 <HAL_ADC_PollForConversion+0x140>
 8002784:	2354      	movs	r3, #84	@ 0x54
 8002786:	e000      	b.n	800278a <HAL_ADC_PollForConversion+0x142>
 8002788:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800278a:	fb02 f303 	mul.w	r3, r2, r3
 800278e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002790:	e021      	b.n	80027d6 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002798:	d01a      	beq.n	80027d0 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d007      	beq.n	80027b0 <HAL_ADC_PollForConversion+0x168>
 80027a0:	f7ff fd72 	bl	8002288 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	683a      	ldr	r2, [r7, #0]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d20f      	bcs.n	80027d0 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d90b      	bls.n	80027d0 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027bc:	f043 0204 	orr.w	r2, r3, #4
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e030      	b.n	8002832 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	3301      	adds	r3, #1
 80027d4:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	693a      	ldr	r2, [r7, #16]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d8d9      	bhi.n	8002792 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f06f 0212 	mvn.w	r2, #18
 80027e6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ec:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80027fe:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002802:	d115      	bne.n	8002830 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002808:	2b00      	cmp	r3, #0
 800280a:	d111      	bne.n	8002830 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002810:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800281c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d105      	bne.n	8002830 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002828:	f043 0201 	orr.w	r2, r3, #1
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	371c      	adds	r7, #28
 8002836:	46bd      	mov	sp, r7
 8002838:	bd90      	pop	{r4, r7, pc}
 800283a:	bf00      	nop
 800283c:	20000018 	.word	0x20000018
 8002840:	24924924 	.word	0x24924924
 8002844:	00924924 	.word	0x00924924
 8002848:	12492492 	.word	0x12492492
 800284c:	00492492 	.word	0x00492492
 8002850:	00249249 	.word	0x00249249

08002854 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002862:	4618      	mov	r0, r3
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	bc80      	pop	{r7}
 800286a:	4770      	bx	lr

0800286c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002876:	2300      	movs	r3, #0
 8002878:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800287a:	2300      	movs	r3, #0
 800287c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002884:	2b01      	cmp	r3, #1
 8002886:	d101      	bne.n	800288c <HAL_ADC_ConfigChannel+0x20>
 8002888:	2302      	movs	r3, #2
 800288a:	e0dc      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x1da>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	2b06      	cmp	r3, #6
 800289a:	d81c      	bhi.n	80028d6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685a      	ldr	r2, [r3, #4]
 80028a6:	4613      	mov	r3, r2
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	4413      	add	r3, r2
 80028ac:	3b05      	subs	r3, #5
 80028ae:	221f      	movs	r2, #31
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	43db      	mvns	r3, r3
 80028b6:	4019      	ands	r1, r3
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	6818      	ldr	r0, [r3, #0]
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685a      	ldr	r2, [r3, #4]
 80028c0:	4613      	mov	r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	4413      	add	r3, r2
 80028c6:	3b05      	subs	r3, #5
 80028c8:	fa00 f203 	lsl.w	r2, r0, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	430a      	orrs	r2, r1
 80028d2:	635a      	str	r2, [r3, #52]	@ 0x34
 80028d4:	e03c      	b.n	8002950 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	2b0c      	cmp	r3, #12
 80028dc:	d81c      	bhi.n	8002918 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685a      	ldr	r2, [r3, #4]
 80028e8:	4613      	mov	r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	4413      	add	r3, r2
 80028ee:	3b23      	subs	r3, #35	@ 0x23
 80028f0:	221f      	movs	r2, #31
 80028f2:	fa02 f303 	lsl.w	r3, r2, r3
 80028f6:	43db      	mvns	r3, r3
 80028f8:	4019      	ands	r1, r3
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	6818      	ldr	r0, [r3, #0]
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	685a      	ldr	r2, [r3, #4]
 8002902:	4613      	mov	r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	4413      	add	r3, r2
 8002908:	3b23      	subs	r3, #35	@ 0x23
 800290a:	fa00 f203 	lsl.w	r2, r0, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	430a      	orrs	r2, r1
 8002914:	631a      	str	r2, [r3, #48]	@ 0x30
 8002916:	e01b      	b.n	8002950 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685a      	ldr	r2, [r3, #4]
 8002922:	4613      	mov	r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	4413      	add	r3, r2
 8002928:	3b41      	subs	r3, #65	@ 0x41
 800292a:	221f      	movs	r2, #31
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	43db      	mvns	r3, r3
 8002932:	4019      	ands	r1, r3
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	6818      	ldr	r0, [r3, #0]
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685a      	ldr	r2, [r3, #4]
 800293c:	4613      	mov	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	4413      	add	r3, r2
 8002942:	3b41      	subs	r3, #65	@ 0x41
 8002944:	fa00 f203 	lsl.w	r2, r0, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	430a      	orrs	r2, r1
 800294e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2b09      	cmp	r3, #9
 8002956:	d91c      	bls.n	8002992 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	68d9      	ldr	r1, [r3, #12]
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	4613      	mov	r3, r2
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	4413      	add	r3, r2
 8002968:	3b1e      	subs	r3, #30
 800296a:	2207      	movs	r2, #7
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	43db      	mvns	r3, r3
 8002972:	4019      	ands	r1, r3
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	6898      	ldr	r0, [r3, #8]
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	4613      	mov	r3, r2
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	4413      	add	r3, r2
 8002982:	3b1e      	subs	r3, #30
 8002984:	fa00 f203 	lsl.w	r2, r0, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	430a      	orrs	r2, r1
 800298e:	60da      	str	r2, [r3, #12]
 8002990:	e019      	b.n	80029c6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	6919      	ldr	r1, [r3, #16]
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	4613      	mov	r3, r2
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	4413      	add	r3, r2
 80029a2:	2207      	movs	r2, #7
 80029a4:	fa02 f303 	lsl.w	r3, r2, r3
 80029a8:	43db      	mvns	r3, r3
 80029aa:	4019      	ands	r1, r3
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	6898      	ldr	r0, [r3, #8]
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	4613      	mov	r3, r2
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	4413      	add	r3, r2
 80029ba:	fa00 f203 	lsl.w	r2, r0, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	430a      	orrs	r2, r1
 80029c4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2b10      	cmp	r3, #16
 80029cc:	d003      	beq.n	80029d6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80029d2:	2b11      	cmp	r3, #17
 80029d4:	d132      	bne.n	8002a3c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a1d      	ldr	r2, [pc, #116]	@ (8002a50 <HAL_ADC_ConfigChannel+0x1e4>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d125      	bne.n	8002a2c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d126      	bne.n	8002a3c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	689a      	ldr	r2, [r3, #8]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80029fc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2b10      	cmp	r3, #16
 8002a04:	d11a      	bne.n	8002a3c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a06:	4b13      	ldr	r3, [pc, #76]	@ (8002a54 <HAL_ADC_ConfigChannel+0x1e8>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a13      	ldr	r2, [pc, #76]	@ (8002a58 <HAL_ADC_ConfigChannel+0x1ec>)
 8002a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a10:	0c9a      	lsrs	r2, r3, #18
 8002a12:	4613      	mov	r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	4413      	add	r3, r2
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a1c:	e002      	b.n	8002a24 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	3b01      	subs	r3, #1
 8002a22:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d1f9      	bne.n	8002a1e <HAL_ADC_ConfigChannel+0x1b2>
 8002a2a:	e007      	b.n	8002a3c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a30:	f043 0220 	orr.w	r2, r3, #32
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3714      	adds	r7, #20
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bc80      	pop	{r7}
 8002a4e:	4770      	bx	lr
 8002a50:	40012400 	.word	0x40012400
 8002a54:	20000018 	.word	0x20000018
 8002a58:	431bde83 	.word	0x431bde83

08002a5c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a64:	2300      	movs	r3, #0
 8002a66:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d040      	beq.n	8002afc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	689a      	ldr	r2, [r3, #8]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f042 0201 	orr.w	r2, r2, #1
 8002a88:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002a8a:	4b1f      	ldr	r3, [pc, #124]	@ (8002b08 <ADC_Enable+0xac>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a1f      	ldr	r2, [pc, #124]	@ (8002b0c <ADC_Enable+0xb0>)
 8002a90:	fba2 2303 	umull	r2, r3, r2, r3
 8002a94:	0c9b      	lsrs	r3, r3, #18
 8002a96:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002a98:	e002      	b.n	8002aa0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1f9      	bne.n	8002a9a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002aa6:	f7ff fbef 	bl	8002288 <HAL_GetTick>
 8002aaa:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002aac:	e01f      	b.n	8002aee <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002aae:	f7ff fbeb 	bl	8002288 <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d918      	bls.n	8002aee <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d011      	beq.n	8002aee <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ace:	f043 0210 	orr.w	r2, r3, #16
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ada:	f043 0201 	orr.w	r2, r3, #1
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e007      	b.n	8002afe <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f003 0301 	and.w	r3, r3, #1
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d1d8      	bne.n	8002aae <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	20000018 	.word	0x20000018
 8002b0c:	431bde83 	.word	0x431bde83

08002b10 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d12e      	bne.n	8002b88 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	689a      	ldr	r2, [r3, #8]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f022 0201 	bic.w	r2, r2, #1
 8002b38:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b3a:	f7ff fba5 	bl	8002288 <HAL_GetTick>
 8002b3e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002b40:	e01b      	b.n	8002b7a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b42:	f7ff fba1 	bl	8002288 <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d914      	bls.n	8002b7a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d10d      	bne.n	8002b7a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b62:	f043 0210 	orr.w	r2, r3, #16
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b6e:	f043 0201 	orr.w	r2, r3, #1
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e007      	b.n	8002b8a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f003 0301 	and.w	r3, r3, #1
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d0dc      	beq.n	8002b42 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3710      	adds	r7, #16
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
	...

08002b94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f003 0307 	and.w	r3, r3, #7
 8002ba2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8002bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002baa:	68ba      	ldr	r2, [r7, #8]
 8002bac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bbc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002bc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bc6:	4a04      	ldr	r2, [pc, #16]	@ (8002bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	60d3      	str	r3, [r2, #12]
}
 8002bcc:	bf00      	nop
 8002bce:	3714      	adds	r7, #20
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bc80      	pop	{r7}
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	e000ed00 	.word	0xe000ed00

08002bdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002be0:	4b04      	ldr	r3, [pc, #16]	@ (8002bf4 <__NVIC_GetPriorityGrouping+0x18>)
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	0a1b      	lsrs	r3, r3, #8
 8002be6:	f003 0307 	and.w	r3, r3, #7
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bc80      	pop	{r7}
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	e000ed00 	.word	0xe000ed00

08002bf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	4603      	mov	r3, r0
 8002c00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	db0b      	blt.n	8002c22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c0a:	79fb      	ldrb	r3, [r7, #7]
 8002c0c:	f003 021f 	and.w	r2, r3, #31
 8002c10:	4906      	ldr	r1, [pc, #24]	@ (8002c2c <__NVIC_EnableIRQ+0x34>)
 8002c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c16:	095b      	lsrs	r3, r3, #5
 8002c18:	2001      	movs	r0, #1
 8002c1a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c22:	bf00      	nop
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bc80      	pop	{r7}
 8002c2a:	4770      	bx	lr
 8002c2c:	e000e100 	.word	0xe000e100

08002c30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	4603      	mov	r3, r0
 8002c38:	6039      	str	r1, [r7, #0]
 8002c3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	db0a      	blt.n	8002c5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	b2da      	uxtb	r2, r3
 8002c48:	490c      	ldr	r1, [pc, #48]	@ (8002c7c <__NVIC_SetPriority+0x4c>)
 8002c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c4e:	0112      	lsls	r2, r2, #4
 8002c50:	b2d2      	uxtb	r2, r2
 8002c52:	440b      	add	r3, r1
 8002c54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c58:	e00a      	b.n	8002c70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	b2da      	uxtb	r2, r3
 8002c5e:	4908      	ldr	r1, [pc, #32]	@ (8002c80 <__NVIC_SetPriority+0x50>)
 8002c60:	79fb      	ldrb	r3, [r7, #7]
 8002c62:	f003 030f 	and.w	r3, r3, #15
 8002c66:	3b04      	subs	r3, #4
 8002c68:	0112      	lsls	r2, r2, #4
 8002c6a:	b2d2      	uxtb	r2, r2
 8002c6c:	440b      	add	r3, r1
 8002c6e:	761a      	strb	r2, [r3, #24]
}
 8002c70:	bf00      	nop
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bc80      	pop	{r7}
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	e000e100 	.word	0xe000e100
 8002c80:	e000ed00 	.word	0xe000ed00

08002c84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b089      	sub	sp, #36	@ 0x24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f003 0307 	and.w	r3, r3, #7
 8002c96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	f1c3 0307 	rsb	r3, r3, #7
 8002c9e:	2b04      	cmp	r3, #4
 8002ca0:	bf28      	it	cs
 8002ca2:	2304      	movcs	r3, #4
 8002ca4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	3304      	adds	r3, #4
 8002caa:	2b06      	cmp	r3, #6
 8002cac:	d902      	bls.n	8002cb4 <NVIC_EncodePriority+0x30>
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	3b03      	subs	r3, #3
 8002cb2:	e000      	b.n	8002cb6 <NVIC_EncodePriority+0x32>
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc2:	43da      	mvns	r2, r3
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	401a      	ands	r2, r3
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd6:	43d9      	mvns	r1, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cdc:	4313      	orrs	r3, r2
         );
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3724      	adds	r7, #36	@ 0x24
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bc80      	pop	{r7}
 8002ce6:	4770      	bx	lr

08002ce8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f7ff ff4f 	bl	8002b94 <__NVIC_SetPriorityGrouping>
}
 8002cf6:	bf00      	nop
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b086      	sub	sp, #24
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	4603      	mov	r3, r0
 8002d06:	60b9      	str	r1, [r7, #8]
 8002d08:	607a      	str	r2, [r7, #4]
 8002d0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d10:	f7ff ff64 	bl	8002bdc <__NVIC_GetPriorityGrouping>
 8002d14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	68b9      	ldr	r1, [r7, #8]
 8002d1a:	6978      	ldr	r0, [r7, #20]
 8002d1c:	f7ff ffb2 	bl	8002c84 <NVIC_EncodePriority>
 8002d20:	4602      	mov	r2, r0
 8002d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d26:	4611      	mov	r1, r2
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7ff ff81 	bl	8002c30 <__NVIC_SetPriority>
}
 8002d2e:	bf00      	nop
 8002d30:	3718      	adds	r7, #24
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b082      	sub	sp, #8
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7ff ff57 	bl	8002bf8 <__NVIC_EnableIRQ>
}
 8002d4a:	bf00      	nop
 8002d4c:	3708      	adds	r7, #8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d52:	b480      	push	{r7}
 8002d54:	b085      	sub	sp, #20
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d008      	beq.n	8002d7c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2204      	movs	r2, #4
 8002d6e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e020      	b.n	8002dbe <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f022 020e 	bic.w	r2, r2, #14
 8002d8a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f022 0201 	bic.w	r2, r2, #1
 8002d9a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002da4:	2101      	movs	r1, #1
 8002da6:	fa01 f202 	lsl.w	r2, r1, r2
 8002daa:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3714      	adds	r7, #20
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bc80      	pop	{r7}
 8002dc6:	4770      	bx	lr

08002dc8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d005      	beq.n	8002dec <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2204      	movs	r2, #4
 8002de4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	73fb      	strb	r3, [r7, #15]
 8002dea:	e051      	b.n	8002e90 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f022 020e 	bic.w	r2, r2, #14
 8002dfa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f022 0201 	bic.w	r2, r2, #1
 8002e0a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a22      	ldr	r2, [pc, #136]	@ (8002e9c <HAL_DMA_Abort_IT+0xd4>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d029      	beq.n	8002e6a <HAL_DMA_Abort_IT+0xa2>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a21      	ldr	r2, [pc, #132]	@ (8002ea0 <HAL_DMA_Abort_IT+0xd8>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d022      	beq.n	8002e66 <HAL_DMA_Abort_IT+0x9e>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a1f      	ldr	r2, [pc, #124]	@ (8002ea4 <HAL_DMA_Abort_IT+0xdc>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d01a      	beq.n	8002e60 <HAL_DMA_Abort_IT+0x98>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a1e      	ldr	r2, [pc, #120]	@ (8002ea8 <HAL_DMA_Abort_IT+0xe0>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d012      	beq.n	8002e5a <HAL_DMA_Abort_IT+0x92>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a1c      	ldr	r2, [pc, #112]	@ (8002eac <HAL_DMA_Abort_IT+0xe4>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d00a      	beq.n	8002e54 <HAL_DMA_Abort_IT+0x8c>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a1b      	ldr	r2, [pc, #108]	@ (8002eb0 <HAL_DMA_Abort_IT+0xe8>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d102      	bne.n	8002e4e <HAL_DMA_Abort_IT+0x86>
 8002e48:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002e4c:	e00e      	b.n	8002e6c <HAL_DMA_Abort_IT+0xa4>
 8002e4e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002e52:	e00b      	b.n	8002e6c <HAL_DMA_Abort_IT+0xa4>
 8002e54:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002e58:	e008      	b.n	8002e6c <HAL_DMA_Abort_IT+0xa4>
 8002e5a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e5e:	e005      	b.n	8002e6c <HAL_DMA_Abort_IT+0xa4>
 8002e60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e64:	e002      	b.n	8002e6c <HAL_DMA_Abort_IT+0xa4>
 8002e66:	2310      	movs	r3, #16
 8002e68:	e000      	b.n	8002e6c <HAL_DMA_Abort_IT+0xa4>
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	4a11      	ldr	r2, [pc, #68]	@ (8002eb4 <HAL_DMA_Abort_IT+0xec>)
 8002e6e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d003      	beq.n	8002e90 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	4798      	blx	r3
    } 
  }
  return status;
 8002e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3710      	adds	r7, #16
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	40020008 	.word	0x40020008
 8002ea0:	4002001c 	.word	0x4002001c
 8002ea4:	40020030 	.word	0x40020030
 8002ea8:	40020044 	.word	0x40020044
 8002eac:	40020058 	.word	0x40020058
 8002eb0:	4002006c 	.word	0x4002006c
 8002eb4:	40020000 	.word	0x40020000

08002eb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b08b      	sub	sp, #44	@ 0x2c
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002eca:	e169      	b.n	80031a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002ecc:	2201      	movs	r2, #1
 8002ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	69fa      	ldr	r2, [r7, #28]
 8002edc:	4013      	ands	r3, r2
 8002ede:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	f040 8158 	bne.w	800319a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	4a9a      	ldr	r2, [pc, #616]	@ (8003158 <HAL_GPIO_Init+0x2a0>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d05e      	beq.n	8002fb2 <HAL_GPIO_Init+0xfa>
 8002ef4:	4a98      	ldr	r2, [pc, #608]	@ (8003158 <HAL_GPIO_Init+0x2a0>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d875      	bhi.n	8002fe6 <HAL_GPIO_Init+0x12e>
 8002efa:	4a98      	ldr	r2, [pc, #608]	@ (800315c <HAL_GPIO_Init+0x2a4>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d058      	beq.n	8002fb2 <HAL_GPIO_Init+0xfa>
 8002f00:	4a96      	ldr	r2, [pc, #600]	@ (800315c <HAL_GPIO_Init+0x2a4>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d86f      	bhi.n	8002fe6 <HAL_GPIO_Init+0x12e>
 8002f06:	4a96      	ldr	r2, [pc, #600]	@ (8003160 <HAL_GPIO_Init+0x2a8>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d052      	beq.n	8002fb2 <HAL_GPIO_Init+0xfa>
 8002f0c:	4a94      	ldr	r2, [pc, #592]	@ (8003160 <HAL_GPIO_Init+0x2a8>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d869      	bhi.n	8002fe6 <HAL_GPIO_Init+0x12e>
 8002f12:	4a94      	ldr	r2, [pc, #592]	@ (8003164 <HAL_GPIO_Init+0x2ac>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d04c      	beq.n	8002fb2 <HAL_GPIO_Init+0xfa>
 8002f18:	4a92      	ldr	r2, [pc, #584]	@ (8003164 <HAL_GPIO_Init+0x2ac>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d863      	bhi.n	8002fe6 <HAL_GPIO_Init+0x12e>
 8002f1e:	4a92      	ldr	r2, [pc, #584]	@ (8003168 <HAL_GPIO_Init+0x2b0>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d046      	beq.n	8002fb2 <HAL_GPIO_Init+0xfa>
 8002f24:	4a90      	ldr	r2, [pc, #576]	@ (8003168 <HAL_GPIO_Init+0x2b0>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d85d      	bhi.n	8002fe6 <HAL_GPIO_Init+0x12e>
 8002f2a:	2b12      	cmp	r3, #18
 8002f2c:	d82a      	bhi.n	8002f84 <HAL_GPIO_Init+0xcc>
 8002f2e:	2b12      	cmp	r3, #18
 8002f30:	d859      	bhi.n	8002fe6 <HAL_GPIO_Init+0x12e>
 8002f32:	a201      	add	r2, pc, #4	@ (adr r2, 8002f38 <HAL_GPIO_Init+0x80>)
 8002f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f38:	08002fb3 	.word	0x08002fb3
 8002f3c:	08002f8d 	.word	0x08002f8d
 8002f40:	08002f9f 	.word	0x08002f9f
 8002f44:	08002fe1 	.word	0x08002fe1
 8002f48:	08002fe7 	.word	0x08002fe7
 8002f4c:	08002fe7 	.word	0x08002fe7
 8002f50:	08002fe7 	.word	0x08002fe7
 8002f54:	08002fe7 	.word	0x08002fe7
 8002f58:	08002fe7 	.word	0x08002fe7
 8002f5c:	08002fe7 	.word	0x08002fe7
 8002f60:	08002fe7 	.word	0x08002fe7
 8002f64:	08002fe7 	.word	0x08002fe7
 8002f68:	08002fe7 	.word	0x08002fe7
 8002f6c:	08002fe7 	.word	0x08002fe7
 8002f70:	08002fe7 	.word	0x08002fe7
 8002f74:	08002fe7 	.word	0x08002fe7
 8002f78:	08002fe7 	.word	0x08002fe7
 8002f7c:	08002f95 	.word	0x08002f95
 8002f80:	08002fa9 	.word	0x08002fa9
 8002f84:	4a79      	ldr	r2, [pc, #484]	@ (800316c <HAL_GPIO_Init+0x2b4>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d013      	beq.n	8002fb2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002f8a:	e02c      	b.n	8002fe6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	623b      	str	r3, [r7, #32]
          break;
 8002f92:	e029      	b.n	8002fe8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	3304      	adds	r3, #4
 8002f9a:	623b      	str	r3, [r7, #32]
          break;
 8002f9c:	e024      	b.n	8002fe8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	3308      	adds	r3, #8
 8002fa4:	623b      	str	r3, [r7, #32]
          break;
 8002fa6:	e01f      	b.n	8002fe8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	330c      	adds	r3, #12
 8002fae:	623b      	str	r3, [r7, #32]
          break;
 8002fb0:	e01a      	b.n	8002fe8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d102      	bne.n	8002fc0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002fba:	2304      	movs	r3, #4
 8002fbc:	623b      	str	r3, [r7, #32]
          break;
 8002fbe:	e013      	b.n	8002fe8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d105      	bne.n	8002fd4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002fc8:	2308      	movs	r3, #8
 8002fca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	69fa      	ldr	r2, [r7, #28]
 8002fd0:	611a      	str	r2, [r3, #16]
          break;
 8002fd2:	e009      	b.n	8002fe8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002fd4:	2308      	movs	r3, #8
 8002fd6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	69fa      	ldr	r2, [r7, #28]
 8002fdc:	615a      	str	r2, [r3, #20]
          break;
 8002fde:	e003      	b.n	8002fe8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	623b      	str	r3, [r7, #32]
          break;
 8002fe4:	e000      	b.n	8002fe8 <HAL_GPIO_Init+0x130>
          break;
 8002fe6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	2bff      	cmp	r3, #255	@ 0xff
 8002fec:	d801      	bhi.n	8002ff2 <HAL_GPIO_Init+0x13a>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	e001      	b.n	8002ff6 <HAL_GPIO_Init+0x13e>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	3304      	adds	r3, #4
 8002ff6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	2bff      	cmp	r3, #255	@ 0xff
 8002ffc:	d802      	bhi.n	8003004 <HAL_GPIO_Init+0x14c>
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	e002      	b.n	800300a <HAL_GPIO_Init+0x152>
 8003004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003006:	3b08      	subs	r3, #8
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	210f      	movs	r1, #15
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	fa01 f303 	lsl.w	r3, r1, r3
 8003018:	43db      	mvns	r3, r3
 800301a:	401a      	ands	r2, r3
 800301c:	6a39      	ldr	r1, [r7, #32]
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	fa01 f303 	lsl.w	r3, r1, r3
 8003024:	431a      	orrs	r2, r3
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003032:	2b00      	cmp	r3, #0
 8003034:	f000 80b1 	beq.w	800319a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003038:	4b4d      	ldr	r3, [pc, #308]	@ (8003170 <HAL_GPIO_Init+0x2b8>)
 800303a:	699b      	ldr	r3, [r3, #24]
 800303c:	4a4c      	ldr	r2, [pc, #304]	@ (8003170 <HAL_GPIO_Init+0x2b8>)
 800303e:	f043 0301 	orr.w	r3, r3, #1
 8003042:	6193      	str	r3, [r2, #24]
 8003044:	4b4a      	ldr	r3, [pc, #296]	@ (8003170 <HAL_GPIO_Init+0x2b8>)
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	f003 0301 	and.w	r3, r3, #1
 800304c:	60bb      	str	r3, [r7, #8]
 800304e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003050:	4a48      	ldr	r2, [pc, #288]	@ (8003174 <HAL_GPIO_Init+0x2bc>)
 8003052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003054:	089b      	lsrs	r3, r3, #2
 8003056:	3302      	adds	r3, #2
 8003058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800305c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800305e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003060:	f003 0303 	and.w	r3, r3, #3
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	220f      	movs	r2, #15
 8003068:	fa02 f303 	lsl.w	r3, r2, r3
 800306c:	43db      	mvns	r3, r3
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	4013      	ands	r3, r2
 8003072:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4a40      	ldr	r2, [pc, #256]	@ (8003178 <HAL_GPIO_Init+0x2c0>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d013      	beq.n	80030a4 <HAL_GPIO_Init+0x1ec>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4a3f      	ldr	r2, [pc, #252]	@ (800317c <HAL_GPIO_Init+0x2c4>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d00d      	beq.n	80030a0 <HAL_GPIO_Init+0x1e8>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4a3e      	ldr	r2, [pc, #248]	@ (8003180 <HAL_GPIO_Init+0x2c8>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d007      	beq.n	800309c <HAL_GPIO_Init+0x1e4>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4a3d      	ldr	r2, [pc, #244]	@ (8003184 <HAL_GPIO_Init+0x2cc>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d101      	bne.n	8003098 <HAL_GPIO_Init+0x1e0>
 8003094:	2303      	movs	r3, #3
 8003096:	e006      	b.n	80030a6 <HAL_GPIO_Init+0x1ee>
 8003098:	2304      	movs	r3, #4
 800309a:	e004      	b.n	80030a6 <HAL_GPIO_Init+0x1ee>
 800309c:	2302      	movs	r3, #2
 800309e:	e002      	b.n	80030a6 <HAL_GPIO_Init+0x1ee>
 80030a0:	2301      	movs	r3, #1
 80030a2:	e000      	b.n	80030a6 <HAL_GPIO_Init+0x1ee>
 80030a4:	2300      	movs	r3, #0
 80030a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030a8:	f002 0203 	and.w	r2, r2, #3
 80030ac:	0092      	lsls	r2, r2, #2
 80030ae:	4093      	lsls	r3, r2
 80030b0:	68fa      	ldr	r2, [r7, #12]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80030b6:	492f      	ldr	r1, [pc, #188]	@ (8003174 <HAL_GPIO_Init+0x2bc>)
 80030b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ba:	089b      	lsrs	r3, r3, #2
 80030bc:	3302      	adds	r3, #2
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d006      	beq.n	80030de <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80030d0:	4b2d      	ldr	r3, [pc, #180]	@ (8003188 <HAL_GPIO_Init+0x2d0>)
 80030d2:	689a      	ldr	r2, [r3, #8]
 80030d4:	492c      	ldr	r1, [pc, #176]	@ (8003188 <HAL_GPIO_Init+0x2d0>)
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	4313      	orrs	r3, r2
 80030da:	608b      	str	r3, [r1, #8]
 80030dc:	e006      	b.n	80030ec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80030de:	4b2a      	ldr	r3, [pc, #168]	@ (8003188 <HAL_GPIO_Init+0x2d0>)
 80030e0:	689a      	ldr	r2, [r3, #8]
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	43db      	mvns	r3, r3
 80030e6:	4928      	ldr	r1, [pc, #160]	@ (8003188 <HAL_GPIO_Init+0x2d0>)
 80030e8:	4013      	ands	r3, r2
 80030ea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d006      	beq.n	8003106 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80030f8:	4b23      	ldr	r3, [pc, #140]	@ (8003188 <HAL_GPIO_Init+0x2d0>)
 80030fa:	68da      	ldr	r2, [r3, #12]
 80030fc:	4922      	ldr	r1, [pc, #136]	@ (8003188 <HAL_GPIO_Init+0x2d0>)
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	4313      	orrs	r3, r2
 8003102:	60cb      	str	r3, [r1, #12]
 8003104:	e006      	b.n	8003114 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003106:	4b20      	ldr	r3, [pc, #128]	@ (8003188 <HAL_GPIO_Init+0x2d0>)
 8003108:	68da      	ldr	r2, [r3, #12]
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	43db      	mvns	r3, r3
 800310e:	491e      	ldr	r1, [pc, #120]	@ (8003188 <HAL_GPIO_Init+0x2d0>)
 8003110:	4013      	ands	r3, r2
 8003112:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d006      	beq.n	800312e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003120:	4b19      	ldr	r3, [pc, #100]	@ (8003188 <HAL_GPIO_Init+0x2d0>)
 8003122:	685a      	ldr	r2, [r3, #4]
 8003124:	4918      	ldr	r1, [pc, #96]	@ (8003188 <HAL_GPIO_Init+0x2d0>)
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	4313      	orrs	r3, r2
 800312a:	604b      	str	r3, [r1, #4]
 800312c:	e006      	b.n	800313c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800312e:	4b16      	ldr	r3, [pc, #88]	@ (8003188 <HAL_GPIO_Init+0x2d0>)
 8003130:	685a      	ldr	r2, [r3, #4]
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	43db      	mvns	r3, r3
 8003136:	4914      	ldr	r1, [pc, #80]	@ (8003188 <HAL_GPIO_Init+0x2d0>)
 8003138:	4013      	ands	r3, r2
 800313a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d021      	beq.n	800318c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003148:	4b0f      	ldr	r3, [pc, #60]	@ (8003188 <HAL_GPIO_Init+0x2d0>)
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	490e      	ldr	r1, [pc, #56]	@ (8003188 <HAL_GPIO_Init+0x2d0>)
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	4313      	orrs	r3, r2
 8003152:	600b      	str	r3, [r1, #0]
 8003154:	e021      	b.n	800319a <HAL_GPIO_Init+0x2e2>
 8003156:	bf00      	nop
 8003158:	10320000 	.word	0x10320000
 800315c:	10310000 	.word	0x10310000
 8003160:	10220000 	.word	0x10220000
 8003164:	10210000 	.word	0x10210000
 8003168:	10120000 	.word	0x10120000
 800316c:	10110000 	.word	0x10110000
 8003170:	40021000 	.word	0x40021000
 8003174:	40010000 	.word	0x40010000
 8003178:	40010800 	.word	0x40010800
 800317c:	40010c00 	.word	0x40010c00
 8003180:	40011000 	.word	0x40011000
 8003184:	40011400 	.word	0x40011400
 8003188:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800318c:	4b0b      	ldr	r3, [pc, #44]	@ (80031bc <HAL_GPIO_Init+0x304>)
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	43db      	mvns	r3, r3
 8003194:	4909      	ldr	r1, [pc, #36]	@ (80031bc <HAL_GPIO_Init+0x304>)
 8003196:	4013      	ands	r3, r2
 8003198:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800319a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800319c:	3301      	adds	r3, #1
 800319e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a6:	fa22 f303 	lsr.w	r3, r2, r3
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	f47f ae8e 	bne.w	8002ecc <HAL_GPIO_Init+0x14>
  }
}
 80031b0:	bf00      	nop
 80031b2:	bf00      	nop
 80031b4:	372c      	adds	r7, #44	@ 0x2c
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bc80      	pop	{r7}
 80031ba:	4770      	bx	lr
 80031bc:	40010400 	.word	0x40010400

080031c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d101      	bne.n	80031d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e12b      	b.n	800342a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d106      	bne.n	80031ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f7fe fdae 	bl	8001d48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2224      	movs	r2, #36	@ 0x24
 80031f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f022 0201 	bic.w	r2, r2, #1
 8003202:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003212:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003222:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003224:	f001 f832 	bl	800428c <HAL_RCC_GetPCLK1Freq>
 8003228:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	4a81      	ldr	r2, [pc, #516]	@ (8003434 <HAL_I2C_Init+0x274>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d807      	bhi.n	8003244 <HAL_I2C_Init+0x84>
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	4a80      	ldr	r2, [pc, #512]	@ (8003438 <HAL_I2C_Init+0x278>)
 8003238:	4293      	cmp	r3, r2
 800323a:	bf94      	ite	ls
 800323c:	2301      	movls	r3, #1
 800323e:	2300      	movhi	r3, #0
 8003240:	b2db      	uxtb	r3, r3
 8003242:	e006      	b.n	8003252 <HAL_I2C_Init+0x92>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	4a7d      	ldr	r2, [pc, #500]	@ (800343c <HAL_I2C_Init+0x27c>)
 8003248:	4293      	cmp	r3, r2
 800324a:	bf94      	ite	ls
 800324c:	2301      	movls	r3, #1
 800324e:	2300      	movhi	r3, #0
 8003250:	b2db      	uxtb	r3, r3
 8003252:	2b00      	cmp	r3, #0
 8003254:	d001      	beq.n	800325a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e0e7      	b.n	800342a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	4a78      	ldr	r2, [pc, #480]	@ (8003440 <HAL_I2C_Init+0x280>)
 800325e:	fba2 2303 	umull	r2, r3, r2, r3
 8003262:	0c9b      	lsrs	r3, r3, #18
 8003264:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	68ba      	ldr	r2, [r7, #8]
 8003276:	430a      	orrs	r2, r1
 8003278:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	6a1b      	ldr	r3, [r3, #32]
 8003280:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	4a6a      	ldr	r2, [pc, #424]	@ (8003434 <HAL_I2C_Init+0x274>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d802      	bhi.n	8003294 <HAL_I2C_Init+0xd4>
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	3301      	adds	r3, #1
 8003292:	e009      	b.n	80032a8 <HAL_I2C_Init+0xe8>
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800329a:	fb02 f303 	mul.w	r3, r2, r3
 800329e:	4a69      	ldr	r2, [pc, #420]	@ (8003444 <HAL_I2C_Init+0x284>)
 80032a0:	fba2 2303 	umull	r2, r3, r2, r3
 80032a4:	099b      	lsrs	r3, r3, #6
 80032a6:	3301      	adds	r3, #1
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	6812      	ldr	r2, [r2, #0]
 80032ac:	430b      	orrs	r3, r1
 80032ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	69db      	ldr	r3, [r3, #28]
 80032b6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80032ba:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	495c      	ldr	r1, [pc, #368]	@ (8003434 <HAL_I2C_Init+0x274>)
 80032c4:	428b      	cmp	r3, r1
 80032c6:	d819      	bhi.n	80032fc <HAL_I2C_Init+0x13c>
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	1e59      	subs	r1, r3, #1
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	005b      	lsls	r3, r3, #1
 80032d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80032d6:	1c59      	adds	r1, r3, #1
 80032d8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80032dc:	400b      	ands	r3, r1
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00a      	beq.n	80032f8 <HAL_I2C_Init+0x138>
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	1e59      	subs	r1, r3, #1
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	005b      	lsls	r3, r3, #1
 80032ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80032f0:	3301      	adds	r3, #1
 80032f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032f6:	e051      	b.n	800339c <HAL_I2C_Init+0x1dc>
 80032f8:	2304      	movs	r3, #4
 80032fa:	e04f      	b.n	800339c <HAL_I2C_Init+0x1dc>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d111      	bne.n	8003328 <HAL_I2C_Init+0x168>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	1e58      	subs	r0, r3, #1
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6859      	ldr	r1, [r3, #4]
 800330c:	460b      	mov	r3, r1
 800330e:	005b      	lsls	r3, r3, #1
 8003310:	440b      	add	r3, r1
 8003312:	fbb0 f3f3 	udiv	r3, r0, r3
 8003316:	3301      	adds	r3, #1
 8003318:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800331c:	2b00      	cmp	r3, #0
 800331e:	bf0c      	ite	eq
 8003320:	2301      	moveq	r3, #1
 8003322:	2300      	movne	r3, #0
 8003324:	b2db      	uxtb	r3, r3
 8003326:	e012      	b.n	800334e <HAL_I2C_Init+0x18e>
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	1e58      	subs	r0, r3, #1
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6859      	ldr	r1, [r3, #4]
 8003330:	460b      	mov	r3, r1
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	440b      	add	r3, r1
 8003336:	0099      	lsls	r1, r3, #2
 8003338:	440b      	add	r3, r1
 800333a:	fbb0 f3f3 	udiv	r3, r0, r3
 800333e:	3301      	adds	r3, #1
 8003340:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003344:	2b00      	cmp	r3, #0
 8003346:	bf0c      	ite	eq
 8003348:	2301      	moveq	r3, #1
 800334a:	2300      	movne	r3, #0
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <HAL_I2C_Init+0x196>
 8003352:	2301      	movs	r3, #1
 8003354:	e022      	b.n	800339c <HAL_I2C_Init+0x1dc>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d10e      	bne.n	800337c <HAL_I2C_Init+0x1bc>
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	1e58      	subs	r0, r3, #1
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6859      	ldr	r1, [r3, #4]
 8003366:	460b      	mov	r3, r1
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	440b      	add	r3, r1
 800336c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003370:	3301      	adds	r3, #1
 8003372:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003376:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800337a:	e00f      	b.n	800339c <HAL_I2C_Init+0x1dc>
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	1e58      	subs	r0, r3, #1
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6859      	ldr	r1, [r3, #4]
 8003384:	460b      	mov	r3, r1
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	440b      	add	r3, r1
 800338a:	0099      	lsls	r1, r3, #2
 800338c:	440b      	add	r3, r1
 800338e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003392:	3301      	adds	r3, #1
 8003394:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003398:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800339c:	6879      	ldr	r1, [r7, #4]
 800339e:	6809      	ldr	r1, [r1, #0]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	69da      	ldr	r2, [r3, #28]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a1b      	ldr	r3, [r3, #32]
 80033b6:	431a      	orrs	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	430a      	orrs	r2, r1
 80033be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80033ca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	6911      	ldr	r1, [r2, #16]
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	68d2      	ldr	r2, [r2, #12]
 80033d6:	4311      	orrs	r1, r2
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	6812      	ldr	r2, [r2, #0]
 80033dc:	430b      	orrs	r3, r1
 80033de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	695a      	ldr	r2, [r3, #20]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	699b      	ldr	r3, [r3, #24]
 80033f2:	431a      	orrs	r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	430a      	orrs	r2, r1
 80033fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f042 0201 	orr.w	r2, r2, #1
 800340a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2220      	movs	r2, #32
 8003416:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3710      	adds	r7, #16
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	000186a0 	.word	0x000186a0
 8003438:	001e847f 	.word	0x001e847f
 800343c:	003d08ff 	.word	0x003d08ff
 8003440:	431bde83 	.word	0x431bde83
 8003444:	10624dd3 	.word	0x10624dd3

08003448 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b088      	sub	sp, #32
 800344c:	af02      	add	r7, sp, #8
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	607a      	str	r2, [r7, #4]
 8003452:	461a      	mov	r2, r3
 8003454:	460b      	mov	r3, r1
 8003456:	817b      	strh	r3, [r7, #10]
 8003458:	4613      	mov	r3, r2
 800345a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800345c:	f7fe ff14 	bl	8002288 <HAL_GetTick>
 8003460:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b20      	cmp	r3, #32
 800346c:	f040 80e0 	bne.w	8003630 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	9300      	str	r3, [sp, #0]
 8003474:	2319      	movs	r3, #25
 8003476:	2201      	movs	r2, #1
 8003478:	4970      	ldr	r1, [pc, #448]	@ (800363c <HAL_I2C_Master_Transmit+0x1f4>)
 800347a:	68f8      	ldr	r0, [r7, #12]
 800347c:	f000 f964 	bl	8003748 <I2C_WaitOnFlagUntilTimeout>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003486:	2302      	movs	r3, #2
 8003488:	e0d3      	b.n	8003632 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003490:	2b01      	cmp	r3, #1
 8003492:	d101      	bne.n	8003498 <HAL_I2C_Master_Transmit+0x50>
 8003494:	2302      	movs	r3, #2
 8003496:	e0cc      	b.n	8003632 <HAL_I2C_Master_Transmit+0x1ea>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d007      	beq.n	80034be <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f042 0201 	orr.w	r2, r2, #1
 80034bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2221      	movs	r2, #33	@ 0x21
 80034d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2210      	movs	r2, #16
 80034da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	893a      	ldrh	r2, [r7, #8]
 80034ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034f4:	b29a      	uxth	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	4a50      	ldr	r2, [pc, #320]	@ (8003640 <HAL_I2C_Master_Transmit+0x1f8>)
 80034fe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003500:	8979      	ldrh	r1, [r7, #10]
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	6a3a      	ldr	r2, [r7, #32]
 8003506:	68f8      	ldr	r0, [r7, #12]
 8003508:	f000 f89c 	bl	8003644 <I2C_MasterRequestWrite>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e08d      	b.n	8003632 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003516:	2300      	movs	r3, #0
 8003518:	613b      	str	r3, [r7, #16]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	695b      	ldr	r3, [r3, #20]
 8003520:	613b      	str	r3, [r7, #16]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	699b      	ldr	r3, [r3, #24]
 8003528:	613b      	str	r3, [r7, #16]
 800352a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800352c:	e066      	b.n	80035fc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800352e:	697a      	ldr	r2, [r7, #20]
 8003530:	6a39      	ldr	r1, [r7, #32]
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	f000 fa22 	bl	800397c <I2C_WaitOnTXEFlagUntilTimeout>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00d      	beq.n	800355a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003542:	2b04      	cmp	r3, #4
 8003544:	d107      	bne.n	8003556 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003554:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e06b      	b.n	8003632 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800355e:	781a      	ldrb	r2, [r3, #0]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800356a:	1c5a      	adds	r2, r3, #1
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003574:	b29b      	uxth	r3, r3
 8003576:	3b01      	subs	r3, #1
 8003578:	b29a      	uxth	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003582:	3b01      	subs	r3, #1
 8003584:	b29a      	uxth	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	695b      	ldr	r3, [r3, #20]
 8003590:	f003 0304 	and.w	r3, r3, #4
 8003594:	2b04      	cmp	r3, #4
 8003596:	d11b      	bne.n	80035d0 <HAL_I2C_Master_Transmit+0x188>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800359c:	2b00      	cmp	r3, #0
 800359e:	d017      	beq.n	80035d0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a4:	781a      	ldrb	r2, [r3, #0]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b0:	1c5a      	adds	r2, r3, #1
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	3b01      	subs	r3, #1
 80035be:	b29a      	uxth	r2, r3
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035c8:	3b01      	subs	r3, #1
 80035ca:	b29a      	uxth	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035d0:	697a      	ldr	r2, [r7, #20]
 80035d2:	6a39      	ldr	r1, [r7, #32]
 80035d4:	68f8      	ldr	r0, [r7, #12]
 80035d6:	f000 fa19 	bl	8003a0c <I2C_WaitOnBTFFlagUntilTimeout>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00d      	beq.n	80035fc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e4:	2b04      	cmp	r3, #4
 80035e6:	d107      	bne.n	80035f8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035f6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e01a      	b.n	8003632 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003600:	2b00      	cmp	r3, #0
 8003602:	d194      	bne.n	800352e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003612:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2220      	movs	r2, #32
 8003618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800362c:	2300      	movs	r3, #0
 800362e:	e000      	b.n	8003632 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003630:	2302      	movs	r3, #2
  }
}
 8003632:	4618      	mov	r0, r3
 8003634:	3718      	adds	r7, #24
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	00100002 	.word	0x00100002
 8003640:	ffff0000 	.word	0xffff0000

08003644 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b088      	sub	sp, #32
 8003648:	af02      	add	r7, sp, #8
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	607a      	str	r2, [r7, #4]
 800364e:	603b      	str	r3, [r7, #0]
 8003650:	460b      	mov	r3, r1
 8003652:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003658:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	2b08      	cmp	r3, #8
 800365e:	d006      	beq.n	800366e <I2C_MasterRequestWrite+0x2a>
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d003      	beq.n	800366e <I2C_MasterRequestWrite+0x2a>
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800366c:	d108      	bne.n	8003680 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800367c:	601a      	str	r2, [r3, #0]
 800367e:	e00b      	b.n	8003698 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003684:	2b12      	cmp	r3, #18
 8003686:	d107      	bne.n	8003698 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003696:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	9300      	str	r3, [sp, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80036a4:	68f8      	ldr	r0, [r7, #12]
 80036a6:	f000 f84f 	bl	8003748 <I2C_WaitOnFlagUntilTimeout>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00d      	beq.n	80036cc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036be:	d103      	bne.n	80036c8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036c6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	e035      	b.n	8003738 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80036d4:	d108      	bne.n	80036e8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036d6:	897b      	ldrh	r3, [r7, #10]
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	461a      	mov	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80036e4:	611a      	str	r2, [r3, #16]
 80036e6:	e01b      	b.n	8003720 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80036e8:	897b      	ldrh	r3, [r7, #10]
 80036ea:	11db      	asrs	r3, r3, #7
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	f003 0306 	and.w	r3, r3, #6
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	f063 030f 	orn	r3, r3, #15
 80036f8:	b2da      	uxtb	r2, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	490e      	ldr	r1, [pc, #56]	@ (8003740 <I2C_MasterRequestWrite+0xfc>)
 8003706:	68f8      	ldr	r0, [r7, #12]
 8003708:	f000 f898 	bl	800383c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d001      	beq.n	8003716 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e010      	b.n	8003738 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003716:	897b      	ldrh	r3, [r7, #10]
 8003718:	b2da      	uxtb	r2, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	4907      	ldr	r1, [pc, #28]	@ (8003744 <I2C_MasterRequestWrite+0x100>)
 8003726:	68f8      	ldr	r0, [r7, #12]
 8003728:	f000 f888 	bl	800383c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d001      	beq.n	8003736 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e000      	b.n	8003738 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003736:	2300      	movs	r3, #0
}
 8003738:	4618      	mov	r0, r3
 800373a:	3718      	adds	r7, #24
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	00010008 	.word	0x00010008
 8003744:	00010002 	.word	0x00010002

08003748 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	603b      	str	r3, [r7, #0]
 8003754:	4613      	mov	r3, r2
 8003756:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003758:	e048      	b.n	80037ec <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003760:	d044      	beq.n	80037ec <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003762:	f7fe fd91 	bl	8002288 <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	683a      	ldr	r2, [r7, #0]
 800376e:	429a      	cmp	r2, r3
 8003770:	d302      	bcc.n	8003778 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d139      	bne.n	80037ec <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	0c1b      	lsrs	r3, r3, #16
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b01      	cmp	r3, #1
 8003780:	d10d      	bne.n	800379e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	695b      	ldr	r3, [r3, #20]
 8003788:	43da      	mvns	r2, r3
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	4013      	ands	r3, r2
 800378e:	b29b      	uxth	r3, r3
 8003790:	2b00      	cmp	r3, #0
 8003792:	bf0c      	ite	eq
 8003794:	2301      	moveq	r3, #1
 8003796:	2300      	movne	r3, #0
 8003798:	b2db      	uxtb	r3, r3
 800379a:	461a      	mov	r2, r3
 800379c:	e00c      	b.n	80037b8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	699b      	ldr	r3, [r3, #24]
 80037a4:	43da      	mvns	r2, r3
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	4013      	ands	r3, r2
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	bf0c      	ite	eq
 80037b0:	2301      	moveq	r3, #1
 80037b2:	2300      	movne	r3, #0
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	461a      	mov	r2, r3
 80037b8:	79fb      	ldrb	r3, [r7, #7]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d116      	bne.n	80037ec <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2200      	movs	r2, #0
 80037c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2220      	movs	r2, #32
 80037c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d8:	f043 0220 	orr.w	r2, r3, #32
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e023      	b.n	8003834 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	0c1b      	lsrs	r3, r3, #16
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d10d      	bne.n	8003812 <I2C_WaitOnFlagUntilTimeout+0xca>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	695b      	ldr	r3, [r3, #20]
 80037fc:	43da      	mvns	r2, r3
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	4013      	ands	r3, r2
 8003802:	b29b      	uxth	r3, r3
 8003804:	2b00      	cmp	r3, #0
 8003806:	bf0c      	ite	eq
 8003808:	2301      	moveq	r3, #1
 800380a:	2300      	movne	r3, #0
 800380c:	b2db      	uxtb	r3, r3
 800380e:	461a      	mov	r2, r3
 8003810:	e00c      	b.n	800382c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	43da      	mvns	r2, r3
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	4013      	ands	r3, r2
 800381e:	b29b      	uxth	r3, r3
 8003820:	2b00      	cmp	r3, #0
 8003822:	bf0c      	ite	eq
 8003824:	2301      	moveq	r3, #1
 8003826:	2300      	movne	r3, #0
 8003828:	b2db      	uxtb	r3, r3
 800382a:	461a      	mov	r2, r3
 800382c:	79fb      	ldrb	r3, [r7, #7]
 800382e:	429a      	cmp	r2, r3
 8003830:	d093      	beq.n	800375a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003832:	2300      	movs	r3, #0
}
 8003834:	4618      	mov	r0, r3
 8003836:	3710      	adds	r7, #16
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
 8003848:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800384a:	e071      	b.n	8003930 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003856:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800385a:	d123      	bne.n	80038a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800386a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003874:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2200      	movs	r2, #0
 800387a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2220      	movs	r2, #32
 8003880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003890:	f043 0204 	orr.w	r2, r3, #4
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e067      	b.n	8003974 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038aa:	d041      	beq.n	8003930 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ac:	f7fe fcec 	bl	8002288 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d302      	bcc.n	80038c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d136      	bne.n	8003930 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	0c1b      	lsrs	r3, r3, #16
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d10c      	bne.n	80038e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	43da      	mvns	r2, r3
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	4013      	ands	r3, r2
 80038d8:	b29b      	uxth	r3, r3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	bf14      	ite	ne
 80038de:	2301      	movne	r3, #1
 80038e0:	2300      	moveq	r3, #0
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	e00b      	b.n	80038fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	43da      	mvns	r2, r3
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	4013      	ands	r3, r2
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	bf14      	ite	ne
 80038f8:	2301      	movne	r3, #1
 80038fa:	2300      	moveq	r3, #0
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d016      	beq.n	8003930 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2200      	movs	r2, #0
 8003906:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2220      	movs	r2, #32
 800390c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800391c:	f043 0220 	orr.w	r2, r3, #32
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e021      	b.n	8003974 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	0c1b      	lsrs	r3, r3, #16
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b01      	cmp	r3, #1
 8003938:	d10c      	bne.n	8003954 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	695b      	ldr	r3, [r3, #20]
 8003940:	43da      	mvns	r2, r3
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	4013      	ands	r3, r2
 8003946:	b29b      	uxth	r3, r3
 8003948:	2b00      	cmp	r3, #0
 800394a:	bf14      	ite	ne
 800394c:	2301      	movne	r3, #1
 800394e:	2300      	moveq	r3, #0
 8003950:	b2db      	uxtb	r3, r3
 8003952:	e00b      	b.n	800396c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	43da      	mvns	r2, r3
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	4013      	ands	r3, r2
 8003960:	b29b      	uxth	r3, r3
 8003962:	2b00      	cmp	r3, #0
 8003964:	bf14      	ite	ne
 8003966:	2301      	movne	r3, #1
 8003968:	2300      	moveq	r3, #0
 800396a:	b2db      	uxtb	r3, r3
 800396c:	2b00      	cmp	r3, #0
 800396e:	f47f af6d 	bne.w	800384c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003988:	e034      	b.n	80039f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800398a:	68f8      	ldr	r0, [r7, #12]
 800398c:	f000 f886 	bl	8003a9c <I2C_IsAcknowledgeFailed>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d001      	beq.n	800399a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e034      	b.n	8003a04 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a0:	d028      	beq.n	80039f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039a2:	f7fe fc71 	bl	8002288 <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	68ba      	ldr	r2, [r7, #8]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d302      	bcc.n	80039b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d11d      	bne.n	80039f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	695b      	ldr	r3, [r3, #20]
 80039be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039c2:	2b80      	cmp	r3, #128	@ 0x80
 80039c4:	d016      	beq.n	80039f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2220      	movs	r2, #32
 80039d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e0:	f043 0220 	orr.w	r2, r3, #32
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e007      	b.n	8003a04 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039fe:	2b80      	cmp	r3, #128	@ 0x80
 8003a00:	d1c3      	bne.n	800398a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003a02:	2300      	movs	r3, #0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3710      	adds	r7, #16
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a18:	e034      	b.n	8003a84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a1a:	68f8      	ldr	r0, [r7, #12]
 8003a1c:	f000 f83e 	bl	8003a9c <I2C_IsAcknowledgeFailed>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d001      	beq.n	8003a2a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e034      	b.n	8003a94 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a30:	d028      	beq.n	8003a84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a32:	f7fe fc29 	bl	8002288 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	68ba      	ldr	r2, [r7, #8]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d302      	bcc.n	8003a48 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d11d      	bne.n	8003a84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	695b      	ldr	r3, [r3, #20]
 8003a4e:	f003 0304 	and.w	r3, r3, #4
 8003a52:	2b04      	cmp	r3, #4
 8003a54:	d016      	beq.n	8003a84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2220      	movs	r2, #32
 8003a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a70:	f043 0220 	orr.w	r2, r3, #32
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e007      	b.n	8003a94 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	f003 0304 	and.w	r3, r3, #4
 8003a8e:	2b04      	cmp	r3, #4
 8003a90:	d1c3      	bne.n	8003a1a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003a92:	2300      	movs	r3, #0
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3710      	adds	r7, #16
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	695b      	ldr	r3, [r3, #20]
 8003aaa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003aae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ab2:	d11b      	bne.n	8003aec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003abc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2220      	movs	r2, #32
 8003ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad8:	f043 0204 	orr.w	r2, r3, #4
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e000      	b.n	8003aee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	370c      	adds	r7, #12
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bc80      	pop	{r7}
 8003af6:	4770      	bx	lr

08003af8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b086      	sub	sp, #24
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d101      	bne.n	8003b0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e272      	b.n	8003ff0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0301 	and.w	r3, r3, #1
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	f000 8087 	beq.w	8003c26 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b18:	4b92      	ldr	r3, [pc, #584]	@ (8003d64 <HAL_RCC_OscConfig+0x26c>)
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f003 030c 	and.w	r3, r3, #12
 8003b20:	2b04      	cmp	r3, #4
 8003b22:	d00c      	beq.n	8003b3e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003b24:	4b8f      	ldr	r3, [pc, #572]	@ (8003d64 <HAL_RCC_OscConfig+0x26c>)
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f003 030c 	and.w	r3, r3, #12
 8003b2c:	2b08      	cmp	r3, #8
 8003b2e:	d112      	bne.n	8003b56 <HAL_RCC_OscConfig+0x5e>
 8003b30:	4b8c      	ldr	r3, [pc, #560]	@ (8003d64 <HAL_RCC_OscConfig+0x26c>)
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b3c:	d10b      	bne.n	8003b56 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b3e:	4b89      	ldr	r3, [pc, #548]	@ (8003d64 <HAL_RCC_OscConfig+0x26c>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d06c      	beq.n	8003c24 <HAL_RCC_OscConfig+0x12c>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d168      	bne.n	8003c24 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e24c      	b.n	8003ff0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b5e:	d106      	bne.n	8003b6e <HAL_RCC_OscConfig+0x76>
 8003b60:	4b80      	ldr	r3, [pc, #512]	@ (8003d64 <HAL_RCC_OscConfig+0x26c>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a7f      	ldr	r2, [pc, #508]	@ (8003d64 <HAL_RCC_OscConfig+0x26c>)
 8003b66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b6a:	6013      	str	r3, [r2, #0]
 8003b6c:	e02e      	b.n	8003bcc <HAL_RCC_OscConfig+0xd4>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d10c      	bne.n	8003b90 <HAL_RCC_OscConfig+0x98>
 8003b76:	4b7b      	ldr	r3, [pc, #492]	@ (8003d64 <HAL_RCC_OscConfig+0x26c>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a7a      	ldr	r2, [pc, #488]	@ (8003d64 <HAL_RCC_OscConfig+0x26c>)
 8003b7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b80:	6013      	str	r3, [r2, #0]
 8003b82:	4b78      	ldr	r3, [pc, #480]	@ (8003d64 <HAL_RCC_OscConfig+0x26c>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a77      	ldr	r2, [pc, #476]	@ (8003d64 <HAL_RCC_OscConfig+0x26c>)
 8003b88:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b8c:	6013      	str	r3, [r2, #0]
 8003b8e:	e01d      	b.n	8003bcc <HAL_RCC_OscConfig+0xd4>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b98:	d10c      	bne.n	8003bb4 <HAL_RCC_OscConfig+0xbc>
 8003b9a:	4b72      	ldr	r3, [pc, #456]	@ (8003d64 <HAL_RCC_OscConfig+0x26c>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a71      	ldr	r2, [pc, #452]	@ (8003d64 <HAL_RCC_OscConfig+0x26c>)
 8003ba0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ba4:	6013      	str	r3, [r2, #0]
 8003ba6:	4b6f      	ldr	r3, [pc, #444]	@ (8003d64 <HAL_RCC_OscConfig+0x26c>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a6e      	ldr	r2, [pc, #440]	@ (8003d64 <HAL_RCC_OscConfig+0x26c>)
 8003bac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bb0:	6013      	str	r3, [r2, #0]
 8003bb2:	e00b      	b.n	8003bcc <HAL_RCC_OscConfig+0xd4>
 8003bb4:	4b6b      	ldr	r3, [pc, #428]	@ (8003d64 <HAL_RCC_OscConfig+0x26c>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a6a      	ldr	r2, [pc, #424]	@ (8003d64 <HAL_RCC_OscConfig+0x26c>)
 8003bba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bbe:	6013      	str	r3, [r2, #0]
 8003bc0:	4b68      	ldr	r3, [pc, #416]	@ (8003d64 <HAL_RCC_OscConfig+0x26c>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a67      	ldr	r2, [pc, #412]	@ (8003d64 <HAL_RCC_OscConfig+0x26c>)
 8003bc6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d013      	beq.n	8003bfc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd4:	f7fe fb58 	bl	8002288 <HAL_GetTick>
 8003bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bda:	e008      	b.n	8003bee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bdc:	f7fe fb54 	bl	8002288 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b64      	cmp	r3, #100	@ 0x64
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e200      	b.n	8003ff0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bee:	4b5d      	ldr	r3, [pc, #372]	@ (8003d64 <HAL_RCC_OscConfig+0x26c>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d0f0      	beq.n	8003bdc <HAL_RCC_OscConfig+0xe4>
 8003bfa:	e014      	b.n	8003c26 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bfc:	f7fe fb44 	bl	8002288 <HAL_GetTick>
 8003c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c02:	e008      	b.n	8003c16 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c04:	f7fe fb40 	bl	8002288 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	2b64      	cmp	r3, #100	@ 0x64
 8003c10:	d901      	bls.n	8003c16 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e1ec      	b.n	8003ff0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c16:	4b53      	ldr	r3, [pc, #332]	@ (8003d64 <HAL_RCC_OscConfig+0x26c>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1f0      	bne.n	8003c04 <HAL_RCC_OscConfig+0x10c>
 8003c22:	e000      	b.n	8003c26 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0302 	and.w	r3, r3, #2
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d063      	beq.n	8003cfa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c32:	4b4c      	ldr	r3, [pc, #304]	@ (8003d64 <HAL_RCC_OscConfig+0x26c>)
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f003 030c 	and.w	r3, r3, #12
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00b      	beq.n	8003c56 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003c3e:	4b49      	ldr	r3, [pc, #292]	@ (8003d64 <HAL_RCC_OscConfig+0x26c>)
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f003 030c 	and.w	r3, r3, #12
 8003c46:	2b08      	cmp	r3, #8
 8003c48:	d11c      	bne.n	8003c84 <HAL_RCC_OscConfig+0x18c>
 8003c4a:	4b46      	ldr	r3, [pc, #280]	@ (8003d64 <HAL_RCC_OscConfig+0x26c>)
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d116      	bne.n	8003c84 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c56:	4b43      	ldr	r3, [pc, #268]	@ (8003d64 <HAL_RCC_OscConfig+0x26c>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d005      	beq.n	8003c6e <HAL_RCC_OscConfig+0x176>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d001      	beq.n	8003c6e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e1c0      	b.n	8003ff0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c6e:	4b3d      	ldr	r3, [pc, #244]	@ (8003d64 <HAL_RCC_OscConfig+0x26c>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	695b      	ldr	r3, [r3, #20]
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	4939      	ldr	r1, [pc, #228]	@ (8003d64 <HAL_RCC_OscConfig+0x26c>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c82:	e03a      	b.n	8003cfa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	691b      	ldr	r3, [r3, #16]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d020      	beq.n	8003cce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c8c:	4b36      	ldr	r3, [pc, #216]	@ (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003c8e:	2201      	movs	r2, #1
 8003c90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c92:	f7fe faf9 	bl	8002288 <HAL_GetTick>
 8003c96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c98:	e008      	b.n	8003cac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c9a:	f7fe faf5 	bl	8002288 <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d901      	bls.n	8003cac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e1a1      	b.n	8003ff0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cac:	4b2d      	ldr	r3, [pc, #180]	@ (8003d64 <HAL_RCC_OscConfig+0x26c>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0302 	and.w	r3, r3, #2
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d0f0      	beq.n	8003c9a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cb8:	4b2a      	ldr	r3, [pc, #168]	@ (8003d64 <HAL_RCC_OscConfig+0x26c>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	695b      	ldr	r3, [r3, #20]
 8003cc4:	00db      	lsls	r3, r3, #3
 8003cc6:	4927      	ldr	r1, [pc, #156]	@ (8003d64 <HAL_RCC_OscConfig+0x26c>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	600b      	str	r3, [r1, #0]
 8003ccc:	e015      	b.n	8003cfa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cce:	4b26      	ldr	r3, [pc, #152]	@ (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd4:	f7fe fad8 	bl	8002288 <HAL_GetTick>
 8003cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cda:	e008      	b.n	8003cee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cdc:	f7fe fad4 	bl	8002288 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e180      	b.n	8003ff0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cee:	4b1d      	ldr	r3, [pc, #116]	@ (8003d64 <HAL_RCC_OscConfig+0x26c>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1f0      	bne.n	8003cdc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0308 	and.w	r3, r3, #8
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d03a      	beq.n	8003d7c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d019      	beq.n	8003d42 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d0e:	4b17      	ldr	r3, [pc, #92]	@ (8003d6c <HAL_RCC_OscConfig+0x274>)
 8003d10:	2201      	movs	r2, #1
 8003d12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d14:	f7fe fab8 	bl	8002288 <HAL_GetTick>
 8003d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d1a:	e008      	b.n	8003d2e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d1c:	f7fe fab4 	bl	8002288 <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e160      	b.n	8003ff0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8003d64 <HAL_RCC_OscConfig+0x26c>)
 8003d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d0f0      	beq.n	8003d1c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003d3a:	2001      	movs	r0, #1
 8003d3c:	f000 fafe 	bl	800433c <RCC_Delay>
 8003d40:	e01c      	b.n	8003d7c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d42:	4b0a      	ldr	r3, [pc, #40]	@ (8003d6c <HAL_RCC_OscConfig+0x274>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d48:	f7fe fa9e 	bl	8002288 <HAL_GetTick>
 8003d4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d4e:	e00f      	b.n	8003d70 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d50:	f7fe fa9a 	bl	8002288 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d908      	bls.n	8003d70 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e146      	b.n	8003ff0 <HAL_RCC_OscConfig+0x4f8>
 8003d62:	bf00      	nop
 8003d64:	40021000 	.word	0x40021000
 8003d68:	42420000 	.word	0x42420000
 8003d6c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d70:	4b92      	ldr	r3, [pc, #584]	@ (8003fbc <HAL_RCC_OscConfig+0x4c4>)
 8003d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d74:	f003 0302 	and.w	r3, r3, #2
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1e9      	bne.n	8003d50 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0304 	and.w	r3, r3, #4
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f000 80a6 	beq.w	8003ed6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d8e:	4b8b      	ldr	r3, [pc, #556]	@ (8003fbc <HAL_RCC_OscConfig+0x4c4>)
 8003d90:	69db      	ldr	r3, [r3, #28]
 8003d92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d10d      	bne.n	8003db6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d9a:	4b88      	ldr	r3, [pc, #544]	@ (8003fbc <HAL_RCC_OscConfig+0x4c4>)
 8003d9c:	69db      	ldr	r3, [r3, #28]
 8003d9e:	4a87      	ldr	r2, [pc, #540]	@ (8003fbc <HAL_RCC_OscConfig+0x4c4>)
 8003da0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003da4:	61d3      	str	r3, [r2, #28]
 8003da6:	4b85      	ldr	r3, [pc, #532]	@ (8003fbc <HAL_RCC_OscConfig+0x4c4>)
 8003da8:	69db      	ldr	r3, [r3, #28]
 8003daa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dae:	60bb      	str	r3, [r7, #8]
 8003db0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003db2:	2301      	movs	r3, #1
 8003db4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003db6:	4b82      	ldr	r3, [pc, #520]	@ (8003fc0 <HAL_RCC_OscConfig+0x4c8>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d118      	bne.n	8003df4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dc2:	4b7f      	ldr	r3, [pc, #508]	@ (8003fc0 <HAL_RCC_OscConfig+0x4c8>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a7e      	ldr	r2, [pc, #504]	@ (8003fc0 <HAL_RCC_OscConfig+0x4c8>)
 8003dc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dce:	f7fe fa5b 	bl	8002288 <HAL_GetTick>
 8003dd2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dd4:	e008      	b.n	8003de8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dd6:	f7fe fa57 	bl	8002288 <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	2b64      	cmp	r3, #100	@ 0x64
 8003de2:	d901      	bls.n	8003de8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e103      	b.n	8003ff0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003de8:	4b75      	ldr	r3, [pc, #468]	@ (8003fc0 <HAL_RCC_OscConfig+0x4c8>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d0f0      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d106      	bne.n	8003e0a <HAL_RCC_OscConfig+0x312>
 8003dfc:	4b6f      	ldr	r3, [pc, #444]	@ (8003fbc <HAL_RCC_OscConfig+0x4c4>)
 8003dfe:	6a1b      	ldr	r3, [r3, #32]
 8003e00:	4a6e      	ldr	r2, [pc, #440]	@ (8003fbc <HAL_RCC_OscConfig+0x4c4>)
 8003e02:	f043 0301 	orr.w	r3, r3, #1
 8003e06:	6213      	str	r3, [r2, #32]
 8003e08:	e02d      	b.n	8003e66 <HAL_RCC_OscConfig+0x36e>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d10c      	bne.n	8003e2c <HAL_RCC_OscConfig+0x334>
 8003e12:	4b6a      	ldr	r3, [pc, #424]	@ (8003fbc <HAL_RCC_OscConfig+0x4c4>)
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	4a69      	ldr	r2, [pc, #420]	@ (8003fbc <HAL_RCC_OscConfig+0x4c4>)
 8003e18:	f023 0301 	bic.w	r3, r3, #1
 8003e1c:	6213      	str	r3, [r2, #32]
 8003e1e:	4b67      	ldr	r3, [pc, #412]	@ (8003fbc <HAL_RCC_OscConfig+0x4c4>)
 8003e20:	6a1b      	ldr	r3, [r3, #32]
 8003e22:	4a66      	ldr	r2, [pc, #408]	@ (8003fbc <HAL_RCC_OscConfig+0x4c4>)
 8003e24:	f023 0304 	bic.w	r3, r3, #4
 8003e28:	6213      	str	r3, [r2, #32]
 8003e2a:	e01c      	b.n	8003e66 <HAL_RCC_OscConfig+0x36e>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	2b05      	cmp	r3, #5
 8003e32:	d10c      	bne.n	8003e4e <HAL_RCC_OscConfig+0x356>
 8003e34:	4b61      	ldr	r3, [pc, #388]	@ (8003fbc <HAL_RCC_OscConfig+0x4c4>)
 8003e36:	6a1b      	ldr	r3, [r3, #32]
 8003e38:	4a60      	ldr	r2, [pc, #384]	@ (8003fbc <HAL_RCC_OscConfig+0x4c4>)
 8003e3a:	f043 0304 	orr.w	r3, r3, #4
 8003e3e:	6213      	str	r3, [r2, #32]
 8003e40:	4b5e      	ldr	r3, [pc, #376]	@ (8003fbc <HAL_RCC_OscConfig+0x4c4>)
 8003e42:	6a1b      	ldr	r3, [r3, #32]
 8003e44:	4a5d      	ldr	r2, [pc, #372]	@ (8003fbc <HAL_RCC_OscConfig+0x4c4>)
 8003e46:	f043 0301 	orr.w	r3, r3, #1
 8003e4a:	6213      	str	r3, [r2, #32]
 8003e4c:	e00b      	b.n	8003e66 <HAL_RCC_OscConfig+0x36e>
 8003e4e:	4b5b      	ldr	r3, [pc, #364]	@ (8003fbc <HAL_RCC_OscConfig+0x4c4>)
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	4a5a      	ldr	r2, [pc, #360]	@ (8003fbc <HAL_RCC_OscConfig+0x4c4>)
 8003e54:	f023 0301 	bic.w	r3, r3, #1
 8003e58:	6213      	str	r3, [r2, #32]
 8003e5a:	4b58      	ldr	r3, [pc, #352]	@ (8003fbc <HAL_RCC_OscConfig+0x4c4>)
 8003e5c:	6a1b      	ldr	r3, [r3, #32]
 8003e5e:	4a57      	ldr	r2, [pc, #348]	@ (8003fbc <HAL_RCC_OscConfig+0x4c4>)
 8003e60:	f023 0304 	bic.w	r3, r3, #4
 8003e64:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d015      	beq.n	8003e9a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e6e:	f7fe fa0b 	bl	8002288 <HAL_GetTick>
 8003e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e74:	e00a      	b.n	8003e8c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e76:	f7fe fa07 	bl	8002288 <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d901      	bls.n	8003e8c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e0b1      	b.n	8003ff0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e8c:	4b4b      	ldr	r3, [pc, #300]	@ (8003fbc <HAL_RCC_OscConfig+0x4c4>)
 8003e8e:	6a1b      	ldr	r3, [r3, #32]
 8003e90:	f003 0302 	and.w	r3, r3, #2
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d0ee      	beq.n	8003e76 <HAL_RCC_OscConfig+0x37e>
 8003e98:	e014      	b.n	8003ec4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e9a:	f7fe f9f5 	bl	8002288 <HAL_GetTick>
 8003e9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ea0:	e00a      	b.n	8003eb8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ea2:	f7fe f9f1 	bl	8002288 <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d901      	bls.n	8003eb8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e09b      	b.n	8003ff0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eb8:	4b40      	ldr	r3, [pc, #256]	@ (8003fbc <HAL_RCC_OscConfig+0x4c4>)
 8003eba:	6a1b      	ldr	r3, [r3, #32]
 8003ebc:	f003 0302 	and.w	r3, r3, #2
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d1ee      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ec4:	7dfb      	ldrb	r3, [r7, #23]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d105      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eca:	4b3c      	ldr	r3, [pc, #240]	@ (8003fbc <HAL_RCC_OscConfig+0x4c4>)
 8003ecc:	69db      	ldr	r3, [r3, #28]
 8003ece:	4a3b      	ldr	r2, [pc, #236]	@ (8003fbc <HAL_RCC_OscConfig+0x4c4>)
 8003ed0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ed4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	69db      	ldr	r3, [r3, #28]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	f000 8087 	beq.w	8003fee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ee0:	4b36      	ldr	r3, [pc, #216]	@ (8003fbc <HAL_RCC_OscConfig+0x4c4>)
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f003 030c 	and.w	r3, r3, #12
 8003ee8:	2b08      	cmp	r3, #8
 8003eea:	d061      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	69db      	ldr	r3, [r3, #28]
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d146      	bne.n	8003f82 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ef4:	4b33      	ldr	r3, [pc, #204]	@ (8003fc4 <HAL_RCC_OscConfig+0x4cc>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003efa:	f7fe f9c5 	bl	8002288 <HAL_GetTick>
 8003efe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f00:	e008      	b.n	8003f14 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f02:	f7fe f9c1 	bl	8002288 <HAL_GetTick>
 8003f06:	4602      	mov	r2, r0
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d901      	bls.n	8003f14 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e06d      	b.n	8003ff0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f14:	4b29      	ldr	r3, [pc, #164]	@ (8003fbc <HAL_RCC_OscConfig+0x4c4>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d1f0      	bne.n	8003f02 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a1b      	ldr	r3, [r3, #32]
 8003f24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f28:	d108      	bne.n	8003f3c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003f2a:	4b24      	ldr	r3, [pc, #144]	@ (8003fbc <HAL_RCC_OscConfig+0x4c4>)
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	4921      	ldr	r1, [pc, #132]	@ (8003fbc <HAL_RCC_OscConfig+0x4c4>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f3c:	4b1f      	ldr	r3, [pc, #124]	@ (8003fbc <HAL_RCC_OscConfig+0x4c4>)
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a19      	ldr	r1, [r3, #32]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f4c:	430b      	orrs	r3, r1
 8003f4e:	491b      	ldr	r1, [pc, #108]	@ (8003fbc <HAL_RCC_OscConfig+0x4c4>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f54:	4b1b      	ldr	r3, [pc, #108]	@ (8003fc4 <HAL_RCC_OscConfig+0x4cc>)
 8003f56:	2201      	movs	r2, #1
 8003f58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f5a:	f7fe f995 	bl	8002288 <HAL_GetTick>
 8003f5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f60:	e008      	b.n	8003f74 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f62:	f7fe f991 	bl	8002288 <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d901      	bls.n	8003f74 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e03d      	b.n	8003ff0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f74:	4b11      	ldr	r3, [pc, #68]	@ (8003fbc <HAL_RCC_OscConfig+0x4c4>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d0f0      	beq.n	8003f62 <HAL_RCC_OscConfig+0x46a>
 8003f80:	e035      	b.n	8003fee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f82:	4b10      	ldr	r3, [pc, #64]	@ (8003fc4 <HAL_RCC_OscConfig+0x4cc>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f88:	f7fe f97e 	bl	8002288 <HAL_GetTick>
 8003f8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f8e:	e008      	b.n	8003fa2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f90:	f7fe f97a 	bl	8002288 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e026      	b.n	8003ff0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fa2:	4b06      	ldr	r3, [pc, #24]	@ (8003fbc <HAL_RCC_OscConfig+0x4c4>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1f0      	bne.n	8003f90 <HAL_RCC_OscConfig+0x498>
 8003fae:	e01e      	b.n	8003fee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	69db      	ldr	r3, [r3, #28]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d107      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e019      	b.n	8003ff0 <HAL_RCC_OscConfig+0x4f8>
 8003fbc:	40021000 	.word	0x40021000
 8003fc0:	40007000 	.word	0x40007000
 8003fc4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003fc8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ff8 <HAL_RCC_OscConfig+0x500>)
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a1b      	ldr	r3, [r3, #32]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d106      	bne.n	8003fea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d001      	beq.n	8003fee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e000      	b.n	8003ff0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3718      	adds	r7, #24
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	40021000 	.word	0x40021000

08003ffc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d101      	bne.n	8004010 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e0d0      	b.n	80041b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004010:	4b6a      	ldr	r3, [pc, #424]	@ (80041bc <HAL_RCC_ClockConfig+0x1c0>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0307 	and.w	r3, r3, #7
 8004018:	683a      	ldr	r2, [r7, #0]
 800401a:	429a      	cmp	r2, r3
 800401c:	d910      	bls.n	8004040 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800401e:	4b67      	ldr	r3, [pc, #412]	@ (80041bc <HAL_RCC_ClockConfig+0x1c0>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f023 0207 	bic.w	r2, r3, #7
 8004026:	4965      	ldr	r1, [pc, #404]	@ (80041bc <HAL_RCC_ClockConfig+0x1c0>)
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	4313      	orrs	r3, r2
 800402c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800402e:	4b63      	ldr	r3, [pc, #396]	@ (80041bc <HAL_RCC_ClockConfig+0x1c0>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0307 	and.w	r3, r3, #7
 8004036:	683a      	ldr	r2, [r7, #0]
 8004038:	429a      	cmp	r2, r3
 800403a:	d001      	beq.n	8004040 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e0b8      	b.n	80041b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0302 	and.w	r3, r3, #2
 8004048:	2b00      	cmp	r3, #0
 800404a:	d020      	beq.n	800408e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0304 	and.w	r3, r3, #4
 8004054:	2b00      	cmp	r3, #0
 8004056:	d005      	beq.n	8004064 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004058:	4b59      	ldr	r3, [pc, #356]	@ (80041c0 <HAL_RCC_ClockConfig+0x1c4>)
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	4a58      	ldr	r2, [pc, #352]	@ (80041c0 <HAL_RCC_ClockConfig+0x1c4>)
 800405e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004062:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0308 	and.w	r3, r3, #8
 800406c:	2b00      	cmp	r3, #0
 800406e:	d005      	beq.n	800407c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004070:	4b53      	ldr	r3, [pc, #332]	@ (80041c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	4a52      	ldr	r2, [pc, #328]	@ (80041c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004076:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800407a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800407c:	4b50      	ldr	r3, [pc, #320]	@ (80041c0 <HAL_RCC_ClockConfig+0x1c4>)
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	494d      	ldr	r1, [pc, #308]	@ (80041c0 <HAL_RCC_ClockConfig+0x1c4>)
 800408a:	4313      	orrs	r3, r2
 800408c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	2b00      	cmp	r3, #0
 8004098:	d040      	beq.n	800411c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d107      	bne.n	80040b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040a2:	4b47      	ldr	r3, [pc, #284]	@ (80041c0 <HAL_RCC_ClockConfig+0x1c4>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d115      	bne.n	80040da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e07f      	b.n	80041b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d107      	bne.n	80040ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040ba:	4b41      	ldr	r3, [pc, #260]	@ (80041c0 <HAL_RCC_ClockConfig+0x1c4>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d109      	bne.n	80040da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e073      	b.n	80041b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040ca:	4b3d      	ldr	r3, [pc, #244]	@ (80041c0 <HAL_RCC_ClockConfig+0x1c4>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0302 	and.w	r3, r3, #2
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d101      	bne.n	80040da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e06b      	b.n	80041b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040da:	4b39      	ldr	r3, [pc, #228]	@ (80041c0 <HAL_RCC_ClockConfig+0x1c4>)
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f023 0203 	bic.w	r2, r3, #3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	4936      	ldr	r1, [pc, #216]	@ (80041c0 <HAL_RCC_ClockConfig+0x1c4>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040ec:	f7fe f8cc 	bl	8002288 <HAL_GetTick>
 80040f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040f2:	e00a      	b.n	800410a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040f4:	f7fe f8c8 	bl	8002288 <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004102:	4293      	cmp	r3, r2
 8004104:	d901      	bls.n	800410a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e053      	b.n	80041b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800410a:	4b2d      	ldr	r3, [pc, #180]	@ (80041c0 <HAL_RCC_ClockConfig+0x1c4>)
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	f003 020c 	and.w	r2, r3, #12
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	429a      	cmp	r2, r3
 800411a:	d1eb      	bne.n	80040f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800411c:	4b27      	ldr	r3, [pc, #156]	@ (80041bc <HAL_RCC_ClockConfig+0x1c0>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0307 	and.w	r3, r3, #7
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	429a      	cmp	r2, r3
 8004128:	d210      	bcs.n	800414c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800412a:	4b24      	ldr	r3, [pc, #144]	@ (80041bc <HAL_RCC_ClockConfig+0x1c0>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f023 0207 	bic.w	r2, r3, #7
 8004132:	4922      	ldr	r1, [pc, #136]	@ (80041bc <HAL_RCC_ClockConfig+0x1c0>)
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	4313      	orrs	r3, r2
 8004138:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800413a:	4b20      	ldr	r3, [pc, #128]	@ (80041bc <HAL_RCC_ClockConfig+0x1c0>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0307 	and.w	r3, r3, #7
 8004142:	683a      	ldr	r2, [r7, #0]
 8004144:	429a      	cmp	r2, r3
 8004146:	d001      	beq.n	800414c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e032      	b.n	80041b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0304 	and.w	r3, r3, #4
 8004154:	2b00      	cmp	r3, #0
 8004156:	d008      	beq.n	800416a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004158:	4b19      	ldr	r3, [pc, #100]	@ (80041c0 <HAL_RCC_ClockConfig+0x1c4>)
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	4916      	ldr	r1, [pc, #88]	@ (80041c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004166:	4313      	orrs	r3, r2
 8004168:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0308 	and.w	r3, r3, #8
 8004172:	2b00      	cmp	r3, #0
 8004174:	d009      	beq.n	800418a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004176:	4b12      	ldr	r3, [pc, #72]	@ (80041c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	00db      	lsls	r3, r3, #3
 8004184:	490e      	ldr	r1, [pc, #56]	@ (80041c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004186:	4313      	orrs	r3, r2
 8004188:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800418a:	f000 f821 	bl	80041d0 <HAL_RCC_GetSysClockFreq>
 800418e:	4602      	mov	r2, r0
 8004190:	4b0b      	ldr	r3, [pc, #44]	@ (80041c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	091b      	lsrs	r3, r3, #4
 8004196:	f003 030f 	and.w	r3, r3, #15
 800419a:	490a      	ldr	r1, [pc, #40]	@ (80041c4 <HAL_RCC_ClockConfig+0x1c8>)
 800419c:	5ccb      	ldrb	r3, [r1, r3]
 800419e:	fa22 f303 	lsr.w	r3, r2, r3
 80041a2:	4a09      	ldr	r2, [pc, #36]	@ (80041c8 <HAL_RCC_ClockConfig+0x1cc>)
 80041a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80041a6:	4b09      	ldr	r3, [pc, #36]	@ (80041cc <HAL_RCC_ClockConfig+0x1d0>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7fd feaa 	bl	8001f04 <HAL_InitTick>

  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3710      	adds	r7, #16
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	40022000 	.word	0x40022000
 80041c0:	40021000 	.word	0x40021000
 80041c4:	0800d384 	.word	0x0800d384
 80041c8:	20000018 	.word	0x20000018
 80041cc:	2000001c 	.word	0x2000001c

080041d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b087      	sub	sp, #28
 80041d4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80041d6:	2300      	movs	r3, #0
 80041d8:	60fb      	str	r3, [r7, #12]
 80041da:	2300      	movs	r3, #0
 80041dc:	60bb      	str	r3, [r7, #8]
 80041de:	2300      	movs	r3, #0
 80041e0:	617b      	str	r3, [r7, #20]
 80041e2:	2300      	movs	r3, #0
 80041e4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80041e6:	2300      	movs	r3, #0
 80041e8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80041ea:	4b1e      	ldr	r3, [pc, #120]	@ (8004264 <HAL_RCC_GetSysClockFreq+0x94>)
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f003 030c 	and.w	r3, r3, #12
 80041f6:	2b04      	cmp	r3, #4
 80041f8:	d002      	beq.n	8004200 <HAL_RCC_GetSysClockFreq+0x30>
 80041fa:	2b08      	cmp	r3, #8
 80041fc:	d003      	beq.n	8004206 <HAL_RCC_GetSysClockFreq+0x36>
 80041fe:	e027      	b.n	8004250 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004200:	4b19      	ldr	r3, [pc, #100]	@ (8004268 <HAL_RCC_GetSysClockFreq+0x98>)
 8004202:	613b      	str	r3, [r7, #16]
      break;
 8004204:	e027      	b.n	8004256 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	0c9b      	lsrs	r3, r3, #18
 800420a:	f003 030f 	and.w	r3, r3, #15
 800420e:	4a17      	ldr	r2, [pc, #92]	@ (800426c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004210:	5cd3      	ldrb	r3, [r2, r3]
 8004212:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d010      	beq.n	8004240 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800421e:	4b11      	ldr	r3, [pc, #68]	@ (8004264 <HAL_RCC_GetSysClockFreq+0x94>)
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	0c5b      	lsrs	r3, r3, #17
 8004224:	f003 0301 	and.w	r3, r3, #1
 8004228:	4a11      	ldr	r2, [pc, #68]	@ (8004270 <HAL_RCC_GetSysClockFreq+0xa0>)
 800422a:	5cd3      	ldrb	r3, [r2, r3]
 800422c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a0d      	ldr	r2, [pc, #52]	@ (8004268 <HAL_RCC_GetSysClockFreq+0x98>)
 8004232:	fb03 f202 	mul.w	r2, r3, r2
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	fbb2 f3f3 	udiv	r3, r2, r3
 800423c:	617b      	str	r3, [r7, #20]
 800423e:	e004      	b.n	800424a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4a0c      	ldr	r2, [pc, #48]	@ (8004274 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004244:	fb02 f303 	mul.w	r3, r2, r3
 8004248:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	613b      	str	r3, [r7, #16]
      break;
 800424e:	e002      	b.n	8004256 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004250:	4b05      	ldr	r3, [pc, #20]	@ (8004268 <HAL_RCC_GetSysClockFreq+0x98>)
 8004252:	613b      	str	r3, [r7, #16]
      break;
 8004254:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004256:	693b      	ldr	r3, [r7, #16]
}
 8004258:	4618      	mov	r0, r3
 800425a:	371c      	adds	r7, #28
 800425c:	46bd      	mov	sp, r7
 800425e:	bc80      	pop	{r7}
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	40021000 	.word	0x40021000
 8004268:	007a1200 	.word	0x007a1200
 800426c:	0800d39c 	.word	0x0800d39c
 8004270:	0800d3ac 	.word	0x0800d3ac
 8004274:	003d0900 	.word	0x003d0900

08004278 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004278:	b480      	push	{r7}
 800427a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800427c:	4b02      	ldr	r3, [pc, #8]	@ (8004288 <HAL_RCC_GetHCLKFreq+0x10>)
 800427e:	681b      	ldr	r3, [r3, #0]
}
 8004280:	4618      	mov	r0, r3
 8004282:	46bd      	mov	sp, r7
 8004284:	bc80      	pop	{r7}
 8004286:	4770      	bx	lr
 8004288:	20000018 	.word	0x20000018

0800428c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004290:	f7ff fff2 	bl	8004278 <HAL_RCC_GetHCLKFreq>
 8004294:	4602      	mov	r2, r0
 8004296:	4b05      	ldr	r3, [pc, #20]	@ (80042ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	0a1b      	lsrs	r3, r3, #8
 800429c:	f003 0307 	and.w	r3, r3, #7
 80042a0:	4903      	ldr	r1, [pc, #12]	@ (80042b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042a2:	5ccb      	ldrb	r3, [r1, r3]
 80042a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	40021000 	.word	0x40021000
 80042b0:	0800d394 	.word	0x0800d394

080042b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80042b8:	f7ff ffde 	bl	8004278 <HAL_RCC_GetHCLKFreq>
 80042bc:	4602      	mov	r2, r0
 80042be:	4b05      	ldr	r3, [pc, #20]	@ (80042d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	0adb      	lsrs	r3, r3, #11
 80042c4:	f003 0307 	and.w	r3, r3, #7
 80042c8:	4903      	ldr	r1, [pc, #12]	@ (80042d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042ca:	5ccb      	ldrb	r3, [r1, r3]
 80042cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	40021000 	.word	0x40021000
 80042d8:	0800d394 	.word	0x0800d394

080042dc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	220f      	movs	r2, #15
 80042ea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80042ec:	4b11      	ldr	r3, [pc, #68]	@ (8004334 <HAL_RCC_GetClockConfig+0x58>)
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f003 0203 	and.w	r2, r3, #3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80042f8:	4b0e      	ldr	r3, [pc, #56]	@ (8004334 <HAL_RCC_GetClockConfig+0x58>)
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004304:	4b0b      	ldr	r3, [pc, #44]	@ (8004334 <HAL_RCC_GetClockConfig+0x58>)
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004310:	4b08      	ldr	r3, [pc, #32]	@ (8004334 <HAL_RCC_GetClockConfig+0x58>)
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	08db      	lsrs	r3, r3, #3
 8004316:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800431e:	4b06      	ldr	r3, [pc, #24]	@ (8004338 <HAL_RCC_GetClockConfig+0x5c>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0207 	and.w	r2, r3, #7
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800432a:	bf00      	nop
 800432c:	370c      	adds	r7, #12
 800432e:	46bd      	mov	sp, r7
 8004330:	bc80      	pop	{r7}
 8004332:	4770      	bx	lr
 8004334:	40021000 	.word	0x40021000
 8004338:	40022000 	.word	0x40022000

0800433c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800433c:	b480      	push	{r7}
 800433e:	b085      	sub	sp, #20
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004344:	4b0a      	ldr	r3, [pc, #40]	@ (8004370 <RCC_Delay+0x34>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a0a      	ldr	r2, [pc, #40]	@ (8004374 <RCC_Delay+0x38>)
 800434a:	fba2 2303 	umull	r2, r3, r2, r3
 800434e:	0a5b      	lsrs	r3, r3, #9
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	fb02 f303 	mul.w	r3, r2, r3
 8004356:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004358:	bf00      	nop
  }
  while (Delay --);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	1e5a      	subs	r2, r3, #1
 800435e:	60fa      	str	r2, [r7, #12]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d1f9      	bne.n	8004358 <RCC_Delay+0x1c>
}
 8004364:	bf00      	nop
 8004366:	bf00      	nop
 8004368:	3714      	adds	r7, #20
 800436a:	46bd      	mov	sp, r7
 800436c:	bc80      	pop	{r7}
 800436e:	4770      	bx	lr
 8004370:	20000018 	.word	0x20000018
 8004374:	10624dd3 	.word	0x10624dd3

08004378 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b086      	sub	sp, #24
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004380:	2300      	movs	r3, #0
 8004382:	613b      	str	r3, [r7, #16]
 8004384:	2300      	movs	r3, #0
 8004386:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0301 	and.w	r3, r3, #1
 8004390:	2b00      	cmp	r3, #0
 8004392:	d07d      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004394:	2300      	movs	r3, #0
 8004396:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004398:	4b4f      	ldr	r3, [pc, #316]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800439a:	69db      	ldr	r3, [r3, #28]
 800439c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d10d      	bne.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043a4:	4b4c      	ldr	r3, [pc, #304]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043a6:	69db      	ldr	r3, [r3, #28]
 80043a8:	4a4b      	ldr	r2, [pc, #300]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043ae:	61d3      	str	r3, [r2, #28]
 80043b0:	4b49      	ldr	r3, [pc, #292]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043b2:	69db      	ldr	r3, [r3, #28]
 80043b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043b8:	60bb      	str	r3, [r7, #8]
 80043ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043bc:	2301      	movs	r3, #1
 80043be:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043c0:	4b46      	ldr	r3, [pc, #280]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d118      	bne.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043cc:	4b43      	ldr	r3, [pc, #268]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a42      	ldr	r2, [pc, #264]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80043d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043d8:	f7fd ff56 	bl	8002288 <HAL_GetTick>
 80043dc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043de:	e008      	b.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043e0:	f7fd ff52 	bl	8002288 <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	2b64      	cmp	r3, #100	@ 0x64
 80043ec:	d901      	bls.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e06d      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043f2:	4b3a      	ldr	r3, [pc, #232]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d0f0      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80043fe:	4b36      	ldr	r3, [pc, #216]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004400:	6a1b      	ldr	r3, [r3, #32]
 8004402:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004406:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d02e      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004416:	68fa      	ldr	r2, [r7, #12]
 8004418:	429a      	cmp	r2, r3
 800441a:	d027      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800441c:	4b2e      	ldr	r3, [pc, #184]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800441e:	6a1b      	ldr	r3, [r3, #32]
 8004420:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004424:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004426:	4b2e      	ldr	r3, [pc, #184]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004428:	2201      	movs	r2, #1
 800442a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800442c:	4b2c      	ldr	r3, [pc, #176]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800442e:	2200      	movs	r2, #0
 8004430:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004432:	4a29      	ldr	r2, [pc, #164]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f003 0301 	and.w	r3, r3, #1
 800443e:	2b00      	cmp	r3, #0
 8004440:	d014      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004442:	f7fd ff21 	bl	8002288 <HAL_GetTick>
 8004446:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004448:	e00a      	b.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800444a:	f7fd ff1d 	bl	8002288 <HAL_GetTick>
 800444e:	4602      	mov	r2, r0
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004458:	4293      	cmp	r3, r2
 800445a:	d901      	bls.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800445c:	2303      	movs	r3, #3
 800445e:	e036      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004460:	4b1d      	ldr	r3, [pc, #116]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004462:	6a1b      	ldr	r3, [r3, #32]
 8004464:	f003 0302 	and.w	r3, r3, #2
 8004468:	2b00      	cmp	r3, #0
 800446a:	d0ee      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800446c:	4b1a      	ldr	r3, [pc, #104]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800446e:	6a1b      	ldr	r3, [r3, #32]
 8004470:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	4917      	ldr	r1, [pc, #92]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800447a:	4313      	orrs	r3, r2
 800447c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800447e:	7dfb      	ldrb	r3, [r7, #23]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d105      	bne.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004484:	4b14      	ldr	r3, [pc, #80]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004486:	69db      	ldr	r3, [r3, #28]
 8004488:	4a13      	ldr	r2, [pc, #76]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800448a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800448e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0302 	and.w	r3, r3, #2
 8004498:	2b00      	cmp	r3, #0
 800449a:	d008      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800449c:	4b0e      	ldr	r3, [pc, #56]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	490b      	ldr	r1, [pc, #44]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0310 	and.w	r3, r3, #16
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d008      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80044ba:	4b07      	ldr	r3, [pc, #28]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	4904      	ldr	r1, [pc, #16]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044c8:	4313      	orrs	r3, r2
 80044ca:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3718      	adds	r7, #24
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	40021000 	.word	0x40021000
 80044dc:	40007000 	.word	0x40007000
 80044e0:	42420440 	.word	0x42420440

080044e4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b088      	sub	sp, #32
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80044ec:	2300      	movs	r3, #0
 80044ee:	617b      	str	r3, [r7, #20]
 80044f0:	2300      	movs	r3, #0
 80044f2:	61fb      	str	r3, [r7, #28]
 80044f4:	2300      	movs	r3, #0
 80044f6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80044f8:	2300      	movs	r3, #0
 80044fa:	60fb      	str	r3, [r7, #12]
 80044fc:	2300      	movs	r3, #0
 80044fe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2b10      	cmp	r3, #16
 8004504:	d00a      	beq.n	800451c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2b10      	cmp	r3, #16
 800450a:	f200 808a 	bhi.w	8004622 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2b01      	cmp	r3, #1
 8004512:	d045      	beq.n	80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2b02      	cmp	r3, #2
 8004518:	d075      	beq.n	8004606 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800451a:	e082      	b.n	8004622 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 800451c:	4b46      	ldr	r3, [pc, #280]	@ (8004638 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004522:	4b45      	ldr	r3, [pc, #276]	@ (8004638 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d07b      	beq.n	8004626 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	0c9b      	lsrs	r3, r3, #18
 8004532:	f003 030f 	and.w	r3, r3, #15
 8004536:	4a41      	ldr	r2, [pc, #260]	@ (800463c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004538:	5cd3      	ldrb	r3, [r2, r3]
 800453a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d015      	beq.n	8004572 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004546:	4b3c      	ldr	r3, [pc, #240]	@ (8004638 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	0c5b      	lsrs	r3, r3, #17
 800454c:	f003 0301 	and.w	r3, r3, #1
 8004550:	4a3b      	ldr	r2, [pc, #236]	@ (8004640 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8004552:	5cd3      	ldrb	r3, [r2, r3]
 8004554:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d00d      	beq.n	800457c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004560:	4a38      	ldr	r2, [pc, #224]	@ (8004644 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	fbb2 f2f3 	udiv	r2, r2, r3
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	fb02 f303 	mul.w	r3, r2, r3
 800456e:	61fb      	str	r3, [r7, #28]
 8004570:	e004      	b.n	800457c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	4a34      	ldr	r2, [pc, #208]	@ (8004648 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004576:	fb02 f303 	mul.w	r3, r2, r3
 800457a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800457c:	4b2e      	ldr	r3, [pc, #184]	@ (8004638 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004584:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004588:	d102      	bne.n	8004590 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	61bb      	str	r3, [r7, #24]
      break;
 800458e:	e04a      	b.n	8004626 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	005b      	lsls	r3, r3, #1
 8004594:	4a2d      	ldr	r2, [pc, #180]	@ (800464c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004596:	fba2 2303 	umull	r2, r3, r2, r3
 800459a:	085b      	lsrs	r3, r3, #1
 800459c:	61bb      	str	r3, [r7, #24]
      break;
 800459e:	e042      	b.n	8004626 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80045a0:	4b25      	ldr	r3, [pc, #148]	@ (8004638 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80045a2:	6a1b      	ldr	r3, [r3, #32]
 80045a4:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045b0:	d108      	bne.n	80045c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f003 0302 	and.w	r3, r3, #2
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d003      	beq.n	80045c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80045bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045c0:	61bb      	str	r3, [r7, #24]
 80045c2:	e01f      	b.n	8004604 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045ce:	d109      	bne.n	80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80045d0:	4b19      	ldr	r3, [pc, #100]	@ (8004638 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80045d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d4:	f003 0302 	and.w	r3, r3, #2
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d003      	beq.n	80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80045dc:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80045e0:	61bb      	str	r3, [r7, #24]
 80045e2:	e00f      	b.n	8004604 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80045ee:	d11c      	bne.n	800462a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80045f0:	4b11      	ldr	r3, [pc, #68]	@ (8004638 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d016      	beq.n	800462a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80045fc:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8004600:	61bb      	str	r3, [r7, #24]
      break;
 8004602:	e012      	b.n	800462a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004604:	e011      	b.n	800462a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004606:	f7ff fe55 	bl	80042b4 <HAL_RCC_GetPCLK2Freq>
 800460a:	4602      	mov	r2, r0
 800460c:	4b0a      	ldr	r3, [pc, #40]	@ (8004638 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	0b9b      	lsrs	r3, r3, #14
 8004612:	f003 0303 	and.w	r3, r3, #3
 8004616:	3301      	adds	r3, #1
 8004618:	005b      	lsls	r3, r3, #1
 800461a:	fbb2 f3f3 	udiv	r3, r2, r3
 800461e:	61bb      	str	r3, [r7, #24]
      break;
 8004620:	e004      	b.n	800462c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004622:	bf00      	nop
 8004624:	e002      	b.n	800462c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004626:	bf00      	nop
 8004628:	e000      	b.n	800462c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800462a:	bf00      	nop
    }
  }
  return (frequency);
 800462c:	69bb      	ldr	r3, [r7, #24]
}
 800462e:	4618      	mov	r0, r3
 8004630:	3720      	adds	r7, #32
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop
 8004638:	40021000 	.word	0x40021000
 800463c:	0800d3b0 	.word	0x0800d3b0
 8004640:	0800d3c0 	.word	0x0800d3c0
 8004644:	007a1200 	.word	0x007a1200
 8004648:	003d0900 	.word	0x003d0900
 800464c:	aaaaaaab 	.word	0xaaaaaaab

08004650 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b082      	sub	sp, #8
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d101      	bne.n	8004662 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e041      	b.n	80046e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004668:	b2db      	uxtb	r3, r3
 800466a:	2b00      	cmp	r3, #0
 800466c:	d106      	bne.n	800467c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f7fd fba4 	bl	8001dc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2202      	movs	r2, #2
 8004680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	3304      	adds	r3, #4
 800468c:	4619      	mov	r1, r3
 800468e:	4610      	mov	r0, r2
 8004690:	f000 fc7c 	bl	8004f8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3708      	adds	r7, #8
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
	...

080046f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b085      	sub	sp, #20
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	2b01      	cmp	r3, #1
 8004702:	d001      	beq.n	8004708 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e03a      	b.n	800477e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2202      	movs	r2, #2
 800470c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	68da      	ldr	r2, [r3, #12]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f042 0201 	orr.w	r2, r2, #1
 800471e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a18      	ldr	r2, [pc, #96]	@ (8004788 <HAL_TIM_Base_Start_IT+0x98>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d00e      	beq.n	8004748 <HAL_TIM_Base_Start_IT+0x58>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004732:	d009      	beq.n	8004748 <HAL_TIM_Base_Start_IT+0x58>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a14      	ldr	r2, [pc, #80]	@ (800478c <HAL_TIM_Base_Start_IT+0x9c>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d004      	beq.n	8004748 <HAL_TIM_Base_Start_IT+0x58>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a13      	ldr	r2, [pc, #76]	@ (8004790 <HAL_TIM_Base_Start_IT+0xa0>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d111      	bne.n	800476c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	f003 0307 	and.w	r3, r3, #7
 8004752:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2b06      	cmp	r3, #6
 8004758:	d010      	beq.n	800477c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f042 0201 	orr.w	r2, r2, #1
 8004768:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800476a:	e007      	b.n	800477c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f042 0201 	orr.w	r2, r2, #1
 800477a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	3714      	adds	r7, #20
 8004782:	46bd      	mov	sp, r7
 8004784:	bc80      	pop	{r7}
 8004786:	4770      	bx	lr
 8004788:	40012c00 	.word	0x40012c00
 800478c:	40000400 	.word	0x40000400
 8004790:	40000800 	.word	0x40000800

08004794 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d101      	bne.n	80047a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e041      	b.n	800482a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d106      	bne.n	80047c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 f839 	bl	8004832 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2202      	movs	r2, #2
 80047c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	3304      	adds	r3, #4
 80047d0:	4619      	mov	r1, r3
 80047d2:	4610      	mov	r0, r2
 80047d4:	f000 fbda 	bl	8004f8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3708      	adds	r7, #8
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}

08004832 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004832:	b480      	push	{r7}
 8004834:	b083      	sub	sp, #12
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800483a:	bf00      	nop
 800483c:	370c      	adds	r7, #12
 800483e:	46bd      	mov	sp, r7
 8004840:	bc80      	pop	{r7}
 8004842:	4770      	bx	lr

08004844 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d109      	bne.n	8004868 <HAL_TIM_PWM_Start+0x24>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800485a:	b2db      	uxtb	r3, r3
 800485c:	2b01      	cmp	r3, #1
 800485e:	bf14      	ite	ne
 8004860:	2301      	movne	r3, #1
 8004862:	2300      	moveq	r3, #0
 8004864:	b2db      	uxtb	r3, r3
 8004866:	e022      	b.n	80048ae <HAL_TIM_PWM_Start+0x6a>
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	2b04      	cmp	r3, #4
 800486c:	d109      	bne.n	8004882 <HAL_TIM_PWM_Start+0x3e>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004874:	b2db      	uxtb	r3, r3
 8004876:	2b01      	cmp	r3, #1
 8004878:	bf14      	ite	ne
 800487a:	2301      	movne	r3, #1
 800487c:	2300      	moveq	r3, #0
 800487e:	b2db      	uxtb	r3, r3
 8004880:	e015      	b.n	80048ae <HAL_TIM_PWM_Start+0x6a>
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	2b08      	cmp	r3, #8
 8004886:	d109      	bne.n	800489c <HAL_TIM_PWM_Start+0x58>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800488e:	b2db      	uxtb	r3, r3
 8004890:	2b01      	cmp	r3, #1
 8004892:	bf14      	ite	ne
 8004894:	2301      	movne	r3, #1
 8004896:	2300      	moveq	r3, #0
 8004898:	b2db      	uxtb	r3, r3
 800489a:	e008      	b.n	80048ae <HAL_TIM_PWM_Start+0x6a>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	bf14      	ite	ne
 80048a8:	2301      	movne	r3, #1
 80048aa:	2300      	moveq	r3, #0
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d001      	beq.n	80048b6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e05e      	b.n	8004974 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d104      	bne.n	80048c6 <HAL_TIM_PWM_Start+0x82>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2202      	movs	r2, #2
 80048c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048c4:	e013      	b.n	80048ee <HAL_TIM_PWM_Start+0xaa>
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	2b04      	cmp	r3, #4
 80048ca:	d104      	bne.n	80048d6 <HAL_TIM_PWM_Start+0x92>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2202      	movs	r2, #2
 80048d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80048d4:	e00b      	b.n	80048ee <HAL_TIM_PWM_Start+0xaa>
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	2b08      	cmp	r3, #8
 80048da:	d104      	bne.n	80048e6 <HAL_TIM_PWM_Start+0xa2>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2202      	movs	r2, #2
 80048e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048e4:	e003      	b.n	80048ee <HAL_TIM_PWM_Start+0xaa>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2202      	movs	r2, #2
 80048ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2201      	movs	r2, #1
 80048f4:	6839      	ldr	r1, [r7, #0]
 80048f6:	4618      	mov	r0, r3
 80048f8:	f000 fdd4 	bl	80054a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a1e      	ldr	r2, [pc, #120]	@ (800497c <HAL_TIM_PWM_Start+0x138>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d107      	bne.n	8004916 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004914:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a18      	ldr	r2, [pc, #96]	@ (800497c <HAL_TIM_PWM_Start+0x138>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d00e      	beq.n	800493e <HAL_TIM_PWM_Start+0xfa>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004928:	d009      	beq.n	800493e <HAL_TIM_PWM_Start+0xfa>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a14      	ldr	r2, [pc, #80]	@ (8004980 <HAL_TIM_PWM_Start+0x13c>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d004      	beq.n	800493e <HAL_TIM_PWM_Start+0xfa>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a12      	ldr	r2, [pc, #72]	@ (8004984 <HAL_TIM_PWM_Start+0x140>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d111      	bne.n	8004962 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	f003 0307 	and.w	r3, r3, #7
 8004948:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2b06      	cmp	r3, #6
 800494e:	d010      	beq.n	8004972 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f042 0201 	orr.w	r2, r2, #1
 800495e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004960:	e007      	b.n	8004972 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f042 0201 	orr.w	r2, r2, #1
 8004970:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004972:	2300      	movs	r3, #0
}
 8004974:	4618      	mov	r0, r3
 8004976:	3710      	adds	r7, #16
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}
 800497c:	40012c00 	.word	0x40012c00
 8004980:	40000400 	.word	0x40000400
 8004984:	40000800 	.word	0x40000800

08004988 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2200      	movs	r2, #0
 8004998:	6839      	ldr	r1, [r7, #0]
 800499a:	4618      	mov	r0, r3
 800499c:	f000 fd82 	bl	80054a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a29      	ldr	r2, [pc, #164]	@ (8004a4c <HAL_TIM_PWM_Stop+0xc4>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d117      	bne.n	80049da <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	6a1a      	ldr	r2, [r3, #32]
 80049b0:	f241 1311 	movw	r3, #4369	@ 0x1111
 80049b4:	4013      	ands	r3, r2
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d10f      	bne.n	80049da <HAL_TIM_PWM_Stop+0x52>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	6a1a      	ldr	r2, [r3, #32]
 80049c0:	f240 4344 	movw	r3, #1092	@ 0x444
 80049c4:	4013      	ands	r3, r2
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d107      	bne.n	80049da <HAL_TIM_PWM_Stop+0x52>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80049d8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	6a1a      	ldr	r2, [r3, #32]
 80049e0:	f241 1311 	movw	r3, #4369	@ 0x1111
 80049e4:	4013      	ands	r3, r2
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d10f      	bne.n	8004a0a <HAL_TIM_PWM_Stop+0x82>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	6a1a      	ldr	r2, [r3, #32]
 80049f0:	f240 4344 	movw	r3, #1092	@ 0x444
 80049f4:	4013      	ands	r3, r2
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d107      	bne.n	8004a0a <HAL_TIM_PWM_Stop+0x82>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f022 0201 	bic.w	r2, r2, #1
 8004a08:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d104      	bne.n	8004a1a <HAL_TIM_PWM_Stop+0x92>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a18:	e013      	b.n	8004a42 <HAL_TIM_PWM_Stop+0xba>
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	2b04      	cmp	r3, #4
 8004a1e:	d104      	bne.n	8004a2a <HAL_TIM_PWM_Stop+0xa2>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a28:	e00b      	b.n	8004a42 <HAL_TIM_PWM_Stop+0xba>
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	2b08      	cmp	r3, #8
 8004a2e:	d104      	bne.n	8004a3a <HAL_TIM_PWM_Stop+0xb2>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a38:	e003      	b.n	8004a42 <HAL_TIM_PWM_Stop+0xba>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8004a42:	2300      	movs	r3, #0
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3708      	adds	r7, #8
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	40012c00 	.word	0x40012c00

08004a50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	f003 0302 	and.w	r3, r3, #2
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d020      	beq.n	8004ab4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f003 0302 	and.w	r3, r3, #2
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d01b      	beq.n	8004ab4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f06f 0202 	mvn.w	r2, #2
 8004a84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	f003 0303 	and.w	r3, r3, #3
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d003      	beq.n	8004aa2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 fa5a 	bl	8004f54 <HAL_TIM_IC_CaptureCallback>
 8004aa0:	e005      	b.n	8004aae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 fa4d 	bl	8004f42 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 fa5c 	bl	8004f66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	f003 0304 	and.w	r3, r3, #4
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d020      	beq.n	8004b00 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f003 0304 	and.w	r3, r3, #4
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d01b      	beq.n	8004b00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f06f 0204 	mvn.w	r2, #4
 8004ad0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2202      	movs	r2, #2
 8004ad6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	699b      	ldr	r3, [r3, #24]
 8004ade:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d003      	beq.n	8004aee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 fa34 	bl	8004f54 <HAL_TIM_IC_CaptureCallback>
 8004aec:	e005      	b.n	8004afa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 fa27 	bl	8004f42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 fa36 	bl	8004f66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	f003 0308 	and.w	r3, r3, #8
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d020      	beq.n	8004b4c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f003 0308 	and.w	r3, r3, #8
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d01b      	beq.n	8004b4c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f06f 0208 	mvn.w	r2, #8
 8004b1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2204      	movs	r2, #4
 8004b22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	69db      	ldr	r3, [r3, #28]
 8004b2a:	f003 0303 	and.w	r3, r3, #3
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d003      	beq.n	8004b3a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 fa0e 	bl	8004f54 <HAL_TIM_IC_CaptureCallback>
 8004b38:	e005      	b.n	8004b46 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 fa01 	bl	8004f42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f000 fa10 	bl	8004f66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	f003 0310 	and.w	r3, r3, #16
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d020      	beq.n	8004b98 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f003 0310 	and.w	r3, r3, #16
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d01b      	beq.n	8004b98 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f06f 0210 	mvn.w	r2, #16
 8004b68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2208      	movs	r2, #8
 8004b6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	69db      	ldr	r3, [r3, #28]
 8004b76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d003      	beq.n	8004b86 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 f9e8 	bl	8004f54 <HAL_TIM_IC_CaptureCallback>
 8004b84:	e005      	b.n	8004b92 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 f9db 	bl	8004f42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f000 f9ea 	bl	8004f66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	f003 0301 	and.w	r3, r3, #1
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00c      	beq.n	8004bbc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f003 0301 	and.w	r3, r3, #1
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d007      	beq.n	8004bbc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f06f 0201 	mvn.w	r2, #1
 8004bb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f7fd f858 	bl	8001c6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d00c      	beq.n	8004be0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d007      	beq.n	8004be0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004bd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f000 fced 	bl	80055ba <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00c      	beq.n	8004c04 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d007      	beq.n	8004c04 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 f9ba 	bl	8004f78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	f003 0320 	and.w	r3, r3, #32
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d00c      	beq.n	8004c28 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f003 0320 	and.w	r3, r3, #32
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d007      	beq.n	8004c28 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f06f 0220 	mvn.w	r2, #32
 8004c20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 fcc0 	bl	80055a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c28:	bf00      	nop
 8004c2a:	3710      	adds	r7, #16
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b086      	sub	sp, #24
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	60b9      	str	r1, [r7, #8]
 8004c3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d101      	bne.n	8004c4e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c4a:	2302      	movs	r3, #2
 8004c4c:	e0ae      	b.n	8004dac <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2201      	movs	r2, #1
 8004c52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2b0c      	cmp	r3, #12
 8004c5a:	f200 809f 	bhi.w	8004d9c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004c5e:	a201      	add	r2, pc, #4	@ (adr r2, 8004c64 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c64:	08004c99 	.word	0x08004c99
 8004c68:	08004d9d 	.word	0x08004d9d
 8004c6c:	08004d9d 	.word	0x08004d9d
 8004c70:	08004d9d 	.word	0x08004d9d
 8004c74:	08004cd9 	.word	0x08004cd9
 8004c78:	08004d9d 	.word	0x08004d9d
 8004c7c:	08004d9d 	.word	0x08004d9d
 8004c80:	08004d9d 	.word	0x08004d9d
 8004c84:	08004d1b 	.word	0x08004d1b
 8004c88:	08004d9d 	.word	0x08004d9d
 8004c8c:	08004d9d 	.word	0x08004d9d
 8004c90:	08004d9d 	.word	0x08004d9d
 8004c94:	08004d5b 	.word	0x08004d5b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68b9      	ldr	r1, [r7, #8]
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f000 f9e2 	bl	8005068 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	699a      	ldr	r2, [r3, #24]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f042 0208 	orr.w	r2, r2, #8
 8004cb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	699a      	ldr	r2, [r3, #24]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f022 0204 	bic.w	r2, r2, #4
 8004cc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	6999      	ldr	r1, [r3, #24]
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	691a      	ldr	r2, [r3, #16]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	430a      	orrs	r2, r1
 8004cd4:	619a      	str	r2, [r3, #24]
      break;
 8004cd6:	e064      	b.n	8004da2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68b9      	ldr	r1, [r7, #8]
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f000 fa28 	bl	8005134 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	699a      	ldr	r2, [r3, #24]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004cf2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	699a      	ldr	r2, [r3, #24]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	6999      	ldr	r1, [r3, #24]
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	021a      	lsls	r2, r3, #8
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	430a      	orrs	r2, r1
 8004d16:	619a      	str	r2, [r3, #24]
      break;
 8004d18:	e043      	b.n	8004da2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68b9      	ldr	r1, [r7, #8]
 8004d20:	4618      	mov	r0, r3
 8004d22:	f000 fa71 	bl	8005208 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	69da      	ldr	r2, [r3, #28]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f042 0208 	orr.w	r2, r2, #8
 8004d34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	69da      	ldr	r2, [r3, #28]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f022 0204 	bic.w	r2, r2, #4
 8004d44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	69d9      	ldr	r1, [r3, #28]
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	691a      	ldr	r2, [r3, #16]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	430a      	orrs	r2, r1
 8004d56:	61da      	str	r2, [r3, #28]
      break;
 8004d58:	e023      	b.n	8004da2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68b9      	ldr	r1, [r7, #8]
 8004d60:	4618      	mov	r0, r3
 8004d62:	f000 fabb 	bl	80052dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	69da      	ldr	r2, [r3, #28]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	69da      	ldr	r2, [r3, #28]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	69d9      	ldr	r1, [r3, #28]
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	021a      	lsls	r2, r3, #8
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	430a      	orrs	r2, r1
 8004d98:	61da      	str	r2, [r3, #28]
      break;
 8004d9a:	e002      	b.n	8004da2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	75fb      	strb	r3, [r7, #23]
      break;
 8004da0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004daa:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3718      	adds	r7, #24
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d101      	bne.n	8004dd0 <HAL_TIM_ConfigClockSource+0x1c>
 8004dcc:	2302      	movs	r3, #2
 8004dce:	e0b4      	b.n	8004f3a <HAL_TIM_ConfigClockSource+0x186>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2202      	movs	r2, #2
 8004ddc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004dee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004df6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68ba      	ldr	r2, [r7, #8]
 8004dfe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e08:	d03e      	beq.n	8004e88 <HAL_TIM_ConfigClockSource+0xd4>
 8004e0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e0e:	f200 8087 	bhi.w	8004f20 <HAL_TIM_ConfigClockSource+0x16c>
 8004e12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e16:	f000 8086 	beq.w	8004f26 <HAL_TIM_ConfigClockSource+0x172>
 8004e1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e1e:	d87f      	bhi.n	8004f20 <HAL_TIM_ConfigClockSource+0x16c>
 8004e20:	2b70      	cmp	r3, #112	@ 0x70
 8004e22:	d01a      	beq.n	8004e5a <HAL_TIM_ConfigClockSource+0xa6>
 8004e24:	2b70      	cmp	r3, #112	@ 0x70
 8004e26:	d87b      	bhi.n	8004f20 <HAL_TIM_ConfigClockSource+0x16c>
 8004e28:	2b60      	cmp	r3, #96	@ 0x60
 8004e2a:	d050      	beq.n	8004ece <HAL_TIM_ConfigClockSource+0x11a>
 8004e2c:	2b60      	cmp	r3, #96	@ 0x60
 8004e2e:	d877      	bhi.n	8004f20 <HAL_TIM_ConfigClockSource+0x16c>
 8004e30:	2b50      	cmp	r3, #80	@ 0x50
 8004e32:	d03c      	beq.n	8004eae <HAL_TIM_ConfigClockSource+0xfa>
 8004e34:	2b50      	cmp	r3, #80	@ 0x50
 8004e36:	d873      	bhi.n	8004f20 <HAL_TIM_ConfigClockSource+0x16c>
 8004e38:	2b40      	cmp	r3, #64	@ 0x40
 8004e3a:	d058      	beq.n	8004eee <HAL_TIM_ConfigClockSource+0x13a>
 8004e3c:	2b40      	cmp	r3, #64	@ 0x40
 8004e3e:	d86f      	bhi.n	8004f20 <HAL_TIM_ConfigClockSource+0x16c>
 8004e40:	2b30      	cmp	r3, #48	@ 0x30
 8004e42:	d064      	beq.n	8004f0e <HAL_TIM_ConfigClockSource+0x15a>
 8004e44:	2b30      	cmp	r3, #48	@ 0x30
 8004e46:	d86b      	bhi.n	8004f20 <HAL_TIM_ConfigClockSource+0x16c>
 8004e48:	2b20      	cmp	r3, #32
 8004e4a:	d060      	beq.n	8004f0e <HAL_TIM_ConfigClockSource+0x15a>
 8004e4c:	2b20      	cmp	r3, #32
 8004e4e:	d867      	bhi.n	8004f20 <HAL_TIM_ConfigClockSource+0x16c>
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d05c      	beq.n	8004f0e <HAL_TIM_ConfigClockSource+0x15a>
 8004e54:	2b10      	cmp	r3, #16
 8004e56:	d05a      	beq.n	8004f0e <HAL_TIM_ConfigClockSource+0x15a>
 8004e58:	e062      	b.n	8004f20 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e6a:	f000 fafc 	bl	8005466 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004e7c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	68ba      	ldr	r2, [r7, #8]
 8004e84:	609a      	str	r2, [r3, #8]
      break;
 8004e86:	e04f      	b.n	8004f28 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e98:	f000 fae5 	bl	8005466 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	689a      	ldr	r2, [r3, #8]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004eaa:	609a      	str	r2, [r3, #8]
      break;
 8004eac:	e03c      	b.n	8004f28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eba:	461a      	mov	r2, r3
 8004ebc:	f000 fa5c 	bl	8005378 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2150      	movs	r1, #80	@ 0x50
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f000 fab3 	bl	8005432 <TIM_ITRx_SetConfig>
      break;
 8004ecc:	e02c      	b.n	8004f28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004eda:	461a      	mov	r2, r3
 8004edc:	f000 fa7a 	bl	80053d4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2160      	movs	r1, #96	@ 0x60
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f000 faa3 	bl	8005432 <TIM_ITRx_SetConfig>
      break;
 8004eec:	e01c      	b.n	8004f28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004efa:	461a      	mov	r2, r3
 8004efc:	f000 fa3c 	bl	8005378 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	2140      	movs	r1, #64	@ 0x40
 8004f06:	4618      	mov	r0, r3
 8004f08:	f000 fa93 	bl	8005432 <TIM_ITRx_SetConfig>
      break;
 8004f0c:	e00c      	b.n	8004f28 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4619      	mov	r1, r3
 8004f18:	4610      	mov	r0, r2
 8004f1a:	f000 fa8a 	bl	8005432 <TIM_ITRx_SetConfig>
      break;
 8004f1e:	e003      	b.n	8004f28 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	73fb      	strb	r3, [r7, #15]
      break;
 8004f24:	e000      	b.n	8004f28 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004f26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3710      	adds	r7, #16
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}

08004f42 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f42:	b480      	push	{r7}
 8004f44:	b083      	sub	sp, #12
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f4a:	bf00      	nop
 8004f4c:	370c      	adds	r7, #12
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bc80      	pop	{r7}
 8004f52:	4770      	bx	lr

08004f54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f5c:	bf00      	nop
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bc80      	pop	{r7}
 8004f64:	4770      	bx	lr

08004f66 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f66:	b480      	push	{r7}
 8004f68:	b083      	sub	sp, #12
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f6e:	bf00      	nop
 8004f70:	370c      	adds	r7, #12
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bc80      	pop	{r7}
 8004f76:	4770      	bx	lr

08004f78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f80:	bf00      	nop
 8004f82:	370c      	adds	r7, #12
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bc80      	pop	{r7}
 8004f88:	4770      	bx	lr
	...

08004f8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b085      	sub	sp, #20
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4a2f      	ldr	r2, [pc, #188]	@ (800505c <TIM_Base_SetConfig+0xd0>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d00b      	beq.n	8004fbc <TIM_Base_SetConfig+0x30>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004faa:	d007      	beq.n	8004fbc <TIM_Base_SetConfig+0x30>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4a2c      	ldr	r2, [pc, #176]	@ (8005060 <TIM_Base_SetConfig+0xd4>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d003      	beq.n	8004fbc <TIM_Base_SetConfig+0x30>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4a2b      	ldr	r2, [pc, #172]	@ (8005064 <TIM_Base_SetConfig+0xd8>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d108      	bne.n	8004fce <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a22      	ldr	r2, [pc, #136]	@ (800505c <TIM_Base_SetConfig+0xd0>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d00b      	beq.n	8004fee <TIM_Base_SetConfig+0x62>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fdc:	d007      	beq.n	8004fee <TIM_Base_SetConfig+0x62>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a1f      	ldr	r2, [pc, #124]	@ (8005060 <TIM_Base_SetConfig+0xd4>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d003      	beq.n	8004fee <TIM_Base_SetConfig+0x62>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a1e      	ldr	r2, [pc, #120]	@ (8005064 <TIM_Base_SetConfig+0xd8>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d108      	bne.n	8005000 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ff4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	68fa      	ldr	r2, [r7, #12]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	695b      	ldr	r3, [r3, #20]
 800500a:	4313      	orrs	r3, r2
 800500c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	68fa      	ldr	r2, [r7, #12]
 8005012:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	689a      	ldr	r2, [r3, #8]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a0d      	ldr	r2, [pc, #52]	@ (800505c <TIM_Base_SetConfig+0xd0>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d103      	bne.n	8005034 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	691a      	ldr	r2, [r3, #16]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	691b      	ldr	r3, [r3, #16]
 800503e:	f003 0301 	and.w	r3, r3, #1
 8005042:	2b00      	cmp	r3, #0
 8005044:	d005      	beq.n	8005052 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	f023 0201 	bic.w	r2, r3, #1
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	611a      	str	r2, [r3, #16]
  }
}
 8005052:	bf00      	nop
 8005054:	3714      	adds	r7, #20
 8005056:	46bd      	mov	sp, r7
 8005058:	bc80      	pop	{r7}
 800505a:	4770      	bx	lr
 800505c:	40012c00 	.word	0x40012c00
 8005060:	40000400 	.word	0x40000400
 8005064:	40000800 	.word	0x40000800

08005068 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005068:	b480      	push	{r7}
 800506a:	b087      	sub	sp, #28
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a1b      	ldr	r3, [r3, #32]
 800507c:	f023 0201 	bic.w	r2, r3, #1
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	699b      	ldr	r3, [r3, #24]
 800508e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005096:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f023 0303 	bic.w	r3, r3, #3
 800509e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	68fa      	ldr	r2, [r7, #12]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	f023 0302 	bic.w	r3, r3, #2
 80050b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	697a      	ldr	r2, [r7, #20]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a1c      	ldr	r2, [pc, #112]	@ (8005130 <TIM_OC1_SetConfig+0xc8>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d10c      	bne.n	80050de <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	f023 0308 	bic.w	r3, r3, #8
 80050ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	697a      	ldr	r2, [r7, #20]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	f023 0304 	bic.w	r3, r3, #4
 80050dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a13      	ldr	r2, [pc, #76]	@ (8005130 <TIM_OC1_SetConfig+0xc8>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d111      	bne.n	800510a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80050ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80050f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	695b      	ldr	r3, [r3, #20]
 80050fa:	693a      	ldr	r2, [r7, #16]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	699b      	ldr	r3, [r3, #24]
 8005104:	693a      	ldr	r2, [r7, #16]
 8005106:	4313      	orrs	r3, r2
 8005108:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	693a      	ldr	r2, [r7, #16]
 800510e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	68fa      	ldr	r2, [r7, #12]
 8005114:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	685a      	ldr	r2, [r3, #4]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	697a      	ldr	r2, [r7, #20]
 8005122:	621a      	str	r2, [r3, #32]
}
 8005124:	bf00      	nop
 8005126:	371c      	adds	r7, #28
 8005128:	46bd      	mov	sp, r7
 800512a:	bc80      	pop	{r7}
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop
 8005130:	40012c00 	.word	0x40012c00

08005134 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005134:	b480      	push	{r7}
 8005136:	b087      	sub	sp, #28
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a1b      	ldr	r3, [r3, #32]
 8005142:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a1b      	ldr	r3, [r3, #32]
 8005148:	f023 0210 	bic.w	r2, r3, #16
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005162:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800516a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	021b      	lsls	r3, r3, #8
 8005172:	68fa      	ldr	r2, [r7, #12]
 8005174:	4313      	orrs	r3, r2
 8005176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	f023 0320 	bic.w	r3, r3, #32
 800517e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	011b      	lsls	r3, r3, #4
 8005186:	697a      	ldr	r2, [r7, #20]
 8005188:	4313      	orrs	r3, r2
 800518a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a1d      	ldr	r2, [pc, #116]	@ (8005204 <TIM_OC2_SetConfig+0xd0>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d10d      	bne.n	80051b0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800519a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	011b      	lsls	r3, r3, #4
 80051a2:	697a      	ldr	r2, [r7, #20]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4a14      	ldr	r2, [pc, #80]	@ (8005204 <TIM_OC2_SetConfig+0xd0>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d113      	bne.n	80051e0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80051be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80051c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	695b      	ldr	r3, [r3, #20]
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	693a      	ldr	r2, [r7, #16]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	699b      	ldr	r3, [r3, #24]
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	693a      	ldr	r2, [r7, #16]
 80051dc:	4313      	orrs	r3, r2
 80051de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	693a      	ldr	r2, [r7, #16]
 80051e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	68fa      	ldr	r2, [r7, #12]
 80051ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	685a      	ldr	r2, [r3, #4]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	697a      	ldr	r2, [r7, #20]
 80051f8:	621a      	str	r2, [r3, #32]
}
 80051fa:	bf00      	nop
 80051fc:	371c      	adds	r7, #28
 80051fe:	46bd      	mov	sp, r7
 8005200:	bc80      	pop	{r7}
 8005202:	4770      	bx	lr
 8005204:	40012c00 	.word	0x40012c00

08005208 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005208:	b480      	push	{r7}
 800520a:	b087      	sub	sp, #28
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a1b      	ldr	r3, [r3, #32]
 8005216:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a1b      	ldr	r3, [r3, #32]
 800521c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	69db      	ldr	r3, [r3, #28]
 800522e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f023 0303 	bic.w	r3, r3, #3
 800523e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	68fa      	ldr	r2, [r7, #12]
 8005246:	4313      	orrs	r3, r2
 8005248:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005250:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	021b      	lsls	r3, r3, #8
 8005258:	697a      	ldr	r2, [r7, #20]
 800525a:	4313      	orrs	r3, r2
 800525c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a1d      	ldr	r2, [pc, #116]	@ (80052d8 <TIM_OC3_SetConfig+0xd0>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d10d      	bne.n	8005282 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800526c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	021b      	lsls	r3, r3, #8
 8005274:	697a      	ldr	r2, [r7, #20]
 8005276:	4313      	orrs	r3, r2
 8005278:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005280:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a14      	ldr	r2, [pc, #80]	@ (80052d8 <TIM_OC3_SetConfig+0xd0>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d113      	bne.n	80052b2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005290:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005298:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	695b      	ldr	r3, [r3, #20]
 800529e:	011b      	lsls	r3, r3, #4
 80052a0:	693a      	ldr	r2, [r7, #16]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	011b      	lsls	r3, r3, #4
 80052ac:	693a      	ldr	r2, [r7, #16]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	693a      	ldr	r2, [r7, #16]
 80052b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	68fa      	ldr	r2, [r7, #12]
 80052bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	685a      	ldr	r2, [r3, #4]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	697a      	ldr	r2, [r7, #20]
 80052ca:	621a      	str	r2, [r3, #32]
}
 80052cc:	bf00      	nop
 80052ce:	371c      	adds	r7, #28
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bc80      	pop	{r7}
 80052d4:	4770      	bx	lr
 80052d6:	bf00      	nop
 80052d8:	40012c00 	.word	0x40012c00

080052dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052dc:	b480      	push	{r7}
 80052de:	b087      	sub	sp, #28
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a1b      	ldr	r3, [r3, #32]
 80052ea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6a1b      	ldr	r3, [r3, #32]
 80052f0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	69db      	ldr	r3, [r3, #28]
 8005302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800530a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005312:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	021b      	lsls	r3, r3, #8
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	4313      	orrs	r3, r2
 800531e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005326:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	031b      	lsls	r3, r3, #12
 800532e:	693a      	ldr	r2, [r7, #16]
 8005330:	4313      	orrs	r3, r2
 8005332:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a0f      	ldr	r2, [pc, #60]	@ (8005374 <TIM_OC4_SetConfig+0x98>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d109      	bne.n	8005350 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005342:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	695b      	ldr	r3, [r3, #20]
 8005348:	019b      	lsls	r3, r3, #6
 800534a:	697a      	ldr	r2, [r7, #20]
 800534c:	4313      	orrs	r3, r2
 800534e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	697a      	ldr	r2, [r7, #20]
 8005354:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	68fa      	ldr	r2, [r7, #12]
 800535a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	685a      	ldr	r2, [r3, #4]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	693a      	ldr	r2, [r7, #16]
 8005368:	621a      	str	r2, [r3, #32]
}
 800536a:	bf00      	nop
 800536c:	371c      	adds	r7, #28
 800536e:	46bd      	mov	sp, r7
 8005370:	bc80      	pop	{r7}
 8005372:	4770      	bx	lr
 8005374:	40012c00 	.word	0x40012c00

08005378 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005378:	b480      	push	{r7}
 800537a:	b087      	sub	sp, #28
 800537c:	af00      	add	r7, sp, #0
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	60b9      	str	r1, [r7, #8]
 8005382:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6a1b      	ldr	r3, [r3, #32]
 8005388:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	6a1b      	ldr	r3, [r3, #32]
 800538e:	f023 0201 	bic.w	r2, r3, #1
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	699b      	ldr	r3, [r3, #24]
 800539a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80053a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	011b      	lsls	r3, r3, #4
 80053a8:	693a      	ldr	r2, [r7, #16]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	f023 030a 	bic.w	r3, r3, #10
 80053b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053b6:	697a      	ldr	r2, [r7, #20]
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	693a      	ldr	r2, [r7, #16]
 80053c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	697a      	ldr	r2, [r7, #20]
 80053c8:	621a      	str	r2, [r3, #32]
}
 80053ca:	bf00      	nop
 80053cc:	371c      	adds	r7, #28
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bc80      	pop	{r7}
 80053d2:	4770      	bx	lr

080053d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b087      	sub	sp, #28
 80053d8:	af00      	add	r7, sp, #0
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	60b9      	str	r1, [r7, #8]
 80053de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6a1b      	ldr	r3, [r3, #32]
 80053e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6a1b      	ldr	r3, [r3, #32]
 80053ea:	f023 0210 	bic.w	r2, r3, #16
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	699b      	ldr	r3, [r3, #24]
 80053f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80053fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	031b      	lsls	r3, r3, #12
 8005404:	693a      	ldr	r2, [r7, #16]
 8005406:	4313      	orrs	r3, r2
 8005408:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005410:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	011b      	lsls	r3, r3, #4
 8005416:	697a      	ldr	r2, [r7, #20]
 8005418:	4313      	orrs	r3, r2
 800541a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	693a      	ldr	r2, [r7, #16]
 8005420:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	697a      	ldr	r2, [r7, #20]
 8005426:	621a      	str	r2, [r3, #32]
}
 8005428:	bf00      	nop
 800542a:	371c      	adds	r7, #28
 800542c:	46bd      	mov	sp, r7
 800542e:	bc80      	pop	{r7}
 8005430:	4770      	bx	lr

08005432 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005432:	b480      	push	{r7}
 8005434:	b085      	sub	sp, #20
 8005436:	af00      	add	r7, sp, #0
 8005438:	6078      	str	r0, [r7, #4]
 800543a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005448:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800544a:	683a      	ldr	r2, [r7, #0]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	4313      	orrs	r3, r2
 8005450:	f043 0307 	orr.w	r3, r3, #7
 8005454:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	609a      	str	r2, [r3, #8]
}
 800545c:	bf00      	nop
 800545e:	3714      	adds	r7, #20
 8005460:	46bd      	mov	sp, r7
 8005462:	bc80      	pop	{r7}
 8005464:	4770      	bx	lr

08005466 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005466:	b480      	push	{r7}
 8005468:	b087      	sub	sp, #28
 800546a:	af00      	add	r7, sp, #0
 800546c:	60f8      	str	r0, [r7, #12]
 800546e:	60b9      	str	r1, [r7, #8]
 8005470:	607a      	str	r2, [r7, #4]
 8005472:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005480:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	021a      	lsls	r2, r3, #8
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	431a      	orrs	r2, r3
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	4313      	orrs	r3, r2
 800548e:	697a      	ldr	r2, [r7, #20]
 8005490:	4313      	orrs	r3, r2
 8005492:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	697a      	ldr	r2, [r7, #20]
 8005498:	609a      	str	r2, [r3, #8]
}
 800549a:	bf00      	nop
 800549c:	371c      	adds	r7, #28
 800549e:	46bd      	mov	sp, r7
 80054a0:	bc80      	pop	{r7}
 80054a2:	4770      	bx	lr

080054a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b087      	sub	sp, #28
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	f003 031f 	and.w	r3, r3, #31
 80054b6:	2201      	movs	r2, #1
 80054b8:	fa02 f303 	lsl.w	r3, r2, r3
 80054bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6a1a      	ldr	r2, [r3, #32]
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	43db      	mvns	r3, r3
 80054c6:	401a      	ands	r2, r3
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6a1a      	ldr	r2, [r3, #32]
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	f003 031f 	and.w	r3, r3, #31
 80054d6:	6879      	ldr	r1, [r7, #4]
 80054d8:	fa01 f303 	lsl.w	r3, r1, r3
 80054dc:	431a      	orrs	r2, r3
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	621a      	str	r2, [r3, #32]
}
 80054e2:	bf00      	nop
 80054e4:	371c      	adds	r7, #28
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bc80      	pop	{r7}
 80054ea:	4770      	bx	lr

080054ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b085      	sub	sp, #20
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d101      	bne.n	8005504 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005500:	2302      	movs	r3, #2
 8005502:	e046      	b.n	8005592 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2202      	movs	r2, #2
 8005510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800552a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	4313      	orrs	r3, r2
 8005534:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	68fa      	ldr	r2, [r7, #12]
 800553c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a16      	ldr	r2, [pc, #88]	@ (800559c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d00e      	beq.n	8005566 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005550:	d009      	beq.n	8005566 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a12      	ldr	r2, [pc, #72]	@ (80055a0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d004      	beq.n	8005566 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a10      	ldr	r2, [pc, #64]	@ (80055a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d10c      	bne.n	8005580 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800556c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	68ba      	ldr	r2, [r7, #8]
 8005574:	4313      	orrs	r3, r2
 8005576:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68ba      	ldr	r2, [r7, #8]
 800557e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005590:	2300      	movs	r3, #0
}
 8005592:	4618      	mov	r0, r3
 8005594:	3714      	adds	r7, #20
 8005596:	46bd      	mov	sp, r7
 8005598:	bc80      	pop	{r7}
 800559a:	4770      	bx	lr
 800559c:	40012c00 	.word	0x40012c00
 80055a0:	40000400 	.word	0x40000400
 80055a4:	40000800 	.word	0x40000800

080055a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055b0:	bf00      	nop
 80055b2:	370c      	adds	r7, #12
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bc80      	pop	{r7}
 80055b8:	4770      	bx	lr

080055ba <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055ba:	b480      	push	{r7}
 80055bc:	b083      	sub	sp, #12
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055c2:	bf00      	nop
 80055c4:	370c      	adds	r7, #12
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bc80      	pop	{r7}
 80055ca:	4770      	bx	lr

080055cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d101      	bne.n	80055de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e042      	b.n	8005664 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d106      	bne.n	80055f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f7fc fc32 	bl	8001e5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2224      	movs	r2, #36	@ 0x24
 80055fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68da      	ldr	r2, [r3, #12]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800560e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f000 fdb7 	bl	8006184 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	691a      	ldr	r2, [r3, #16]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005624:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	695a      	ldr	r2, [r3, #20]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005634:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68da      	ldr	r2, [r3, #12]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005644:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2220      	movs	r2, #32
 8005650:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2220      	movs	r2, #32
 8005658:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005662:	2300      	movs	r3, #0
}
 8005664:	4618      	mov	r0, r3
 8005666:	3708      	adds	r7, #8
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b08a      	sub	sp, #40	@ 0x28
 8005670:	af02      	add	r7, sp, #8
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	603b      	str	r3, [r7, #0]
 8005678:	4613      	mov	r3, r2
 800567a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800567c:	2300      	movs	r3, #0
 800567e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005686:	b2db      	uxtb	r3, r3
 8005688:	2b20      	cmp	r3, #32
 800568a:	d175      	bne.n	8005778 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d002      	beq.n	8005698 <HAL_UART_Transmit+0x2c>
 8005692:	88fb      	ldrh	r3, [r7, #6]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d101      	bne.n	800569c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	e06e      	b.n	800577a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2200      	movs	r2, #0
 80056a0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2221      	movs	r2, #33	@ 0x21
 80056a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056aa:	f7fc fded 	bl	8002288 <HAL_GetTick>
 80056ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	88fa      	ldrh	r2, [r7, #6]
 80056b4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	88fa      	ldrh	r2, [r7, #6]
 80056ba:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056c4:	d108      	bne.n	80056d8 <HAL_UART_Transmit+0x6c>
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d104      	bne.n	80056d8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80056ce:	2300      	movs	r3, #0
 80056d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	61bb      	str	r3, [r7, #24]
 80056d6:	e003      	b.n	80056e0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056dc:	2300      	movs	r3, #0
 80056de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80056e0:	e02e      	b.n	8005740 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	9300      	str	r3, [sp, #0]
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	2200      	movs	r2, #0
 80056ea:	2180      	movs	r1, #128	@ 0x80
 80056ec:	68f8      	ldr	r0, [r7, #12]
 80056ee:	f000 fb1c 	bl	8005d2a <UART_WaitOnFlagUntilTimeout>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d005      	beq.n	8005704 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2220      	movs	r2, #32
 80056fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005700:	2303      	movs	r3, #3
 8005702:	e03a      	b.n	800577a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005704:	69fb      	ldr	r3, [r7, #28]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d10b      	bne.n	8005722 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	881b      	ldrh	r3, [r3, #0]
 800570e:	461a      	mov	r2, r3
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005718:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	3302      	adds	r3, #2
 800571e:	61bb      	str	r3, [r7, #24]
 8005720:	e007      	b.n	8005732 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	781a      	ldrb	r2, [r3, #0]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	3301      	adds	r3, #1
 8005730:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005736:	b29b      	uxth	r3, r3
 8005738:	3b01      	subs	r3, #1
 800573a:	b29a      	uxth	r2, r3
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005744:	b29b      	uxth	r3, r3
 8005746:	2b00      	cmp	r3, #0
 8005748:	d1cb      	bne.n	80056e2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	9300      	str	r3, [sp, #0]
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	2200      	movs	r2, #0
 8005752:	2140      	movs	r1, #64	@ 0x40
 8005754:	68f8      	ldr	r0, [r7, #12]
 8005756:	f000 fae8 	bl	8005d2a <UART_WaitOnFlagUntilTimeout>
 800575a:	4603      	mov	r3, r0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d005      	beq.n	800576c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2220      	movs	r2, #32
 8005764:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005768:	2303      	movs	r3, #3
 800576a:	e006      	b.n	800577a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2220      	movs	r2, #32
 8005770:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005774:	2300      	movs	r3, #0
 8005776:	e000      	b.n	800577a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005778:	2302      	movs	r3, #2
  }
}
 800577a:	4618      	mov	r0, r3
 800577c:	3720      	adds	r7, #32
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}

08005782 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005782:	b580      	push	{r7, lr}
 8005784:	b084      	sub	sp, #16
 8005786:	af00      	add	r7, sp, #0
 8005788:	60f8      	str	r0, [r7, #12]
 800578a:	60b9      	str	r1, [r7, #8]
 800578c:	4613      	mov	r3, r2
 800578e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005796:	b2db      	uxtb	r3, r3
 8005798:	2b20      	cmp	r3, #32
 800579a:	d112      	bne.n	80057c2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d002      	beq.n	80057a8 <HAL_UART_Receive_IT+0x26>
 80057a2:	88fb      	ldrh	r3, [r7, #6]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d101      	bne.n	80057ac <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	e00b      	b.n	80057c4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2200      	movs	r2, #0
 80057b0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80057b2:	88fb      	ldrh	r3, [r7, #6]
 80057b4:	461a      	mov	r2, r3
 80057b6:	68b9      	ldr	r1, [r7, #8]
 80057b8:	68f8      	ldr	r0, [r7, #12]
 80057ba:	f000 fb0f 	bl	8005ddc <UART_Start_Receive_IT>
 80057be:	4603      	mov	r3, r0
 80057c0:	e000      	b.n	80057c4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80057c2:	2302      	movs	r3, #2
  }
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3710      	adds	r7, #16
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}

080057cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b0ba      	sub	sp, #232	@ 0xe8
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	68db      	ldr	r3, [r3, #12]
 80057e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	695b      	ldr	r3, [r3, #20]
 80057ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80057f2:	2300      	movs	r3, #0
 80057f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80057f8:	2300      	movs	r3, #0
 80057fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80057fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005802:	f003 030f 	and.w	r3, r3, #15
 8005806:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800580a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800580e:	2b00      	cmp	r3, #0
 8005810:	d10f      	bne.n	8005832 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005816:	f003 0320 	and.w	r3, r3, #32
 800581a:	2b00      	cmp	r3, #0
 800581c:	d009      	beq.n	8005832 <HAL_UART_IRQHandler+0x66>
 800581e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005822:	f003 0320 	and.w	r3, r3, #32
 8005826:	2b00      	cmp	r3, #0
 8005828:	d003      	beq.n	8005832 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 fbec 	bl	8006008 <UART_Receive_IT>
      return;
 8005830:	e25b      	b.n	8005cea <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005832:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005836:	2b00      	cmp	r3, #0
 8005838:	f000 80de 	beq.w	80059f8 <HAL_UART_IRQHandler+0x22c>
 800583c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005840:	f003 0301 	and.w	r3, r3, #1
 8005844:	2b00      	cmp	r3, #0
 8005846:	d106      	bne.n	8005856 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005848:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800584c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005850:	2b00      	cmp	r3, #0
 8005852:	f000 80d1 	beq.w	80059f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800585a:	f003 0301 	and.w	r3, r3, #1
 800585e:	2b00      	cmp	r3, #0
 8005860:	d00b      	beq.n	800587a <HAL_UART_IRQHandler+0xae>
 8005862:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005866:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800586a:	2b00      	cmp	r3, #0
 800586c:	d005      	beq.n	800587a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005872:	f043 0201 	orr.w	r2, r3, #1
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800587a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800587e:	f003 0304 	and.w	r3, r3, #4
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00b      	beq.n	800589e <HAL_UART_IRQHandler+0xd2>
 8005886:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800588a:	f003 0301 	and.w	r3, r3, #1
 800588e:	2b00      	cmp	r3, #0
 8005890:	d005      	beq.n	800589e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005896:	f043 0202 	orr.w	r2, r3, #2
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800589e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058a2:	f003 0302 	and.w	r3, r3, #2
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d00b      	beq.n	80058c2 <HAL_UART_IRQHandler+0xf6>
 80058aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058ae:	f003 0301 	and.w	r3, r3, #1
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d005      	beq.n	80058c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058ba:	f043 0204 	orr.w	r2, r3, #4
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80058c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058c6:	f003 0308 	and.w	r3, r3, #8
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d011      	beq.n	80058f2 <HAL_UART_IRQHandler+0x126>
 80058ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058d2:	f003 0320 	and.w	r3, r3, #32
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d105      	bne.n	80058e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80058da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058de:	f003 0301 	and.w	r3, r3, #1
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d005      	beq.n	80058f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058ea:	f043 0208 	orr.w	r2, r3, #8
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	f000 81f2 	beq.w	8005ce0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80058fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005900:	f003 0320 	and.w	r3, r3, #32
 8005904:	2b00      	cmp	r3, #0
 8005906:	d008      	beq.n	800591a <HAL_UART_IRQHandler+0x14e>
 8005908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800590c:	f003 0320 	and.w	r3, r3, #32
 8005910:	2b00      	cmp	r3, #0
 8005912:	d002      	beq.n	800591a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f000 fb77 	bl	8006008 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	695b      	ldr	r3, [r3, #20]
 8005920:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005924:	2b00      	cmp	r3, #0
 8005926:	bf14      	ite	ne
 8005928:	2301      	movne	r3, #1
 800592a:	2300      	moveq	r3, #0
 800592c:	b2db      	uxtb	r3, r3
 800592e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005936:	f003 0308 	and.w	r3, r3, #8
 800593a:	2b00      	cmp	r3, #0
 800593c:	d103      	bne.n	8005946 <HAL_UART_IRQHandler+0x17a>
 800593e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005942:	2b00      	cmp	r3, #0
 8005944:	d04f      	beq.n	80059e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 fa81 	bl	8005e4e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	695b      	ldr	r3, [r3, #20]
 8005952:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005956:	2b00      	cmp	r3, #0
 8005958:	d041      	beq.n	80059de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	3314      	adds	r3, #20
 8005960:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005964:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005968:	e853 3f00 	ldrex	r3, [r3]
 800596c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005970:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005974:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005978:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	3314      	adds	r3, #20
 8005982:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005986:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800598a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800598e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005992:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005996:	e841 2300 	strex	r3, r2, [r1]
 800599a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800599e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d1d9      	bne.n	800595a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d013      	beq.n	80059d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059b2:	4a7e      	ldr	r2, [pc, #504]	@ (8005bac <HAL_UART_IRQHandler+0x3e0>)
 80059b4:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059ba:	4618      	mov	r0, r3
 80059bc:	f7fd fa04 	bl	8002dc8 <HAL_DMA_Abort_IT>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d016      	beq.n	80059f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80059d0:	4610      	mov	r0, r2
 80059d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059d4:	e00e      	b.n	80059f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 f993 	bl	8005d02 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059dc:	e00a      	b.n	80059f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 f98f 	bl	8005d02 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059e4:	e006      	b.n	80059f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 f98b 	bl	8005d02 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2200      	movs	r2, #0
 80059f0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80059f2:	e175      	b.n	8005ce0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059f4:	bf00      	nop
    return;
 80059f6:	e173      	b.n	8005ce0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	f040 814f 	bne.w	8005ca0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005a02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a06:	f003 0310 	and.w	r3, r3, #16
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	f000 8148 	beq.w	8005ca0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005a10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a14:	f003 0310 	and.w	r3, r3, #16
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	f000 8141 	beq.w	8005ca0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a1e:	2300      	movs	r3, #0
 8005a20:	60bb      	str	r3, [r7, #8]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	60bb      	str	r3, [r7, #8]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	60bb      	str	r3, [r7, #8]
 8005a32:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	695b      	ldr	r3, [r3, #20]
 8005a3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	f000 80b6 	beq.w	8005bb0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005a50:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	f000 8145 	beq.w	8005ce4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005a5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005a62:	429a      	cmp	r2, r3
 8005a64:	f080 813e 	bcs.w	8005ce4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005a6e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a74:	699b      	ldr	r3, [r3, #24]
 8005a76:	2b20      	cmp	r3, #32
 8005a78:	f000 8088 	beq.w	8005b8c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	330c      	adds	r3, #12
 8005a82:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a86:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005a8a:	e853 3f00 	ldrex	r3, [r3]
 8005a8e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005a92:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005a96:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a9a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	330c      	adds	r3, #12
 8005aa4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005aa8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005aac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005ab4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005ab8:	e841 2300 	strex	r3, r2, [r1]
 8005abc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005ac0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d1d9      	bne.n	8005a7c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	3314      	adds	r3, #20
 8005ace:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ad2:	e853 3f00 	ldrex	r3, [r3]
 8005ad6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005ad8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005ada:	f023 0301 	bic.w	r3, r3, #1
 8005ade:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	3314      	adds	r3, #20
 8005ae8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005aec:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005af0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005af4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005af8:	e841 2300 	strex	r3, r2, [r1]
 8005afc:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005afe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d1e1      	bne.n	8005ac8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	3314      	adds	r3, #20
 8005b0a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b0c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005b0e:	e853 3f00 	ldrex	r3, [r3]
 8005b12:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005b14:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b1a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	3314      	adds	r3, #20
 8005b24:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005b28:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005b2a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b2c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005b2e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005b30:	e841 2300 	strex	r3, r2, [r1]
 8005b34:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005b36:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d1e3      	bne.n	8005b04 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2220      	movs	r2, #32
 8005b40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	330c      	adds	r3, #12
 8005b50:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b54:	e853 3f00 	ldrex	r3, [r3]
 8005b58:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005b5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b5c:	f023 0310 	bic.w	r3, r3, #16
 8005b60:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	330c      	adds	r3, #12
 8005b6a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005b6e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005b70:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b72:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005b74:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005b76:	e841 2300 	strex	r3, r2, [r1]
 8005b7a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005b7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d1e3      	bne.n	8005b4a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b86:	4618      	mov	r0, r3
 8005b88:	f7fd f8e3 	bl	8002d52 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2202      	movs	r2, #2
 8005b90:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	1ad3      	subs	r3, r2, r3
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 f8b6 	bl	8005d14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005ba8:	e09c      	b.n	8005ce4 <HAL_UART_IRQHandler+0x518>
 8005baa:	bf00      	nop
 8005bac:	08005f13 	.word	0x08005f13
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	1ad3      	subs	r3, r2, r3
 8005bbc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	f000 808e 	beq.w	8005ce8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005bcc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	f000 8089 	beq.w	8005ce8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	330c      	adds	r3, #12
 8005bdc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005be0:	e853 3f00 	ldrex	r3, [r3]
 8005be4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005be6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005be8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005bec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	330c      	adds	r3, #12
 8005bf6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005bfa:	647a      	str	r2, [r7, #68]	@ 0x44
 8005bfc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bfe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005c00:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c02:	e841 2300 	strex	r3, r2, [r1]
 8005c06:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005c08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d1e3      	bne.n	8005bd6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	3314      	adds	r3, #20
 8005c14:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c18:	e853 3f00 	ldrex	r3, [r3]
 8005c1c:	623b      	str	r3, [r7, #32]
   return(result);
 8005c1e:	6a3b      	ldr	r3, [r7, #32]
 8005c20:	f023 0301 	bic.w	r3, r3, #1
 8005c24:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	3314      	adds	r3, #20
 8005c2e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005c32:	633a      	str	r2, [r7, #48]	@ 0x30
 8005c34:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c3a:	e841 2300 	strex	r3, r2, [r1]
 8005c3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005c40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d1e3      	bne.n	8005c0e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2220      	movs	r2, #32
 8005c4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	330c      	adds	r3, #12
 8005c5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	e853 3f00 	ldrex	r3, [r3]
 8005c62:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f023 0310 	bic.w	r3, r3, #16
 8005c6a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	330c      	adds	r3, #12
 8005c74:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005c78:	61fa      	str	r2, [r7, #28]
 8005c7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c7c:	69b9      	ldr	r1, [r7, #24]
 8005c7e:	69fa      	ldr	r2, [r7, #28]
 8005c80:	e841 2300 	strex	r3, r2, [r1]
 8005c84:	617b      	str	r3, [r7, #20]
   return(result);
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d1e3      	bne.n	8005c54 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2202      	movs	r2, #2
 8005c90:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005c92:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005c96:	4619      	mov	r1, r3
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f000 f83b 	bl	8005d14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c9e:	e023      	b.n	8005ce8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005ca0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ca4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d009      	beq.n	8005cc0 <HAL_UART_IRQHandler+0x4f4>
 8005cac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d003      	beq.n	8005cc0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f000 f93e 	bl	8005f3a <UART_Transmit_IT>
    return;
 8005cbe:	e014      	b.n	8005cea <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005cc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d00e      	beq.n	8005cea <HAL_UART_IRQHandler+0x51e>
 8005ccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d008      	beq.n	8005cea <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f000 f97d 	bl	8005fd8 <UART_EndTransmit_IT>
    return;
 8005cde:	e004      	b.n	8005cea <HAL_UART_IRQHandler+0x51e>
    return;
 8005ce0:	bf00      	nop
 8005ce2:	e002      	b.n	8005cea <HAL_UART_IRQHandler+0x51e>
      return;
 8005ce4:	bf00      	nop
 8005ce6:	e000      	b.n	8005cea <HAL_UART_IRQHandler+0x51e>
      return;
 8005ce8:	bf00      	nop
  }
}
 8005cea:	37e8      	adds	r7, #232	@ 0xe8
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005cf8:	bf00      	nop
 8005cfa:	370c      	adds	r7, #12
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bc80      	pop	{r7}
 8005d00:	4770      	bx	lr

08005d02 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d02:	b480      	push	{r7}
 8005d04:	b083      	sub	sp, #12
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005d0a:	bf00      	nop
 8005d0c:	370c      	adds	r7, #12
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bc80      	pop	{r7}
 8005d12:	4770      	bx	lr

08005d14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	460b      	mov	r3, r1
 8005d1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005d20:	bf00      	nop
 8005d22:	370c      	adds	r7, #12
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bc80      	pop	{r7}
 8005d28:	4770      	bx	lr

08005d2a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005d2a:	b580      	push	{r7, lr}
 8005d2c:	b086      	sub	sp, #24
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	60f8      	str	r0, [r7, #12]
 8005d32:	60b9      	str	r1, [r7, #8]
 8005d34:	603b      	str	r3, [r7, #0]
 8005d36:	4613      	mov	r3, r2
 8005d38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d3a:	e03b      	b.n	8005db4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d3c:	6a3b      	ldr	r3, [r7, #32]
 8005d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d42:	d037      	beq.n	8005db4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d44:	f7fc faa0 	bl	8002288 <HAL_GetTick>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	1ad3      	subs	r3, r2, r3
 8005d4e:	6a3a      	ldr	r2, [r7, #32]
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d302      	bcc.n	8005d5a <UART_WaitOnFlagUntilTimeout+0x30>
 8005d54:	6a3b      	ldr	r3, [r7, #32]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d101      	bne.n	8005d5e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	e03a      	b.n	8005dd4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	f003 0304 	and.w	r3, r3, #4
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d023      	beq.n	8005db4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	2b80      	cmp	r3, #128	@ 0x80
 8005d70:	d020      	beq.n	8005db4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	2b40      	cmp	r3, #64	@ 0x40
 8005d76:	d01d      	beq.n	8005db4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f003 0308 	and.w	r3, r3, #8
 8005d82:	2b08      	cmp	r3, #8
 8005d84:	d116      	bne.n	8005db4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005d86:	2300      	movs	r3, #0
 8005d88:	617b      	str	r3, [r7, #20]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	617b      	str	r3, [r7, #20]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	617b      	str	r3, [r7, #20]
 8005d9a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d9c:	68f8      	ldr	r0, [r7, #12]
 8005d9e:	f000 f856 	bl	8005e4e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2208      	movs	r2, #8
 8005da6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2200      	movs	r2, #0
 8005dac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	e00f      	b.n	8005dd4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	4013      	ands	r3, r2
 8005dbe:	68ba      	ldr	r2, [r7, #8]
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	bf0c      	ite	eq
 8005dc4:	2301      	moveq	r3, #1
 8005dc6:	2300      	movne	r3, #0
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	461a      	mov	r2, r3
 8005dcc:	79fb      	ldrb	r3, [r7, #7]
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d0b4      	beq.n	8005d3c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005dd2:	2300      	movs	r3, #0
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3718      	adds	r7, #24
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b085      	sub	sp, #20
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	4613      	mov	r3, r2
 8005de8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	68ba      	ldr	r2, [r7, #8]
 8005dee:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	88fa      	ldrh	r2, [r7, #6]
 8005df4:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	88fa      	ldrh	r2, [r7, #6]
 8005dfa:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2222      	movs	r2, #34	@ 0x22
 8005e06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d007      	beq.n	8005e22 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	68da      	ldr	r2, [r3, #12]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e20:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	695a      	ldr	r2, [r3, #20]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f042 0201 	orr.w	r2, r2, #1
 8005e30:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	68da      	ldr	r2, [r3, #12]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f042 0220 	orr.w	r2, r2, #32
 8005e40:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005e42:	2300      	movs	r3, #0
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3714      	adds	r7, #20
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bc80      	pop	{r7}
 8005e4c:	4770      	bx	lr

08005e4e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e4e:	b480      	push	{r7}
 8005e50:	b095      	sub	sp, #84	@ 0x54
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	330c      	adds	r3, #12
 8005e5c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e60:	e853 3f00 	ldrex	r3, [r3]
 8005e64:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e68:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	330c      	adds	r3, #12
 8005e74:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005e76:	643a      	str	r2, [r7, #64]	@ 0x40
 8005e78:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e7a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005e7c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005e7e:	e841 2300 	strex	r3, r2, [r1]
 8005e82:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005e84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d1e5      	bne.n	8005e56 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	3314      	adds	r3, #20
 8005e90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e92:	6a3b      	ldr	r3, [r7, #32]
 8005e94:	e853 3f00 	ldrex	r3, [r3]
 8005e98:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	f023 0301 	bic.w	r3, r3, #1
 8005ea0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	3314      	adds	r3, #20
 8005ea8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005eaa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005eac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005eb0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005eb2:	e841 2300 	strex	r3, r2, [r1]
 8005eb6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d1e5      	bne.n	8005e8a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d119      	bne.n	8005efa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	330c      	adds	r3, #12
 8005ecc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	e853 3f00 	ldrex	r3, [r3]
 8005ed4:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	f023 0310 	bic.w	r3, r3, #16
 8005edc:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	330c      	adds	r3, #12
 8005ee4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ee6:	61ba      	str	r2, [r7, #24]
 8005ee8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eea:	6979      	ldr	r1, [r7, #20]
 8005eec:	69ba      	ldr	r2, [r7, #24]
 8005eee:	e841 2300 	strex	r3, r2, [r1]
 8005ef2:	613b      	str	r3, [r7, #16]
   return(result);
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d1e5      	bne.n	8005ec6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2220      	movs	r2, #32
 8005efe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005f08:	bf00      	nop
 8005f0a:	3754      	adds	r7, #84	@ 0x54
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bc80      	pop	{r7}
 8005f10:	4770      	bx	lr

08005f12 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f12:	b580      	push	{r7, lr}
 8005f14:	b084      	sub	sp, #16
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f1e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2200      	movs	r2, #0
 8005f24:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f2c:	68f8      	ldr	r0, [r7, #12]
 8005f2e:	f7ff fee8 	bl	8005d02 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f32:	bf00      	nop
 8005f34:	3710      	adds	r7, #16
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}

08005f3a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005f3a:	b480      	push	{r7}
 8005f3c:	b085      	sub	sp, #20
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	2b21      	cmp	r3, #33	@ 0x21
 8005f4c:	d13e      	bne.n	8005fcc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f56:	d114      	bne.n	8005f82 <UART_Transmit_IT+0x48>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	691b      	ldr	r3, [r3, #16]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d110      	bne.n	8005f82 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6a1b      	ldr	r3, [r3, #32]
 8005f64:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	881b      	ldrh	r3, [r3, #0]
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f74:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a1b      	ldr	r3, [r3, #32]
 8005f7a:	1c9a      	adds	r2, r3, #2
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	621a      	str	r2, [r3, #32]
 8005f80:	e008      	b.n	8005f94 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6a1b      	ldr	r3, [r3, #32]
 8005f86:	1c59      	adds	r1, r3, #1
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	6211      	str	r1, [r2, #32]
 8005f8c:	781a      	ldrb	r2, [r3, #0]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	3b01      	subs	r3, #1
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d10f      	bne.n	8005fc8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	68da      	ldr	r2, [r3, #12]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005fb6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	68da      	ldr	r2, [r3, #12]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005fc6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	e000      	b.n	8005fce <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005fcc:	2302      	movs	r3, #2
  }
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3714      	adds	r7, #20
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bc80      	pop	{r7}
 8005fd6:	4770      	bx	lr

08005fd8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b082      	sub	sp, #8
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	68da      	ldr	r2, [r3, #12]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005fee:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2220      	movs	r2, #32
 8005ff4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f7ff fe79 	bl	8005cf0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005ffe:	2300      	movs	r3, #0
}
 8006000:	4618      	mov	r0, r3
 8006002:	3708      	adds	r7, #8
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}

08006008 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b08c      	sub	sp, #48	@ 0x30
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006016:	b2db      	uxtb	r3, r3
 8006018:	2b22      	cmp	r3, #34	@ 0x22
 800601a:	f040 80ae 	bne.w	800617a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006026:	d117      	bne.n	8006058 <UART_Receive_IT+0x50>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	691b      	ldr	r3, [r3, #16]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d113      	bne.n	8006058 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006030:	2300      	movs	r3, #0
 8006032:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006038:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	b29b      	uxth	r3, r3
 8006042:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006046:	b29a      	uxth	r2, r3
 8006048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800604a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006050:	1c9a      	adds	r2, r3, #2
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	629a      	str	r2, [r3, #40]	@ 0x28
 8006056:	e026      	b.n	80060a6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800605c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800605e:	2300      	movs	r3, #0
 8006060:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800606a:	d007      	beq.n	800607c <UART_Receive_IT+0x74>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d10a      	bne.n	800608a <UART_Receive_IT+0x82>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	691b      	ldr	r3, [r3, #16]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d106      	bne.n	800608a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	b2da      	uxtb	r2, r3
 8006084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006086:	701a      	strb	r2, [r3, #0]
 8006088:	e008      	b.n	800609c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	b2db      	uxtb	r3, r3
 8006092:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006096:	b2da      	uxtb	r2, r3
 8006098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800609a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060a0:	1c5a      	adds	r2, r3, #1
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	3b01      	subs	r3, #1
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	4619      	mov	r1, r3
 80060b4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d15d      	bne.n	8006176 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	68da      	ldr	r2, [r3, #12]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f022 0220 	bic.w	r2, r2, #32
 80060c8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	68da      	ldr	r2, [r3, #12]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80060d8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	695a      	ldr	r2, [r3, #20]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f022 0201 	bic.w	r2, r2, #1
 80060e8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2220      	movs	r2, #32
 80060ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d135      	bne.n	800616c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	330c      	adds	r3, #12
 800610c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	e853 3f00 	ldrex	r3, [r3]
 8006114:	613b      	str	r3, [r7, #16]
   return(result);
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	f023 0310 	bic.w	r3, r3, #16
 800611c:	627b      	str	r3, [r7, #36]	@ 0x24
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	330c      	adds	r3, #12
 8006124:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006126:	623a      	str	r2, [r7, #32]
 8006128:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800612a:	69f9      	ldr	r1, [r7, #28]
 800612c:	6a3a      	ldr	r2, [r7, #32]
 800612e:	e841 2300 	strex	r3, r2, [r1]
 8006132:	61bb      	str	r3, [r7, #24]
   return(result);
 8006134:	69bb      	ldr	r3, [r7, #24]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d1e5      	bne.n	8006106 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 0310 	and.w	r3, r3, #16
 8006144:	2b10      	cmp	r3, #16
 8006146:	d10a      	bne.n	800615e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006148:	2300      	movs	r3, #0
 800614a:	60fb      	str	r3, [r7, #12]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	60fb      	str	r3, [r7, #12]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	60fb      	str	r3, [r7, #12]
 800615c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006162:	4619      	mov	r1, r3
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f7ff fdd5 	bl	8005d14 <HAL_UARTEx_RxEventCallback>
 800616a:	e002      	b.n	8006172 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f7fb f8e1 	bl	8001334 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006172:	2300      	movs	r3, #0
 8006174:	e002      	b.n	800617c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006176:	2300      	movs	r3, #0
 8006178:	e000      	b.n	800617c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800617a:	2302      	movs	r3, #2
  }
}
 800617c:	4618      	mov	r0, r3
 800617e:	3730      	adds	r7, #48	@ 0x30
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b084      	sub	sp, #16
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	68da      	ldr	r2, [r3, #12]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	430a      	orrs	r2, r1
 80061a0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	689a      	ldr	r2, [r3, #8]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	691b      	ldr	r3, [r3, #16]
 80061aa:	431a      	orrs	r2, r3
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	695b      	ldr	r3, [r3, #20]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80061be:	f023 030c 	bic.w	r3, r3, #12
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	6812      	ldr	r2, [r2, #0]
 80061c6:	68b9      	ldr	r1, [r7, #8]
 80061c8:	430b      	orrs	r3, r1
 80061ca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	695b      	ldr	r3, [r3, #20]
 80061d2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	699a      	ldr	r2, [r3, #24]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	430a      	orrs	r2, r1
 80061e0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a2c      	ldr	r2, [pc, #176]	@ (8006298 <UART_SetConfig+0x114>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d103      	bne.n	80061f4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80061ec:	f7fe f862 	bl	80042b4 <HAL_RCC_GetPCLK2Freq>
 80061f0:	60f8      	str	r0, [r7, #12]
 80061f2:	e002      	b.n	80061fa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80061f4:	f7fe f84a 	bl	800428c <HAL_RCC_GetPCLK1Freq>
 80061f8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80061fa:	68fa      	ldr	r2, [r7, #12]
 80061fc:	4613      	mov	r3, r2
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	4413      	add	r3, r2
 8006202:	009a      	lsls	r2, r3, #2
 8006204:	441a      	add	r2, r3
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	009b      	lsls	r3, r3, #2
 800620c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006210:	4a22      	ldr	r2, [pc, #136]	@ (800629c <UART_SetConfig+0x118>)
 8006212:	fba2 2303 	umull	r2, r3, r2, r3
 8006216:	095b      	lsrs	r3, r3, #5
 8006218:	0119      	lsls	r1, r3, #4
 800621a:	68fa      	ldr	r2, [r7, #12]
 800621c:	4613      	mov	r3, r2
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	4413      	add	r3, r2
 8006222:	009a      	lsls	r2, r3, #2
 8006224:	441a      	add	r2, r3
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006230:	4b1a      	ldr	r3, [pc, #104]	@ (800629c <UART_SetConfig+0x118>)
 8006232:	fba3 0302 	umull	r0, r3, r3, r2
 8006236:	095b      	lsrs	r3, r3, #5
 8006238:	2064      	movs	r0, #100	@ 0x64
 800623a:	fb00 f303 	mul.w	r3, r0, r3
 800623e:	1ad3      	subs	r3, r2, r3
 8006240:	011b      	lsls	r3, r3, #4
 8006242:	3332      	adds	r3, #50	@ 0x32
 8006244:	4a15      	ldr	r2, [pc, #84]	@ (800629c <UART_SetConfig+0x118>)
 8006246:	fba2 2303 	umull	r2, r3, r2, r3
 800624a:	095b      	lsrs	r3, r3, #5
 800624c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006250:	4419      	add	r1, r3
 8006252:	68fa      	ldr	r2, [r7, #12]
 8006254:	4613      	mov	r3, r2
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	4413      	add	r3, r2
 800625a:	009a      	lsls	r2, r3, #2
 800625c:	441a      	add	r2, r3
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	fbb2 f2f3 	udiv	r2, r2, r3
 8006268:	4b0c      	ldr	r3, [pc, #48]	@ (800629c <UART_SetConfig+0x118>)
 800626a:	fba3 0302 	umull	r0, r3, r3, r2
 800626e:	095b      	lsrs	r3, r3, #5
 8006270:	2064      	movs	r0, #100	@ 0x64
 8006272:	fb00 f303 	mul.w	r3, r0, r3
 8006276:	1ad3      	subs	r3, r2, r3
 8006278:	011b      	lsls	r3, r3, #4
 800627a:	3332      	adds	r3, #50	@ 0x32
 800627c:	4a07      	ldr	r2, [pc, #28]	@ (800629c <UART_SetConfig+0x118>)
 800627e:	fba2 2303 	umull	r2, r3, r2, r3
 8006282:	095b      	lsrs	r3, r3, #5
 8006284:	f003 020f 	and.w	r2, r3, #15
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	440a      	add	r2, r1
 800628e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006290:	bf00      	nop
 8006292:	3710      	adds	r7, #16
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}
 8006298:	40013800 	.word	0x40013800
 800629c:	51eb851f 	.word	0x51eb851f

080062a0 <__NVIC_SetPriority>:
{
 80062a0:	b480      	push	{r7}
 80062a2:	b083      	sub	sp, #12
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	4603      	mov	r3, r0
 80062a8:	6039      	str	r1, [r7, #0]
 80062aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80062ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	db0a      	blt.n	80062ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	b2da      	uxtb	r2, r3
 80062b8:	490c      	ldr	r1, [pc, #48]	@ (80062ec <__NVIC_SetPriority+0x4c>)
 80062ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062be:	0112      	lsls	r2, r2, #4
 80062c0:	b2d2      	uxtb	r2, r2
 80062c2:	440b      	add	r3, r1
 80062c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80062c8:	e00a      	b.n	80062e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	b2da      	uxtb	r2, r3
 80062ce:	4908      	ldr	r1, [pc, #32]	@ (80062f0 <__NVIC_SetPriority+0x50>)
 80062d0:	79fb      	ldrb	r3, [r7, #7]
 80062d2:	f003 030f 	and.w	r3, r3, #15
 80062d6:	3b04      	subs	r3, #4
 80062d8:	0112      	lsls	r2, r2, #4
 80062da:	b2d2      	uxtb	r2, r2
 80062dc:	440b      	add	r3, r1
 80062de:	761a      	strb	r2, [r3, #24]
}
 80062e0:	bf00      	nop
 80062e2:	370c      	adds	r7, #12
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bc80      	pop	{r7}
 80062e8:	4770      	bx	lr
 80062ea:	bf00      	nop
 80062ec:	e000e100 	.word	0xe000e100
 80062f0:	e000ed00 	.word	0xe000ed00

080062f4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80062f4:	b580      	push	{r7, lr}
 80062f6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80062f8:	4b05      	ldr	r3, [pc, #20]	@ (8006310 <SysTick_Handler+0x1c>)
 80062fa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80062fc:	f002 faa6 	bl	800884c <xTaskGetSchedulerState>
 8006300:	4603      	mov	r3, r0
 8006302:	2b01      	cmp	r3, #1
 8006304:	d001      	beq.n	800630a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006306:	f003 f947 	bl	8009598 <xPortSysTickHandler>
  }
}
 800630a:	bf00      	nop
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop
 8006310:	e000e010 	.word	0xe000e010

08006314 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006314:	b580      	push	{r7, lr}
 8006316:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006318:	2100      	movs	r1, #0
 800631a:	f06f 0004 	mvn.w	r0, #4
 800631e:	f7ff ffbf 	bl	80062a0 <__NVIC_SetPriority>
#endif
}
 8006322:	bf00      	nop
 8006324:	bd80      	pop	{r7, pc}
	...

08006328 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006328:	b480      	push	{r7}
 800632a:	b083      	sub	sp, #12
 800632c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800632e:	f3ef 8305 	mrs	r3, IPSR
 8006332:	603b      	str	r3, [r7, #0]
  return(result);
 8006334:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006336:	2b00      	cmp	r3, #0
 8006338:	d003      	beq.n	8006342 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800633a:	f06f 0305 	mvn.w	r3, #5
 800633e:	607b      	str	r3, [r7, #4]
 8006340:	e00c      	b.n	800635c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006342:	4b09      	ldr	r3, [pc, #36]	@ (8006368 <osKernelInitialize+0x40>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d105      	bne.n	8006356 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800634a:	4b07      	ldr	r3, [pc, #28]	@ (8006368 <osKernelInitialize+0x40>)
 800634c:	2201      	movs	r2, #1
 800634e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006350:	2300      	movs	r3, #0
 8006352:	607b      	str	r3, [r7, #4]
 8006354:	e002      	b.n	800635c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006356:	f04f 33ff 	mov.w	r3, #4294967295
 800635a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800635c:	687b      	ldr	r3, [r7, #4]
}
 800635e:	4618      	mov	r0, r3
 8006360:	370c      	adds	r7, #12
 8006362:	46bd      	mov	sp, r7
 8006364:	bc80      	pop	{r7}
 8006366:	4770      	bx	lr
 8006368:	200003a4 	.word	0x200003a4

0800636c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800636c:	b580      	push	{r7, lr}
 800636e:	b082      	sub	sp, #8
 8006370:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006372:	f3ef 8305 	mrs	r3, IPSR
 8006376:	603b      	str	r3, [r7, #0]
  return(result);
 8006378:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800637a:	2b00      	cmp	r3, #0
 800637c:	d003      	beq.n	8006386 <osKernelStart+0x1a>
    stat = osErrorISR;
 800637e:	f06f 0305 	mvn.w	r3, #5
 8006382:	607b      	str	r3, [r7, #4]
 8006384:	e010      	b.n	80063a8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006386:	4b0b      	ldr	r3, [pc, #44]	@ (80063b4 <osKernelStart+0x48>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	2b01      	cmp	r3, #1
 800638c:	d109      	bne.n	80063a2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800638e:	f7ff ffc1 	bl	8006314 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006392:	4b08      	ldr	r3, [pc, #32]	@ (80063b4 <osKernelStart+0x48>)
 8006394:	2202      	movs	r2, #2
 8006396:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006398:	f001 fdd8 	bl	8007f4c <vTaskStartScheduler>
      stat = osOK;
 800639c:	2300      	movs	r3, #0
 800639e:	607b      	str	r3, [r7, #4]
 80063a0:	e002      	b.n	80063a8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80063a2:	f04f 33ff 	mov.w	r3, #4294967295
 80063a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80063a8:	687b      	ldr	r3, [r7, #4]
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3708      	adds	r7, #8
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop
 80063b4:	200003a4 	.word	0x200003a4

080063b8 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b082      	sub	sp, #8
 80063bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063be:	f3ef 8305 	mrs	r3, IPSR
 80063c2:	603b      	str	r3, [r7, #0]
  return(result);
 80063c4:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d003      	beq.n	80063d2 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 80063ca:	f001 fee9 	bl	80081a0 <xTaskGetTickCountFromISR>
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	e002      	b.n	80063d8 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 80063d2:	f001 fed7 	bl	8008184 <xTaskGetTickCount>
 80063d6:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 80063d8:	687b      	ldr	r3, [r7, #4]
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3708      	adds	r7, #8
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}

080063e2 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80063e2:	b580      	push	{r7, lr}
 80063e4:	b08e      	sub	sp, #56	@ 0x38
 80063e6:	af04      	add	r7, sp, #16
 80063e8:	60f8      	str	r0, [r7, #12]
 80063ea:	60b9      	str	r1, [r7, #8]
 80063ec:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80063ee:	2300      	movs	r3, #0
 80063f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063f2:	f3ef 8305 	mrs	r3, IPSR
 80063f6:	617b      	str	r3, [r7, #20]
  return(result);
 80063f8:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d17e      	bne.n	80064fc <osThreadNew+0x11a>
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d07b      	beq.n	80064fc <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006404:	2380      	movs	r3, #128	@ 0x80
 8006406:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006408:	2318      	movs	r3, #24
 800640a:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800640c:	2300      	movs	r3, #0
 800640e:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8006410:	f04f 33ff 	mov.w	r3, #4294967295
 8006414:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d045      	beq.n	80064a8 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d002      	beq.n	800642a <osThreadNew+0x48>
        name = attr->name;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	699b      	ldr	r3, [r3, #24]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d002      	beq.n	8006438 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	699b      	ldr	r3, [r3, #24]
 8006436:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d008      	beq.n	8006450 <osThreadNew+0x6e>
 800643e:	69fb      	ldr	r3, [r7, #28]
 8006440:	2b38      	cmp	r3, #56	@ 0x38
 8006442:	d805      	bhi.n	8006450 <osThreadNew+0x6e>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	f003 0301 	and.w	r3, r3, #1
 800644c:	2b00      	cmp	r3, #0
 800644e:	d001      	beq.n	8006454 <osThreadNew+0x72>
        return (NULL);
 8006450:	2300      	movs	r3, #0
 8006452:	e054      	b.n	80064fe <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	695b      	ldr	r3, [r3, #20]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d003      	beq.n	8006464 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	695b      	ldr	r3, [r3, #20]
 8006460:	089b      	lsrs	r3, r3, #2
 8006462:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d00e      	beq.n	800648a <osThreadNew+0xa8>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	2ba7      	cmp	r3, #167	@ 0xa7
 8006472:	d90a      	bls.n	800648a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006478:	2b00      	cmp	r3, #0
 800647a:	d006      	beq.n	800648a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	695b      	ldr	r3, [r3, #20]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d002      	beq.n	800648a <osThreadNew+0xa8>
        mem = 1;
 8006484:	2301      	movs	r3, #1
 8006486:	61bb      	str	r3, [r7, #24]
 8006488:	e010      	b.n	80064ac <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d10c      	bne.n	80064ac <osThreadNew+0xca>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d108      	bne.n	80064ac <osThreadNew+0xca>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	691b      	ldr	r3, [r3, #16]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d104      	bne.n	80064ac <osThreadNew+0xca>
          mem = 0;
 80064a2:	2300      	movs	r3, #0
 80064a4:	61bb      	str	r3, [r7, #24]
 80064a6:	e001      	b.n	80064ac <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80064a8:	2300      	movs	r3, #0
 80064aa:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80064ac:	69bb      	ldr	r3, [r7, #24]
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d110      	bne.n	80064d4 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80064ba:	9202      	str	r2, [sp, #8]
 80064bc:	9301      	str	r3, [sp, #4]
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	9300      	str	r3, [sp, #0]
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	6a3a      	ldr	r2, [r7, #32]
 80064c6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80064c8:	68f8      	ldr	r0, [r7, #12]
 80064ca:	f001 fb01 	bl	8007ad0 <xTaskCreateStatic>
 80064ce:	4603      	mov	r3, r0
 80064d0:	613b      	str	r3, [r7, #16]
 80064d2:	e013      	b.n	80064fc <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80064d4:	69bb      	ldr	r3, [r7, #24]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d110      	bne.n	80064fc <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80064da:	6a3b      	ldr	r3, [r7, #32]
 80064dc:	b29a      	uxth	r2, r3
 80064de:	f107 0310 	add.w	r3, r7, #16
 80064e2:	9301      	str	r3, [sp, #4]
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	9300      	str	r3, [sp, #0]
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80064ec:	68f8      	ldr	r0, [r7, #12]
 80064ee:	f001 fb4f 	bl	8007b90 <xTaskCreate>
 80064f2:	4603      	mov	r3, r0
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d001      	beq.n	80064fc <osThreadNew+0x11a>
            hTask = NULL;
 80064f8:	2300      	movs	r3, #0
 80064fa:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80064fc:	693b      	ldr	r3, [r7, #16]
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3728      	adds	r7, #40	@ 0x28
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}

08006506 <osDelayUntil>:
  }

  return (stat);
}

osStatus_t osDelayUntil (uint32_t ticks) {
 8006506:	b580      	push	{r7, lr}
 8006508:	b086      	sub	sp, #24
 800650a:	af00      	add	r7, sp, #0
 800650c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800650e:	f3ef 8305 	mrs	r3, IPSR
 8006512:	60fb      	str	r3, [r7, #12]
  return(result);
 8006514:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8006516:	2b00      	cmp	r3, #0
 8006518:	d003      	beq.n	8006522 <osDelayUntil+0x1c>
    stat = osErrorISR;
 800651a:	f06f 0305 	mvn.w	r3, #5
 800651e:	617b      	str	r3, [r7, #20]
 8006520:	e019      	b.n	8006556 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 8006522:	2300      	movs	r3, #0
 8006524:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 8006526:	f001 fe2d 	bl	8008184 <xTaskGetTickCount>
 800652a:	4603      	mov	r3, r0
 800652c:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	1ad3      	subs	r3, r2, r3
 8006534:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d009      	beq.n	8006550 <osDelayUntil+0x4a>
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	2b00      	cmp	r3, #0
 8006540:	db06      	blt.n	8006550 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 8006542:	f107 0308 	add.w	r3, r7, #8
 8006546:	6939      	ldr	r1, [r7, #16]
 8006548:	4618      	mov	r0, r3
 800654a:	f001 fc7f 	bl	8007e4c <vTaskDelayUntil>
 800654e:	e002      	b.n	8006556 <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8006550:	f06f 0303 	mvn.w	r3, #3
 8006554:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8006556:	697b      	ldr	r3, [r7, #20]
}
 8006558:	4618      	mov	r0, r3
 800655a:	3718      	adds	r7, #24
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006560:	b580      	push	{r7, lr}
 8006562:	b088      	sub	sp, #32
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8006568:	2300      	movs	r3, #0
 800656a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800656c:	f3ef 8305 	mrs	r3, IPSR
 8006570:	60bb      	str	r3, [r7, #8]
  return(result);
 8006572:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8006574:	2b00      	cmp	r3, #0
 8006576:	d174      	bne.n	8006662 <osMutexNew+0x102>
    if (attr != NULL) {
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d003      	beq.n	8006586 <osMutexNew+0x26>
      type = attr->attr_bits;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	61bb      	str	r3, [r7, #24]
 8006584:	e001      	b.n	800658a <osMutexNew+0x2a>
    } else {
      type = 0U;
 8006586:	2300      	movs	r3, #0
 8006588:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800658a:	69bb      	ldr	r3, [r7, #24]
 800658c:	f003 0301 	and.w	r3, r3, #1
 8006590:	2b00      	cmp	r3, #0
 8006592:	d002      	beq.n	800659a <osMutexNew+0x3a>
      rmtx = 1U;
 8006594:	2301      	movs	r3, #1
 8006596:	617b      	str	r3, [r7, #20]
 8006598:	e001      	b.n	800659e <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800659a:	2300      	movs	r3, #0
 800659c:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	f003 0308 	and.w	r3, r3, #8
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d15c      	bne.n	8006662 <osMutexNew+0x102>
      mem = -1;
 80065a8:	f04f 33ff 	mov.w	r3, #4294967295
 80065ac:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d015      	beq.n	80065e0 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d006      	beq.n	80065ca <osMutexNew+0x6a>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	68db      	ldr	r3, [r3, #12]
 80065c0:	2b4f      	cmp	r3, #79	@ 0x4f
 80065c2:	d902      	bls.n	80065ca <osMutexNew+0x6a>
          mem = 1;
 80065c4:	2301      	movs	r3, #1
 80065c6:	613b      	str	r3, [r7, #16]
 80065c8:	e00c      	b.n	80065e4 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d108      	bne.n	80065e4 <osMutexNew+0x84>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	68db      	ldr	r3, [r3, #12]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d104      	bne.n	80065e4 <osMutexNew+0x84>
            mem = 0;
 80065da:	2300      	movs	r3, #0
 80065dc:	613b      	str	r3, [r7, #16]
 80065de:	e001      	b.n	80065e4 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80065e0:	2300      	movs	r3, #0
 80065e2:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d112      	bne.n	8006610 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d007      	beq.n	8006600 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	4619      	mov	r1, r3
 80065f6:	2004      	movs	r0, #4
 80065f8:	f000 fc4b 	bl	8006e92 <xQueueCreateMutexStatic>
 80065fc:	61f8      	str	r0, [r7, #28]
 80065fe:	e016      	b.n	800662e <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	4619      	mov	r1, r3
 8006606:	2001      	movs	r0, #1
 8006608:	f000 fc43 	bl	8006e92 <xQueueCreateMutexStatic>
 800660c:	61f8      	str	r0, [r7, #28]
 800660e:	e00e      	b.n	800662e <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d10b      	bne.n	800662e <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d004      	beq.n	8006626 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800661c:	2004      	movs	r0, #4
 800661e:	f000 fc20 	bl	8006e62 <xQueueCreateMutex>
 8006622:	61f8      	str	r0, [r7, #28]
 8006624:	e003      	b.n	800662e <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8006626:	2001      	movs	r0, #1
 8006628:	f000 fc1b 	bl	8006e62 <xQueueCreateMutex>
 800662c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800662e:	69fb      	ldr	r3, [r7, #28]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d00c      	beq.n	800664e <osMutexNew+0xee>
        if (attr != NULL) {
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d003      	beq.n	8006642 <osMutexNew+0xe2>
          name = attr->name;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	60fb      	str	r3, [r7, #12]
 8006640:	e001      	b.n	8006646 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8006642:	2300      	movs	r3, #0
 8006644:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8006646:	68f9      	ldr	r1, [r7, #12]
 8006648:	69f8      	ldr	r0, [r7, #28]
 800664a:	f001 f9e5 	bl	8007a18 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800664e:	69fb      	ldr	r3, [r7, #28]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d006      	beq.n	8006662 <osMutexNew+0x102>
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d003      	beq.n	8006662 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800665a:	69fb      	ldr	r3, [r7, #28]
 800665c:	f043 0301 	orr.w	r3, r3, #1
 8006660:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8006662:	69fb      	ldr	r3, [r7, #28]
}
 8006664:	4618      	mov	r0, r3
 8006666:	3720      	adds	r7, #32
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}

0800666c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800666c:	b580      	push	{r7, lr}
 800666e:	b086      	sub	sp, #24
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f023 0301 	bic.w	r3, r3, #1
 800667c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f003 0301 	and.w	r3, r3, #1
 8006684:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8006686:	2300      	movs	r3, #0
 8006688:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800668a:	f3ef 8305 	mrs	r3, IPSR
 800668e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006690:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8006692:	2b00      	cmp	r3, #0
 8006694:	d003      	beq.n	800669e <osMutexAcquire+0x32>
    stat = osErrorISR;
 8006696:	f06f 0305 	mvn.w	r3, #5
 800669a:	617b      	str	r3, [r7, #20]
 800669c:	e02c      	b.n	80066f8 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d103      	bne.n	80066ac <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80066a4:	f06f 0303 	mvn.w	r3, #3
 80066a8:	617b      	str	r3, [r7, #20]
 80066aa:	e025      	b.n	80066f8 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d011      	beq.n	80066d6 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80066b2:	6839      	ldr	r1, [r7, #0]
 80066b4:	6938      	ldr	r0, [r7, #16]
 80066b6:	f000 fc3c 	bl	8006f32 <xQueueTakeMutexRecursive>
 80066ba:	4603      	mov	r3, r0
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d01b      	beq.n	80066f8 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d003      	beq.n	80066ce <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80066c6:	f06f 0301 	mvn.w	r3, #1
 80066ca:	617b      	str	r3, [r7, #20]
 80066cc:	e014      	b.n	80066f8 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80066ce:	f06f 0302 	mvn.w	r3, #2
 80066d2:	617b      	str	r3, [r7, #20]
 80066d4:	e010      	b.n	80066f8 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80066d6:	6839      	ldr	r1, [r7, #0]
 80066d8:	6938      	ldr	r0, [r7, #16]
 80066da:	f000 fee3 	bl	80074a4 <xQueueSemaphoreTake>
 80066de:	4603      	mov	r3, r0
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d009      	beq.n	80066f8 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d003      	beq.n	80066f2 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80066ea:	f06f 0301 	mvn.w	r3, #1
 80066ee:	617b      	str	r3, [r7, #20]
 80066f0:	e002      	b.n	80066f8 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80066f2:	f06f 0302 	mvn.w	r3, #2
 80066f6:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80066f8:	697b      	ldr	r3, [r7, #20]
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3718      	adds	r7, #24
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}

08006702 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006702:	b580      	push	{r7, lr}
 8006704:	b086      	sub	sp, #24
 8006706:	af00      	add	r7, sp, #0
 8006708:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f023 0301 	bic.w	r3, r3, #1
 8006710:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f003 0301 	and.w	r3, r3, #1
 8006718:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800671a:	2300      	movs	r3, #0
 800671c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800671e:	f3ef 8305 	mrs	r3, IPSR
 8006722:	60bb      	str	r3, [r7, #8]
  return(result);
 8006724:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8006726:	2b00      	cmp	r3, #0
 8006728:	d003      	beq.n	8006732 <osMutexRelease+0x30>
    stat = osErrorISR;
 800672a:	f06f 0305 	mvn.w	r3, #5
 800672e:	617b      	str	r3, [r7, #20]
 8006730:	e01f      	b.n	8006772 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d103      	bne.n	8006740 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8006738:	f06f 0303 	mvn.w	r3, #3
 800673c:	617b      	str	r3, [r7, #20]
 800673e:	e018      	b.n	8006772 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d009      	beq.n	800675a <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8006746:	6938      	ldr	r0, [r7, #16]
 8006748:	f000 fbbe 	bl	8006ec8 <xQueueGiveMutexRecursive>
 800674c:	4603      	mov	r3, r0
 800674e:	2b01      	cmp	r3, #1
 8006750:	d00f      	beq.n	8006772 <osMutexRelease+0x70>
        stat = osErrorResource;
 8006752:	f06f 0302 	mvn.w	r3, #2
 8006756:	617b      	str	r3, [r7, #20]
 8006758:	e00b      	b.n	8006772 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800675a:	2300      	movs	r3, #0
 800675c:	2200      	movs	r2, #0
 800675e:	2100      	movs	r1, #0
 8006760:	6938      	ldr	r0, [r7, #16]
 8006762:	f000 fc1d 	bl	8006fa0 <xQueueGenericSend>
 8006766:	4603      	mov	r3, r0
 8006768:	2b01      	cmp	r3, #1
 800676a:	d002      	beq.n	8006772 <osMutexRelease+0x70>
        stat = osErrorResource;
 800676c:	f06f 0302 	mvn.w	r3, #2
 8006770:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006772:	697b      	ldr	r3, [r7, #20]
}
 8006774:	4618      	mov	r0, r3
 8006776:	3718      	adds	r7, #24
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800677c:	b580      	push	{r7, lr}
 800677e:	b08a      	sub	sp, #40	@ 0x28
 8006780:	af02      	add	r7, sp, #8
 8006782:	60f8      	str	r0, [r7, #12]
 8006784:	60b9      	str	r1, [r7, #8]
 8006786:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006788:	2300      	movs	r3, #0
 800678a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800678c:	f3ef 8305 	mrs	r3, IPSR
 8006790:	613b      	str	r3, [r7, #16]
  return(result);
 8006792:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006794:	2b00      	cmp	r3, #0
 8006796:	d15f      	bne.n	8006858 <osMessageQueueNew+0xdc>
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d05c      	beq.n	8006858 <osMessageQueueNew+0xdc>
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d059      	beq.n	8006858 <osMessageQueueNew+0xdc>
    mem = -1;
 80067a4:	f04f 33ff 	mov.w	r3, #4294967295
 80067a8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d029      	beq.n	8006804 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d012      	beq.n	80067de <osMessageQueueNew+0x62>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	2b4f      	cmp	r3, #79	@ 0x4f
 80067be:	d90e      	bls.n	80067de <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d00a      	beq.n	80067de <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	695a      	ldr	r2, [r3, #20]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	68b9      	ldr	r1, [r7, #8]
 80067d0:	fb01 f303 	mul.w	r3, r1, r3
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d302      	bcc.n	80067de <osMessageQueueNew+0x62>
        mem = 1;
 80067d8:	2301      	movs	r3, #1
 80067da:	61bb      	str	r3, [r7, #24]
 80067dc:	e014      	b.n	8006808 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d110      	bne.n	8006808 <osMessageQueueNew+0x8c>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	68db      	ldr	r3, [r3, #12]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d10c      	bne.n	8006808 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d108      	bne.n	8006808 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	695b      	ldr	r3, [r3, #20]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d104      	bne.n	8006808 <osMessageQueueNew+0x8c>
          mem = 0;
 80067fe:	2300      	movs	r3, #0
 8006800:	61bb      	str	r3, [r7, #24]
 8006802:	e001      	b.n	8006808 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8006804:	2300      	movs	r3, #0
 8006806:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006808:	69bb      	ldr	r3, [r7, #24]
 800680a:	2b01      	cmp	r3, #1
 800680c:	d10b      	bne.n	8006826 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	691a      	ldr	r2, [r3, #16]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	2100      	movs	r1, #0
 8006818:	9100      	str	r1, [sp, #0]
 800681a:	68b9      	ldr	r1, [r7, #8]
 800681c:	68f8      	ldr	r0, [r7, #12]
 800681e:	f000 fa2b 	bl	8006c78 <xQueueGenericCreateStatic>
 8006822:	61f8      	str	r0, [r7, #28]
 8006824:	e008      	b.n	8006838 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8006826:	69bb      	ldr	r3, [r7, #24]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d105      	bne.n	8006838 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800682c:	2200      	movs	r2, #0
 800682e:	68b9      	ldr	r1, [r7, #8]
 8006830:	68f8      	ldr	r0, [r7, #12]
 8006832:	f000 fa9e 	bl	8006d72 <xQueueGenericCreate>
 8006836:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006838:	69fb      	ldr	r3, [r7, #28]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d00c      	beq.n	8006858 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d003      	beq.n	800684c <osMessageQueueNew+0xd0>
        name = attr->name;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	617b      	str	r3, [r7, #20]
 800684a:	e001      	b.n	8006850 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800684c:	2300      	movs	r3, #0
 800684e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8006850:	6979      	ldr	r1, [r7, #20]
 8006852:	69f8      	ldr	r0, [r7, #28]
 8006854:	f001 f8e0 	bl	8007a18 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006858:	69fb      	ldr	r3, [r7, #28]
}
 800685a:	4618      	mov	r0, r3
 800685c:	3720      	adds	r7, #32
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}
	...

08006864 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006864:	b580      	push	{r7, lr}
 8006866:	b088      	sub	sp, #32
 8006868:	af00      	add	r7, sp, #0
 800686a:	60f8      	str	r0, [r7, #12]
 800686c:	60b9      	str	r1, [r7, #8]
 800686e:	603b      	str	r3, [r7, #0]
 8006870:	4613      	mov	r3, r2
 8006872:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006878:	2300      	movs	r3, #0
 800687a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800687c:	f3ef 8305 	mrs	r3, IPSR
 8006880:	617b      	str	r3, [r7, #20]
  return(result);
 8006882:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006884:	2b00      	cmp	r3, #0
 8006886:	d028      	beq.n	80068da <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d005      	beq.n	800689a <osMessageQueuePut+0x36>
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d002      	beq.n	800689a <osMessageQueuePut+0x36>
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d003      	beq.n	80068a2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800689a:	f06f 0303 	mvn.w	r3, #3
 800689e:	61fb      	str	r3, [r7, #28]
 80068a0:	e038      	b.n	8006914 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80068a2:	2300      	movs	r3, #0
 80068a4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80068a6:	f107 0210 	add.w	r2, r7, #16
 80068aa:	2300      	movs	r3, #0
 80068ac:	68b9      	ldr	r1, [r7, #8]
 80068ae:	69b8      	ldr	r0, [r7, #24]
 80068b0:	f000 fc78 	bl	80071a4 <xQueueGenericSendFromISR>
 80068b4:	4603      	mov	r3, r0
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d003      	beq.n	80068c2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80068ba:	f06f 0302 	mvn.w	r3, #2
 80068be:	61fb      	str	r3, [r7, #28]
 80068c0:	e028      	b.n	8006914 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d025      	beq.n	8006914 <osMessageQueuePut+0xb0>
 80068c8:	4b15      	ldr	r3, [pc, #84]	@ (8006920 <osMessageQueuePut+0xbc>)
 80068ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068ce:	601a      	str	r2, [r3, #0]
 80068d0:	f3bf 8f4f 	dsb	sy
 80068d4:	f3bf 8f6f 	isb	sy
 80068d8:	e01c      	b.n	8006914 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80068da:	69bb      	ldr	r3, [r7, #24]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d002      	beq.n	80068e6 <osMessageQueuePut+0x82>
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d103      	bne.n	80068ee <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80068e6:	f06f 0303 	mvn.w	r3, #3
 80068ea:	61fb      	str	r3, [r7, #28]
 80068ec:	e012      	b.n	8006914 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80068ee:	2300      	movs	r3, #0
 80068f0:	683a      	ldr	r2, [r7, #0]
 80068f2:	68b9      	ldr	r1, [r7, #8]
 80068f4:	69b8      	ldr	r0, [r7, #24]
 80068f6:	f000 fb53 	bl	8006fa0 <xQueueGenericSend>
 80068fa:	4603      	mov	r3, r0
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d009      	beq.n	8006914 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d003      	beq.n	800690e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8006906:	f06f 0301 	mvn.w	r3, #1
 800690a:	61fb      	str	r3, [r7, #28]
 800690c:	e002      	b.n	8006914 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800690e:	f06f 0302 	mvn.w	r3, #2
 8006912:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006914:	69fb      	ldr	r3, [r7, #28]
}
 8006916:	4618      	mov	r0, r3
 8006918:	3720      	adds	r7, #32
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}
 800691e:	bf00      	nop
 8006920:	e000ed04 	.word	0xe000ed04

08006924 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006924:	b580      	push	{r7, lr}
 8006926:	b088      	sub	sp, #32
 8006928:	af00      	add	r7, sp, #0
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	607a      	str	r2, [r7, #4]
 8006930:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006936:	2300      	movs	r3, #0
 8006938:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800693a:	f3ef 8305 	mrs	r3, IPSR
 800693e:	617b      	str	r3, [r7, #20]
  return(result);
 8006940:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006942:	2b00      	cmp	r3, #0
 8006944:	d028      	beq.n	8006998 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006946:	69bb      	ldr	r3, [r7, #24]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d005      	beq.n	8006958 <osMessageQueueGet+0x34>
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d002      	beq.n	8006958 <osMessageQueueGet+0x34>
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d003      	beq.n	8006960 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8006958:	f06f 0303 	mvn.w	r3, #3
 800695c:	61fb      	str	r3, [r7, #28]
 800695e:	e037      	b.n	80069d0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8006960:	2300      	movs	r3, #0
 8006962:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006964:	f107 0310 	add.w	r3, r7, #16
 8006968:	461a      	mov	r2, r3
 800696a:	68b9      	ldr	r1, [r7, #8]
 800696c:	69b8      	ldr	r0, [r7, #24]
 800696e:	f000 fea9 	bl	80076c4 <xQueueReceiveFromISR>
 8006972:	4603      	mov	r3, r0
 8006974:	2b01      	cmp	r3, #1
 8006976:	d003      	beq.n	8006980 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8006978:	f06f 0302 	mvn.w	r3, #2
 800697c:	61fb      	str	r3, [r7, #28]
 800697e:	e027      	b.n	80069d0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d024      	beq.n	80069d0 <osMessageQueueGet+0xac>
 8006986:	4b15      	ldr	r3, [pc, #84]	@ (80069dc <osMessageQueueGet+0xb8>)
 8006988:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800698c:	601a      	str	r2, [r3, #0]
 800698e:	f3bf 8f4f 	dsb	sy
 8006992:	f3bf 8f6f 	isb	sy
 8006996:	e01b      	b.n	80069d0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006998:	69bb      	ldr	r3, [r7, #24]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d002      	beq.n	80069a4 <osMessageQueueGet+0x80>
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d103      	bne.n	80069ac <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80069a4:	f06f 0303 	mvn.w	r3, #3
 80069a8:	61fb      	str	r3, [r7, #28]
 80069aa:	e011      	b.n	80069d0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80069ac:	683a      	ldr	r2, [r7, #0]
 80069ae:	68b9      	ldr	r1, [r7, #8]
 80069b0:	69b8      	ldr	r0, [r7, #24]
 80069b2:	f000 fc95 	bl	80072e0 <xQueueReceive>
 80069b6:	4603      	mov	r3, r0
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d009      	beq.n	80069d0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d003      	beq.n	80069ca <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80069c2:	f06f 0301 	mvn.w	r3, #1
 80069c6:	61fb      	str	r3, [r7, #28]
 80069c8:	e002      	b.n	80069d0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80069ca:	f06f 0302 	mvn.w	r3, #2
 80069ce:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80069d0:	69fb      	ldr	r3, [r7, #28]
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3720      	adds	r7, #32
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	bf00      	nop
 80069dc:	e000ed04 	.word	0xe000ed04

080069e0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80069e0:	b480      	push	{r7}
 80069e2:	b085      	sub	sp, #20
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	60f8      	str	r0, [r7, #12]
 80069e8:	60b9      	str	r1, [r7, #8]
 80069ea:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	4a06      	ldr	r2, [pc, #24]	@ (8006a08 <vApplicationGetIdleTaskMemory+0x28>)
 80069f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	4a05      	ldr	r2, [pc, #20]	@ (8006a0c <vApplicationGetIdleTaskMemory+0x2c>)
 80069f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2280      	movs	r2, #128	@ 0x80
 80069fc:	601a      	str	r2, [r3, #0]
}
 80069fe:	bf00      	nop
 8006a00:	3714      	adds	r7, #20
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bc80      	pop	{r7}
 8006a06:	4770      	bx	lr
 8006a08:	200003a8 	.word	0x200003a8
 8006a0c:	20000450 	.word	0x20000450

08006a10 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006a10:	b480      	push	{r7}
 8006a12:	b085      	sub	sp, #20
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	60f8      	str	r0, [r7, #12]
 8006a18:	60b9      	str	r1, [r7, #8]
 8006a1a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	4a07      	ldr	r2, [pc, #28]	@ (8006a3c <vApplicationGetTimerTaskMemory+0x2c>)
 8006a20:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	4a06      	ldr	r2, [pc, #24]	@ (8006a40 <vApplicationGetTimerTaskMemory+0x30>)
 8006a26:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006a2e:	601a      	str	r2, [r3, #0]
}
 8006a30:	bf00      	nop
 8006a32:	3714      	adds	r7, #20
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bc80      	pop	{r7}
 8006a38:	4770      	bx	lr
 8006a3a:	bf00      	nop
 8006a3c:	20000650 	.word	0x20000650
 8006a40:	200006f8 	.word	0x200006f8

08006a44 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006a44:	b480      	push	{r7}
 8006a46:	b083      	sub	sp, #12
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f103 0208 	add.w	r2, r3, #8
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f04f 32ff 	mov.w	r2, #4294967295
 8006a5c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f103 0208 	add.w	r2, r3, #8
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f103 0208 	add.w	r2, r3, #8
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006a78:	bf00      	nop
 8006a7a:	370c      	adds	r7, #12
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bc80      	pop	{r7}
 8006a80:	4770      	bx	lr

08006a82 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006a82:	b480      	push	{r7}
 8006a84:	b083      	sub	sp, #12
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006a90:	bf00      	nop
 8006a92:	370c      	adds	r7, #12
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bc80      	pop	{r7}
 8006a98:	4770      	bx	lr

08006a9a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006a9a:	b480      	push	{r7}
 8006a9c:	b085      	sub	sp, #20
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
 8006aa2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	68fa      	ldr	r2, [r7, #12]
 8006aae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	689a      	ldr	r2, [r3, #8]
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	683a      	ldr	r2, [r7, #0]
 8006abe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	683a      	ldr	r2, [r7, #0]
 8006ac4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	687a      	ldr	r2, [r7, #4]
 8006aca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	1c5a      	adds	r2, r3, #1
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	601a      	str	r2, [r3, #0]
}
 8006ad6:	bf00      	nop
 8006ad8:	3714      	adds	r7, #20
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bc80      	pop	{r7}
 8006ade:	4770      	bx	lr

08006ae0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b085      	sub	sp, #20
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006af6:	d103      	bne.n	8006b00 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	691b      	ldr	r3, [r3, #16]
 8006afc:	60fb      	str	r3, [r7, #12]
 8006afe:	e00c      	b.n	8006b1a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	3308      	adds	r3, #8
 8006b04:	60fb      	str	r3, [r7, #12]
 8006b06:	e002      	b.n	8006b0e <vListInsert+0x2e>
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	60fb      	str	r3, [r7, #12]
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	68ba      	ldr	r2, [r7, #8]
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d2f6      	bcs.n	8006b08 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	685a      	ldr	r2, [r3, #4]
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	683a      	ldr	r2, [r7, #0]
 8006b28:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	68fa      	ldr	r2, [r7, #12]
 8006b2e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	683a      	ldr	r2, [r7, #0]
 8006b34:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	1c5a      	adds	r2, r3, #1
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	601a      	str	r2, [r3, #0]
}
 8006b46:	bf00      	nop
 8006b48:	3714      	adds	r7, #20
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bc80      	pop	{r7}
 8006b4e:	4770      	bx	lr

08006b50 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006b50:	b480      	push	{r7}
 8006b52:	b085      	sub	sp, #20
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	691b      	ldr	r3, [r3, #16]
 8006b5c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	6892      	ldr	r2, [r2, #8]
 8006b66:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	6852      	ldr	r2, [r2, #4]
 8006b70:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d103      	bne.n	8006b84 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	689a      	ldr	r2, [r3, #8]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	1e5a      	subs	r2, r3, #1
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3714      	adds	r7, #20
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bc80      	pop	{r7}
 8006ba0:	4770      	bx	lr
	...

08006ba4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b084      	sub	sp, #16
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d10b      	bne.n	8006bd0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006bb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bbc:	f383 8811 	msr	BASEPRI, r3
 8006bc0:	f3bf 8f6f 	isb	sy
 8006bc4:	f3bf 8f4f 	dsb	sy
 8006bc8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006bca:	bf00      	nop
 8006bcc:	bf00      	nop
 8006bce:	e7fd      	b.n	8006bcc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006bd0:	f002 fc64 	bl	800949c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681a      	ldr	r2, [r3, #0]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bdc:	68f9      	ldr	r1, [r7, #12]
 8006bde:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006be0:	fb01 f303 	mul.w	r3, r1, r3
 8006be4:	441a      	add	r2, r3
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2200      	movs	r2, #0
 8006bee:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c00:	3b01      	subs	r3, #1
 8006c02:	68f9      	ldr	r1, [r7, #12]
 8006c04:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006c06:	fb01 f303 	mul.w	r3, r1, r3
 8006c0a:	441a      	add	r2, r3
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	22ff      	movs	r2, #255	@ 0xff
 8006c14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	22ff      	movs	r2, #255	@ 0xff
 8006c1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d114      	bne.n	8006c50 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	691b      	ldr	r3, [r3, #16]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d01a      	beq.n	8006c64 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	3310      	adds	r3, #16
 8006c32:	4618      	mov	r0, r3
 8006c34:	f001 fc36 	bl	80084a4 <xTaskRemoveFromEventList>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d012      	beq.n	8006c64 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8006c74 <xQueueGenericReset+0xd0>)
 8006c40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c44:	601a      	str	r2, [r3, #0]
 8006c46:	f3bf 8f4f 	dsb	sy
 8006c4a:	f3bf 8f6f 	isb	sy
 8006c4e:	e009      	b.n	8006c64 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	3310      	adds	r3, #16
 8006c54:	4618      	mov	r0, r3
 8006c56:	f7ff fef5 	bl	8006a44 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	3324      	adds	r3, #36	@ 0x24
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f7ff fef0 	bl	8006a44 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006c64:	f002 fc4a 	bl	80094fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006c68:	2301      	movs	r3, #1
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3710      	adds	r7, #16
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}
 8006c72:	bf00      	nop
 8006c74:	e000ed04 	.word	0xe000ed04

08006c78 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b08e      	sub	sp, #56	@ 0x38
 8006c7c:	af02      	add	r7, sp, #8
 8006c7e:	60f8      	str	r0, [r7, #12]
 8006c80:	60b9      	str	r1, [r7, #8]
 8006c82:	607a      	str	r2, [r7, #4]
 8006c84:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d10b      	bne.n	8006ca4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006c8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c90:	f383 8811 	msr	BASEPRI, r3
 8006c94:	f3bf 8f6f 	isb	sy
 8006c98:	f3bf 8f4f 	dsb	sy
 8006c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006c9e:	bf00      	nop
 8006ca0:	bf00      	nop
 8006ca2:	e7fd      	b.n	8006ca0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d10b      	bne.n	8006cc2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006caa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cae:	f383 8811 	msr	BASEPRI, r3
 8006cb2:	f3bf 8f6f 	isb	sy
 8006cb6:	f3bf 8f4f 	dsb	sy
 8006cba:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006cbc:	bf00      	nop
 8006cbe:	bf00      	nop
 8006cc0:	e7fd      	b.n	8006cbe <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d002      	beq.n	8006cce <xQueueGenericCreateStatic+0x56>
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d001      	beq.n	8006cd2 <xQueueGenericCreateStatic+0x5a>
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e000      	b.n	8006cd4 <xQueueGenericCreateStatic+0x5c>
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d10b      	bne.n	8006cf0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006cd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cdc:	f383 8811 	msr	BASEPRI, r3
 8006ce0:	f3bf 8f6f 	isb	sy
 8006ce4:	f3bf 8f4f 	dsb	sy
 8006ce8:	623b      	str	r3, [r7, #32]
}
 8006cea:	bf00      	nop
 8006cec:	bf00      	nop
 8006cee:	e7fd      	b.n	8006cec <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d102      	bne.n	8006cfc <xQueueGenericCreateStatic+0x84>
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d101      	bne.n	8006d00 <xQueueGenericCreateStatic+0x88>
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	e000      	b.n	8006d02 <xQueueGenericCreateStatic+0x8a>
 8006d00:	2300      	movs	r3, #0
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d10b      	bne.n	8006d1e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006d06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d0a:	f383 8811 	msr	BASEPRI, r3
 8006d0e:	f3bf 8f6f 	isb	sy
 8006d12:	f3bf 8f4f 	dsb	sy
 8006d16:	61fb      	str	r3, [r7, #28]
}
 8006d18:	bf00      	nop
 8006d1a:	bf00      	nop
 8006d1c:	e7fd      	b.n	8006d1a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006d1e:	2350      	movs	r3, #80	@ 0x50
 8006d20:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	2b50      	cmp	r3, #80	@ 0x50
 8006d26:	d00b      	beq.n	8006d40 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006d28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d2c:	f383 8811 	msr	BASEPRI, r3
 8006d30:	f3bf 8f6f 	isb	sy
 8006d34:	f3bf 8f4f 	dsb	sy
 8006d38:	61bb      	str	r3, [r7, #24]
}
 8006d3a:	bf00      	nop
 8006d3c:	bf00      	nop
 8006d3e:	e7fd      	b.n	8006d3c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006d40:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006d46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d00d      	beq.n	8006d68 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006d4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006d54:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006d58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d5a:	9300      	str	r3, [sp, #0]
 8006d5c:	4613      	mov	r3, r2
 8006d5e:	687a      	ldr	r2, [r7, #4]
 8006d60:	68b9      	ldr	r1, [r7, #8]
 8006d62:	68f8      	ldr	r0, [r7, #12]
 8006d64:	f000 f840 	bl	8006de8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006d68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3730      	adds	r7, #48	@ 0x30
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}

08006d72 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006d72:	b580      	push	{r7, lr}
 8006d74:	b08a      	sub	sp, #40	@ 0x28
 8006d76:	af02      	add	r7, sp, #8
 8006d78:	60f8      	str	r0, [r7, #12]
 8006d7a:	60b9      	str	r1, [r7, #8]
 8006d7c:	4613      	mov	r3, r2
 8006d7e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d10b      	bne.n	8006d9e <xQueueGenericCreate+0x2c>
	__asm volatile
 8006d86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d8a:	f383 8811 	msr	BASEPRI, r3
 8006d8e:	f3bf 8f6f 	isb	sy
 8006d92:	f3bf 8f4f 	dsb	sy
 8006d96:	613b      	str	r3, [r7, #16]
}
 8006d98:	bf00      	nop
 8006d9a:	bf00      	nop
 8006d9c:	e7fd      	b.n	8006d9a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	68ba      	ldr	r2, [r7, #8]
 8006da2:	fb02 f303 	mul.w	r3, r2, r3
 8006da6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006da8:	69fb      	ldr	r3, [r7, #28]
 8006daa:	3350      	adds	r3, #80	@ 0x50
 8006dac:	4618      	mov	r0, r3
 8006dae:	f002 fc77 	bl	80096a0 <pvPortMalloc>
 8006db2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006db4:	69bb      	ldr	r3, [r7, #24]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d011      	beq.n	8006dde <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006dba:	69bb      	ldr	r3, [r7, #24]
 8006dbc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	3350      	adds	r3, #80	@ 0x50
 8006dc2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006dc4:	69bb      	ldr	r3, [r7, #24]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006dcc:	79fa      	ldrb	r2, [r7, #7]
 8006dce:	69bb      	ldr	r3, [r7, #24]
 8006dd0:	9300      	str	r3, [sp, #0]
 8006dd2:	4613      	mov	r3, r2
 8006dd4:	697a      	ldr	r2, [r7, #20]
 8006dd6:	68b9      	ldr	r1, [r7, #8]
 8006dd8:	68f8      	ldr	r0, [r7, #12]
 8006dda:	f000 f805 	bl	8006de8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006dde:	69bb      	ldr	r3, [r7, #24]
	}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3720      	adds	r7, #32
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}

08006de8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b084      	sub	sp, #16
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	60f8      	str	r0, [r7, #12]
 8006df0:	60b9      	str	r1, [r7, #8]
 8006df2:	607a      	str	r2, [r7, #4]
 8006df4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d103      	bne.n	8006e04 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006dfc:	69bb      	ldr	r3, [r7, #24]
 8006dfe:	69ba      	ldr	r2, [r7, #24]
 8006e00:	601a      	str	r2, [r3, #0]
 8006e02:	e002      	b.n	8006e0a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006e04:	69bb      	ldr	r3, [r7, #24]
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006e0a:	69bb      	ldr	r3, [r7, #24]
 8006e0c:	68fa      	ldr	r2, [r7, #12]
 8006e0e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006e10:	69bb      	ldr	r3, [r7, #24]
 8006e12:	68ba      	ldr	r2, [r7, #8]
 8006e14:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006e16:	2101      	movs	r1, #1
 8006e18:	69b8      	ldr	r0, [r7, #24]
 8006e1a:	f7ff fec3 	bl	8006ba4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006e1e:	69bb      	ldr	r3, [r7, #24]
 8006e20:	78fa      	ldrb	r2, [r7, #3]
 8006e22:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006e26:	bf00      	nop
 8006e28:	3710      	adds	r7, #16
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}

08006e2e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006e2e:	b580      	push	{r7, lr}
 8006e30:	b082      	sub	sp, #8
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d00e      	beq.n	8006e5a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2200      	movs	r2, #0
 8006e46:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006e4e:	2300      	movs	r3, #0
 8006e50:	2200      	movs	r2, #0
 8006e52:	2100      	movs	r1, #0
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f000 f8a3 	bl	8006fa0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006e5a:	bf00      	nop
 8006e5c:	3708      	adds	r7, #8
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}

08006e62 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006e62:	b580      	push	{r7, lr}
 8006e64:	b086      	sub	sp, #24
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	4603      	mov	r3, r0
 8006e6a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	617b      	str	r3, [r7, #20]
 8006e70:	2300      	movs	r3, #0
 8006e72:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006e74:	79fb      	ldrb	r3, [r7, #7]
 8006e76:	461a      	mov	r2, r3
 8006e78:	6939      	ldr	r1, [r7, #16]
 8006e7a:	6978      	ldr	r0, [r7, #20]
 8006e7c:	f7ff ff79 	bl	8006d72 <xQueueGenericCreate>
 8006e80:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006e82:	68f8      	ldr	r0, [r7, #12]
 8006e84:	f7ff ffd3 	bl	8006e2e <prvInitialiseMutex>

		return xNewQueue;
 8006e88:	68fb      	ldr	r3, [r7, #12]
	}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3718      	adds	r7, #24
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}

08006e92 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006e92:	b580      	push	{r7, lr}
 8006e94:	b088      	sub	sp, #32
 8006e96:	af02      	add	r7, sp, #8
 8006e98:	4603      	mov	r3, r0
 8006e9a:	6039      	str	r1, [r7, #0]
 8006e9c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	617b      	str	r3, [r7, #20]
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006ea6:	79fb      	ldrb	r3, [r7, #7]
 8006ea8:	9300      	str	r3, [sp, #0]
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	2200      	movs	r2, #0
 8006eae:	6939      	ldr	r1, [r7, #16]
 8006eb0:	6978      	ldr	r0, [r7, #20]
 8006eb2:	f7ff fee1 	bl	8006c78 <xQueueGenericCreateStatic>
 8006eb6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006eb8:	68f8      	ldr	r0, [r7, #12]
 8006eba:	f7ff ffb8 	bl	8006e2e <prvInitialiseMutex>

		return xNewQueue;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
	}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3718      	adds	r7, #24
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8006ec8:	b590      	push	{r4, r7, lr}
 8006eca:	b087      	sub	sp, #28
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d10b      	bne.n	8006ef2 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8006eda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ede:	f383 8811 	msr	BASEPRI, r3
 8006ee2:	f3bf 8f6f 	isb	sy
 8006ee6:	f3bf 8f4f 	dsb	sy
 8006eea:	60fb      	str	r3, [r7, #12]
}
 8006eec:	bf00      	nop
 8006eee:	bf00      	nop
 8006ef0:	e7fd      	b.n	8006eee <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	689c      	ldr	r4, [r3, #8]
 8006ef6:	f001 fc9b 	bl	8008830 <xTaskGetCurrentTaskHandle>
 8006efa:	4603      	mov	r3, r0
 8006efc:	429c      	cmp	r4, r3
 8006efe:	d111      	bne.n	8006f24 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	68db      	ldr	r3, [r3, #12]
 8006f04:	1e5a      	subs	r2, r3, #1
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	68db      	ldr	r3, [r3, #12]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d105      	bne.n	8006f1e <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8006f12:	2300      	movs	r3, #0
 8006f14:	2200      	movs	r2, #0
 8006f16:	2100      	movs	r1, #0
 8006f18:	6938      	ldr	r0, [r7, #16]
 8006f1a:	f000 f841 	bl	8006fa0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	617b      	str	r3, [r7, #20]
 8006f22:	e001      	b.n	8006f28 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8006f24:	2300      	movs	r3, #0
 8006f26:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8006f28:	697b      	ldr	r3, [r7, #20]
	}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	371c      	adds	r7, #28
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd90      	pop	{r4, r7, pc}

08006f32 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8006f32:	b590      	push	{r4, r7, lr}
 8006f34:	b087      	sub	sp, #28
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
 8006f3a:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d10b      	bne.n	8006f5e <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8006f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f4a:	f383 8811 	msr	BASEPRI, r3
 8006f4e:	f3bf 8f6f 	isb	sy
 8006f52:	f3bf 8f4f 	dsb	sy
 8006f56:	60fb      	str	r3, [r7, #12]
}
 8006f58:	bf00      	nop
 8006f5a:	bf00      	nop
 8006f5c:	e7fd      	b.n	8006f5a <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	689c      	ldr	r4, [r3, #8]
 8006f62:	f001 fc65 	bl	8008830 <xTaskGetCurrentTaskHandle>
 8006f66:	4603      	mov	r3, r0
 8006f68:	429c      	cmp	r4, r3
 8006f6a:	d107      	bne.n	8006f7c <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	1c5a      	adds	r2, r3, #1
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8006f76:	2301      	movs	r3, #1
 8006f78:	617b      	str	r3, [r7, #20]
 8006f7a:	e00c      	b.n	8006f96 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8006f7c:	6839      	ldr	r1, [r7, #0]
 8006f7e:	6938      	ldr	r0, [r7, #16]
 8006f80:	f000 fa90 	bl	80074a4 <xQueueSemaphoreTake>
 8006f84:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d004      	beq.n	8006f96 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	68db      	ldr	r3, [r3, #12]
 8006f90:	1c5a      	adds	r2, r3, #1
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8006f96:	697b      	ldr	r3, [r7, #20]
	}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	371c      	adds	r7, #28
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd90      	pop	{r4, r7, pc}

08006fa0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b08e      	sub	sp, #56	@ 0x38
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	60f8      	str	r0, [r7, #12]
 8006fa8:	60b9      	str	r1, [r7, #8]
 8006faa:	607a      	str	r2, [r7, #4]
 8006fac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d10b      	bne.n	8006fd4 <xQueueGenericSend+0x34>
	__asm volatile
 8006fbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fc0:	f383 8811 	msr	BASEPRI, r3
 8006fc4:	f3bf 8f6f 	isb	sy
 8006fc8:	f3bf 8f4f 	dsb	sy
 8006fcc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006fce:	bf00      	nop
 8006fd0:	bf00      	nop
 8006fd2:	e7fd      	b.n	8006fd0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d103      	bne.n	8006fe2 <xQueueGenericSend+0x42>
 8006fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d101      	bne.n	8006fe6 <xQueueGenericSend+0x46>
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e000      	b.n	8006fe8 <xQueueGenericSend+0x48>
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d10b      	bne.n	8007004 <xQueueGenericSend+0x64>
	__asm volatile
 8006fec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ff0:	f383 8811 	msr	BASEPRI, r3
 8006ff4:	f3bf 8f6f 	isb	sy
 8006ff8:	f3bf 8f4f 	dsb	sy
 8006ffc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006ffe:	bf00      	nop
 8007000:	bf00      	nop
 8007002:	e7fd      	b.n	8007000 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	2b02      	cmp	r3, #2
 8007008:	d103      	bne.n	8007012 <xQueueGenericSend+0x72>
 800700a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800700c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800700e:	2b01      	cmp	r3, #1
 8007010:	d101      	bne.n	8007016 <xQueueGenericSend+0x76>
 8007012:	2301      	movs	r3, #1
 8007014:	e000      	b.n	8007018 <xQueueGenericSend+0x78>
 8007016:	2300      	movs	r3, #0
 8007018:	2b00      	cmp	r3, #0
 800701a:	d10b      	bne.n	8007034 <xQueueGenericSend+0x94>
	__asm volatile
 800701c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007020:	f383 8811 	msr	BASEPRI, r3
 8007024:	f3bf 8f6f 	isb	sy
 8007028:	f3bf 8f4f 	dsb	sy
 800702c:	623b      	str	r3, [r7, #32]
}
 800702e:	bf00      	nop
 8007030:	bf00      	nop
 8007032:	e7fd      	b.n	8007030 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007034:	f001 fc0a 	bl	800884c <xTaskGetSchedulerState>
 8007038:	4603      	mov	r3, r0
 800703a:	2b00      	cmp	r3, #0
 800703c:	d102      	bne.n	8007044 <xQueueGenericSend+0xa4>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d101      	bne.n	8007048 <xQueueGenericSend+0xa8>
 8007044:	2301      	movs	r3, #1
 8007046:	e000      	b.n	800704a <xQueueGenericSend+0xaa>
 8007048:	2300      	movs	r3, #0
 800704a:	2b00      	cmp	r3, #0
 800704c:	d10b      	bne.n	8007066 <xQueueGenericSend+0xc6>
	__asm volatile
 800704e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007052:	f383 8811 	msr	BASEPRI, r3
 8007056:	f3bf 8f6f 	isb	sy
 800705a:	f3bf 8f4f 	dsb	sy
 800705e:	61fb      	str	r3, [r7, #28]
}
 8007060:	bf00      	nop
 8007062:	bf00      	nop
 8007064:	e7fd      	b.n	8007062 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007066:	f002 fa19 	bl	800949c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800706a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800706c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800706e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007070:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007072:	429a      	cmp	r2, r3
 8007074:	d302      	bcc.n	800707c <xQueueGenericSend+0xdc>
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	2b02      	cmp	r3, #2
 800707a:	d129      	bne.n	80070d0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800707c:	683a      	ldr	r2, [r7, #0]
 800707e:	68b9      	ldr	r1, [r7, #8]
 8007080:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007082:	f000 fbb8 	bl	80077f6 <prvCopyDataToQueue>
 8007086:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800708a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800708c:	2b00      	cmp	r3, #0
 800708e:	d010      	beq.n	80070b2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007092:	3324      	adds	r3, #36	@ 0x24
 8007094:	4618      	mov	r0, r3
 8007096:	f001 fa05 	bl	80084a4 <xTaskRemoveFromEventList>
 800709a:	4603      	mov	r3, r0
 800709c:	2b00      	cmp	r3, #0
 800709e:	d013      	beq.n	80070c8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80070a0:	4b3f      	ldr	r3, [pc, #252]	@ (80071a0 <xQueueGenericSend+0x200>)
 80070a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070a6:	601a      	str	r2, [r3, #0]
 80070a8:	f3bf 8f4f 	dsb	sy
 80070ac:	f3bf 8f6f 	isb	sy
 80070b0:	e00a      	b.n	80070c8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80070b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d007      	beq.n	80070c8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80070b8:	4b39      	ldr	r3, [pc, #228]	@ (80071a0 <xQueueGenericSend+0x200>)
 80070ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070be:	601a      	str	r2, [r3, #0]
 80070c0:	f3bf 8f4f 	dsb	sy
 80070c4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80070c8:	f002 fa18 	bl	80094fc <vPortExitCritical>
				return pdPASS;
 80070cc:	2301      	movs	r3, #1
 80070ce:	e063      	b.n	8007198 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d103      	bne.n	80070de <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80070d6:	f002 fa11 	bl	80094fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80070da:	2300      	movs	r3, #0
 80070dc:	e05c      	b.n	8007198 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80070de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d106      	bne.n	80070f2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80070e4:	f107 0314 	add.w	r3, r7, #20
 80070e8:	4618      	mov	r0, r3
 80070ea:	f001 fa3f 	bl	800856c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80070ee:	2301      	movs	r3, #1
 80070f0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80070f2:	f002 fa03 	bl	80094fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80070f6:	f000 ff99 	bl	800802c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80070fa:	f002 f9cf 	bl	800949c <vPortEnterCritical>
 80070fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007100:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007104:	b25b      	sxtb	r3, r3
 8007106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800710a:	d103      	bne.n	8007114 <xQueueGenericSend+0x174>
 800710c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800710e:	2200      	movs	r2, #0
 8007110:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007116:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800711a:	b25b      	sxtb	r3, r3
 800711c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007120:	d103      	bne.n	800712a <xQueueGenericSend+0x18a>
 8007122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007124:	2200      	movs	r2, #0
 8007126:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800712a:	f002 f9e7 	bl	80094fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800712e:	1d3a      	adds	r2, r7, #4
 8007130:	f107 0314 	add.w	r3, r7, #20
 8007134:	4611      	mov	r1, r2
 8007136:	4618      	mov	r0, r3
 8007138:	f001 fa2e 	bl	8008598 <xTaskCheckForTimeOut>
 800713c:	4603      	mov	r3, r0
 800713e:	2b00      	cmp	r3, #0
 8007140:	d124      	bne.n	800718c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007142:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007144:	f000 fc4f 	bl	80079e6 <prvIsQueueFull>
 8007148:	4603      	mov	r3, r0
 800714a:	2b00      	cmp	r3, #0
 800714c:	d018      	beq.n	8007180 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800714e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007150:	3310      	adds	r3, #16
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	4611      	mov	r1, r2
 8007156:	4618      	mov	r0, r3
 8007158:	f001 f952 	bl	8008400 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800715c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800715e:	f000 fbda 	bl	8007916 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007162:	f000 ff71 	bl	8008048 <xTaskResumeAll>
 8007166:	4603      	mov	r3, r0
 8007168:	2b00      	cmp	r3, #0
 800716a:	f47f af7c 	bne.w	8007066 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800716e:	4b0c      	ldr	r3, [pc, #48]	@ (80071a0 <xQueueGenericSend+0x200>)
 8007170:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007174:	601a      	str	r2, [r3, #0]
 8007176:	f3bf 8f4f 	dsb	sy
 800717a:	f3bf 8f6f 	isb	sy
 800717e:	e772      	b.n	8007066 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007180:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007182:	f000 fbc8 	bl	8007916 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007186:	f000 ff5f 	bl	8008048 <xTaskResumeAll>
 800718a:	e76c      	b.n	8007066 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800718c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800718e:	f000 fbc2 	bl	8007916 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007192:	f000 ff59 	bl	8008048 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007196:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007198:	4618      	mov	r0, r3
 800719a:	3738      	adds	r7, #56	@ 0x38
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}
 80071a0:	e000ed04 	.word	0xe000ed04

080071a4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b090      	sub	sp, #64	@ 0x40
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	60f8      	str	r0, [r7, #12]
 80071ac:	60b9      	str	r1, [r7, #8]
 80071ae:	607a      	str	r2, [r7, #4]
 80071b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80071b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d10b      	bne.n	80071d4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80071bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071c0:	f383 8811 	msr	BASEPRI, r3
 80071c4:	f3bf 8f6f 	isb	sy
 80071c8:	f3bf 8f4f 	dsb	sy
 80071cc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80071ce:	bf00      	nop
 80071d0:	bf00      	nop
 80071d2:	e7fd      	b.n	80071d0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d103      	bne.n	80071e2 <xQueueGenericSendFromISR+0x3e>
 80071da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d101      	bne.n	80071e6 <xQueueGenericSendFromISR+0x42>
 80071e2:	2301      	movs	r3, #1
 80071e4:	e000      	b.n	80071e8 <xQueueGenericSendFromISR+0x44>
 80071e6:	2300      	movs	r3, #0
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d10b      	bne.n	8007204 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80071ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071f0:	f383 8811 	msr	BASEPRI, r3
 80071f4:	f3bf 8f6f 	isb	sy
 80071f8:	f3bf 8f4f 	dsb	sy
 80071fc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80071fe:	bf00      	nop
 8007200:	bf00      	nop
 8007202:	e7fd      	b.n	8007200 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	2b02      	cmp	r3, #2
 8007208:	d103      	bne.n	8007212 <xQueueGenericSendFromISR+0x6e>
 800720a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800720c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800720e:	2b01      	cmp	r3, #1
 8007210:	d101      	bne.n	8007216 <xQueueGenericSendFromISR+0x72>
 8007212:	2301      	movs	r3, #1
 8007214:	e000      	b.n	8007218 <xQueueGenericSendFromISR+0x74>
 8007216:	2300      	movs	r3, #0
 8007218:	2b00      	cmp	r3, #0
 800721a:	d10b      	bne.n	8007234 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800721c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007220:	f383 8811 	msr	BASEPRI, r3
 8007224:	f3bf 8f6f 	isb	sy
 8007228:	f3bf 8f4f 	dsb	sy
 800722c:	623b      	str	r3, [r7, #32]
}
 800722e:	bf00      	nop
 8007230:	bf00      	nop
 8007232:	e7fd      	b.n	8007230 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007234:	f002 f9f4 	bl	8009620 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007238:	f3ef 8211 	mrs	r2, BASEPRI
 800723c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007240:	f383 8811 	msr	BASEPRI, r3
 8007244:	f3bf 8f6f 	isb	sy
 8007248:	f3bf 8f4f 	dsb	sy
 800724c:	61fa      	str	r2, [r7, #28]
 800724e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007250:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007252:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007256:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800725a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800725c:	429a      	cmp	r2, r3
 800725e:	d302      	bcc.n	8007266 <xQueueGenericSendFromISR+0xc2>
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	2b02      	cmp	r3, #2
 8007264:	d12f      	bne.n	80072c6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007268:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800726c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007274:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007276:	683a      	ldr	r2, [r7, #0]
 8007278:	68b9      	ldr	r1, [r7, #8]
 800727a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800727c:	f000 fabb 	bl	80077f6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007280:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007288:	d112      	bne.n	80072b0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800728a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800728c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800728e:	2b00      	cmp	r3, #0
 8007290:	d016      	beq.n	80072c0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007294:	3324      	adds	r3, #36	@ 0x24
 8007296:	4618      	mov	r0, r3
 8007298:	f001 f904 	bl	80084a4 <xTaskRemoveFromEventList>
 800729c:	4603      	mov	r3, r0
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d00e      	beq.n	80072c0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d00b      	beq.n	80072c0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2201      	movs	r2, #1
 80072ac:	601a      	str	r2, [r3, #0]
 80072ae:	e007      	b.n	80072c0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80072b0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80072b4:	3301      	adds	r3, #1
 80072b6:	b2db      	uxtb	r3, r3
 80072b8:	b25a      	sxtb	r2, r3
 80072ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80072c0:	2301      	movs	r3, #1
 80072c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80072c4:	e001      	b.n	80072ca <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80072c6:	2300      	movs	r3, #0
 80072c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072cc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80072d4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80072d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3740      	adds	r7, #64	@ 0x40
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}

080072e0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b08c      	sub	sp, #48	@ 0x30
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	60f8      	str	r0, [r7, #12]
 80072e8:	60b9      	str	r1, [r7, #8]
 80072ea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80072ec:	2300      	movs	r3, #0
 80072ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80072f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d10b      	bne.n	8007312 <xQueueReceive+0x32>
	__asm volatile
 80072fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072fe:	f383 8811 	msr	BASEPRI, r3
 8007302:	f3bf 8f6f 	isb	sy
 8007306:	f3bf 8f4f 	dsb	sy
 800730a:	623b      	str	r3, [r7, #32]
}
 800730c:	bf00      	nop
 800730e:	bf00      	nop
 8007310:	e7fd      	b.n	800730e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d103      	bne.n	8007320 <xQueueReceive+0x40>
 8007318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800731a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800731c:	2b00      	cmp	r3, #0
 800731e:	d101      	bne.n	8007324 <xQueueReceive+0x44>
 8007320:	2301      	movs	r3, #1
 8007322:	e000      	b.n	8007326 <xQueueReceive+0x46>
 8007324:	2300      	movs	r3, #0
 8007326:	2b00      	cmp	r3, #0
 8007328:	d10b      	bne.n	8007342 <xQueueReceive+0x62>
	__asm volatile
 800732a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800732e:	f383 8811 	msr	BASEPRI, r3
 8007332:	f3bf 8f6f 	isb	sy
 8007336:	f3bf 8f4f 	dsb	sy
 800733a:	61fb      	str	r3, [r7, #28]
}
 800733c:	bf00      	nop
 800733e:	bf00      	nop
 8007340:	e7fd      	b.n	800733e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007342:	f001 fa83 	bl	800884c <xTaskGetSchedulerState>
 8007346:	4603      	mov	r3, r0
 8007348:	2b00      	cmp	r3, #0
 800734a:	d102      	bne.n	8007352 <xQueueReceive+0x72>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d101      	bne.n	8007356 <xQueueReceive+0x76>
 8007352:	2301      	movs	r3, #1
 8007354:	e000      	b.n	8007358 <xQueueReceive+0x78>
 8007356:	2300      	movs	r3, #0
 8007358:	2b00      	cmp	r3, #0
 800735a:	d10b      	bne.n	8007374 <xQueueReceive+0x94>
	__asm volatile
 800735c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007360:	f383 8811 	msr	BASEPRI, r3
 8007364:	f3bf 8f6f 	isb	sy
 8007368:	f3bf 8f4f 	dsb	sy
 800736c:	61bb      	str	r3, [r7, #24]
}
 800736e:	bf00      	nop
 8007370:	bf00      	nop
 8007372:	e7fd      	b.n	8007370 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007374:	f002 f892 	bl	800949c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800737a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800737c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800737e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007380:	2b00      	cmp	r3, #0
 8007382:	d01f      	beq.n	80073c4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007384:	68b9      	ldr	r1, [r7, #8]
 8007386:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007388:	f000 fa9f 	bl	80078ca <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800738c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800738e:	1e5a      	subs	r2, r3, #1
 8007390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007392:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007396:	691b      	ldr	r3, [r3, #16]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d00f      	beq.n	80073bc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800739c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800739e:	3310      	adds	r3, #16
 80073a0:	4618      	mov	r0, r3
 80073a2:	f001 f87f 	bl	80084a4 <xTaskRemoveFromEventList>
 80073a6:	4603      	mov	r3, r0
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d007      	beq.n	80073bc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80073ac:	4b3c      	ldr	r3, [pc, #240]	@ (80074a0 <xQueueReceive+0x1c0>)
 80073ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073b2:	601a      	str	r2, [r3, #0]
 80073b4:	f3bf 8f4f 	dsb	sy
 80073b8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80073bc:	f002 f89e 	bl	80094fc <vPortExitCritical>
				return pdPASS;
 80073c0:	2301      	movs	r3, #1
 80073c2:	e069      	b.n	8007498 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d103      	bne.n	80073d2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80073ca:	f002 f897 	bl	80094fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80073ce:	2300      	movs	r3, #0
 80073d0:	e062      	b.n	8007498 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80073d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d106      	bne.n	80073e6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80073d8:	f107 0310 	add.w	r3, r7, #16
 80073dc:	4618      	mov	r0, r3
 80073de:	f001 f8c5 	bl	800856c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80073e2:	2301      	movs	r3, #1
 80073e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80073e6:	f002 f889 	bl	80094fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80073ea:	f000 fe1f 	bl	800802c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80073ee:	f002 f855 	bl	800949c <vPortEnterCritical>
 80073f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80073f8:	b25b      	sxtb	r3, r3
 80073fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073fe:	d103      	bne.n	8007408 <xQueueReceive+0x128>
 8007400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007402:	2200      	movs	r2, #0
 8007404:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800740a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800740e:	b25b      	sxtb	r3, r3
 8007410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007414:	d103      	bne.n	800741e <xQueueReceive+0x13e>
 8007416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007418:	2200      	movs	r2, #0
 800741a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800741e:	f002 f86d 	bl	80094fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007422:	1d3a      	adds	r2, r7, #4
 8007424:	f107 0310 	add.w	r3, r7, #16
 8007428:	4611      	mov	r1, r2
 800742a:	4618      	mov	r0, r3
 800742c:	f001 f8b4 	bl	8008598 <xTaskCheckForTimeOut>
 8007430:	4603      	mov	r3, r0
 8007432:	2b00      	cmp	r3, #0
 8007434:	d123      	bne.n	800747e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007436:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007438:	f000 fabf 	bl	80079ba <prvIsQueueEmpty>
 800743c:	4603      	mov	r3, r0
 800743e:	2b00      	cmp	r3, #0
 8007440:	d017      	beq.n	8007472 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007444:	3324      	adds	r3, #36	@ 0x24
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	4611      	mov	r1, r2
 800744a:	4618      	mov	r0, r3
 800744c:	f000 ffd8 	bl	8008400 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007450:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007452:	f000 fa60 	bl	8007916 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007456:	f000 fdf7 	bl	8008048 <xTaskResumeAll>
 800745a:	4603      	mov	r3, r0
 800745c:	2b00      	cmp	r3, #0
 800745e:	d189      	bne.n	8007374 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007460:	4b0f      	ldr	r3, [pc, #60]	@ (80074a0 <xQueueReceive+0x1c0>)
 8007462:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007466:	601a      	str	r2, [r3, #0]
 8007468:	f3bf 8f4f 	dsb	sy
 800746c:	f3bf 8f6f 	isb	sy
 8007470:	e780      	b.n	8007374 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007472:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007474:	f000 fa4f 	bl	8007916 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007478:	f000 fde6 	bl	8008048 <xTaskResumeAll>
 800747c:	e77a      	b.n	8007374 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800747e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007480:	f000 fa49 	bl	8007916 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007484:	f000 fde0 	bl	8008048 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007488:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800748a:	f000 fa96 	bl	80079ba <prvIsQueueEmpty>
 800748e:	4603      	mov	r3, r0
 8007490:	2b00      	cmp	r3, #0
 8007492:	f43f af6f 	beq.w	8007374 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007496:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007498:	4618      	mov	r0, r3
 800749a:	3730      	adds	r7, #48	@ 0x30
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}
 80074a0:	e000ed04 	.word	0xe000ed04

080074a4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b08e      	sub	sp, #56	@ 0x38
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80074ae:	2300      	movs	r3, #0
 80074b0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80074b6:	2300      	movs	r3, #0
 80074b8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80074ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d10b      	bne.n	80074d8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80074c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074c4:	f383 8811 	msr	BASEPRI, r3
 80074c8:	f3bf 8f6f 	isb	sy
 80074cc:	f3bf 8f4f 	dsb	sy
 80074d0:	623b      	str	r3, [r7, #32]
}
 80074d2:	bf00      	nop
 80074d4:	bf00      	nop
 80074d6:	e7fd      	b.n	80074d4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80074d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d00b      	beq.n	80074f8 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80074e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074e4:	f383 8811 	msr	BASEPRI, r3
 80074e8:	f3bf 8f6f 	isb	sy
 80074ec:	f3bf 8f4f 	dsb	sy
 80074f0:	61fb      	str	r3, [r7, #28]
}
 80074f2:	bf00      	nop
 80074f4:	bf00      	nop
 80074f6:	e7fd      	b.n	80074f4 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80074f8:	f001 f9a8 	bl	800884c <xTaskGetSchedulerState>
 80074fc:	4603      	mov	r3, r0
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d102      	bne.n	8007508 <xQueueSemaphoreTake+0x64>
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d101      	bne.n	800750c <xQueueSemaphoreTake+0x68>
 8007508:	2301      	movs	r3, #1
 800750a:	e000      	b.n	800750e <xQueueSemaphoreTake+0x6a>
 800750c:	2300      	movs	r3, #0
 800750e:	2b00      	cmp	r3, #0
 8007510:	d10b      	bne.n	800752a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8007512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007516:	f383 8811 	msr	BASEPRI, r3
 800751a:	f3bf 8f6f 	isb	sy
 800751e:	f3bf 8f4f 	dsb	sy
 8007522:	61bb      	str	r3, [r7, #24]
}
 8007524:	bf00      	nop
 8007526:	bf00      	nop
 8007528:	e7fd      	b.n	8007526 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800752a:	f001 ffb7 	bl	800949c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800752e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007530:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007532:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007536:	2b00      	cmp	r3, #0
 8007538:	d024      	beq.n	8007584 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800753a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800753c:	1e5a      	subs	r2, r3, #1
 800753e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007540:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d104      	bne.n	8007554 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800754a:	f001 faf9 	bl	8008b40 <pvTaskIncrementMutexHeldCount>
 800754e:	4602      	mov	r2, r0
 8007550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007552:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007556:	691b      	ldr	r3, [r3, #16]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d00f      	beq.n	800757c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800755c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800755e:	3310      	adds	r3, #16
 8007560:	4618      	mov	r0, r3
 8007562:	f000 ff9f 	bl	80084a4 <xTaskRemoveFromEventList>
 8007566:	4603      	mov	r3, r0
 8007568:	2b00      	cmp	r3, #0
 800756a:	d007      	beq.n	800757c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800756c:	4b54      	ldr	r3, [pc, #336]	@ (80076c0 <xQueueSemaphoreTake+0x21c>)
 800756e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007572:	601a      	str	r2, [r3, #0]
 8007574:	f3bf 8f4f 	dsb	sy
 8007578:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800757c:	f001 ffbe 	bl	80094fc <vPortExitCritical>
				return pdPASS;
 8007580:	2301      	movs	r3, #1
 8007582:	e098      	b.n	80076b6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d112      	bne.n	80075b0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800758a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800758c:	2b00      	cmp	r3, #0
 800758e:	d00b      	beq.n	80075a8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8007590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007594:	f383 8811 	msr	BASEPRI, r3
 8007598:	f3bf 8f6f 	isb	sy
 800759c:	f3bf 8f4f 	dsb	sy
 80075a0:	617b      	str	r3, [r7, #20]
}
 80075a2:	bf00      	nop
 80075a4:	bf00      	nop
 80075a6:	e7fd      	b.n	80075a4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80075a8:	f001 ffa8 	bl	80094fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80075ac:	2300      	movs	r3, #0
 80075ae:	e082      	b.n	80076b6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80075b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d106      	bne.n	80075c4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80075b6:	f107 030c 	add.w	r3, r7, #12
 80075ba:	4618      	mov	r0, r3
 80075bc:	f000 ffd6 	bl	800856c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80075c0:	2301      	movs	r3, #1
 80075c2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80075c4:	f001 ff9a 	bl	80094fc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80075c8:	f000 fd30 	bl	800802c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80075cc:	f001 ff66 	bl	800949c <vPortEnterCritical>
 80075d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075d2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80075d6:	b25b      	sxtb	r3, r3
 80075d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075dc:	d103      	bne.n	80075e6 <xQueueSemaphoreTake+0x142>
 80075de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075e0:	2200      	movs	r2, #0
 80075e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80075e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075e8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80075ec:	b25b      	sxtb	r3, r3
 80075ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075f2:	d103      	bne.n	80075fc <xQueueSemaphoreTake+0x158>
 80075f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075f6:	2200      	movs	r2, #0
 80075f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80075fc:	f001 ff7e 	bl	80094fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007600:	463a      	mov	r2, r7
 8007602:	f107 030c 	add.w	r3, r7, #12
 8007606:	4611      	mov	r1, r2
 8007608:	4618      	mov	r0, r3
 800760a:	f000 ffc5 	bl	8008598 <xTaskCheckForTimeOut>
 800760e:	4603      	mov	r3, r0
 8007610:	2b00      	cmp	r3, #0
 8007612:	d132      	bne.n	800767a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007614:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007616:	f000 f9d0 	bl	80079ba <prvIsQueueEmpty>
 800761a:	4603      	mov	r3, r0
 800761c:	2b00      	cmp	r3, #0
 800761e:	d026      	beq.n	800766e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d109      	bne.n	800763c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8007628:	f001 ff38 	bl	800949c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800762c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800762e:	689b      	ldr	r3, [r3, #8]
 8007630:	4618      	mov	r0, r3
 8007632:	f001 f929 	bl	8008888 <xTaskPriorityInherit>
 8007636:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8007638:	f001 ff60 	bl	80094fc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800763c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800763e:	3324      	adds	r3, #36	@ 0x24
 8007640:	683a      	ldr	r2, [r7, #0]
 8007642:	4611      	mov	r1, r2
 8007644:	4618      	mov	r0, r3
 8007646:	f000 fedb 	bl	8008400 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800764a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800764c:	f000 f963 	bl	8007916 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007650:	f000 fcfa 	bl	8008048 <xTaskResumeAll>
 8007654:	4603      	mov	r3, r0
 8007656:	2b00      	cmp	r3, #0
 8007658:	f47f af67 	bne.w	800752a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800765c:	4b18      	ldr	r3, [pc, #96]	@ (80076c0 <xQueueSemaphoreTake+0x21c>)
 800765e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007662:	601a      	str	r2, [r3, #0]
 8007664:	f3bf 8f4f 	dsb	sy
 8007668:	f3bf 8f6f 	isb	sy
 800766c:	e75d      	b.n	800752a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800766e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007670:	f000 f951 	bl	8007916 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007674:	f000 fce8 	bl	8008048 <xTaskResumeAll>
 8007678:	e757      	b.n	800752a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800767a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800767c:	f000 f94b 	bl	8007916 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007680:	f000 fce2 	bl	8008048 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007684:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007686:	f000 f998 	bl	80079ba <prvIsQueueEmpty>
 800768a:	4603      	mov	r3, r0
 800768c:	2b00      	cmp	r3, #0
 800768e:	f43f af4c 	beq.w	800752a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007694:	2b00      	cmp	r3, #0
 8007696:	d00d      	beq.n	80076b4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8007698:	f001 ff00 	bl	800949c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800769c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800769e:	f000 f893 	bl	80077c8 <prvGetDisinheritPriorityAfterTimeout>
 80076a2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80076a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80076aa:	4618      	mov	r0, r3
 80076ac:	f001 f9c4 	bl	8008a38 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80076b0:	f001 ff24 	bl	80094fc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80076b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3738      	adds	r7, #56	@ 0x38
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
 80076be:	bf00      	nop
 80076c0:	e000ed04 	.word	0xe000ed04

080076c4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b08e      	sub	sp, #56	@ 0x38
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	60f8      	str	r0, [r7, #12]
 80076cc:	60b9      	str	r1, [r7, #8]
 80076ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80076d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d10b      	bne.n	80076f2 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80076da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076de:	f383 8811 	msr	BASEPRI, r3
 80076e2:	f3bf 8f6f 	isb	sy
 80076e6:	f3bf 8f4f 	dsb	sy
 80076ea:	623b      	str	r3, [r7, #32]
}
 80076ec:	bf00      	nop
 80076ee:	bf00      	nop
 80076f0:	e7fd      	b.n	80076ee <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d103      	bne.n	8007700 <xQueueReceiveFromISR+0x3c>
 80076f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d101      	bne.n	8007704 <xQueueReceiveFromISR+0x40>
 8007700:	2301      	movs	r3, #1
 8007702:	e000      	b.n	8007706 <xQueueReceiveFromISR+0x42>
 8007704:	2300      	movs	r3, #0
 8007706:	2b00      	cmp	r3, #0
 8007708:	d10b      	bne.n	8007722 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800770a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800770e:	f383 8811 	msr	BASEPRI, r3
 8007712:	f3bf 8f6f 	isb	sy
 8007716:	f3bf 8f4f 	dsb	sy
 800771a:	61fb      	str	r3, [r7, #28]
}
 800771c:	bf00      	nop
 800771e:	bf00      	nop
 8007720:	e7fd      	b.n	800771e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007722:	f001 ff7d 	bl	8009620 <vPortValidateInterruptPriority>
	__asm volatile
 8007726:	f3ef 8211 	mrs	r2, BASEPRI
 800772a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800772e:	f383 8811 	msr	BASEPRI, r3
 8007732:	f3bf 8f6f 	isb	sy
 8007736:	f3bf 8f4f 	dsb	sy
 800773a:	61ba      	str	r2, [r7, #24]
 800773c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800773e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007740:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007746:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800774a:	2b00      	cmp	r3, #0
 800774c:	d02f      	beq.n	80077ae <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800774e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007750:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007754:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007758:	68b9      	ldr	r1, [r7, #8]
 800775a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800775c:	f000 f8b5 	bl	80078ca <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007762:	1e5a      	subs	r2, r3, #1
 8007764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007766:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007768:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800776c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007770:	d112      	bne.n	8007798 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007774:	691b      	ldr	r3, [r3, #16]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d016      	beq.n	80077a8 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800777a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800777c:	3310      	adds	r3, #16
 800777e:	4618      	mov	r0, r3
 8007780:	f000 fe90 	bl	80084a4 <xTaskRemoveFromEventList>
 8007784:	4603      	mov	r3, r0
 8007786:	2b00      	cmp	r3, #0
 8007788:	d00e      	beq.n	80077a8 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d00b      	beq.n	80077a8 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2201      	movs	r2, #1
 8007794:	601a      	str	r2, [r3, #0]
 8007796:	e007      	b.n	80077a8 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007798:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800779c:	3301      	adds	r3, #1
 800779e:	b2db      	uxtb	r3, r3
 80077a0:	b25a      	sxtb	r2, r3
 80077a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80077a8:	2301      	movs	r3, #1
 80077aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80077ac:	e001      	b.n	80077b2 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80077ae:	2300      	movs	r3, #0
 80077b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80077b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077b4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	f383 8811 	msr	BASEPRI, r3
}
 80077bc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80077be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3738      	adds	r7, #56	@ 0x38
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}

080077c8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80077c8:	b480      	push	{r7}
 80077ca:	b085      	sub	sp, #20
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d006      	beq.n	80077e6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80077e2:	60fb      	str	r3, [r7, #12]
 80077e4:	e001      	b.n	80077ea <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80077e6:	2300      	movs	r3, #0
 80077e8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80077ea:	68fb      	ldr	r3, [r7, #12]
	}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3714      	adds	r7, #20
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bc80      	pop	{r7}
 80077f4:	4770      	bx	lr

080077f6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80077f6:	b580      	push	{r7, lr}
 80077f8:	b086      	sub	sp, #24
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	60f8      	str	r0, [r7, #12]
 80077fe:	60b9      	str	r1, [r7, #8]
 8007800:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007802:	2300      	movs	r3, #0
 8007804:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800780a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007810:	2b00      	cmp	r3, #0
 8007812:	d10d      	bne.n	8007830 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d14d      	bne.n	80078b8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	4618      	mov	r0, r3
 8007822:	f001 f899 	bl	8008958 <xTaskPriorityDisinherit>
 8007826:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2200      	movs	r2, #0
 800782c:	609a      	str	r2, [r3, #8]
 800782e:	e043      	b.n	80078b8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d119      	bne.n	800786a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	6858      	ldr	r0, [r3, #4]
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800783e:	461a      	mov	r2, r3
 8007840:	68b9      	ldr	r1, [r7, #8]
 8007842:	f002 ffb4 	bl	800a7ae <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	685a      	ldr	r2, [r3, #4]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800784e:	441a      	add	r2, r3
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	685a      	ldr	r2, [r3, #4]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	429a      	cmp	r2, r3
 800785e:	d32b      	bcc.n	80078b8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681a      	ldr	r2, [r3, #0]
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	605a      	str	r2, [r3, #4]
 8007868:	e026      	b.n	80078b8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	68d8      	ldr	r0, [r3, #12]
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007872:	461a      	mov	r2, r3
 8007874:	68b9      	ldr	r1, [r7, #8]
 8007876:	f002 ff9a 	bl	800a7ae <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	68da      	ldr	r2, [r3, #12]
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007882:	425b      	negs	r3, r3
 8007884:	441a      	add	r2, r3
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	68da      	ldr	r2, [r3, #12]
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	429a      	cmp	r2, r3
 8007894:	d207      	bcs.n	80078a6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	689a      	ldr	r2, [r3, #8]
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800789e:	425b      	negs	r3, r3
 80078a0:	441a      	add	r2, r3
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2b02      	cmp	r3, #2
 80078aa:	d105      	bne.n	80078b8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d002      	beq.n	80078b8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	3b01      	subs	r3, #1
 80078b6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	1c5a      	adds	r2, r3, #1
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80078c0:	697b      	ldr	r3, [r7, #20]
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3718      	adds	r7, #24
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}

080078ca <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80078ca:	b580      	push	{r7, lr}
 80078cc:	b082      	sub	sp, #8
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	6078      	str	r0, [r7, #4]
 80078d2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d018      	beq.n	800790e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	68da      	ldr	r2, [r3, #12]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078e4:	441a      	add	r2, r3
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	68da      	ldr	r2, [r3, #12]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	689b      	ldr	r3, [r3, #8]
 80078f2:	429a      	cmp	r2, r3
 80078f4:	d303      	bcc.n	80078fe <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681a      	ldr	r2, [r3, #0]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	68d9      	ldr	r1, [r3, #12]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007906:	461a      	mov	r2, r3
 8007908:	6838      	ldr	r0, [r7, #0]
 800790a:	f002 ff50 	bl	800a7ae <memcpy>
	}
}
 800790e:	bf00      	nop
 8007910:	3708      	adds	r7, #8
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}

08007916 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007916:	b580      	push	{r7, lr}
 8007918:	b084      	sub	sp, #16
 800791a:	af00      	add	r7, sp, #0
 800791c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800791e:	f001 fdbd 	bl	800949c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007928:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800792a:	e011      	b.n	8007950 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007930:	2b00      	cmp	r3, #0
 8007932:	d012      	beq.n	800795a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	3324      	adds	r3, #36	@ 0x24
 8007938:	4618      	mov	r0, r3
 800793a:	f000 fdb3 	bl	80084a4 <xTaskRemoveFromEventList>
 800793e:	4603      	mov	r3, r0
 8007940:	2b00      	cmp	r3, #0
 8007942:	d001      	beq.n	8007948 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007944:	f000 fe8c 	bl	8008660 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007948:	7bfb      	ldrb	r3, [r7, #15]
 800794a:	3b01      	subs	r3, #1
 800794c:	b2db      	uxtb	r3, r3
 800794e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007950:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007954:	2b00      	cmp	r3, #0
 8007956:	dce9      	bgt.n	800792c <prvUnlockQueue+0x16>
 8007958:	e000      	b.n	800795c <prvUnlockQueue+0x46>
					break;
 800795a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	22ff      	movs	r2, #255	@ 0xff
 8007960:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007964:	f001 fdca 	bl	80094fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007968:	f001 fd98 	bl	800949c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007972:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007974:	e011      	b.n	800799a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	691b      	ldr	r3, [r3, #16]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d012      	beq.n	80079a4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	3310      	adds	r3, #16
 8007982:	4618      	mov	r0, r3
 8007984:	f000 fd8e 	bl	80084a4 <xTaskRemoveFromEventList>
 8007988:	4603      	mov	r3, r0
 800798a:	2b00      	cmp	r3, #0
 800798c:	d001      	beq.n	8007992 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800798e:	f000 fe67 	bl	8008660 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007992:	7bbb      	ldrb	r3, [r7, #14]
 8007994:	3b01      	subs	r3, #1
 8007996:	b2db      	uxtb	r3, r3
 8007998:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800799a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	dce9      	bgt.n	8007976 <prvUnlockQueue+0x60>
 80079a2:	e000      	b.n	80079a6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80079a4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	22ff      	movs	r2, #255	@ 0xff
 80079aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80079ae:	f001 fda5 	bl	80094fc <vPortExitCritical>
}
 80079b2:	bf00      	nop
 80079b4:	3710      	adds	r7, #16
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}

080079ba <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80079ba:	b580      	push	{r7, lr}
 80079bc:	b084      	sub	sp, #16
 80079be:	af00      	add	r7, sp, #0
 80079c0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80079c2:	f001 fd6b 	bl	800949c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d102      	bne.n	80079d4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80079ce:	2301      	movs	r3, #1
 80079d0:	60fb      	str	r3, [r7, #12]
 80079d2:	e001      	b.n	80079d8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80079d4:	2300      	movs	r3, #0
 80079d6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80079d8:	f001 fd90 	bl	80094fc <vPortExitCritical>

	return xReturn;
 80079dc:	68fb      	ldr	r3, [r7, #12]
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3710      	adds	r7, #16
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}

080079e6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80079e6:	b580      	push	{r7, lr}
 80079e8:	b084      	sub	sp, #16
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80079ee:	f001 fd55 	bl	800949c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079fa:	429a      	cmp	r2, r3
 80079fc:	d102      	bne.n	8007a04 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80079fe:	2301      	movs	r3, #1
 8007a00:	60fb      	str	r3, [r7, #12]
 8007a02:	e001      	b.n	8007a08 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007a04:	2300      	movs	r3, #0
 8007a06:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007a08:	f001 fd78 	bl	80094fc <vPortExitCritical>

	return xReturn;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3710      	adds	r7, #16
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
	...

08007a18 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007a18:	b480      	push	{r7}
 8007a1a:	b085      	sub	sp, #20
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007a22:	2300      	movs	r3, #0
 8007a24:	60fb      	str	r3, [r7, #12]
 8007a26:	e014      	b.n	8007a52 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007a28:	4a0e      	ldr	r2, [pc, #56]	@ (8007a64 <vQueueAddToRegistry+0x4c>)
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d10b      	bne.n	8007a4c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007a34:	490b      	ldr	r1, [pc, #44]	@ (8007a64 <vQueueAddToRegistry+0x4c>)
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	683a      	ldr	r2, [r7, #0]
 8007a3a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007a3e:	4a09      	ldr	r2, [pc, #36]	@ (8007a64 <vQueueAddToRegistry+0x4c>)
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	00db      	lsls	r3, r3, #3
 8007a44:	4413      	add	r3, r2
 8007a46:	687a      	ldr	r2, [r7, #4]
 8007a48:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007a4a:	e006      	b.n	8007a5a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	3301      	adds	r3, #1
 8007a50:	60fb      	str	r3, [r7, #12]
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2b07      	cmp	r3, #7
 8007a56:	d9e7      	bls.n	8007a28 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007a58:	bf00      	nop
 8007a5a:	bf00      	nop
 8007a5c:	3714      	adds	r7, #20
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bc80      	pop	{r7}
 8007a62:	4770      	bx	lr
 8007a64:	20000af8 	.word	0x20000af8

08007a68 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b086      	sub	sp, #24
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	60f8      	str	r0, [r7, #12]
 8007a70:	60b9      	str	r1, [r7, #8]
 8007a72:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007a78:	f001 fd10 	bl	800949c <vPortEnterCritical>
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007a82:	b25b      	sxtb	r3, r3
 8007a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a88:	d103      	bne.n	8007a92 <vQueueWaitForMessageRestricted+0x2a>
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007a98:	b25b      	sxtb	r3, r3
 8007a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a9e:	d103      	bne.n	8007aa8 <vQueueWaitForMessageRestricted+0x40>
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007aa8:	f001 fd28 	bl	80094fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d106      	bne.n	8007ac2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	3324      	adds	r3, #36	@ 0x24
 8007ab8:	687a      	ldr	r2, [r7, #4]
 8007aba:	68b9      	ldr	r1, [r7, #8]
 8007abc:	4618      	mov	r0, r3
 8007abe:	f000 fcc5 	bl	800844c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007ac2:	6978      	ldr	r0, [r7, #20]
 8007ac4:	f7ff ff27 	bl	8007916 <prvUnlockQueue>
	}
 8007ac8:	bf00      	nop
 8007aca:	3718      	adds	r7, #24
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}

08007ad0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b08e      	sub	sp, #56	@ 0x38
 8007ad4:	af04      	add	r7, sp, #16
 8007ad6:	60f8      	str	r0, [r7, #12]
 8007ad8:	60b9      	str	r1, [r7, #8]
 8007ada:	607a      	str	r2, [r7, #4]
 8007adc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007ade:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d10b      	bne.n	8007afc <xTaskCreateStatic+0x2c>
	__asm volatile
 8007ae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ae8:	f383 8811 	msr	BASEPRI, r3
 8007aec:	f3bf 8f6f 	isb	sy
 8007af0:	f3bf 8f4f 	dsb	sy
 8007af4:	623b      	str	r3, [r7, #32]
}
 8007af6:	bf00      	nop
 8007af8:	bf00      	nop
 8007afa:	e7fd      	b.n	8007af8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007afc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d10b      	bne.n	8007b1a <xTaskCreateStatic+0x4a>
	__asm volatile
 8007b02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b06:	f383 8811 	msr	BASEPRI, r3
 8007b0a:	f3bf 8f6f 	isb	sy
 8007b0e:	f3bf 8f4f 	dsb	sy
 8007b12:	61fb      	str	r3, [r7, #28]
}
 8007b14:	bf00      	nop
 8007b16:	bf00      	nop
 8007b18:	e7fd      	b.n	8007b16 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007b1a:	23a8      	movs	r3, #168	@ 0xa8
 8007b1c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	2ba8      	cmp	r3, #168	@ 0xa8
 8007b22:	d00b      	beq.n	8007b3c <xTaskCreateStatic+0x6c>
	__asm volatile
 8007b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b28:	f383 8811 	msr	BASEPRI, r3
 8007b2c:	f3bf 8f6f 	isb	sy
 8007b30:	f3bf 8f4f 	dsb	sy
 8007b34:	61bb      	str	r3, [r7, #24]
}
 8007b36:	bf00      	nop
 8007b38:	bf00      	nop
 8007b3a:	e7fd      	b.n	8007b38 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007b3c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007b3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d01e      	beq.n	8007b82 <xTaskCreateStatic+0xb2>
 8007b44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d01b      	beq.n	8007b82 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007b4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b4c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b50:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007b52:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b56:	2202      	movs	r2, #2
 8007b58:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	9303      	str	r3, [sp, #12]
 8007b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b62:	9302      	str	r3, [sp, #8]
 8007b64:	f107 0314 	add.w	r3, r7, #20
 8007b68:	9301      	str	r3, [sp, #4]
 8007b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b6c:	9300      	str	r3, [sp, #0]
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	68b9      	ldr	r1, [r7, #8]
 8007b74:	68f8      	ldr	r0, [r7, #12]
 8007b76:	f000 f851 	bl	8007c1c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007b7a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007b7c:	f000 f8f6 	bl	8007d6c <prvAddNewTaskToReadyList>
 8007b80:	e001      	b.n	8007b86 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007b82:	2300      	movs	r3, #0
 8007b84:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007b86:	697b      	ldr	r3, [r7, #20]
	}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3728      	adds	r7, #40	@ 0x28
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b08c      	sub	sp, #48	@ 0x30
 8007b94:	af04      	add	r7, sp, #16
 8007b96:	60f8      	str	r0, [r7, #12]
 8007b98:	60b9      	str	r1, [r7, #8]
 8007b9a:	603b      	str	r3, [r7, #0]
 8007b9c:	4613      	mov	r3, r2
 8007b9e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007ba0:	88fb      	ldrh	r3, [r7, #6]
 8007ba2:	009b      	lsls	r3, r3, #2
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f001 fd7b 	bl	80096a0 <pvPortMalloc>
 8007baa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d00e      	beq.n	8007bd0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007bb2:	20a8      	movs	r0, #168	@ 0xa8
 8007bb4:	f001 fd74 	bl	80096a0 <pvPortMalloc>
 8007bb8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007bba:	69fb      	ldr	r3, [r7, #28]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d003      	beq.n	8007bc8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007bc0:	69fb      	ldr	r3, [r7, #28]
 8007bc2:	697a      	ldr	r2, [r7, #20]
 8007bc4:	631a      	str	r2, [r3, #48]	@ 0x30
 8007bc6:	e005      	b.n	8007bd4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007bc8:	6978      	ldr	r0, [r7, #20]
 8007bca:	f001 fe37 	bl	800983c <vPortFree>
 8007bce:	e001      	b.n	8007bd4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007bd4:	69fb      	ldr	r3, [r7, #28]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d017      	beq.n	8007c0a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007bda:	69fb      	ldr	r3, [r7, #28]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007be2:	88fa      	ldrh	r2, [r7, #6]
 8007be4:	2300      	movs	r3, #0
 8007be6:	9303      	str	r3, [sp, #12]
 8007be8:	69fb      	ldr	r3, [r7, #28]
 8007bea:	9302      	str	r3, [sp, #8]
 8007bec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bee:	9301      	str	r3, [sp, #4]
 8007bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bf2:	9300      	str	r3, [sp, #0]
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	68b9      	ldr	r1, [r7, #8]
 8007bf8:	68f8      	ldr	r0, [r7, #12]
 8007bfa:	f000 f80f 	bl	8007c1c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007bfe:	69f8      	ldr	r0, [r7, #28]
 8007c00:	f000 f8b4 	bl	8007d6c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007c04:	2301      	movs	r3, #1
 8007c06:	61bb      	str	r3, [r7, #24]
 8007c08:	e002      	b.n	8007c10 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8007c0e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007c10:	69bb      	ldr	r3, [r7, #24]
	}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3720      	adds	r7, #32
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}
	...

08007c1c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b088      	sub	sp, #32
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	60f8      	str	r0, [r7, #12]
 8007c24:	60b9      	str	r1, [r7, #8]
 8007c26:	607a      	str	r2, [r7, #4]
 8007c28:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c2c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	009b      	lsls	r3, r3, #2
 8007c32:	461a      	mov	r2, r3
 8007c34:	21a5      	movs	r1, #165	@ 0xa5
 8007c36:	f002 fcce 	bl	800a5d6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c3c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007c44:	3b01      	subs	r3, #1
 8007c46:	009b      	lsls	r3, r3, #2
 8007c48:	4413      	add	r3, r2
 8007c4a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007c4c:	69bb      	ldr	r3, [r7, #24]
 8007c4e:	f023 0307 	bic.w	r3, r3, #7
 8007c52:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007c54:	69bb      	ldr	r3, [r7, #24]
 8007c56:	f003 0307 	and.w	r3, r3, #7
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d00b      	beq.n	8007c76 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c62:	f383 8811 	msr	BASEPRI, r3
 8007c66:	f3bf 8f6f 	isb	sy
 8007c6a:	f3bf 8f4f 	dsb	sy
 8007c6e:	617b      	str	r3, [r7, #20]
}
 8007c70:	bf00      	nop
 8007c72:	bf00      	nop
 8007c74:	e7fd      	b.n	8007c72 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d01f      	beq.n	8007cbc <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	61fb      	str	r3, [r7, #28]
 8007c80:	e012      	b.n	8007ca8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007c82:	68ba      	ldr	r2, [r7, #8]
 8007c84:	69fb      	ldr	r3, [r7, #28]
 8007c86:	4413      	add	r3, r2
 8007c88:	7819      	ldrb	r1, [r3, #0]
 8007c8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c8c:	69fb      	ldr	r3, [r7, #28]
 8007c8e:	4413      	add	r3, r2
 8007c90:	3334      	adds	r3, #52	@ 0x34
 8007c92:	460a      	mov	r2, r1
 8007c94:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007c96:	68ba      	ldr	r2, [r7, #8]
 8007c98:	69fb      	ldr	r3, [r7, #28]
 8007c9a:	4413      	add	r3, r2
 8007c9c:	781b      	ldrb	r3, [r3, #0]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d006      	beq.n	8007cb0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007ca2:	69fb      	ldr	r3, [r7, #28]
 8007ca4:	3301      	adds	r3, #1
 8007ca6:	61fb      	str	r3, [r7, #28]
 8007ca8:	69fb      	ldr	r3, [r7, #28]
 8007caa:	2b0f      	cmp	r3, #15
 8007cac:	d9e9      	bls.n	8007c82 <prvInitialiseNewTask+0x66>
 8007cae:	e000      	b.n	8007cb2 <prvInitialiseNewTask+0x96>
			{
				break;
 8007cb0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007cba:	e003      	b.n	8007cc4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cc6:	2b37      	cmp	r3, #55	@ 0x37
 8007cc8:	d901      	bls.n	8007cce <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007cca:	2337      	movs	r3, #55	@ 0x37
 8007ccc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cd0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007cd2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cd6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007cd8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cdc:	2200      	movs	r2, #0
 8007cde:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ce2:	3304      	adds	r3, #4
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f7fe fecc 	bl	8006a82 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cec:	3318      	adds	r3, #24
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f7fe fec7 	bl	8006a82 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cf6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cf8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cfc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d02:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d08:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d14:	2200      	movs	r2, #0
 8007d16:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d1c:	3354      	adds	r3, #84	@ 0x54
 8007d1e:	224c      	movs	r2, #76	@ 0x4c
 8007d20:	2100      	movs	r1, #0
 8007d22:	4618      	mov	r0, r3
 8007d24:	f002 fc57 	bl	800a5d6 <memset>
 8007d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d2a:	4a0d      	ldr	r2, [pc, #52]	@ (8007d60 <prvInitialiseNewTask+0x144>)
 8007d2c:	659a      	str	r2, [r3, #88]	@ 0x58
 8007d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d30:	4a0c      	ldr	r2, [pc, #48]	@ (8007d64 <prvInitialiseNewTask+0x148>)
 8007d32:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d36:	4a0c      	ldr	r2, [pc, #48]	@ (8007d68 <prvInitialiseNewTask+0x14c>)
 8007d38:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007d3a:	683a      	ldr	r2, [r7, #0]
 8007d3c:	68f9      	ldr	r1, [r7, #12]
 8007d3e:	69b8      	ldr	r0, [r7, #24]
 8007d40:	f001 fabe 	bl	80092c0 <pxPortInitialiseStack>
 8007d44:	4602      	mov	r2, r0
 8007d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d48:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007d4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d002      	beq.n	8007d56 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007d50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d56:	bf00      	nop
 8007d58:	3720      	adds	r7, #32
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
 8007d5e:	bf00      	nop
 8007d60:	2000298c 	.word	0x2000298c
 8007d64:	200029f4 	.word	0x200029f4
 8007d68:	20002a5c 	.word	0x20002a5c

08007d6c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b082      	sub	sp, #8
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007d74:	f001 fb92 	bl	800949c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007d78:	4b2d      	ldr	r3, [pc, #180]	@ (8007e30 <prvAddNewTaskToReadyList+0xc4>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	3301      	adds	r3, #1
 8007d7e:	4a2c      	ldr	r2, [pc, #176]	@ (8007e30 <prvAddNewTaskToReadyList+0xc4>)
 8007d80:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007d82:	4b2c      	ldr	r3, [pc, #176]	@ (8007e34 <prvAddNewTaskToReadyList+0xc8>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d109      	bne.n	8007d9e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007d8a:	4a2a      	ldr	r2, [pc, #168]	@ (8007e34 <prvAddNewTaskToReadyList+0xc8>)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007d90:	4b27      	ldr	r3, [pc, #156]	@ (8007e30 <prvAddNewTaskToReadyList+0xc4>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	d110      	bne.n	8007dba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007d98:	f000 fc86 	bl	80086a8 <prvInitialiseTaskLists>
 8007d9c:	e00d      	b.n	8007dba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007d9e:	4b26      	ldr	r3, [pc, #152]	@ (8007e38 <prvAddNewTaskToReadyList+0xcc>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d109      	bne.n	8007dba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007da6:	4b23      	ldr	r3, [pc, #140]	@ (8007e34 <prvAddNewTaskToReadyList+0xc8>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007db0:	429a      	cmp	r2, r3
 8007db2:	d802      	bhi.n	8007dba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007db4:	4a1f      	ldr	r2, [pc, #124]	@ (8007e34 <prvAddNewTaskToReadyList+0xc8>)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007dba:	4b20      	ldr	r3, [pc, #128]	@ (8007e3c <prvAddNewTaskToReadyList+0xd0>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	4a1e      	ldr	r2, [pc, #120]	@ (8007e3c <prvAddNewTaskToReadyList+0xd0>)
 8007dc2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007dc4:	4b1d      	ldr	r3, [pc, #116]	@ (8007e3c <prvAddNewTaskToReadyList+0xd0>)
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dd0:	4b1b      	ldr	r3, [pc, #108]	@ (8007e40 <prvAddNewTaskToReadyList+0xd4>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	429a      	cmp	r2, r3
 8007dd6:	d903      	bls.n	8007de0 <prvAddNewTaskToReadyList+0x74>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ddc:	4a18      	ldr	r2, [pc, #96]	@ (8007e40 <prvAddNewTaskToReadyList+0xd4>)
 8007dde:	6013      	str	r3, [r2, #0]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007de4:	4613      	mov	r3, r2
 8007de6:	009b      	lsls	r3, r3, #2
 8007de8:	4413      	add	r3, r2
 8007dea:	009b      	lsls	r3, r3, #2
 8007dec:	4a15      	ldr	r2, [pc, #84]	@ (8007e44 <prvAddNewTaskToReadyList+0xd8>)
 8007dee:	441a      	add	r2, r3
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	3304      	adds	r3, #4
 8007df4:	4619      	mov	r1, r3
 8007df6:	4610      	mov	r0, r2
 8007df8:	f7fe fe4f 	bl	8006a9a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007dfc:	f001 fb7e 	bl	80094fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007e00:	4b0d      	ldr	r3, [pc, #52]	@ (8007e38 <prvAddNewTaskToReadyList+0xcc>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d00e      	beq.n	8007e26 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007e08:	4b0a      	ldr	r3, [pc, #40]	@ (8007e34 <prvAddNewTaskToReadyList+0xc8>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e12:	429a      	cmp	r2, r3
 8007e14:	d207      	bcs.n	8007e26 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007e16:	4b0c      	ldr	r3, [pc, #48]	@ (8007e48 <prvAddNewTaskToReadyList+0xdc>)
 8007e18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e1c:	601a      	str	r2, [r3, #0]
 8007e1e:	f3bf 8f4f 	dsb	sy
 8007e22:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e26:	bf00      	nop
 8007e28:	3708      	adds	r7, #8
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}
 8007e2e:	bf00      	nop
 8007e30:	2000100c 	.word	0x2000100c
 8007e34:	20000b38 	.word	0x20000b38
 8007e38:	20001018 	.word	0x20001018
 8007e3c:	20001028 	.word	0x20001028
 8007e40:	20001014 	.word	0x20001014
 8007e44:	20000b3c 	.word	0x20000b3c
 8007e48:	e000ed04 	.word	0xe000ed04

08007e4c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b08a      	sub	sp, #40	@ 0x28
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8007e56:	2300      	movs	r3, #0
 8007e58:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d10b      	bne.n	8007e78 <vTaskDelayUntil+0x2c>
	__asm volatile
 8007e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e64:	f383 8811 	msr	BASEPRI, r3
 8007e68:	f3bf 8f6f 	isb	sy
 8007e6c:	f3bf 8f4f 	dsb	sy
 8007e70:	617b      	str	r3, [r7, #20]
}
 8007e72:	bf00      	nop
 8007e74:	bf00      	nop
 8007e76:	e7fd      	b.n	8007e74 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d10b      	bne.n	8007e96 <vTaskDelayUntil+0x4a>
	__asm volatile
 8007e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e82:	f383 8811 	msr	BASEPRI, r3
 8007e86:	f3bf 8f6f 	isb	sy
 8007e8a:	f3bf 8f4f 	dsb	sy
 8007e8e:	613b      	str	r3, [r7, #16]
}
 8007e90:	bf00      	nop
 8007e92:	bf00      	nop
 8007e94:	e7fd      	b.n	8007e92 <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 8007e96:	4b2a      	ldr	r3, [pc, #168]	@ (8007f40 <vTaskDelayUntil+0xf4>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d00b      	beq.n	8007eb6 <vTaskDelayUntil+0x6a>
	__asm volatile
 8007e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ea2:	f383 8811 	msr	BASEPRI, r3
 8007ea6:	f3bf 8f6f 	isb	sy
 8007eaa:	f3bf 8f4f 	dsb	sy
 8007eae:	60fb      	str	r3, [r7, #12]
}
 8007eb0:	bf00      	nop
 8007eb2:	bf00      	nop
 8007eb4:	e7fd      	b.n	8007eb2 <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 8007eb6:	f000 f8b9 	bl	800802c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8007eba:	4b22      	ldr	r3, [pc, #136]	@ (8007f44 <vTaskDelayUntil+0xf8>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	683a      	ldr	r2, [r7, #0]
 8007ec6:	4413      	add	r3, r2
 8007ec8:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	6a3a      	ldr	r2, [r7, #32]
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d20b      	bcs.n	8007eec <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	69fa      	ldr	r2, [r7, #28]
 8007eda:	429a      	cmp	r2, r3
 8007edc:	d211      	bcs.n	8007f02 <vTaskDelayUntil+0xb6>
 8007ede:	69fa      	ldr	r2, [r7, #28]
 8007ee0:	6a3b      	ldr	r3, [r7, #32]
 8007ee2:	429a      	cmp	r2, r3
 8007ee4:	d90d      	bls.n	8007f02 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	627b      	str	r3, [r7, #36]	@ 0x24
 8007eea:	e00a      	b.n	8007f02 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	69fa      	ldr	r2, [r7, #28]
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d303      	bcc.n	8007efe <vTaskDelayUntil+0xb2>
 8007ef6:	69fa      	ldr	r2, [r7, #28]
 8007ef8:	6a3b      	ldr	r3, [r7, #32]
 8007efa:	429a      	cmp	r2, r3
 8007efc:	d901      	bls.n	8007f02 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8007efe:	2301      	movs	r3, #1
 8007f00:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	69fa      	ldr	r2, [r7, #28]
 8007f06:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8007f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d006      	beq.n	8007f1c <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8007f0e:	69fa      	ldr	r2, [r7, #28]
 8007f10:	6a3b      	ldr	r3, [r7, #32]
 8007f12:	1ad3      	subs	r3, r2, r3
 8007f14:	2100      	movs	r1, #0
 8007f16:	4618      	mov	r0, r3
 8007f18:	f000 fe26 	bl	8008b68 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8007f1c:	f000 f894 	bl	8008048 <xTaskResumeAll>
 8007f20:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007f22:	69bb      	ldr	r3, [r7, #24]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d107      	bne.n	8007f38 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8007f28:	4b07      	ldr	r3, [pc, #28]	@ (8007f48 <vTaskDelayUntil+0xfc>)
 8007f2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f2e:	601a      	str	r2, [r3, #0]
 8007f30:	f3bf 8f4f 	dsb	sy
 8007f34:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007f38:	bf00      	nop
 8007f3a:	3728      	adds	r7, #40	@ 0x28
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}
 8007f40:	20001034 	.word	0x20001034
 8007f44:	20001010 	.word	0x20001010
 8007f48:	e000ed04 	.word	0xe000ed04

08007f4c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b08a      	sub	sp, #40	@ 0x28
 8007f50:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007f52:	2300      	movs	r3, #0
 8007f54:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007f56:	2300      	movs	r3, #0
 8007f58:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007f5a:	463a      	mov	r2, r7
 8007f5c:	1d39      	adds	r1, r7, #4
 8007f5e:	f107 0308 	add.w	r3, r7, #8
 8007f62:	4618      	mov	r0, r3
 8007f64:	f7fe fd3c 	bl	80069e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007f68:	6839      	ldr	r1, [r7, #0]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	68ba      	ldr	r2, [r7, #8]
 8007f6e:	9202      	str	r2, [sp, #8]
 8007f70:	9301      	str	r3, [sp, #4]
 8007f72:	2300      	movs	r3, #0
 8007f74:	9300      	str	r3, [sp, #0]
 8007f76:	2300      	movs	r3, #0
 8007f78:	460a      	mov	r2, r1
 8007f7a:	4924      	ldr	r1, [pc, #144]	@ (800800c <vTaskStartScheduler+0xc0>)
 8007f7c:	4824      	ldr	r0, [pc, #144]	@ (8008010 <vTaskStartScheduler+0xc4>)
 8007f7e:	f7ff fda7 	bl	8007ad0 <xTaskCreateStatic>
 8007f82:	4603      	mov	r3, r0
 8007f84:	4a23      	ldr	r2, [pc, #140]	@ (8008014 <vTaskStartScheduler+0xc8>)
 8007f86:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007f88:	4b22      	ldr	r3, [pc, #136]	@ (8008014 <vTaskStartScheduler+0xc8>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d002      	beq.n	8007f96 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007f90:	2301      	movs	r3, #1
 8007f92:	617b      	str	r3, [r7, #20]
 8007f94:	e001      	b.n	8007f9a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007f96:	2300      	movs	r3, #0
 8007f98:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	d102      	bne.n	8007fa6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007fa0:	f000 fe36 	bl	8008c10 <xTimerCreateTimerTask>
 8007fa4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	2b01      	cmp	r3, #1
 8007faa:	d11b      	bne.n	8007fe4 <vTaskStartScheduler+0x98>
	__asm volatile
 8007fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fb0:	f383 8811 	msr	BASEPRI, r3
 8007fb4:	f3bf 8f6f 	isb	sy
 8007fb8:	f3bf 8f4f 	dsb	sy
 8007fbc:	613b      	str	r3, [r7, #16]
}
 8007fbe:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007fc0:	4b15      	ldr	r3, [pc, #84]	@ (8008018 <vTaskStartScheduler+0xcc>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	3354      	adds	r3, #84	@ 0x54
 8007fc6:	4a15      	ldr	r2, [pc, #84]	@ (800801c <vTaskStartScheduler+0xd0>)
 8007fc8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007fca:	4b15      	ldr	r3, [pc, #84]	@ (8008020 <vTaskStartScheduler+0xd4>)
 8007fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8007fd0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007fd2:	4b14      	ldr	r3, [pc, #80]	@ (8008024 <vTaskStartScheduler+0xd8>)
 8007fd4:	2201      	movs	r2, #1
 8007fd6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007fd8:	4b13      	ldr	r3, [pc, #76]	@ (8008028 <vTaskStartScheduler+0xdc>)
 8007fda:	2200      	movs	r2, #0
 8007fdc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007fde:	f001 f9eb 	bl	80093b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007fe2:	e00f      	b.n	8008004 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007fe4:	697b      	ldr	r3, [r7, #20]
 8007fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fea:	d10b      	bne.n	8008004 <vTaskStartScheduler+0xb8>
	__asm volatile
 8007fec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ff0:	f383 8811 	msr	BASEPRI, r3
 8007ff4:	f3bf 8f6f 	isb	sy
 8007ff8:	f3bf 8f4f 	dsb	sy
 8007ffc:	60fb      	str	r3, [r7, #12]
}
 8007ffe:	bf00      	nop
 8008000:	bf00      	nop
 8008002:	e7fd      	b.n	8008000 <vTaskStartScheduler+0xb4>
}
 8008004:	bf00      	nop
 8008006:	3718      	adds	r7, #24
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}
 800800c:	0800d290 	.word	0x0800d290
 8008010:	08008679 	.word	0x08008679
 8008014:	20001030 	.word	0x20001030
 8008018:	20000b38 	.word	0x20000b38
 800801c:	20000034 	.word	0x20000034
 8008020:	2000102c 	.word	0x2000102c
 8008024:	20001018 	.word	0x20001018
 8008028:	20001010 	.word	0x20001010

0800802c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800802c:	b480      	push	{r7}
 800802e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008030:	4b04      	ldr	r3, [pc, #16]	@ (8008044 <vTaskSuspendAll+0x18>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	3301      	adds	r3, #1
 8008036:	4a03      	ldr	r2, [pc, #12]	@ (8008044 <vTaskSuspendAll+0x18>)
 8008038:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800803a:	bf00      	nop
 800803c:	46bd      	mov	sp, r7
 800803e:	bc80      	pop	{r7}
 8008040:	4770      	bx	lr
 8008042:	bf00      	nop
 8008044:	20001034 	.word	0x20001034

08008048 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b084      	sub	sp, #16
 800804c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800804e:	2300      	movs	r3, #0
 8008050:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008052:	2300      	movs	r3, #0
 8008054:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008056:	4b42      	ldr	r3, [pc, #264]	@ (8008160 <xTaskResumeAll+0x118>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d10b      	bne.n	8008076 <xTaskResumeAll+0x2e>
	__asm volatile
 800805e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008062:	f383 8811 	msr	BASEPRI, r3
 8008066:	f3bf 8f6f 	isb	sy
 800806a:	f3bf 8f4f 	dsb	sy
 800806e:	603b      	str	r3, [r7, #0]
}
 8008070:	bf00      	nop
 8008072:	bf00      	nop
 8008074:	e7fd      	b.n	8008072 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008076:	f001 fa11 	bl	800949c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800807a:	4b39      	ldr	r3, [pc, #228]	@ (8008160 <xTaskResumeAll+0x118>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	3b01      	subs	r3, #1
 8008080:	4a37      	ldr	r2, [pc, #220]	@ (8008160 <xTaskResumeAll+0x118>)
 8008082:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008084:	4b36      	ldr	r3, [pc, #216]	@ (8008160 <xTaskResumeAll+0x118>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d162      	bne.n	8008152 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800808c:	4b35      	ldr	r3, [pc, #212]	@ (8008164 <xTaskResumeAll+0x11c>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d05e      	beq.n	8008152 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008094:	e02f      	b.n	80080f6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008096:	4b34      	ldr	r3, [pc, #208]	@ (8008168 <xTaskResumeAll+0x120>)
 8008098:	68db      	ldr	r3, [r3, #12]
 800809a:	68db      	ldr	r3, [r3, #12]
 800809c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	3318      	adds	r3, #24
 80080a2:	4618      	mov	r0, r3
 80080a4:	f7fe fd54 	bl	8006b50 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	3304      	adds	r3, #4
 80080ac:	4618      	mov	r0, r3
 80080ae:	f7fe fd4f 	bl	8006b50 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080b6:	4b2d      	ldr	r3, [pc, #180]	@ (800816c <xTaskResumeAll+0x124>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	429a      	cmp	r2, r3
 80080bc:	d903      	bls.n	80080c6 <xTaskResumeAll+0x7e>
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080c2:	4a2a      	ldr	r2, [pc, #168]	@ (800816c <xTaskResumeAll+0x124>)
 80080c4:	6013      	str	r3, [r2, #0]
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080ca:	4613      	mov	r3, r2
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	4413      	add	r3, r2
 80080d0:	009b      	lsls	r3, r3, #2
 80080d2:	4a27      	ldr	r2, [pc, #156]	@ (8008170 <xTaskResumeAll+0x128>)
 80080d4:	441a      	add	r2, r3
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	3304      	adds	r3, #4
 80080da:	4619      	mov	r1, r3
 80080dc:	4610      	mov	r0, r2
 80080de:	f7fe fcdc 	bl	8006a9a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080e6:	4b23      	ldr	r3, [pc, #140]	@ (8008174 <xTaskResumeAll+0x12c>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d302      	bcc.n	80080f6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80080f0:	4b21      	ldr	r3, [pc, #132]	@ (8008178 <xTaskResumeAll+0x130>)
 80080f2:	2201      	movs	r2, #1
 80080f4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80080f6:	4b1c      	ldr	r3, [pc, #112]	@ (8008168 <xTaskResumeAll+0x120>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d1cb      	bne.n	8008096 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d001      	beq.n	8008108 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008104:	f000 fb74 	bl	80087f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008108:	4b1c      	ldr	r3, [pc, #112]	@ (800817c <xTaskResumeAll+0x134>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d010      	beq.n	8008136 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008114:	f000 f856 	bl	80081c4 <xTaskIncrementTick>
 8008118:	4603      	mov	r3, r0
 800811a:	2b00      	cmp	r3, #0
 800811c:	d002      	beq.n	8008124 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800811e:	4b16      	ldr	r3, [pc, #88]	@ (8008178 <xTaskResumeAll+0x130>)
 8008120:	2201      	movs	r2, #1
 8008122:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	3b01      	subs	r3, #1
 8008128:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d1f1      	bne.n	8008114 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008130:	4b12      	ldr	r3, [pc, #72]	@ (800817c <xTaskResumeAll+0x134>)
 8008132:	2200      	movs	r2, #0
 8008134:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008136:	4b10      	ldr	r3, [pc, #64]	@ (8008178 <xTaskResumeAll+0x130>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d009      	beq.n	8008152 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800813e:	2301      	movs	r3, #1
 8008140:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008142:	4b0f      	ldr	r3, [pc, #60]	@ (8008180 <xTaskResumeAll+0x138>)
 8008144:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008148:	601a      	str	r2, [r3, #0]
 800814a:	f3bf 8f4f 	dsb	sy
 800814e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008152:	f001 f9d3 	bl	80094fc <vPortExitCritical>

	return xAlreadyYielded;
 8008156:	68bb      	ldr	r3, [r7, #8]
}
 8008158:	4618      	mov	r0, r3
 800815a:	3710      	adds	r7, #16
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}
 8008160:	20001034 	.word	0x20001034
 8008164:	2000100c 	.word	0x2000100c
 8008168:	20000fcc 	.word	0x20000fcc
 800816c:	20001014 	.word	0x20001014
 8008170:	20000b3c 	.word	0x20000b3c
 8008174:	20000b38 	.word	0x20000b38
 8008178:	20001020 	.word	0x20001020
 800817c:	2000101c 	.word	0x2000101c
 8008180:	e000ed04 	.word	0xe000ed04

08008184 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008184:	b480      	push	{r7}
 8008186:	b083      	sub	sp, #12
 8008188:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800818a:	4b04      	ldr	r3, [pc, #16]	@ (800819c <xTaskGetTickCount+0x18>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008190:	687b      	ldr	r3, [r7, #4]
}
 8008192:	4618      	mov	r0, r3
 8008194:	370c      	adds	r7, #12
 8008196:	46bd      	mov	sp, r7
 8008198:	bc80      	pop	{r7}
 800819a:	4770      	bx	lr
 800819c:	20001010 	.word	0x20001010

080081a0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b082      	sub	sp, #8
 80081a4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80081a6:	f001 fa3b 	bl	8009620 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80081aa:	2300      	movs	r3, #0
 80081ac:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80081ae:	4b04      	ldr	r3, [pc, #16]	@ (80081c0 <xTaskGetTickCountFromISR+0x20>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80081b4:	683b      	ldr	r3, [r7, #0]
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3708      	adds	r7, #8
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}
 80081be:	bf00      	nop
 80081c0:	20001010 	.word	0x20001010

080081c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b086      	sub	sp, #24
 80081c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80081ca:	2300      	movs	r3, #0
 80081cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081ce:	4b4f      	ldr	r3, [pc, #316]	@ (800830c <xTaskIncrementTick+0x148>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	f040 8090 	bne.w	80082f8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80081d8:	4b4d      	ldr	r3, [pc, #308]	@ (8008310 <xTaskIncrementTick+0x14c>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	3301      	adds	r3, #1
 80081de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80081e0:	4a4b      	ldr	r2, [pc, #300]	@ (8008310 <xTaskIncrementTick+0x14c>)
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d121      	bne.n	8008230 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80081ec:	4b49      	ldr	r3, [pc, #292]	@ (8008314 <xTaskIncrementTick+0x150>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d00b      	beq.n	800820e <xTaskIncrementTick+0x4a>
	__asm volatile
 80081f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081fa:	f383 8811 	msr	BASEPRI, r3
 80081fe:	f3bf 8f6f 	isb	sy
 8008202:	f3bf 8f4f 	dsb	sy
 8008206:	603b      	str	r3, [r7, #0]
}
 8008208:	bf00      	nop
 800820a:	bf00      	nop
 800820c:	e7fd      	b.n	800820a <xTaskIncrementTick+0x46>
 800820e:	4b41      	ldr	r3, [pc, #260]	@ (8008314 <xTaskIncrementTick+0x150>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	60fb      	str	r3, [r7, #12]
 8008214:	4b40      	ldr	r3, [pc, #256]	@ (8008318 <xTaskIncrementTick+0x154>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a3e      	ldr	r2, [pc, #248]	@ (8008314 <xTaskIncrementTick+0x150>)
 800821a:	6013      	str	r3, [r2, #0]
 800821c:	4a3e      	ldr	r2, [pc, #248]	@ (8008318 <xTaskIncrementTick+0x154>)
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	6013      	str	r3, [r2, #0]
 8008222:	4b3e      	ldr	r3, [pc, #248]	@ (800831c <xTaskIncrementTick+0x158>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	3301      	adds	r3, #1
 8008228:	4a3c      	ldr	r2, [pc, #240]	@ (800831c <xTaskIncrementTick+0x158>)
 800822a:	6013      	str	r3, [r2, #0]
 800822c:	f000 fae0 	bl	80087f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008230:	4b3b      	ldr	r3, [pc, #236]	@ (8008320 <xTaskIncrementTick+0x15c>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	693a      	ldr	r2, [r7, #16]
 8008236:	429a      	cmp	r2, r3
 8008238:	d349      	bcc.n	80082ce <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800823a:	4b36      	ldr	r3, [pc, #216]	@ (8008314 <xTaskIncrementTick+0x150>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d104      	bne.n	800824e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008244:	4b36      	ldr	r3, [pc, #216]	@ (8008320 <xTaskIncrementTick+0x15c>)
 8008246:	f04f 32ff 	mov.w	r2, #4294967295
 800824a:	601a      	str	r2, [r3, #0]
					break;
 800824c:	e03f      	b.n	80082ce <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800824e:	4b31      	ldr	r3, [pc, #196]	@ (8008314 <xTaskIncrementTick+0x150>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	68db      	ldr	r3, [r3, #12]
 8008254:	68db      	ldr	r3, [r3, #12]
 8008256:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	685b      	ldr	r3, [r3, #4]
 800825c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800825e:	693a      	ldr	r2, [r7, #16]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	429a      	cmp	r2, r3
 8008264:	d203      	bcs.n	800826e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008266:	4a2e      	ldr	r2, [pc, #184]	@ (8008320 <xTaskIncrementTick+0x15c>)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800826c:	e02f      	b.n	80082ce <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	3304      	adds	r3, #4
 8008272:	4618      	mov	r0, r3
 8008274:	f7fe fc6c 	bl	8006b50 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800827c:	2b00      	cmp	r3, #0
 800827e:	d004      	beq.n	800828a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	3318      	adds	r3, #24
 8008284:	4618      	mov	r0, r3
 8008286:	f7fe fc63 	bl	8006b50 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800828e:	4b25      	ldr	r3, [pc, #148]	@ (8008324 <xTaskIncrementTick+0x160>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	429a      	cmp	r2, r3
 8008294:	d903      	bls.n	800829e <xTaskIncrementTick+0xda>
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800829a:	4a22      	ldr	r2, [pc, #136]	@ (8008324 <xTaskIncrementTick+0x160>)
 800829c:	6013      	str	r3, [r2, #0]
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082a2:	4613      	mov	r3, r2
 80082a4:	009b      	lsls	r3, r3, #2
 80082a6:	4413      	add	r3, r2
 80082a8:	009b      	lsls	r3, r3, #2
 80082aa:	4a1f      	ldr	r2, [pc, #124]	@ (8008328 <xTaskIncrementTick+0x164>)
 80082ac:	441a      	add	r2, r3
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	3304      	adds	r3, #4
 80082b2:	4619      	mov	r1, r3
 80082b4:	4610      	mov	r0, r2
 80082b6:	f7fe fbf0 	bl	8006a9a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082be:	4b1b      	ldr	r3, [pc, #108]	@ (800832c <xTaskIncrementTick+0x168>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082c4:	429a      	cmp	r2, r3
 80082c6:	d3b8      	bcc.n	800823a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80082c8:	2301      	movs	r3, #1
 80082ca:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80082cc:	e7b5      	b.n	800823a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80082ce:	4b17      	ldr	r3, [pc, #92]	@ (800832c <xTaskIncrementTick+0x168>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082d4:	4914      	ldr	r1, [pc, #80]	@ (8008328 <xTaskIncrementTick+0x164>)
 80082d6:	4613      	mov	r3, r2
 80082d8:	009b      	lsls	r3, r3, #2
 80082da:	4413      	add	r3, r2
 80082dc:	009b      	lsls	r3, r3, #2
 80082de:	440b      	add	r3, r1
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	d901      	bls.n	80082ea <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80082e6:	2301      	movs	r3, #1
 80082e8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80082ea:	4b11      	ldr	r3, [pc, #68]	@ (8008330 <xTaskIncrementTick+0x16c>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d007      	beq.n	8008302 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80082f2:	2301      	movs	r3, #1
 80082f4:	617b      	str	r3, [r7, #20]
 80082f6:	e004      	b.n	8008302 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80082f8:	4b0e      	ldr	r3, [pc, #56]	@ (8008334 <xTaskIncrementTick+0x170>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	3301      	adds	r3, #1
 80082fe:	4a0d      	ldr	r2, [pc, #52]	@ (8008334 <xTaskIncrementTick+0x170>)
 8008300:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008302:	697b      	ldr	r3, [r7, #20]
}
 8008304:	4618      	mov	r0, r3
 8008306:	3718      	adds	r7, #24
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}
 800830c:	20001034 	.word	0x20001034
 8008310:	20001010 	.word	0x20001010
 8008314:	20000fc4 	.word	0x20000fc4
 8008318:	20000fc8 	.word	0x20000fc8
 800831c:	20001024 	.word	0x20001024
 8008320:	2000102c 	.word	0x2000102c
 8008324:	20001014 	.word	0x20001014
 8008328:	20000b3c 	.word	0x20000b3c
 800832c:	20000b38 	.word	0x20000b38
 8008330:	20001020 	.word	0x20001020
 8008334:	2000101c 	.word	0x2000101c

08008338 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008338:	b480      	push	{r7}
 800833a:	b085      	sub	sp, #20
 800833c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800833e:	4b2a      	ldr	r3, [pc, #168]	@ (80083e8 <vTaskSwitchContext+0xb0>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d003      	beq.n	800834e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008346:	4b29      	ldr	r3, [pc, #164]	@ (80083ec <vTaskSwitchContext+0xb4>)
 8008348:	2201      	movs	r2, #1
 800834a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800834c:	e047      	b.n	80083de <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800834e:	4b27      	ldr	r3, [pc, #156]	@ (80083ec <vTaskSwitchContext+0xb4>)
 8008350:	2200      	movs	r2, #0
 8008352:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008354:	4b26      	ldr	r3, [pc, #152]	@ (80083f0 <vTaskSwitchContext+0xb8>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	60fb      	str	r3, [r7, #12]
 800835a:	e011      	b.n	8008380 <vTaskSwitchContext+0x48>
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d10b      	bne.n	800837a <vTaskSwitchContext+0x42>
	__asm volatile
 8008362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008366:	f383 8811 	msr	BASEPRI, r3
 800836a:	f3bf 8f6f 	isb	sy
 800836e:	f3bf 8f4f 	dsb	sy
 8008372:	607b      	str	r3, [r7, #4]
}
 8008374:	bf00      	nop
 8008376:	bf00      	nop
 8008378:	e7fd      	b.n	8008376 <vTaskSwitchContext+0x3e>
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	3b01      	subs	r3, #1
 800837e:	60fb      	str	r3, [r7, #12]
 8008380:	491c      	ldr	r1, [pc, #112]	@ (80083f4 <vTaskSwitchContext+0xbc>)
 8008382:	68fa      	ldr	r2, [r7, #12]
 8008384:	4613      	mov	r3, r2
 8008386:	009b      	lsls	r3, r3, #2
 8008388:	4413      	add	r3, r2
 800838a:	009b      	lsls	r3, r3, #2
 800838c:	440b      	add	r3, r1
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d0e3      	beq.n	800835c <vTaskSwitchContext+0x24>
 8008394:	68fa      	ldr	r2, [r7, #12]
 8008396:	4613      	mov	r3, r2
 8008398:	009b      	lsls	r3, r3, #2
 800839a:	4413      	add	r3, r2
 800839c:	009b      	lsls	r3, r3, #2
 800839e:	4a15      	ldr	r2, [pc, #84]	@ (80083f4 <vTaskSwitchContext+0xbc>)
 80083a0:	4413      	add	r3, r2
 80083a2:	60bb      	str	r3, [r7, #8]
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	685b      	ldr	r3, [r3, #4]
 80083a8:	685a      	ldr	r2, [r3, #4]
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	605a      	str	r2, [r3, #4]
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	685a      	ldr	r2, [r3, #4]
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	3308      	adds	r3, #8
 80083b6:	429a      	cmp	r2, r3
 80083b8:	d104      	bne.n	80083c4 <vTaskSwitchContext+0x8c>
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	685a      	ldr	r2, [r3, #4]
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	605a      	str	r2, [r3, #4]
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	685b      	ldr	r3, [r3, #4]
 80083c8:	68db      	ldr	r3, [r3, #12]
 80083ca:	4a0b      	ldr	r2, [pc, #44]	@ (80083f8 <vTaskSwitchContext+0xc0>)
 80083cc:	6013      	str	r3, [r2, #0]
 80083ce:	4a08      	ldr	r2, [pc, #32]	@ (80083f0 <vTaskSwitchContext+0xb8>)
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80083d4:	4b08      	ldr	r3, [pc, #32]	@ (80083f8 <vTaskSwitchContext+0xc0>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	3354      	adds	r3, #84	@ 0x54
 80083da:	4a08      	ldr	r2, [pc, #32]	@ (80083fc <vTaskSwitchContext+0xc4>)
 80083dc:	6013      	str	r3, [r2, #0]
}
 80083de:	bf00      	nop
 80083e0:	3714      	adds	r7, #20
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bc80      	pop	{r7}
 80083e6:	4770      	bx	lr
 80083e8:	20001034 	.word	0x20001034
 80083ec:	20001020 	.word	0x20001020
 80083f0:	20001014 	.word	0x20001014
 80083f4:	20000b3c 	.word	0x20000b3c
 80083f8:	20000b38 	.word	0x20000b38
 80083fc:	20000034 	.word	0x20000034

08008400 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b084      	sub	sp, #16
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d10b      	bne.n	8008428 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008414:	f383 8811 	msr	BASEPRI, r3
 8008418:	f3bf 8f6f 	isb	sy
 800841c:	f3bf 8f4f 	dsb	sy
 8008420:	60fb      	str	r3, [r7, #12]
}
 8008422:	bf00      	nop
 8008424:	bf00      	nop
 8008426:	e7fd      	b.n	8008424 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008428:	4b07      	ldr	r3, [pc, #28]	@ (8008448 <vTaskPlaceOnEventList+0x48>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	3318      	adds	r3, #24
 800842e:	4619      	mov	r1, r3
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f7fe fb55 	bl	8006ae0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008436:	2101      	movs	r1, #1
 8008438:	6838      	ldr	r0, [r7, #0]
 800843a:	f000 fb95 	bl	8008b68 <prvAddCurrentTaskToDelayedList>
}
 800843e:	bf00      	nop
 8008440:	3710      	adds	r7, #16
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}
 8008446:	bf00      	nop
 8008448:	20000b38 	.word	0x20000b38

0800844c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800844c:	b580      	push	{r7, lr}
 800844e:	b086      	sub	sp, #24
 8008450:	af00      	add	r7, sp, #0
 8008452:	60f8      	str	r0, [r7, #12]
 8008454:	60b9      	str	r1, [r7, #8]
 8008456:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d10b      	bne.n	8008476 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800845e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008462:	f383 8811 	msr	BASEPRI, r3
 8008466:	f3bf 8f6f 	isb	sy
 800846a:	f3bf 8f4f 	dsb	sy
 800846e:	617b      	str	r3, [r7, #20]
}
 8008470:	bf00      	nop
 8008472:	bf00      	nop
 8008474:	e7fd      	b.n	8008472 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008476:	4b0a      	ldr	r3, [pc, #40]	@ (80084a0 <vTaskPlaceOnEventListRestricted+0x54>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	3318      	adds	r3, #24
 800847c:	4619      	mov	r1, r3
 800847e:	68f8      	ldr	r0, [r7, #12]
 8008480:	f7fe fb0b 	bl	8006a9a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d002      	beq.n	8008490 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800848a:	f04f 33ff 	mov.w	r3, #4294967295
 800848e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008490:	6879      	ldr	r1, [r7, #4]
 8008492:	68b8      	ldr	r0, [r7, #8]
 8008494:	f000 fb68 	bl	8008b68 <prvAddCurrentTaskToDelayedList>
	}
 8008498:	bf00      	nop
 800849a:	3718      	adds	r7, #24
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}
 80084a0:	20000b38 	.word	0x20000b38

080084a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b086      	sub	sp, #24
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	68db      	ldr	r3, [r3, #12]
 80084b0:	68db      	ldr	r3, [r3, #12]
 80084b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d10b      	bne.n	80084d2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80084ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084be:	f383 8811 	msr	BASEPRI, r3
 80084c2:	f3bf 8f6f 	isb	sy
 80084c6:	f3bf 8f4f 	dsb	sy
 80084ca:	60fb      	str	r3, [r7, #12]
}
 80084cc:	bf00      	nop
 80084ce:	bf00      	nop
 80084d0:	e7fd      	b.n	80084ce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	3318      	adds	r3, #24
 80084d6:	4618      	mov	r0, r3
 80084d8:	f7fe fb3a 	bl	8006b50 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80084dc:	4b1d      	ldr	r3, [pc, #116]	@ (8008554 <xTaskRemoveFromEventList+0xb0>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d11d      	bne.n	8008520 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	3304      	adds	r3, #4
 80084e8:	4618      	mov	r0, r3
 80084ea:	f7fe fb31 	bl	8006b50 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084f2:	4b19      	ldr	r3, [pc, #100]	@ (8008558 <xTaskRemoveFromEventList+0xb4>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	429a      	cmp	r2, r3
 80084f8:	d903      	bls.n	8008502 <xTaskRemoveFromEventList+0x5e>
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084fe:	4a16      	ldr	r2, [pc, #88]	@ (8008558 <xTaskRemoveFromEventList+0xb4>)
 8008500:	6013      	str	r3, [r2, #0]
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008506:	4613      	mov	r3, r2
 8008508:	009b      	lsls	r3, r3, #2
 800850a:	4413      	add	r3, r2
 800850c:	009b      	lsls	r3, r3, #2
 800850e:	4a13      	ldr	r2, [pc, #76]	@ (800855c <xTaskRemoveFromEventList+0xb8>)
 8008510:	441a      	add	r2, r3
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	3304      	adds	r3, #4
 8008516:	4619      	mov	r1, r3
 8008518:	4610      	mov	r0, r2
 800851a:	f7fe fabe 	bl	8006a9a <vListInsertEnd>
 800851e:	e005      	b.n	800852c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	3318      	adds	r3, #24
 8008524:	4619      	mov	r1, r3
 8008526:	480e      	ldr	r0, [pc, #56]	@ (8008560 <xTaskRemoveFromEventList+0xbc>)
 8008528:	f7fe fab7 	bl	8006a9a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008530:	4b0c      	ldr	r3, [pc, #48]	@ (8008564 <xTaskRemoveFromEventList+0xc0>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008536:	429a      	cmp	r2, r3
 8008538:	d905      	bls.n	8008546 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800853a:	2301      	movs	r3, #1
 800853c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800853e:	4b0a      	ldr	r3, [pc, #40]	@ (8008568 <xTaskRemoveFromEventList+0xc4>)
 8008540:	2201      	movs	r2, #1
 8008542:	601a      	str	r2, [r3, #0]
 8008544:	e001      	b.n	800854a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008546:	2300      	movs	r3, #0
 8008548:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800854a:	697b      	ldr	r3, [r7, #20]
}
 800854c:	4618      	mov	r0, r3
 800854e:	3718      	adds	r7, #24
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}
 8008554:	20001034 	.word	0x20001034
 8008558:	20001014 	.word	0x20001014
 800855c:	20000b3c 	.word	0x20000b3c
 8008560:	20000fcc 	.word	0x20000fcc
 8008564:	20000b38 	.word	0x20000b38
 8008568:	20001020 	.word	0x20001020

0800856c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800856c:	b480      	push	{r7}
 800856e:	b083      	sub	sp, #12
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008574:	4b06      	ldr	r3, [pc, #24]	@ (8008590 <vTaskInternalSetTimeOutState+0x24>)
 8008576:	681a      	ldr	r2, [r3, #0]
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800857c:	4b05      	ldr	r3, [pc, #20]	@ (8008594 <vTaskInternalSetTimeOutState+0x28>)
 800857e:	681a      	ldr	r2, [r3, #0]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	605a      	str	r2, [r3, #4]
}
 8008584:	bf00      	nop
 8008586:	370c      	adds	r7, #12
 8008588:	46bd      	mov	sp, r7
 800858a:	bc80      	pop	{r7}
 800858c:	4770      	bx	lr
 800858e:	bf00      	nop
 8008590:	20001024 	.word	0x20001024
 8008594:	20001010 	.word	0x20001010

08008598 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b088      	sub	sp, #32
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d10b      	bne.n	80085c0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80085a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085ac:	f383 8811 	msr	BASEPRI, r3
 80085b0:	f3bf 8f6f 	isb	sy
 80085b4:	f3bf 8f4f 	dsb	sy
 80085b8:	613b      	str	r3, [r7, #16]
}
 80085ba:	bf00      	nop
 80085bc:	bf00      	nop
 80085be:	e7fd      	b.n	80085bc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d10b      	bne.n	80085de <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80085c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085ca:	f383 8811 	msr	BASEPRI, r3
 80085ce:	f3bf 8f6f 	isb	sy
 80085d2:	f3bf 8f4f 	dsb	sy
 80085d6:	60fb      	str	r3, [r7, #12]
}
 80085d8:	bf00      	nop
 80085da:	bf00      	nop
 80085dc:	e7fd      	b.n	80085da <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80085de:	f000 ff5d 	bl	800949c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80085e2:	4b1d      	ldr	r3, [pc, #116]	@ (8008658 <xTaskCheckForTimeOut+0xc0>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	685b      	ldr	r3, [r3, #4]
 80085ec:	69ba      	ldr	r2, [r7, #24]
 80085ee:	1ad3      	subs	r3, r2, r3
 80085f0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085fa:	d102      	bne.n	8008602 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80085fc:	2300      	movs	r3, #0
 80085fe:	61fb      	str	r3, [r7, #28]
 8008600:	e023      	b.n	800864a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681a      	ldr	r2, [r3, #0]
 8008606:	4b15      	ldr	r3, [pc, #84]	@ (800865c <xTaskCheckForTimeOut+0xc4>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	429a      	cmp	r2, r3
 800860c:	d007      	beq.n	800861e <xTaskCheckForTimeOut+0x86>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	69ba      	ldr	r2, [r7, #24]
 8008614:	429a      	cmp	r2, r3
 8008616:	d302      	bcc.n	800861e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008618:	2301      	movs	r3, #1
 800861a:	61fb      	str	r3, [r7, #28]
 800861c:	e015      	b.n	800864a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	697a      	ldr	r2, [r7, #20]
 8008624:	429a      	cmp	r2, r3
 8008626:	d20b      	bcs.n	8008640 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	681a      	ldr	r2, [r3, #0]
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	1ad2      	subs	r2, r2, r3
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f7ff ff99 	bl	800856c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800863a:	2300      	movs	r3, #0
 800863c:	61fb      	str	r3, [r7, #28]
 800863e:	e004      	b.n	800864a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	2200      	movs	r2, #0
 8008644:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008646:	2301      	movs	r3, #1
 8008648:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800864a:	f000 ff57 	bl	80094fc <vPortExitCritical>

	return xReturn;
 800864e:	69fb      	ldr	r3, [r7, #28]
}
 8008650:	4618      	mov	r0, r3
 8008652:	3720      	adds	r7, #32
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}
 8008658:	20001010 	.word	0x20001010
 800865c:	20001024 	.word	0x20001024

08008660 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008660:	b480      	push	{r7}
 8008662:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008664:	4b03      	ldr	r3, [pc, #12]	@ (8008674 <vTaskMissedYield+0x14>)
 8008666:	2201      	movs	r2, #1
 8008668:	601a      	str	r2, [r3, #0]
}
 800866a:	bf00      	nop
 800866c:	46bd      	mov	sp, r7
 800866e:	bc80      	pop	{r7}
 8008670:	4770      	bx	lr
 8008672:	bf00      	nop
 8008674:	20001020 	.word	0x20001020

08008678 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b082      	sub	sp, #8
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008680:	f000 f852 	bl	8008728 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008684:	4b06      	ldr	r3, [pc, #24]	@ (80086a0 <prvIdleTask+0x28>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	2b01      	cmp	r3, #1
 800868a:	d9f9      	bls.n	8008680 <prvIdleTask+0x8>
			{
				taskYIELD();
 800868c:	4b05      	ldr	r3, [pc, #20]	@ (80086a4 <prvIdleTask+0x2c>)
 800868e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008692:	601a      	str	r2, [r3, #0]
 8008694:	f3bf 8f4f 	dsb	sy
 8008698:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800869c:	e7f0      	b.n	8008680 <prvIdleTask+0x8>
 800869e:	bf00      	nop
 80086a0:	20000b3c 	.word	0x20000b3c
 80086a4:	e000ed04 	.word	0xe000ed04

080086a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b082      	sub	sp, #8
 80086ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80086ae:	2300      	movs	r3, #0
 80086b0:	607b      	str	r3, [r7, #4]
 80086b2:	e00c      	b.n	80086ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80086b4:	687a      	ldr	r2, [r7, #4]
 80086b6:	4613      	mov	r3, r2
 80086b8:	009b      	lsls	r3, r3, #2
 80086ba:	4413      	add	r3, r2
 80086bc:	009b      	lsls	r3, r3, #2
 80086be:	4a12      	ldr	r2, [pc, #72]	@ (8008708 <prvInitialiseTaskLists+0x60>)
 80086c0:	4413      	add	r3, r2
 80086c2:	4618      	mov	r0, r3
 80086c4:	f7fe f9be 	bl	8006a44 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	3301      	adds	r3, #1
 80086cc:	607b      	str	r3, [r7, #4]
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2b37      	cmp	r3, #55	@ 0x37
 80086d2:	d9ef      	bls.n	80086b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80086d4:	480d      	ldr	r0, [pc, #52]	@ (800870c <prvInitialiseTaskLists+0x64>)
 80086d6:	f7fe f9b5 	bl	8006a44 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80086da:	480d      	ldr	r0, [pc, #52]	@ (8008710 <prvInitialiseTaskLists+0x68>)
 80086dc:	f7fe f9b2 	bl	8006a44 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80086e0:	480c      	ldr	r0, [pc, #48]	@ (8008714 <prvInitialiseTaskLists+0x6c>)
 80086e2:	f7fe f9af 	bl	8006a44 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80086e6:	480c      	ldr	r0, [pc, #48]	@ (8008718 <prvInitialiseTaskLists+0x70>)
 80086e8:	f7fe f9ac 	bl	8006a44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80086ec:	480b      	ldr	r0, [pc, #44]	@ (800871c <prvInitialiseTaskLists+0x74>)
 80086ee:	f7fe f9a9 	bl	8006a44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80086f2:	4b0b      	ldr	r3, [pc, #44]	@ (8008720 <prvInitialiseTaskLists+0x78>)
 80086f4:	4a05      	ldr	r2, [pc, #20]	@ (800870c <prvInitialiseTaskLists+0x64>)
 80086f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80086f8:	4b0a      	ldr	r3, [pc, #40]	@ (8008724 <prvInitialiseTaskLists+0x7c>)
 80086fa:	4a05      	ldr	r2, [pc, #20]	@ (8008710 <prvInitialiseTaskLists+0x68>)
 80086fc:	601a      	str	r2, [r3, #0]
}
 80086fe:	bf00      	nop
 8008700:	3708      	adds	r7, #8
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
 8008706:	bf00      	nop
 8008708:	20000b3c 	.word	0x20000b3c
 800870c:	20000f9c 	.word	0x20000f9c
 8008710:	20000fb0 	.word	0x20000fb0
 8008714:	20000fcc 	.word	0x20000fcc
 8008718:	20000fe0 	.word	0x20000fe0
 800871c:	20000ff8 	.word	0x20000ff8
 8008720:	20000fc4 	.word	0x20000fc4
 8008724:	20000fc8 	.word	0x20000fc8

08008728 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b082      	sub	sp, #8
 800872c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800872e:	e019      	b.n	8008764 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008730:	f000 feb4 	bl	800949c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008734:	4b10      	ldr	r3, [pc, #64]	@ (8008778 <prvCheckTasksWaitingTermination+0x50>)
 8008736:	68db      	ldr	r3, [r3, #12]
 8008738:	68db      	ldr	r3, [r3, #12]
 800873a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	3304      	adds	r3, #4
 8008740:	4618      	mov	r0, r3
 8008742:	f7fe fa05 	bl	8006b50 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008746:	4b0d      	ldr	r3, [pc, #52]	@ (800877c <prvCheckTasksWaitingTermination+0x54>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	3b01      	subs	r3, #1
 800874c:	4a0b      	ldr	r2, [pc, #44]	@ (800877c <prvCheckTasksWaitingTermination+0x54>)
 800874e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008750:	4b0b      	ldr	r3, [pc, #44]	@ (8008780 <prvCheckTasksWaitingTermination+0x58>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	3b01      	subs	r3, #1
 8008756:	4a0a      	ldr	r2, [pc, #40]	@ (8008780 <prvCheckTasksWaitingTermination+0x58>)
 8008758:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800875a:	f000 fecf 	bl	80094fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f000 f810 	bl	8008784 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008764:	4b06      	ldr	r3, [pc, #24]	@ (8008780 <prvCheckTasksWaitingTermination+0x58>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d1e1      	bne.n	8008730 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800876c:	bf00      	nop
 800876e:	bf00      	nop
 8008770:	3708      	adds	r7, #8
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
 8008776:	bf00      	nop
 8008778:	20000fe0 	.word	0x20000fe0
 800877c:	2000100c 	.word	0x2000100c
 8008780:	20000ff4 	.word	0x20000ff4

08008784 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008784:	b580      	push	{r7, lr}
 8008786:	b084      	sub	sp, #16
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	3354      	adds	r3, #84	@ 0x54
 8008790:	4618      	mov	r0, r3
 8008792:	f001 ff3d 	bl	800a610 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800879c:	2b00      	cmp	r3, #0
 800879e:	d108      	bne.n	80087b2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087a4:	4618      	mov	r0, r3
 80087a6:	f001 f849 	bl	800983c <vPortFree>
				vPortFree( pxTCB );
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f001 f846 	bl	800983c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80087b0:	e019      	b.n	80087e6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80087b8:	2b01      	cmp	r3, #1
 80087ba:	d103      	bne.n	80087c4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f001 f83d 	bl	800983c <vPortFree>
	}
 80087c2:	e010      	b.n	80087e6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80087ca:	2b02      	cmp	r3, #2
 80087cc:	d00b      	beq.n	80087e6 <prvDeleteTCB+0x62>
	__asm volatile
 80087ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087d2:	f383 8811 	msr	BASEPRI, r3
 80087d6:	f3bf 8f6f 	isb	sy
 80087da:	f3bf 8f4f 	dsb	sy
 80087de:	60fb      	str	r3, [r7, #12]
}
 80087e0:	bf00      	nop
 80087e2:	bf00      	nop
 80087e4:	e7fd      	b.n	80087e2 <prvDeleteTCB+0x5e>
	}
 80087e6:	bf00      	nop
 80087e8:	3710      	adds	r7, #16
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
	...

080087f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80087f0:	b480      	push	{r7}
 80087f2:	b083      	sub	sp, #12
 80087f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80087f6:	4b0c      	ldr	r3, [pc, #48]	@ (8008828 <prvResetNextTaskUnblockTime+0x38>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d104      	bne.n	800880a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008800:	4b0a      	ldr	r3, [pc, #40]	@ (800882c <prvResetNextTaskUnblockTime+0x3c>)
 8008802:	f04f 32ff 	mov.w	r2, #4294967295
 8008806:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008808:	e008      	b.n	800881c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800880a:	4b07      	ldr	r3, [pc, #28]	@ (8008828 <prvResetNextTaskUnblockTime+0x38>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	68db      	ldr	r3, [r3, #12]
 8008810:	68db      	ldr	r3, [r3, #12]
 8008812:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	4a04      	ldr	r2, [pc, #16]	@ (800882c <prvResetNextTaskUnblockTime+0x3c>)
 800881a:	6013      	str	r3, [r2, #0]
}
 800881c:	bf00      	nop
 800881e:	370c      	adds	r7, #12
 8008820:	46bd      	mov	sp, r7
 8008822:	bc80      	pop	{r7}
 8008824:	4770      	bx	lr
 8008826:	bf00      	nop
 8008828:	20000fc4 	.word	0x20000fc4
 800882c:	2000102c 	.word	0x2000102c

08008830 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8008830:	b480      	push	{r7}
 8008832:	b083      	sub	sp, #12
 8008834:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8008836:	4b04      	ldr	r3, [pc, #16]	@ (8008848 <xTaskGetCurrentTaskHandle+0x18>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800883c:	687b      	ldr	r3, [r7, #4]
	}
 800883e:	4618      	mov	r0, r3
 8008840:	370c      	adds	r7, #12
 8008842:	46bd      	mov	sp, r7
 8008844:	bc80      	pop	{r7}
 8008846:	4770      	bx	lr
 8008848:	20000b38 	.word	0x20000b38

0800884c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800884c:	b480      	push	{r7}
 800884e:	b083      	sub	sp, #12
 8008850:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008852:	4b0b      	ldr	r3, [pc, #44]	@ (8008880 <xTaskGetSchedulerState+0x34>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d102      	bne.n	8008860 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800885a:	2301      	movs	r3, #1
 800885c:	607b      	str	r3, [r7, #4]
 800885e:	e008      	b.n	8008872 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008860:	4b08      	ldr	r3, [pc, #32]	@ (8008884 <xTaskGetSchedulerState+0x38>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d102      	bne.n	800886e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008868:	2302      	movs	r3, #2
 800886a:	607b      	str	r3, [r7, #4]
 800886c:	e001      	b.n	8008872 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800886e:	2300      	movs	r3, #0
 8008870:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008872:	687b      	ldr	r3, [r7, #4]
	}
 8008874:	4618      	mov	r0, r3
 8008876:	370c      	adds	r7, #12
 8008878:	46bd      	mov	sp, r7
 800887a:	bc80      	pop	{r7}
 800887c:	4770      	bx	lr
 800887e:	bf00      	nop
 8008880:	20001018 	.word	0x20001018
 8008884:	20001034 	.word	0x20001034

08008888 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008888:	b580      	push	{r7, lr}
 800888a:	b084      	sub	sp, #16
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008894:	2300      	movs	r3, #0
 8008896:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d051      	beq.n	8008942 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088a2:	4b2a      	ldr	r3, [pc, #168]	@ (800894c <xTaskPriorityInherit+0xc4>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d241      	bcs.n	8008930 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	699b      	ldr	r3, [r3, #24]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	db06      	blt.n	80088c2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088b4:	4b25      	ldr	r3, [pc, #148]	@ (800894c <xTaskPriorityInherit+0xc4>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088ba:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	6959      	ldr	r1, [r3, #20]
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088ca:	4613      	mov	r3, r2
 80088cc:	009b      	lsls	r3, r3, #2
 80088ce:	4413      	add	r3, r2
 80088d0:	009b      	lsls	r3, r3, #2
 80088d2:	4a1f      	ldr	r2, [pc, #124]	@ (8008950 <xTaskPriorityInherit+0xc8>)
 80088d4:	4413      	add	r3, r2
 80088d6:	4299      	cmp	r1, r3
 80088d8:	d122      	bne.n	8008920 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	3304      	adds	r3, #4
 80088de:	4618      	mov	r0, r3
 80088e0:	f7fe f936 	bl	8006b50 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80088e4:	4b19      	ldr	r3, [pc, #100]	@ (800894c <xTaskPriorityInherit+0xc4>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088f2:	4b18      	ldr	r3, [pc, #96]	@ (8008954 <xTaskPriorityInherit+0xcc>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	429a      	cmp	r2, r3
 80088f8:	d903      	bls.n	8008902 <xTaskPriorityInherit+0x7a>
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088fe:	4a15      	ldr	r2, [pc, #84]	@ (8008954 <xTaskPriorityInherit+0xcc>)
 8008900:	6013      	str	r3, [r2, #0]
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008906:	4613      	mov	r3, r2
 8008908:	009b      	lsls	r3, r3, #2
 800890a:	4413      	add	r3, r2
 800890c:	009b      	lsls	r3, r3, #2
 800890e:	4a10      	ldr	r2, [pc, #64]	@ (8008950 <xTaskPriorityInherit+0xc8>)
 8008910:	441a      	add	r2, r3
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	3304      	adds	r3, #4
 8008916:	4619      	mov	r1, r3
 8008918:	4610      	mov	r0, r2
 800891a:	f7fe f8be 	bl	8006a9a <vListInsertEnd>
 800891e:	e004      	b.n	800892a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008920:	4b0a      	ldr	r3, [pc, #40]	@ (800894c <xTaskPriorityInherit+0xc4>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800892a:	2301      	movs	r3, #1
 800892c:	60fb      	str	r3, [r7, #12]
 800892e:	e008      	b.n	8008942 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008934:	4b05      	ldr	r3, [pc, #20]	@ (800894c <xTaskPriorityInherit+0xc4>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800893a:	429a      	cmp	r2, r3
 800893c:	d201      	bcs.n	8008942 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800893e:	2301      	movs	r3, #1
 8008940:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008942:	68fb      	ldr	r3, [r7, #12]
	}
 8008944:	4618      	mov	r0, r3
 8008946:	3710      	adds	r7, #16
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}
 800894c:	20000b38 	.word	0x20000b38
 8008950:	20000b3c 	.word	0x20000b3c
 8008954:	20001014 	.word	0x20001014

08008958 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008958:	b580      	push	{r7, lr}
 800895a:	b086      	sub	sp, #24
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008964:	2300      	movs	r3, #0
 8008966:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d058      	beq.n	8008a20 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800896e:	4b2f      	ldr	r3, [pc, #188]	@ (8008a2c <xTaskPriorityDisinherit+0xd4>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	693a      	ldr	r2, [r7, #16]
 8008974:	429a      	cmp	r2, r3
 8008976:	d00b      	beq.n	8008990 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800897c:	f383 8811 	msr	BASEPRI, r3
 8008980:	f3bf 8f6f 	isb	sy
 8008984:	f3bf 8f4f 	dsb	sy
 8008988:	60fb      	str	r3, [r7, #12]
}
 800898a:	bf00      	nop
 800898c:	bf00      	nop
 800898e:	e7fd      	b.n	800898c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008990:	693b      	ldr	r3, [r7, #16]
 8008992:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008994:	2b00      	cmp	r3, #0
 8008996:	d10b      	bne.n	80089b0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800899c:	f383 8811 	msr	BASEPRI, r3
 80089a0:	f3bf 8f6f 	isb	sy
 80089a4:	f3bf 8f4f 	dsb	sy
 80089a8:	60bb      	str	r3, [r7, #8]
}
 80089aa:	bf00      	nop
 80089ac:	bf00      	nop
 80089ae:	e7fd      	b.n	80089ac <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089b4:	1e5a      	subs	r2, r3, #1
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80089ba:	693b      	ldr	r3, [r7, #16]
 80089bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80089c2:	429a      	cmp	r2, r3
 80089c4:	d02c      	beq.n	8008a20 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d128      	bne.n	8008a20 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80089ce:	693b      	ldr	r3, [r7, #16]
 80089d0:	3304      	adds	r3, #4
 80089d2:	4618      	mov	r0, r3
 80089d4:	f7fe f8bc 	bl	8006b50 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80089dc:	693b      	ldr	r3, [r7, #16]
 80089de:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089e4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089f0:	4b0f      	ldr	r3, [pc, #60]	@ (8008a30 <xTaskPriorityDisinherit+0xd8>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	429a      	cmp	r2, r3
 80089f6:	d903      	bls.n	8008a00 <xTaskPriorityDisinherit+0xa8>
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089fc:	4a0c      	ldr	r2, [pc, #48]	@ (8008a30 <xTaskPriorityDisinherit+0xd8>)
 80089fe:	6013      	str	r3, [r2, #0]
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a04:	4613      	mov	r3, r2
 8008a06:	009b      	lsls	r3, r3, #2
 8008a08:	4413      	add	r3, r2
 8008a0a:	009b      	lsls	r3, r3, #2
 8008a0c:	4a09      	ldr	r2, [pc, #36]	@ (8008a34 <xTaskPriorityDisinherit+0xdc>)
 8008a0e:	441a      	add	r2, r3
 8008a10:	693b      	ldr	r3, [r7, #16]
 8008a12:	3304      	adds	r3, #4
 8008a14:	4619      	mov	r1, r3
 8008a16:	4610      	mov	r0, r2
 8008a18:	f7fe f83f 	bl	8006a9a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008a20:	697b      	ldr	r3, [r7, #20]
	}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3718      	adds	r7, #24
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}
 8008a2a:	bf00      	nop
 8008a2c:	20000b38 	.word	0x20000b38
 8008a30:	20001014 	.word	0x20001014
 8008a34:	20000b3c 	.word	0x20000b3c

08008a38 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b088      	sub	sp, #32
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
 8008a40:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008a46:	2301      	movs	r3, #1
 8008a48:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d06c      	beq.n	8008b2a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008a50:	69bb      	ldr	r3, [r7, #24]
 8008a52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d10b      	bne.n	8008a70 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8008a58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a5c:	f383 8811 	msr	BASEPRI, r3
 8008a60:	f3bf 8f6f 	isb	sy
 8008a64:	f3bf 8f4f 	dsb	sy
 8008a68:	60fb      	str	r3, [r7, #12]
}
 8008a6a:	bf00      	nop
 8008a6c:	bf00      	nop
 8008a6e:	e7fd      	b.n	8008a6c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008a70:	69bb      	ldr	r3, [r7, #24]
 8008a72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a74:	683a      	ldr	r2, [r7, #0]
 8008a76:	429a      	cmp	r2, r3
 8008a78:	d902      	bls.n	8008a80 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	61fb      	str	r3, [r7, #28]
 8008a7e:	e002      	b.n	8008a86 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008a80:	69bb      	ldr	r3, [r7, #24]
 8008a82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a84:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008a86:	69bb      	ldr	r3, [r7, #24]
 8008a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a8a:	69fa      	ldr	r2, [r7, #28]
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	d04c      	beq.n	8008b2a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008a90:	69bb      	ldr	r3, [r7, #24]
 8008a92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a94:	697a      	ldr	r2, [r7, #20]
 8008a96:	429a      	cmp	r2, r3
 8008a98:	d147      	bne.n	8008b2a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008a9a:	4b26      	ldr	r3, [pc, #152]	@ (8008b34 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	69ba      	ldr	r2, [r7, #24]
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d10b      	bne.n	8008abc <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8008aa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aa8:	f383 8811 	msr	BASEPRI, r3
 8008aac:	f3bf 8f6f 	isb	sy
 8008ab0:	f3bf 8f4f 	dsb	sy
 8008ab4:	60bb      	str	r3, [r7, #8]
}
 8008ab6:	bf00      	nop
 8008ab8:	bf00      	nop
 8008aba:	e7fd      	b.n	8008ab8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008abc:	69bb      	ldr	r3, [r7, #24]
 8008abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ac0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008ac2:	69bb      	ldr	r3, [r7, #24]
 8008ac4:	69fa      	ldr	r2, [r7, #28]
 8008ac6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008ac8:	69bb      	ldr	r3, [r7, #24]
 8008aca:	699b      	ldr	r3, [r3, #24]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	db04      	blt.n	8008ada <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ad0:	69fb      	ldr	r3, [r7, #28]
 8008ad2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008ad6:	69bb      	ldr	r3, [r7, #24]
 8008ad8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008ada:	69bb      	ldr	r3, [r7, #24]
 8008adc:	6959      	ldr	r1, [r3, #20]
 8008ade:	693a      	ldr	r2, [r7, #16]
 8008ae0:	4613      	mov	r3, r2
 8008ae2:	009b      	lsls	r3, r3, #2
 8008ae4:	4413      	add	r3, r2
 8008ae6:	009b      	lsls	r3, r3, #2
 8008ae8:	4a13      	ldr	r2, [pc, #76]	@ (8008b38 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008aea:	4413      	add	r3, r2
 8008aec:	4299      	cmp	r1, r3
 8008aee:	d11c      	bne.n	8008b2a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008af0:	69bb      	ldr	r3, [r7, #24]
 8008af2:	3304      	adds	r3, #4
 8008af4:	4618      	mov	r0, r3
 8008af6:	f7fe f82b 	bl	8006b50 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008afa:	69bb      	ldr	r3, [r7, #24]
 8008afc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008afe:	4b0f      	ldr	r3, [pc, #60]	@ (8008b3c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	429a      	cmp	r2, r3
 8008b04:	d903      	bls.n	8008b0e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8008b06:	69bb      	ldr	r3, [r7, #24]
 8008b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b0a:	4a0c      	ldr	r2, [pc, #48]	@ (8008b3c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008b0c:	6013      	str	r3, [r2, #0]
 8008b0e:	69bb      	ldr	r3, [r7, #24]
 8008b10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b12:	4613      	mov	r3, r2
 8008b14:	009b      	lsls	r3, r3, #2
 8008b16:	4413      	add	r3, r2
 8008b18:	009b      	lsls	r3, r3, #2
 8008b1a:	4a07      	ldr	r2, [pc, #28]	@ (8008b38 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008b1c:	441a      	add	r2, r3
 8008b1e:	69bb      	ldr	r3, [r7, #24]
 8008b20:	3304      	adds	r3, #4
 8008b22:	4619      	mov	r1, r3
 8008b24:	4610      	mov	r0, r2
 8008b26:	f7fd ffb8 	bl	8006a9a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008b2a:	bf00      	nop
 8008b2c:	3720      	adds	r7, #32
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}
 8008b32:	bf00      	nop
 8008b34:	20000b38 	.word	0x20000b38
 8008b38:	20000b3c 	.word	0x20000b3c
 8008b3c:	20001014 	.word	0x20001014

08008b40 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008b40:	b480      	push	{r7}
 8008b42:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008b44:	4b07      	ldr	r3, [pc, #28]	@ (8008b64 <pvTaskIncrementMutexHeldCount+0x24>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d004      	beq.n	8008b56 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008b4c:	4b05      	ldr	r3, [pc, #20]	@ (8008b64 <pvTaskIncrementMutexHeldCount+0x24>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008b52:	3201      	adds	r2, #1
 8008b54:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8008b56:	4b03      	ldr	r3, [pc, #12]	@ (8008b64 <pvTaskIncrementMutexHeldCount+0x24>)
 8008b58:	681b      	ldr	r3, [r3, #0]
	}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bc80      	pop	{r7}
 8008b60:	4770      	bx	lr
 8008b62:	bf00      	nop
 8008b64:	20000b38 	.word	0x20000b38

08008b68 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b084      	sub	sp, #16
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008b72:	4b21      	ldr	r3, [pc, #132]	@ (8008bf8 <prvAddCurrentTaskToDelayedList+0x90>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b78:	4b20      	ldr	r3, [pc, #128]	@ (8008bfc <prvAddCurrentTaskToDelayedList+0x94>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	3304      	adds	r3, #4
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f7fd ffe6 	bl	8006b50 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b8a:	d10a      	bne.n	8008ba2 <prvAddCurrentTaskToDelayedList+0x3a>
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d007      	beq.n	8008ba2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b92:	4b1a      	ldr	r3, [pc, #104]	@ (8008bfc <prvAddCurrentTaskToDelayedList+0x94>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	3304      	adds	r3, #4
 8008b98:	4619      	mov	r1, r3
 8008b9a:	4819      	ldr	r0, [pc, #100]	@ (8008c00 <prvAddCurrentTaskToDelayedList+0x98>)
 8008b9c:	f7fd ff7d 	bl	8006a9a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008ba0:	e026      	b.n	8008bf0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008ba2:	68fa      	ldr	r2, [r7, #12]
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	4413      	add	r3, r2
 8008ba8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008baa:	4b14      	ldr	r3, [pc, #80]	@ (8008bfc <prvAddCurrentTaskToDelayedList+0x94>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	68ba      	ldr	r2, [r7, #8]
 8008bb0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008bb2:	68ba      	ldr	r2, [r7, #8]
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	d209      	bcs.n	8008bce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008bba:	4b12      	ldr	r3, [pc, #72]	@ (8008c04 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008bbc:	681a      	ldr	r2, [r3, #0]
 8008bbe:	4b0f      	ldr	r3, [pc, #60]	@ (8008bfc <prvAddCurrentTaskToDelayedList+0x94>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	3304      	adds	r3, #4
 8008bc4:	4619      	mov	r1, r3
 8008bc6:	4610      	mov	r0, r2
 8008bc8:	f7fd ff8a 	bl	8006ae0 <vListInsert>
}
 8008bcc:	e010      	b.n	8008bf0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008bce:	4b0e      	ldr	r3, [pc, #56]	@ (8008c08 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008bd0:	681a      	ldr	r2, [r3, #0]
 8008bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8008bfc <prvAddCurrentTaskToDelayedList+0x94>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	3304      	adds	r3, #4
 8008bd8:	4619      	mov	r1, r3
 8008bda:	4610      	mov	r0, r2
 8008bdc:	f7fd ff80 	bl	8006ae0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008be0:	4b0a      	ldr	r3, [pc, #40]	@ (8008c0c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	68ba      	ldr	r2, [r7, #8]
 8008be6:	429a      	cmp	r2, r3
 8008be8:	d202      	bcs.n	8008bf0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008bea:	4a08      	ldr	r2, [pc, #32]	@ (8008c0c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	6013      	str	r3, [r2, #0]
}
 8008bf0:	bf00      	nop
 8008bf2:	3710      	adds	r7, #16
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}
 8008bf8:	20001010 	.word	0x20001010
 8008bfc:	20000b38 	.word	0x20000b38
 8008c00:	20000ff8 	.word	0x20000ff8
 8008c04:	20000fc8 	.word	0x20000fc8
 8008c08:	20000fc4 	.word	0x20000fc4
 8008c0c:	2000102c 	.word	0x2000102c

08008c10 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b08a      	sub	sp, #40	@ 0x28
 8008c14:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008c16:	2300      	movs	r3, #0
 8008c18:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008c1a:	f000 fb11 	bl	8009240 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008c1e:	4b1d      	ldr	r3, [pc, #116]	@ (8008c94 <xTimerCreateTimerTask+0x84>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d021      	beq.n	8008c6a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008c26:	2300      	movs	r3, #0
 8008c28:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008c2e:	1d3a      	adds	r2, r7, #4
 8008c30:	f107 0108 	add.w	r1, r7, #8
 8008c34:	f107 030c 	add.w	r3, r7, #12
 8008c38:	4618      	mov	r0, r3
 8008c3a:	f7fd fee9 	bl	8006a10 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008c3e:	6879      	ldr	r1, [r7, #4]
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	68fa      	ldr	r2, [r7, #12]
 8008c44:	9202      	str	r2, [sp, #8]
 8008c46:	9301      	str	r3, [sp, #4]
 8008c48:	2302      	movs	r3, #2
 8008c4a:	9300      	str	r3, [sp, #0]
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	460a      	mov	r2, r1
 8008c50:	4911      	ldr	r1, [pc, #68]	@ (8008c98 <xTimerCreateTimerTask+0x88>)
 8008c52:	4812      	ldr	r0, [pc, #72]	@ (8008c9c <xTimerCreateTimerTask+0x8c>)
 8008c54:	f7fe ff3c 	bl	8007ad0 <xTaskCreateStatic>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	4a11      	ldr	r2, [pc, #68]	@ (8008ca0 <xTimerCreateTimerTask+0x90>)
 8008c5c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008c5e:	4b10      	ldr	r3, [pc, #64]	@ (8008ca0 <xTimerCreateTimerTask+0x90>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d001      	beq.n	8008c6a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008c66:	2301      	movs	r3, #1
 8008c68:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d10b      	bne.n	8008c88 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c74:	f383 8811 	msr	BASEPRI, r3
 8008c78:	f3bf 8f6f 	isb	sy
 8008c7c:	f3bf 8f4f 	dsb	sy
 8008c80:	613b      	str	r3, [r7, #16]
}
 8008c82:	bf00      	nop
 8008c84:	bf00      	nop
 8008c86:	e7fd      	b.n	8008c84 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008c88:	697b      	ldr	r3, [r7, #20]
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3718      	adds	r7, #24
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}
 8008c92:	bf00      	nop
 8008c94:	20001068 	.word	0x20001068
 8008c98:	0800d298 	.word	0x0800d298
 8008c9c:	08008ddd 	.word	0x08008ddd
 8008ca0:	2000106c 	.word	0x2000106c

08008ca4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b08a      	sub	sp, #40	@ 0x28
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	60f8      	str	r0, [r7, #12]
 8008cac:	60b9      	str	r1, [r7, #8]
 8008cae:	607a      	str	r2, [r7, #4]
 8008cb0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d10b      	bne.n	8008cd4 <xTimerGenericCommand+0x30>
	__asm volatile
 8008cbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cc0:	f383 8811 	msr	BASEPRI, r3
 8008cc4:	f3bf 8f6f 	isb	sy
 8008cc8:	f3bf 8f4f 	dsb	sy
 8008ccc:	623b      	str	r3, [r7, #32]
}
 8008cce:	bf00      	nop
 8008cd0:	bf00      	nop
 8008cd2:	e7fd      	b.n	8008cd0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008cd4:	4b19      	ldr	r3, [pc, #100]	@ (8008d3c <xTimerGenericCommand+0x98>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d02a      	beq.n	8008d32 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	2b05      	cmp	r3, #5
 8008cec:	dc18      	bgt.n	8008d20 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008cee:	f7ff fdad 	bl	800884c <xTaskGetSchedulerState>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	2b02      	cmp	r3, #2
 8008cf6:	d109      	bne.n	8008d0c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008cf8:	4b10      	ldr	r3, [pc, #64]	@ (8008d3c <xTimerGenericCommand+0x98>)
 8008cfa:	6818      	ldr	r0, [r3, #0]
 8008cfc:	f107 0110 	add.w	r1, r7, #16
 8008d00:	2300      	movs	r3, #0
 8008d02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d04:	f7fe f94c 	bl	8006fa0 <xQueueGenericSend>
 8008d08:	6278      	str	r0, [r7, #36]	@ 0x24
 8008d0a:	e012      	b.n	8008d32 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8008d3c <xTimerGenericCommand+0x98>)
 8008d0e:	6818      	ldr	r0, [r3, #0]
 8008d10:	f107 0110 	add.w	r1, r7, #16
 8008d14:	2300      	movs	r3, #0
 8008d16:	2200      	movs	r2, #0
 8008d18:	f7fe f942 	bl	8006fa0 <xQueueGenericSend>
 8008d1c:	6278      	str	r0, [r7, #36]	@ 0x24
 8008d1e:	e008      	b.n	8008d32 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008d20:	4b06      	ldr	r3, [pc, #24]	@ (8008d3c <xTimerGenericCommand+0x98>)
 8008d22:	6818      	ldr	r0, [r3, #0]
 8008d24:	f107 0110 	add.w	r1, r7, #16
 8008d28:	2300      	movs	r3, #0
 8008d2a:	683a      	ldr	r2, [r7, #0]
 8008d2c:	f7fe fa3a 	bl	80071a4 <xQueueGenericSendFromISR>
 8008d30:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	3728      	adds	r7, #40	@ 0x28
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}
 8008d3c:	20001068 	.word	0x20001068

08008d40 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b088      	sub	sp, #32
 8008d44:	af02      	add	r7, sp, #8
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d4a:	4b23      	ldr	r3, [pc, #140]	@ (8008dd8 <prvProcessExpiredTimer+0x98>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	68db      	ldr	r3, [r3, #12]
 8008d50:	68db      	ldr	r3, [r3, #12]
 8008d52:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	3304      	adds	r3, #4
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f7fd fef9 	bl	8006b50 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008d64:	f003 0304 	and.w	r3, r3, #4
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d023      	beq.n	8008db4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008d6c:	697b      	ldr	r3, [r7, #20]
 8008d6e:	699a      	ldr	r2, [r3, #24]
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	18d1      	adds	r1, r2, r3
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	683a      	ldr	r2, [r7, #0]
 8008d78:	6978      	ldr	r0, [r7, #20]
 8008d7a:	f000 f8d3 	bl	8008f24 <prvInsertTimerInActiveList>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d020      	beq.n	8008dc6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008d84:	2300      	movs	r3, #0
 8008d86:	9300      	str	r3, [sp, #0]
 8008d88:	2300      	movs	r3, #0
 8008d8a:	687a      	ldr	r2, [r7, #4]
 8008d8c:	2100      	movs	r1, #0
 8008d8e:	6978      	ldr	r0, [r7, #20]
 8008d90:	f7ff ff88 	bl	8008ca4 <xTimerGenericCommand>
 8008d94:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d114      	bne.n	8008dc6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008d9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008da0:	f383 8811 	msr	BASEPRI, r3
 8008da4:	f3bf 8f6f 	isb	sy
 8008da8:	f3bf 8f4f 	dsb	sy
 8008dac:	60fb      	str	r3, [r7, #12]
}
 8008dae:	bf00      	nop
 8008db0:	bf00      	nop
 8008db2:	e7fd      	b.n	8008db0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008dba:	f023 0301 	bic.w	r3, r3, #1
 8008dbe:	b2da      	uxtb	r2, r3
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	6a1b      	ldr	r3, [r3, #32]
 8008dca:	6978      	ldr	r0, [r7, #20]
 8008dcc:	4798      	blx	r3
}
 8008dce:	bf00      	nop
 8008dd0:	3718      	adds	r7, #24
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}
 8008dd6:	bf00      	nop
 8008dd8:	20001060 	.word	0x20001060

08008ddc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b084      	sub	sp, #16
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008de4:	f107 0308 	add.w	r3, r7, #8
 8008de8:	4618      	mov	r0, r3
 8008dea:	f000 f859 	bl	8008ea0 <prvGetNextExpireTime>
 8008dee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	4619      	mov	r1, r3
 8008df4:	68f8      	ldr	r0, [r7, #12]
 8008df6:	f000 f805 	bl	8008e04 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008dfa:	f000 f8d5 	bl	8008fa8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008dfe:	bf00      	nop
 8008e00:	e7f0      	b.n	8008de4 <prvTimerTask+0x8>
	...

08008e04 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b084      	sub	sp, #16
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008e0e:	f7ff f90d 	bl	800802c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008e12:	f107 0308 	add.w	r3, r7, #8
 8008e16:	4618      	mov	r0, r3
 8008e18:	f000 f864 	bl	8008ee4 <prvSampleTimeNow>
 8008e1c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d130      	bne.n	8008e86 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d10a      	bne.n	8008e40 <prvProcessTimerOrBlockTask+0x3c>
 8008e2a:	687a      	ldr	r2, [r7, #4]
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	429a      	cmp	r2, r3
 8008e30:	d806      	bhi.n	8008e40 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008e32:	f7ff f909 	bl	8008048 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008e36:	68f9      	ldr	r1, [r7, #12]
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f7ff ff81 	bl	8008d40 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008e3e:	e024      	b.n	8008e8a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d008      	beq.n	8008e58 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008e46:	4b13      	ldr	r3, [pc, #76]	@ (8008e94 <prvProcessTimerOrBlockTask+0x90>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d101      	bne.n	8008e54 <prvProcessTimerOrBlockTask+0x50>
 8008e50:	2301      	movs	r3, #1
 8008e52:	e000      	b.n	8008e56 <prvProcessTimerOrBlockTask+0x52>
 8008e54:	2300      	movs	r3, #0
 8008e56:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008e58:	4b0f      	ldr	r3, [pc, #60]	@ (8008e98 <prvProcessTimerOrBlockTask+0x94>)
 8008e5a:	6818      	ldr	r0, [r3, #0]
 8008e5c:	687a      	ldr	r2, [r7, #4]
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	1ad3      	subs	r3, r2, r3
 8008e62:	683a      	ldr	r2, [r7, #0]
 8008e64:	4619      	mov	r1, r3
 8008e66:	f7fe fdff 	bl	8007a68 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008e6a:	f7ff f8ed 	bl	8008048 <xTaskResumeAll>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d10a      	bne.n	8008e8a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008e74:	4b09      	ldr	r3, [pc, #36]	@ (8008e9c <prvProcessTimerOrBlockTask+0x98>)
 8008e76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e7a:	601a      	str	r2, [r3, #0]
 8008e7c:	f3bf 8f4f 	dsb	sy
 8008e80:	f3bf 8f6f 	isb	sy
}
 8008e84:	e001      	b.n	8008e8a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008e86:	f7ff f8df 	bl	8008048 <xTaskResumeAll>
}
 8008e8a:	bf00      	nop
 8008e8c:	3710      	adds	r7, #16
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}
 8008e92:	bf00      	nop
 8008e94:	20001064 	.word	0x20001064
 8008e98:	20001068 	.word	0x20001068
 8008e9c:	e000ed04 	.word	0xe000ed04

08008ea0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b085      	sub	sp, #20
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008ea8:	4b0d      	ldr	r3, [pc, #52]	@ (8008ee0 <prvGetNextExpireTime+0x40>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d101      	bne.n	8008eb6 <prvGetNextExpireTime+0x16>
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	e000      	b.n	8008eb8 <prvGetNextExpireTime+0x18>
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d105      	bne.n	8008ed0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008ec4:	4b06      	ldr	r3, [pc, #24]	@ (8008ee0 <prvGetNextExpireTime+0x40>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	68db      	ldr	r3, [r3, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	60fb      	str	r3, [r7, #12]
 8008ece:	e001      	b.n	8008ed4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	3714      	adds	r7, #20
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bc80      	pop	{r7}
 8008ede:	4770      	bx	lr
 8008ee0:	20001060 	.word	0x20001060

08008ee4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b084      	sub	sp, #16
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008eec:	f7ff f94a 	bl	8008184 <xTaskGetTickCount>
 8008ef0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008ef2:	4b0b      	ldr	r3, [pc, #44]	@ (8008f20 <prvSampleTimeNow+0x3c>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	68fa      	ldr	r2, [r7, #12]
 8008ef8:	429a      	cmp	r2, r3
 8008efa:	d205      	bcs.n	8008f08 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008efc:	f000 f93a 	bl	8009174 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2201      	movs	r2, #1
 8008f04:	601a      	str	r2, [r3, #0]
 8008f06:	e002      	b.n	8008f0e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008f0e:	4a04      	ldr	r2, [pc, #16]	@ (8008f20 <prvSampleTimeNow+0x3c>)
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008f14:	68fb      	ldr	r3, [r7, #12]
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3710      	adds	r7, #16
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}
 8008f1e:	bf00      	nop
 8008f20:	20001070 	.word	0x20001070

08008f24 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b086      	sub	sp, #24
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	60f8      	str	r0, [r7, #12]
 8008f2c:	60b9      	str	r1, [r7, #8]
 8008f2e:	607a      	str	r2, [r7, #4]
 8008f30:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008f32:	2300      	movs	r3, #0
 8008f34:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	68ba      	ldr	r2, [r7, #8]
 8008f3a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	68fa      	ldr	r2, [r7, #12]
 8008f40:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008f42:	68ba      	ldr	r2, [r7, #8]
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	429a      	cmp	r2, r3
 8008f48:	d812      	bhi.n	8008f70 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f4a:	687a      	ldr	r2, [r7, #4]
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	1ad2      	subs	r2, r2, r3
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	699b      	ldr	r3, [r3, #24]
 8008f54:	429a      	cmp	r2, r3
 8008f56:	d302      	bcc.n	8008f5e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008f58:	2301      	movs	r3, #1
 8008f5a:	617b      	str	r3, [r7, #20]
 8008f5c:	e01b      	b.n	8008f96 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008f5e:	4b10      	ldr	r3, [pc, #64]	@ (8008fa0 <prvInsertTimerInActiveList+0x7c>)
 8008f60:	681a      	ldr	r2, [r3, #0]
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	3304      	adds	r3, #4
 8008f66:	4619      	mov	r1, r3
 8008f68:	4610      	mov	r0, r2
 8008f6a:	f7fd fdb9 	bl	8006ae0 <vListInsert>
 8008f6e:	e012      	b.n	8008f96 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008f70:	687a      	ldr	r2, [r7, #4]
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	429a      	cmp	r2, r3
 8008f76:	d206      	bcs.n	8008f86 <prvInsertTimerInActiveList+0x62>
 8008f78:	68ba      	ldr	r2, [r7, #8]
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	429a      	cmp	r2, r3
 8008f7e:	d302      	bcc.n	8008f86 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008f80:	2301      	movs	r3, #1
 8008f82:	617b      	str	r3, [r7, #20]
 8008f84:	e007      	b.n	8008f96 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008f86:	4b07      	ldr	r3, [pc, #28]	@ (8008fa4 <prvInsertTimerInActiveList+0x80>)
 8008f88:	681a      	ldr	r2, [r3, #0]
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	3304      	adds	r3, #4
 8008f8e:	4619      	mov	r1, r3
 8008f90:	4610      	mov	r0, r2
 8008f92:	f7fd fda5 	bl	8006ae0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008f96:	697b      	ldr	r3, [r7, #20]
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3718      	adds	r7, #24
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}
 8008fa0:	20001064 	.word	0x20001064
 8008fa4:	20001060 	.word	0x20001060

08008fa8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b08e      	sub	sp, #56	@ 0x38
 8008fac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008fae:	e0ce      	b.n	800914e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	da19      	bge.n	8008fea <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008fb6:	1d3b      	adds	r3, r7, #4
 8008fb8:	3304      	adds	r3, #4
 8008fba:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008fbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d10b      	bne.n	8008fda <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fc6:	f383 8811 	msr	BASEPRI, r3
 8008fca:	f3bf 8f6f 	isb	sy
 8008fce:	f3bf 8f4f 	dsb	sy
 8008fd2:	61fb      	str	r3, [r7, #28]
}
 8008fd4:	bf00      	nop
 8008fd6:	bf00      	nop
 8008fd8:	e7fd      	b.n	8008fd6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008fda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008fe0:	6850      	ldr	r0, [r2, #4]
 8008fe2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008fe4:	6892      	ldr	r2, [r2, #8]
 8008fe6:	4611      	mov	r1, r2
 8008fe8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	f2c0 80ae 	blt.w	800914e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ff8:	695b      	ldr	r3, [r3, #20]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d004      	beq.n	8009008 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009000:	3304      	adds	r3, #4
 8009002:	4618      	mov	r0, r3
 8009004:	f7fd fda4 	bl	8006b50 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009008:	463b      	mov	r3, r7
 800900a:	4618      	mov	r0, r3
 800900c:	f7ff ff6a 	bl	8008ee4 <prvSampleTimeNow>
 8009010:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2b09      	cmp	r3, #9
 8009016:	f200 8097 	bhi.w	8009148 <prvProcessReceivedCommands+0x1a0>
 800901a:	a201      	add	r2, pc, #4	@ (adr r2, 8009020 <prvProcessReceivedCommands+0x78>)
 800901c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009020:	08009049 	.word	0x08009049
 8009024:	08009049 	.word	0x08009049
 8009028:	08009049 	.word	0x08009049
 800902c:	080090bf 	.word	0x080090bf
 8009030:	080090d3 	.word	0x080090d3
 8009034:	0800911f 	.word	0x0800911f
 8009038:	08009049 	.word	0x08009049
 800903c:	08009049 	.word	0x08009049
 8009040:	080090bf 	.word	0x080090bf
 8009044:	080090d3 	.word	0x080090d3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800904a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800904e:	f043 0301 	orr.w	r3, r3, #1
 8009052:	b2da      	uxtb	r2, r3
 8009054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009056:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800905a:	68ba      	ldr	r2, [r7, #8]
 800905c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800905e:	699b      	ldr	r3, [r3, #24]
 8009060:	18d1      	adds	r1, r2, r3
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009066:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009068:	f7ff ff5c 	bl	8008f24 <prvInsertTimerInActiveList>
 800906c:	4603      	mov	r3, r0
 800906e:	2b00      	cmp	r3, #0
 8009070:	d06c      	beq.n	800914c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009074:	6a1b      	ldr	r3, [r3, #32]
 8009076:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009078:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800907a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800907c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009080:	f003 0304 	and.w	r3, r3, #4
 8009084:	2b00      	cmp	r3, #0
 8009086:	d061      	beq.n	800914c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009088:	68ba      	ldr	r2, [r7, #8]
 800908a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800908c:	699b      	ldr	r3, [r3, #24]
 800908e:	441a      	add	r2, r3
 8009090:	2300      	movs	r3, #0
 8009092:	9300      	str	r3, [sp, #0]
 8009094:	2300      	movs	r3, #0
 8009096:	2100      	movs	r1, #0
 8009098:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800909a:	f7ff fe03 	bl	8008ca4 <xTimerGenericCommand>
 800909e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80090a0:	6a3b      	ldr	r3, [r7, #32]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d152      	bne.n	800914c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80090a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090aa:	f383 8811 	msr	BASEPRI, r3
 80090ae:	f3bf 8f6f 	isb	sy
 80090b2:	f3bf 8f4f 	dsb	sy
 80090b6:	61bb      	str	r3, [r7, #24]
}
 80090b8:	bf00      	nop
 80090ba:	bf00      	nop
 80090bc:	e7fd      	b.n	80090ba <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80090be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80090c4:	f023 0301 	bic.w	r3, r3, #1
 80090c8:	b2da      	uxtb	r2, r3
 80090ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090cc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80090d0:	e03d      	b.n	800914e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80090d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80090d8:	f043 0301 	orr.w	r3, r3, #1
 80090dc:	b2da      	uxtb	r2, r3
 80090de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090e0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80090e4:	68ba      	ldr	r2, [r7, #8]
 80090e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090e8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80090ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090ec:	699b      	ldr	r3, [r3, #24]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d10b      	bne.n	800910a <prvProcessReceivedCommands+0x162>
	__asm volatile
 80090f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090f6:	f383 8811 	msr	BASEPRI, r3
 80090fa:	f3bf 8f6f 	isb	sy
 80090fe:	f3bf 8f4f 	dsb	sy
 8009102:	617b      	str	r3, [r7, #20]
}
 8009104:	bf00      	nop
 8009106:	bf00      	nop
 8009108:	e7fd      	b.n	8009106 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800910a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800910c:	699a      	ldr	r2, [r3, #24]
 800910e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009110:	18d1      	adds	r1, r2, r3
 8009112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009114:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009116:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009118:	f7ff ff04 	bl	8008f24 <prvInsertTimerInActiveList>
					break;
 800911c:	e017      	b.n	800914e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800911e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009120:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009124:	f003 0302 	and.w	r3, r3, #2
 8009128:	2b00      	cmp	r3, #0
 800912a:	d103      	bne.n	8009134 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800912c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800912e:	f000 fb85 	bl	800983c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009132:	e00c      	b.n	800914e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009136:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800913a:	f023 0301 	bic.w	r3, r3, #1
 800913e:	b2da      	uxtb	r2, r3
 8009140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009142:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009146:	e002      	b.n	800914e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009148:	bf00      	nop
 800914a:	e000      	b.n	800914e <prvProcessReceivedCommands+0x1a6>
					break;
 800914c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800914e:	4b08      	ldr	r3, [pc, #32]	@ (8009170 <prvProcessReceivedCommands+0x1c8>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	1d39      	adds	r1, r7, #4
 8009154:	2200      	movs	r2, #0
 8009156:	4618      	mov	r0, r3
 8009158:	f7fe f8c2 	bl	80072e0 <xQueueReceive>
 800915c:	4603      	mov	r3, r0
 800915e:	2b00      	cmp	r3, #0
 8009160:	f47f af26 	bne.w	8008fb0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009164:	bf00      	nop
 8009166:	bf00      	nop
 8009168:	3730      	adds	r7, #48	@ 0x30
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}
 800916e:	bf00      	nop
 8009170:	20001068 	.word	0x20001068

08009174 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b088      	sub	sp, #32
 8009178:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800917a:	e049      	b.n	8009210 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800917c:	4b2e      	ldr	r3, [pc, #184]	@ (8009238 <prvSwitchTimerLists+0xc4>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	68db      	ldr	r3, [r3, #12]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009186:	4b2c      	ldr	r3, [pc, #176]	@ (8009238 <prvSwitchTimerLists+0xc4>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	68db      	ldr	r3, [r3, #12]
 800918c:	68db      	ldr	r3, [r3, #12]
 800918e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	3304      	adds	r3, #4
 8009194:	4618      	mov	r0, r3
 8009196:	f7fd fcdb 	bl	8006b50 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	6a1b      	ldr	r3, [r3, #32]
 800919e:	68f8      	ldr	r0, [r7, #12]
 80091a0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80091a8:	f003 0304 	and.w	r3, r3, #4
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d02f      	beq.n	8009210 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	699b      	ldr	r3, [r3, #24]
 80091b4:	693a      	ldr	r2, [r7, #16]
 80091b6:	4413      	add	r3, r2
 80091b8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80091ba:	68ba      	ldr	r2, [r7, #8]
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	429a      	cmp	r2, r3
 80091c0:	d90e      	bls.n	80091e0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	68ba      	ldr	r2, [r7, #8]
 80091c6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	68fa      	ldr	r2, [r7, #12]
 80091cc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80091ce:	4b1a      	ldr	r3, [pc, #104]	@ (8009238 <prvSwitchTimerLists+0xc4>)
 80091d0:	681a      	ldr	r2, [r3, #0]
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	3304      	adds	r3, #4
 80091d6:	4619      	mov	r1, r3
 80091d8:	4610      	mov	r0, r2
 80091da:	f7fd fc81 	bl	8006ae0 <vListInsert>
 80091de:	e017      	b.n	8009210 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80091e0:	2300      	movs	r3, #0
 80091e2:	9300      	str	r3, [sp, #0]
 80091e4:	2300      	movs	r3, #0
 80091e6:	693a      	ldr	r2, [r7, #16]
 80091e8:	2100      	movs	r1, #0
 80091ea:	68f8      	ldr	r0, [r7, #12]
 80091ec:	f7ff fd5a 	bl	8008ca4 <xTimerGenericCommand>
 80091f0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d10b      	bne.n	8009210 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80091f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091fc:	f383 8811 	msr	BASEPRI, r3
 8009200:	f3bf 8f6f 	isb	sy
 8009204:	f3bf 8f4f 	dsb	sy
 8009208:	603b      	str	r3, [r7, #0]
}
 800920a:	bf00      	nop
 800920c:	bf00      	nop
 800920e:	e7fd      	b.n	800920c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009210:	4b09      	ldr	r3, [pc, #36]	@ (8009238 <prvSwitchTimerLists+0xc4>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d1b0      	bne.n	800917c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800921a:	4b07      	ldr	r3, [pc, #28]	@ (8009238 <prvSwitchTimerLists+0xc4>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009220:	4b06      	ldr	r3, [pc, #24]	@ (800923c <prvSwitchTimerLists+0xc8>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	4a04      	ldr	r2, [pc, #16]	@ (8009238 <prvSwitchTimerLists+0xc4>)
 8009226:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009228:	4a04      	ldr	r2, [pc, #16]	@ (800923c <prvSwitchTimerLists+0xc8>)
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	6013      	str	r3, [r2, #0]
}
 800922e:	bf00      	nop
 8009230:	3718      	adds	r7, #24
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
 8009236:	bf00      	nop
 8009238:	20001060 	.word	0x20001060
 800923c:	20001064 	.word	0x20001064

08009240 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b082      	sub	sp, #8
 8009244:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009246:	f000 f929 	bl	800949c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800924a:	4b15      	ldr	r3, [pc, #84]	@ (80092a0 <prvCheckForValidListAndQueue+0x60>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d120      	bne.n	8009294 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009252:	4814      	ldr	r0, [pc, #80]	@ (80092a4 <prvCheckForValidListAndQueue+0x64>)
 8009254:	f7fd fbf6 	bl	8006a44 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009258:	4813      	ldr	r0, [pc, #76]	@ (80092a8 <prvCheckForValidListAndQueue+0x68>)
 800925a:	f7fd fbf3 	bl	8006a44 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800925e:	4b13      	ldr	r3, [pc, #76]	@ (80092ac <prvCheckForValidListAndQueue+0x6c>)
 8009260:	4a10      	ldr	r2, [pc, #64]	@ (80092a4 <prvCheckForValidListAndQueue+0x64>)
 8009262:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009264:	4b12      	ldr	r3, [pc, #72]	@ (80092b0 <prvCheckForValidListAndQueue+0x70>)
 8009266:	4a10      	ldr	r2, [pc, #64]	@ (80092a8 <prvCheckForValidListAndQueue+0x68>)
 8009268:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800926a:	2300      	movs	r3, #0
 800926c:	9300      	str	r3, [sp, #0]
 800926e:	4b11      	ldr	r3, [pc, #68]	@ (80092b4 <prvCheckForValidListAndQueue+0x74>)
 8009270:	4a11      	ldr	r2, [pc, #68]	@ (80092b8 <prvCheckForValidListAndQueue+0x78>)
 8009272:	2110      	movs	r1, #16
 8009274:	200a      	movs	r0, #10
 8009276:	f7fd fcff 	bl	8006c78 <xQueueGenericCreateStatic>
 800927a:	4603      	mov	r3, r0
 800927c:	4a08      	ldr	r2, [pc, #32]	@ (80092a0 <prvCheckForValidListAndQueue+0x60>)
 800927e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009280:	4b07      	ldr	r3, [pc, #28]	@ (80092a0 <prvCheckForValidListAndQueue+0x60>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d005      	beq.n	8009294 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009288:	4b05      	ldr	r3, [pc, #20]	@ (80092a0 <prvCheckForValidListAndQueue+0x60>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	490b      	ldr	r1, [pc, #44]	@ (80092bc <prvCheckForValidListAndQueue+0x7c>)
 800928e:	4618      	mov	r0, r3
 8009290:	f7fe fbc2 	bl	8007a18 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009294:	f000 f932 	bl	80094fc <vPortExitCritical>
}
 8009298:	bf00      	nop
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}
 800929e:	bf00      	nop
 80092a0:	20001068 	.word	0x20001068
 80092a4:	20001038 	.word	0x20001038
 80092a8:	2000104c 	.word	0x2000104c
 80092ac:	20001060 	.word	0x20001060
 80092b0:	20001064 	.word	0x20001064
 80092b4:	20001114 	.word	0x20001114
 80092b8:	20001074 	.word	0x20001074
 80092bc:	0800d2a0 	.word	0x0800d2a0

080092c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80092c0:	b480      	push	{r7}
 80092c2:	b085      	sub	sp, #20
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	60f8      	str	r0, [r7, #12]
 80092c8:	60b9      	str	r1, [r7, #8]
 80092ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	3b04      	subs	r3, #4
 80092d0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80092d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	3b04      	subs	r3, #4
 80092de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	f023 0201 	bic.w	r2, r3, #1
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	3b04      	subs	r3, #4
 80092ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80092f0:	4a08      	ldr	r2, [pc, #32]	@ (8009314 <pxPortInitialiseStack+0x54>)
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	3b14      	subs	r3, #20
 80092fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80092fc:	687a      	ldr	r2, [r7, #4]
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	3b20      	subs	r3, #32
 8009306:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009308:	68fb      	ldr	r3, [r7, #12]
}
 800930a:	4618      	mov	r0, r3
 800930c:	3714      	adds	r7, #20
 800930e:	46bd      	mov	sp, r7
 8009310:	bc80      	pop	{r7}
 8009312:	4770      	bx	lr
 8009314:	08009319 	.word	0x08009319

08009318 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009318:	b480      	push	{r7}
 800931a:	b085      	sub	sp, #20
 800931c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800931e:	2300      	movs	r3, #0
 8009320:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009322:	4b12      	ldr	r3, [pc, #72]	@ (800936c <prvTaskExitError+0x54>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800932a:	d00b      	beq.n	8009344 <prvTaskExitError+0x2c>
	__asm volatile
 800932c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009330:	f383 8811 	msr	BASEPRI, r3
 8009334:	f3bf 8f6f 	isb	sy
 8009338:	f3bf 8f4f 	dsb	sy
 800933c:	60fb      	str	r3, [r7, #12]
}
 800933e:	bf00      	nop
 8009340:	bf00      	nop
 8009342:	e7fd      	b.n	8009340 <prvTaskExitError+0x28>
	__asm volatile
 8009344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009348:	f383 8811 	msr	BASEPRI, r3
 800934c:	f3bf 8f6f 	isb	sy
 8009350:	f3bf 8f4f 	dsb	sy
 8009354:	60bb      	str	r3, [r7, #8]
}
 8009356:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009358:	bf00      	nop
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d0fc      	beq.n	800935a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009360:	bf00      	nop
 8009362:	bf00      	nop
 8009364:	3714      	adds	r7, #20
 8009366:	46bd      	mov	sp, r7
 8009368:	bc80      	pop	{r7}
 800936a:	4770      	bx	lr
 800936c:	20000024 	.word	0x20000024

08009370 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009370:	4b07      	ldr	r3, [pc, #28]	@ (8009390 <pxCurrentTCBConst2>)
 8009372:	6819      	ldr	r1, [r3, #0]
 8009374:	6808      	ldr	r0, [r1, #0]
 8009376:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800937a:	f380 8809 	msr	PSP, r0
 800937e:	f3bf 8f6f 	isb	sy
 8009382:	f04f 0000 	mov.w	r0, #0
 8009386:	f380 8811 	msr	BASEPRI, r0
 800938a:	f04e 0e0d 	orr.w	lr, lr, #13
 800938e:	4770      	bx	lr

08009390 <pxCurrentTCBConst2>:
 8009390:	20000b38 	.word	0x20000b38
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009394:	bf00      	nop
 8009396:	bf00      	nop

08009398 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8009398:	4806      	ldr	r0, [pc, #24]	@ (80093b4 <prvPortStartFirstTask+0x1c>)
 800939a:	6800      	ldr	r0, [r0, #0]
 800939c:	6800      	ldr	r0, [r0, #0]
 800939e:	f380 8808 	msr	MSP, r0
 80093a2:	b662      	cpsie	i
 80093a4:	b661      	cpsie	f
 80093a6:	f3bf 8f4f 	dsb	sy
 80093aa:	f3bf 8f6f 	isb	sy
 80093ae:	df00      	svc	0
 80093b0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80093b2:	bf00      	nop
 80093b4:	e000ed08 	.word	0xe000ed08

080093b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b084      	sub	sp, #16
 80093bc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80093be:	4b32      	ldr	r3, [pc, #200]	@ (8009488 <xPortStartScheduler+0xd0>)
 80093c0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	781b      	ldrb	r3, [r3, #0]
 80093c6:	b2db      	uxtb	r3, r3
 80093c8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	22ff      	movs	r2, #255	@ 0xff
 80093ce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	781b      	ldrb	r3, [r3, #0]
 80093d4:	b2db      	uxtb	r3, r3
 80093d6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80093d8:	78fb      	ldrb	r3, [r7, #3]
 80093da:	b2db      	uxtb	r3, r3
 80093dc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80093e0:	b2da      	uxtb	r2, r3
 80093e2:	4b2a      	ldr	r3, [pc, #168]	@ (800948c <xPortStartScheduler+0xd4>)
 80093e4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80093e6:	4b2a      	ldr	r3, [pc, #168]	@ (8009490 <xPortStartScheduler+0xd8>)
 80093e8:	2207      	movs	r2, #7
 80093ea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80093ec:	e009      	b.n	8009402 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80093ee:	4b28      	ldr	r3, [pc, #160]	@ (8009490 <xPortStartScheduler+0xd8>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	3b01      	subs	r3, #1
 80093f4:	4a26      	ldr	r2, [pc, #152]	@ (8009490 <xPortStartScheduler+0xd8>)
 80093f6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80093f8:	78fb      	ldrb	r3, [r7, #3]
 80093fa:	b2db      	uxtb	r3, r3
 80093fc:	005b      	lsls	r3, r3, #1
 80093fe:	b2db      	uxtb	r3, r3
 8009400:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009402:	78fb      	ldrb	r3, [r7, #3]
 8009404:	b2db      	uxtb	r3, r3
 8009406:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800940a:	2b80      	cmp	r3, #128	@ 0x80
 800940c:	d0ef      	beq.n	80093ee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800940e:	4b20      	ldr	r3, [pc, #128]	@ (8009490 <xPortStartScheduler+0xd8>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f1c3 0307 	rsb	r3, r3, #7
 8009416:	2b04      	cmp	r3, #4
 8009418:	d00b      	beq.n	8009432 <xPortStartScheduler+0x7a>
	__asm volatile
 800941a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800941e:	f383 8811 	msr	BASEPRI, r3
 8009422:	f3bf 8f6f 	isb	sy
 8009426:	f3bf 8f4f 	dsb	sy
 800942a:	60bb      	str	r3, [r7, #8]
}
 800942c:	bf00      	nop
 800942e:	bf00      	nop
 8009430:	e7fd      	b.n	800942e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009432:	4b17      	ldr	r3, [pc, #92]	@ (8009490 <xPortStartScheduler+0xd8>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	021b      	lsls	r3, r3, #8
 8009438:	4a15      	ldr	r2, [pc, #84]	@ (8009490 <xPortStartScheduler+0xd8>)
 800943a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800943c:	4b14      	ldr	r3, [pc, #80]	@ (8009490 <xPortStartScheduler+0xd8>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009444:	4a12      	ldr	r2, [pc, #72]	@ (8009490 <xPortStartScheduler+0xd8>)
 8009446:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	b2da      	uxtb	r2, r3
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009450:	4b10      	ldr	r3, [pc, #64]	@ (8009494 <xPortStartScheduler+0xdc>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	4a0f      	ldr	r2, [pc, #60]	@ (8009494 <xPortStartScheduler+0xdc>)
 8009456:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800945a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800945c:	4b0d      	ldr	r3, [pc, #52]	@ (8009494 <xPortStartScheduler+0xdc>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	4a0c      	ldr	r2, [pc, #48]	@ (8009494 <xPortStartScheduler+0xdc>)
 8009462:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009466:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009468:	f000 f8b8 	bl	80095dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800946c:	4b0a      	ldr	r3, [pc, #40]	@ (8009498 <xPortStartScheduler+0xe0>)
 800946e:	2200      	movs	r2, #0
 8009470:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009472:	f7ff ff91 	bl	8009398 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009476:	f7fe ff5f 	bl	8008338 <vTaskSwitchContext>
	prvTaskExitError();
 800947a:	f7ff ff4d 	bl	8009318 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800947e:	2300      	movs	r3, #0
}
 8009480:	4618      	mov	r0, r3
 8009482:	3710      	adds	r7, #16
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}
 8009488:	e000e400 	.word	0xe000e400
 800948c:	20001164 	.word	0x20001164
 8009490:	20001168 	.word	0x20001168
 8009494:	e000ed20 	.word	0xe000ed20
 8009498:	20000024 	.word	0x20000024

0800949c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800949c:	b480      	push	{r7}
 800949e:	b083      	sub	sp, #12
 80094a0:	af00      	add	r7, sp, #0
	__asm volatile
 80094a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094a6:	f383 8811 	msr	BASEPRI, r3
 80094aa:	f3bf 8f6f 	isb	sy
 80094ae:	f3bf 8f4f 	dsb	sy
 80094b2:	607b      	str	r3, [r7, #4]
}
 80094b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80094b6:	4b0f      	ldr	r3, [pc, #60]	@ (80094f4 <vPortEnterCritical+0x58>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	3301      	adds	r3, #1
 80094bc:	4a0d      	ldr	r2, [pc, #52]	@ (80094f4 <vPortEnterCritical+0x58>)
 80094be:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80094c0:	4b0c      	ldr	r3, [pc, #48]	@ (80094f4 <vPortEnterCritical+0x58>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	2b01      	cmp	r3, #1
 80094c6:	d110      	bne.n	80094ea <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80094c8:	4b0b      	ldr	r3, [pc, #44]	@ (80094f8 <vPortEnterCritical+0x5c>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	b2db      	uxtb	r3, r3
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d00b      	beq.n	80094ea <vPortEnterCritical+0x4e>
	__asm volatile
 80094d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094d6:	f383 8811 	msr	BASEPRI, r3
 80094da:	f3bf 8f6f 	isb	sy
 80094de:	f3bf 8f4f 	dsb	sy
 80094e2:	603b      	str	r3, [r7, #0]
}
 80094e4:	bf00      	nop
 80094e6:	bf00      	nop
 80094e8:	e7fd      	b.n	80094e6 <vPortEnterCritical+0x4a>
	}
}
 80094ea:	bf00      	nop
 80094ec:	370c      	adds	r7, #12
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bc80      	pop	{r7}
 80094f2:	4770      	bx	lr
 80094f4:	20000024 	.word	0x20000024
 80094f8:	e000ed04 	.word	0xe000ed04

080094fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80094fc:	b480      	push	{r7}
 80094fe:	b083      	sub	sp, #12
 8009500:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009502:	4b12      	ldr	r3, [pc, #72]	@ (800954c <vPortExitCritical+0x50>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d10b      	bne.n	8009522 <vPortExitCritical+0x26>
	__asm volatile
 800950a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800950e:	f383 8811 	msr	BASEPRI, r3
 8009512:	f3bf 8f6f 	isb	sy
 8009516:	f3bf 8f4f 	dsb	sy
 800951a:	607b      	str	r3, [r7, #4]
}
 800951c:	bf00      	nop
 800951e:	bf00      	nop
 8009520:	e7fd      	b.n	800951e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009522:	4b0a      	ldr	r3, [pc, #40]	@ (800954c <vPortExitCritical+0x50>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	3b01      	subs	r3, #1
 8009528:	4a08      	ldr	r2, [pc, #32]	@ (800954c <vPortExitCritical+0x50>)
 800952a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800952c:	4b07      	ldr	r3, [pc, #28]	@ (800954c <vPortExitCritical+0x50>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d105      	bne.n	8009540 <vPortExitCritical+0x44>
 8009534:	2300      	movs	r3, #0
 8009536:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	f383 8811 	msr	BASEPRI, r3
}
 800953e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009540:	bf00      	nop
 8009542:	370c      	adds	r7, #12
 8009544:	46bd      	mov	sp, r7
 8009546:	bc80      	pop	{r7}
 8009548:	4770      	bx	lr
 800954a:	bf00      	nop
 800954c:	20000024 	.word	0x20000024

08009550 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009550:	f3ef 8009 	mrs	r0, PSP
 8009554:	f3bf 8f6f 	isb	sy
 8009558:	4b0d      	ldr	r3, [pc, #52]	@ (8009590 <pxCurrentTCBConst>)
 800955a:	681a      	ldr	r2, [r3, #0]
 800955c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009560:	6010      	str	r0, [r2, #0]
 8009562:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009566:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800956a:	f380 8811 	msr	BASEPRI, r0
 800956e:	f7fe fee3 	bl	8008338 <vTaskSwitchContext>
 8009572:	f04f 0000 	mov.w	r0, #0
 8009576:	f380 8811 	msr	BASEPRI, r0
 800957a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800957e:	6819      	ldr	r1, [r3, #0]
 8009580:	6808      	ldr	r0, [r1, #0]
 8009582:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009586:	f380 8809 	msr	PSP, r0
 800958a:	f3bf 8f6f 	isb	sy
 800958e:	4770      	bx	lr

08009590 <pxCurrentTCBConst>:
 8009590:	20000b38 	.word	0x20000b38
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009594:	bf00      	nop
 8009596:	bf00      	nop

08009598 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b082      	sub	sp, #8
 800959c:	af00      	add	r7, sp, #0
	__asm volatile
 800959e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095a2:	f383 8811 	msr	BASEPRI, r3
 80095a6:	f3bf 8f6f 	isb	sy
 80095aa:	f3bf 8f4f 	dsb	sy
 80095ae:	607b      	str	r3, [r7, #4]
}
 80095b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80095b2:	f7fe fe07 	bl	80081c4 <xTaskIncrementTick>
 80095b6:	4603      	mov	r3, r0
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d003      	beq.n	80095c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80095bc:	4b06      	ldr	r3, [pc, #24]	@ (80095d8 <xPortSysTickHandler+0x40>)
 80095be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80095c2:	601a      	str	r2, [r3, #0]
 80095c4:	2300      	movs	r3, #0
 80095c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	f383 8811 	msr	BASEPRI, r3
}
 80095ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80095d0:	bf00      	nop
 80095d2:	3708      	adds	r7, #8
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}
 80095d8:	e000ed04 	.word	0xe000ed04

080095dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80095dc:	b480      	push	{r7}
 80095de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80095e0:	4b0a      	ldr	r3, [pc, #40]	@ (800960c <vPortSetupTimerInterrupt+0x30>)
 80095e2:	2200      	movs	r2, #0
 80095e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80095e6:	4b0a      	ldr	r3, [pc, #40]	@ (8009610 <vPortSetupTimerInterrupt+0x34>)
 80095e8:	2200      	movs	r2, #0
 80095ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80095ec:	4b09      	ldr	r3, [pc, #36]	@ (8009614 <vPortSetupTimerInterrupt+0x38>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	4a09      	ldr	r2, [pc, #36]	@ (8009618 <vPortSetupTimerInterrupt+0x3c>)
 80095f2:	fba2 2303 	umull	r2, r3, r2, r3
 80095f6:	099b      	lsrs	r3, r3, #6
 80095f8:	4a08      	ldr	r2, [pc, #32]	@ (800961c <vPortSetupTimerInterrupt+0x40>)
 80095fa:	3b01      	subs	r3, #1
 80095fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80095fe:	4b03      	ldr	r3, [pc, #12]	@ (800960c <vPortSetupTimerInterrupt+0x30>)
 8009600:	2207      	movs	r2, #7
 8009602:	601a      	str	r2, [r3, #0]
}
 8009604:	bf00      	nop
 8009606:	46bd      	mov	sp, r7
 8009608:	bc80      	pop	{r7}
 800960a:	4770      	bx	lr
 800960c:	e000e010 	.word	0xe000e010
 8009610:	e000e018 	.word	0xe000e018
 8009614:	20000018 	.word	0x20000018
 8009618:	10624dd3 	.word	0x10624dd3
 800961c:	e000e014 	.word	0xe000e014

08009620 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009620:	b480      	push	{r7}
 8009622:	b085      	sub	sp, #20
 8009624:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009626:	f3ef 8305 	mrs	r3, IPSR
 800962a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	2b0f      	cmp	r3, #15
 8009630:	d915      	bls.n	800965e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009632:	4a17      	ldr	r2, [pc, #92]	@ (8009690 <vPortValidateInterruptPriority+0x70>)
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	4413      	add	r3, r2
 8009638:	781b      	ldrb	r3, [r3, #0]
 800963a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800963c:	4b15      	ldr	r3, [pc, #84]	@ (8009694 <vPortValidateInterruptPriority+0x74>)
 800963e:	781b      	ldrb	r3, [r3, #0]
 8009640:	7afa      	ldrb	r2, [r7, #11]
 8009642:	429a      	cmp	r2, r3
 8009644:	d20b      	bcs.n	800965e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800964a:	f383 8811 	msr	BASEPRI, r3
 800964e:	f3bf 8f6f 	isb	sy
 8009652:	f3bf 8f4f 	dsb	sy
 8009656:	607b      	str	r3, [r7, #4]
}
 8009658:	bf00      	nop
 800965a:	bf00      	nop
 800965c:	e7fd      	b.n	800965a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800965e:	4b0e      	ldr	r3, [pc, #56]	@ (8009698 <vPortValidateInterruptPriority+0x78>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009666:	4b0d      	ldr	r3, [pc, #52]	@ (800969c <vPortValidateInterruptPriority+0x7c>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	429a      	cmp	r2, r3
 800966c:	d90b      	bls.n	8009686 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800966e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009672:	f383 8811 	msr	BASEPRI, r3
 8009676:	f3bf 8f6f 	isb	sy
 800967a:	f3bf 8f4f 	dsb	sy
 800967e:	603b      	str	r3, [r7, #0]
}
 8009680:	bf00      	nop
 8009682:	bf00      	nop
 8009684:	e7fd      	b.n	8009682 <vPortValidateInterruptPriority+0x62>
	}
 8009686:	bf00      	nop
 8009688:	3714      	adds	r7, #20
 800968a:	46bd      	mov	sp, r7
 800968c:	bc80      	pop	{r7}
 800968e:	4770      	bx	lr
 8009690:	e000e3f0 	.word	0xe000e3f0
 8009694:	20001164 	.word	0x20001164
 8009698:	e000ed0c 	.word	0xe000ed0c
 800969c:	20001168 	.word	0x20001168

080096a0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b08a      	sub	sp, #40	@ 0x28
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80096a8:	2300      	movs	r3, #0
 80096aa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80096ac:	f7fe fcbe 	bl	800802c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80096b0:	4b5c      	ldr	r3, [pc, #368]	@ (8009824 <pvPortMalloc+0x184>)
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d101      	bne.n	80096bc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80096b8:	f000 f924 	bl	8009904 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80096bc:	4b5a      	ldr	r3, [pc, #360]	@ (8009828 <pvPortMalloc+0x188>)
 80096be:	681a      	ldr	r2, [r3, #0]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	4013      	ands	r3, r2
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	f040 8095 	bne.w	80097f4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d01e      	beq.n	800970e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80096d0:	2208      	movs	r2, #8
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	4413      	add	r3, r2
 80096d6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f003 0307 	and.w	r3, r3, #7
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d015      	beq.n	800970e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f023 0307 	bic.w	r3, r3, #7
 80096e8:	3308      	adds	r3, #8
 80096ea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f003 0307 	and.w	r3, r3, #7
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d00b      	beq.n	800970e <pvPortMalloc+0x6e>
	__asm volatile
 80096f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096fa:	f383 8811 	msr	BASEPRI, r3
 80096fe:	f3bf 8f6f 	isb	sy
 8009702:	f3bf 8f4f 	dsb	sy
 8009706:	617b      	str	r3, [r7, #20]
}
 8009708:	bf00      	nop
 800970a:	bf00      	nop
 800970c:	e7fd      	b.n	800970a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d06f      	beq.n	80097f4 <pvPortMalloc+0x154>
 8009714:	4b45      	ldr	r3, [pc, #276]	@ (800982c <pvPortMalloc+0x18c>)
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	687a      	ldr	r2, [r7, #4]
 800971a:	429a      	cmp	r2, r3
 800971c:	d86a      	bhi.n	80097f4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800971e:	4b44      	ldr	r3, [pc, #272]	@ (8009830 <pvPortMalloc+0x190>)
 8009720:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009722:	4b43      	ldr	r3, [pc, #268]	@ (8009830 <pvPortMalloc+0x190>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009728:	e004      	b.n	8009734 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800972a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800972c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800972e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009736:	685b      	ldr	r3, [r3, #4]
 8009738:	687a      	ldr	r2, [r7, #4]
 800973a:	429a      	cmp	r2, r3
 800973c:	d903      	bls.n	8009746 <pvPortMalloc+0xa6>
 800973e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d1f1      	bne.n	800972a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009746:	4b37      	ldr	r3, [pc, #220]	@ (8009824 <pvPortMalloc+0x184>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800974c:	429a      	cmp	r2, r3
 800974e:	d051      	beq.n	80097f4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009750:	6a3b      	ldr	r3, [r7, #32]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	2208      	movs	r2, #8
 8009756:	4413      	add	r3, r2
 8009758:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800975a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800975c:	681a      	ldr	r2, [r3, #0]
 800975e:	6a3b      	ldr	r3, [r7, #32]
 8009760:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009764:	685a      	ldr	r2, [r3, #4]
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	1ad2      	subs	r2, r2, r3
 800976a:	2308      	movs	r3, #8
 800976c:	005b      	lsls	r3, r3, #1
 800976e:	429a      	cmp	r2, r3
 8009770:	d920      	bls.n	80097b4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009772:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	4413      	add	r3, r2
 8009778:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800977a:	69bb      	ldr	r3, [r7, #24]
 800977c:	f003 0307 	and.w	r3, r3, #7
 8009780:	2b00      	cmp	r3, #0
 8009782:	d00b      	beq.n	800979c <pvPortMalloc+0xfc>
	__asm volatile
 8009784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009788:	f383 8811 	msr	BASEPRI, r3
 800978c:	f3bf 8f6f 	isb	sy
 8009790:	f3bf 8f4f 	dsb	sy
 8009794:	613b      	str	r3, [r7, #16]
}
 8009796:	bf00      	nop
 8009798:	bf00      	nop
 800979a:	e7fd      	b.n	8009798 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800979c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800979e:	685a      	ldr	r2, [r3, #4]
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	1ad2      	subs	r2, r2, r3
 80097a4:	69bb      	ldr	r3, [r7, #24]
 80097a6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80097a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097aa:	687a      	ldr	r2, [r7, #4]
 80097ac:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80097ae:	69b8      	ldr	r0, [r7, #24]
 80097b0:	f000 f90a 	bl	80099c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80097b4:	4b1d      	ldr	r3, [pc, #116]	@ (800982c <pvPortMalloc+0x18c>)
 80097b6:	681a      	ldr	r2, [r3, #0]
 80097b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097ba:	685b      	ldr	r3, [r3, #4]
 80097bc:	1ad3      	subs	r3, r2, r3
 80097be:	4a1b      	ldr	r2, [pc, #108]	@ (800982c <pvPortMalloc+0x18c>)
 80097c0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80097c2:	4b1a      	ldr	r3, [pc, #104]	@ (800982c <pvPortMalloc+0x18c>)
 80097c4:	681a      	ldr	r2, [r3, #0]
 80097c6:	4b1b      	ldr	r3, [pc, #108]	@ (8009834 <pvPortMalloc+0x194>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	429a      	cmp	r2, r3
 80097cc:	d203      	bcs.n	80097d6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80097ce:	4b17      	ldr	r3, [pc, #92]	@ (800982c <pvPortMalloc+0x18c>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	4a18      	ldr	r2, [pc, #96]	@ (8009834 <pvPortMalloc+0x194>)
 80097d4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80097d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097d8:	685a      	ldr	r2, [r3, #4]
 80097da:	4b13      	ldr	r3, [pc, #76]	@ (8009828 <pvPortMalloc+0x188>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	431a      	orrs	r2, r3
 80097e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097e2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80097e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097e6:	2200      	movs	r2, #0
 80097e8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80097ea:	4b13      	ldr	r3, [pc, #76]	@ (8009838 <pvPortMalloc+0x198>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	3301      	adds	r3, #1
 80097f0:	4a11      	ldr	r2, [pc, #68]	@ (8009838 <pvPortMalloc+0x198>)
 80097f2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80097f4:	f7fe fc28 	bl	8008048 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80097f8:	69fb      	ldr	r3, [r7, #28]
 80097fa:	f003 0307 	and.w	r3, r3, #7
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d00b      	beq.n	800981a <pvPortMalloc+0x17a>
	__asm volatile
 8009802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009806:	f383 8811 	msr	BASEPRI, r3
 800980a:	f3bf 8f6f 	isb	sy
 800980e:	f3bf 8f4f 	dsb	sy
 8009812:	60fb      	str	r3, [r7, #12]
}
 8009814:	bf00      	nop
 8009816:	bf00      	nop
 8009818:	e7fd      	b.n	8009816 <pvPortMalloc+0x176>
	return pvReturn;
 800981a:	69fb      	ldr	r3, [r7, #28]
}
 800981c:	4618      	mov	r0, r3
 800981e:	3728      	adds	r7, #40	@ 0x28
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}
 8009824:	20002974 	.word	0x20002974
 8009828:	20002988 	.word	0x20002988
 800982c:	20002978 	.word	0x20002978
 8009830:	2000296c 	.word	0x2000296c
 8009834:	2000297c 	.word	0x2000297c
 8009838:	20002980 	.word	0x20002980

0800983c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b086      	sub	sp, #24
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d04f      	beq.n	80098ee <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800984e:	2308      	movs	r3, #8
 8009850:	425b      	negs	r3, r3
 8009852:	697a      	ldr	r2, [r7, #20]
 8009854:	4413      	add	r3, r2
 8009856:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009858:	697b      	ldr	r3, [r7, #20]
 800985a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800985c:	693b      	ldr	r3, [r7, #16]
 800985e:	685a      	ldr	r2, [r3, #4]
 8009860:	4b25      	ldr	r3, [pc, #148]	@ (80098f8 <vPortFree+0xbc>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	4013      	ands	r3, r2
 8009866:	2b00      	cmp	r3, #0
 8009868:	d10b      	bne.n	8009882 <vPortFree+0x46>
	__asm volatile
 800986a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800986e:	f383 8811 	msr	BASEPRI, r3
 8009872:	f3bf 8f6f 	isb	sy
 8009876:	f3bf 8f4f 	dsb	sy
 800987a:	60fb      	str	r3, [r7, #12]
}
 800987c:	bf00      	nop
 800987e:	bf00      	nop
 8009880:	e7fd      	b.n	800987e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009882:	693b      	ldr	r3, [r7, #16]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d00b      	beq.n	80098a2 <vPortFree+0x66>
	__asm volatile
 800988a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800988e:	f383 8811 	msr	BASEPRI, r3
 8009892:	f3bf 8f6f 	isb	sy
 8009896:	f3bf 8f4f 	dsb	sy
 800989a:	60bb      	str	r3, [r7, #8]
}
 800989c:	bf00      	nop
 800989e:	bf00      	nop
 80098a0:	e7fd      	b.n	800989e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80098a2:	693b      	ldr	r3, [r7, #16]
 80098a4:	685a      	ldr	r2, [r3, #4]
 80098a6:	4b14      	ldr	r3, [pc, #80]	@ (80098f8 <vPortFree+0xbc>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	4013      	ands	r3, r2
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d01e      	beq.n	80098ee <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80098b0:	693b      	ldr	r3, [r7, #16]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d11a      	bne.n	80098ee <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	685a      	ldr	r2, [r3, #4]
 80098bc:	4b0e      	ldr	r3, [pc, #56]	@ (80098f8 <vPortFree+0xbc>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	43db      	mvns	r3, r3
 80098c2:	401a      	ands	r2, r3
 80098c4:	693b      	ldr	r3, [r7, #16]
 80098c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80098c8:	f7fe fbb0 	bl	800802c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80098cc:	693b      	ldr	r3, [r7, #16]
 80098ce:	685a      	ldr	r2, [r3, #4]
 80098d0:	4b0a      	ldr	r3, [pc, #40]	@ (80098fc <vPortFree+0xc0>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	4413      	add	r3, r2
 80098d6:	4a09      	ldr	r2, [pc, #36]	@ (80098fc <vPortFree+0xc0>)
 80098d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80098da:	6938      	ldr	r0, [r7, #16]
 80098dc:	f000 f874 	bl	80099c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80098e0:	4b07      	ldr	r3, [pc, #28]	@ (8009900 <vPortFree+0xc4>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	3301      	adds	r3, #1
 80098e6:	4a06      	ldr	r2, [pc, #24]	@ (8009900 <vPortFree+0xc4>)
 80098e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80098ea:	f7fe fbad 	bl	8008048 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80098ee:	bf00      	nop
 80098f0:	3718      	adds	r7, #24
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}
 80098f6:	bf00      	nop
 80098f8:	20002988 	.word	0x20002988
 80098fc:	20002978 	.word	0x20002978
 8009900:	20002984 	.word	0x20002984

08009904 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009904:	b480      	push	{r7}
 8009906:	b085      	sub	sp, #20
 8009908:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800990a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800990e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009910:	4b27      	ldr	r3, [pc, #156]	@ (80099b0 <prvHeapInit+0xac>)
 8009912:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	f003 0307 	and.w	r3, r3, #7
 800991a:	2b00      	cmp	r3, #0
 800991c:	d00c      	beq.n	8009938 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	3307      	adds	r3, #7
 8009922:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	f023 0307 	bic.w	r3, r3, #7
 800992a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800992c:	68ba      	ldr	r2, [r7, #8]
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	1ad3      	subs	r3, r2, r3
 8009932:	4a1f      	ldr	r2, [pc, #124]	@ (80099b0 <prvHeapInit+0xac>)
 8009934:	4413      	add	r3, r2
 8009936:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800993c:	4a1d      	ldr	r2, [pc, #116]	@ (80099b4 <prvHeapInit+0xb0>)
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009942:	4b1c      	ldr	r3, [pc, #112]	@ (80099b4 <prvHeapInit+0xb0>)
 8009944:	2200      	movs	r2, #0
 8009946:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	68ba      	ldr	r2, [r7, #8]
 800994c:	4413      	add	r3, r2
 800994e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009950:	2208      	movs	r2, #8
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	1a9b      	subs	r3, r3, r2
 8009956:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	f023 0307 	bic.w	r3, r3, #7
 800995e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	4a15      	ldr	r2, [pc, #84]	@ (80099b8 <prvHeapInit+0xb4>)
 8009964:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009966:	4b14      	ldr	r3, [pc, #80]	@ (80099b8 <prvHeapInit+0xb4>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	2200      	movs	r2, #0
 800996c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800996e:	4b12      	ldr	r3, [pc, #72]	@ (80099b8 <prvHeapInit+0xb4>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	2200      	movs	r2, #0
 8009974:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	68fa      	ldr	r2, [r7, #12]
 800997e:	1ad2      	subs	r2, r2, r3
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009984:	4b0c      	ldr	r3, [pc, #48]	@ (80099b8 <prvHeapInit+0xb4>)
 8009986:	681a      	ldr	r2, [r3, #0]
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	685b      	ldr	r3, [r3, #4]
 8009990:	4a0a      	ldr	r2, [pc, #40]	@ (80099bc <prvHeapInit+0xb8>)
 8009992:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	685b      	ldr	r3, [r3, #4]
 8009998:	4a09      	ldr	r2, [pc, #36]	@ (80099c0 <prvHeapInit+0xbc>)
 800999a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800999c:	4b09      	ldr	r3, [pc, #36]	@ (80099c4 <prvHeapInit+0xc0>)
 800999e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80099a2:	601a      	str	r2, [r3, #0]
}
 80099a4:	bf00      	nop
 80099a6:	3714      	adds	r7, #20
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bc80      	pop	{r7}
 80099ac:	4770      	bx	lr
 80099ae:	bf00      	nop
 80099b0:	2000116c 	.word	0x2000116c
 80099b4:	2000296c 	.word	0x2000296c
 80099b8:	20002974 	.word	0x20002974
 80099bc:	2000297c 	.word	0x2000297c
 80099c0:	20002978 	.word	0x20002978
 80099c4:	20002988 	.word	0x20002988

080099c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80099c8:	b480      	push	{r7}
 80099ca:	b085      	sub	sp, #20
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80099d0:	4b27      	ldr	r3, [pc, #156]	@ (8009a70 <prvInsertBlockIntoFreeList+0xa8>)
 80099d2:	60fb      	str	r3, [r7, #12]
 80099d4:	e002      	b.n	80099dc <prvInsertBlockIntoFreeList+0x14>
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	60fb      	str	r3, [r7, #12]
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	687a      	ldr	r2, [r7, #4]
 80099e2:	429a      	cmp	r2, r3
 80099e4:	d8f7      	bhi.n	80099d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	685b      	ldr	r3, [r3, #4]
 80099ee:	68ba      	ldr	r2, [r7, #8]
 80099f0:	4413      	add	r3, r2
 80099f2:	687a      	ldr	r2, [r7, #4]
 80099f4:	429a      	cmp	r2, r3
 80099f6:	d108      	bne.n	8009a0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	685a      	ldr	r2, [r3, #4]
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	685b      	ldr	r3, [r3, #4]
 8009a00:	441a      	add	r2, r3
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	685b      	ldr	r3, [r3, #4]
 8009a12:	68ba      	ldr	r2, [r7, #8]
 8009a14:	441a      	add	r2, r3
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	429a      	cmp	r2, r3
 8009a1c:	d118      	bne.n	8009a50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	681a      	ldr	r2, [r3, #0]
 8009a22:	4b14      	ldr	r3, [pc, #80]	@ (8009a74 <prvInsertBlockIntoFreeList+0xac>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	429a      	cmp	r2, r3
 8009a28:	d00d      	beq.n	8009a46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	685a      	ldr	r2, [r3, #4]
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	685b      	ldr	r3, [r3, #4]
 8009a34:	441a      	add	r2, r3
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	681a      	ldr	r2, [r3, #0]
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	601a      	str	r2, [r3, #0]
 8009a44:	e008      	b.n	8009a58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009a46:	4b0b      	ldr	r3, [pc, #44]	@ (8009a74 <prvInsertBlockIntoFreeList+0xac>)
 8009a48:	681a      	ldr	r2, [r3, #0]
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	601a      	str	r2, [r3, #0]
 8009a4e:	e003      	b.n	8009a58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681a      	ldr	r2, [r3, #0]
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009a58:	68fa      	ldr	r2, [r7, #12]
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	429a      	cmp	r2, r3
 8009a5e:	d002      	beq.n	8009a66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	687a      	ldr	r2, [r7, #4]
 8009a64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a66:	bf00      	nop
 8009a68:	3714      	adds	r7, #20
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bc80      	pop	{r7}
 8009a6e:	4770      	bx	lr
 8009a70:	2000296c 	.word	0x2000296c
 8009a74:	20002974 	.word	0x20002974

08009a78 <__cvt>:
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a7e:	461d      	mov	r5, r3
 8009a80:	bfbb      	ittet	lt
 8009a82:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8009a86:	461d      	movlt	r5, r3
 8009a88:	2300      	movge	r3, #0
 8009a8a:	232d      	movlt	r3, #45	@ 0x2d
 8009a8c:	b088      	sub	sp, #32
 8009a8e:	4614      	mov	r4, r2
 8009a90:	bfb8      	it	lt
 8009a92:	4614      	movlt	r4, r2
 8009a94:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009a96:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8009a98:	7013      	strb	r3, [r2, #0]
 8009a9a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009a9c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8009aa0:	f023 0820 	bic.w	r8, r3, #32
 8009aa4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009aa8:	d005      	beq.n	8009ab6 <__cvt+0x3e>
 8009aaa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009aae:	d100      	bne.n	8009ab2 <__cvt+0x3a>
 8009ab0:	3601      	adds	r6, #1
 8009ab2:	2302      	movs	r3, #2
 8009ab4:	e000      	b.n	8009ab8 <__cvt+0x40>
 8009ab6:	2303      	movs	r3, #3
 8009ab8:	aa07      	add	r2, sp, #28
 8009aba:	9204      	str	r2, [sp, #16]
 8009abc:	aa06      	add	r2, sp, #24
 8009abe:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009ac2:	e9cd 3600 	strd	r3, r6, [sp]
 8009ac6:	4622      	mov	r2, r4
 8009ac8:	462b      	mov	r3, r5
 8009aca:	f000 ff09 	bl	800a8e0 <_dtoa_r>
 8009ace:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009ad2:	4607      	mov	r7, r0
 8009ad4:	d119      	bne.n	8009b0a <__cvt+0x92>
 8009ad6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009ad8:	07db      	lsls	r3, r3, #31
 8009ada:	d50e      	bpl.n	8009afa <__cvt+0x82>
 8009adc:	eb00 0906 	add.w	r9, r0, r6
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	4620      	mov	r0, r4
 8009ae6:	4629      	mov	r1, r5
 8009ae8:	f7f6 ff5e 	bl	80009a8 <__aeabi_dcmpeq>
 8009aec:	b108      	cbz	r0, 8009af2 <__cvt+0x7a>
 8009aee:	f8cd 901c 	str.w	r9, [sp, #28]
 8009af2:	2230      	movs	r2, #48	@ 0x30
 8009af4:	9b07      	ldr	r3, [sp, #28]
 8009af6:	454b      	cmp	r3, r9
 8009af8:	d31e      	bcc.n	8009b38 <__cvt+0xc0>
 8009afa:	4638      	mov	r0, r7
 8009afc:	9b07      	ldr	r3, [sp, #28]
 8009afe:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8009b00:	1bdb      	subs	r3, r3, r7
 8009b02:	6013      	str	r3, [r2, #0]
 8009b04:	b008      	add	sp, #32
 8009b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b0a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009b0e:	eb00 0906 	add.w	r9, r0, r6
 8009b12:	d1e5      	bne.n	8009ae0 <__cvt+0x68>
 8009b14:	7803      	ldrb	r3, [r0, #0]
 8009b16:	2b30      	cmp	r3, #48	@ 0x30
 8009b18:	d10a      	bne.n	8009b30 <__cvt+0xb8>
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	4620      	mov	r0, r4
 8009b20:	4629      	mov	r1, r5
 8009b22:	f7f6 ff41 	bl	80009a8 <__aeabi_dcmpeq>
 8009b26:	b918      	cbnz	r0, 8009b30 <__cvt+0xb8>
 8009b28:	f1c6 0601 	rsb	r6, r6, #1
 8009b2c:	f8ca 6000 	str.w	r6, [sl]
 8009b30:	f8da 3000 	ldr.w	r3, [sl]
 8009b34:	4499      	add	r9, r3
 8009b36:	e7d3      	b.n	8009ae0 <__cvt+0x68>
 8009b38:	1c59      	adds	r1, r3, #1
 8009b3a:	9107      	str	r1, [sp, #28]
 8009b3c:	701a      	strb	r2, [r3, #0]
 8009b3e:	e7d9      	b.n	8009af4 <__cvt+0x7c>

08009b40 <__exponent>:
 8009b40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b42:	2900      	cmp	r1, #0
 8009b44:	bfb6      	itet	lt
 8009b46:	232d      	movlt	r3, #45	@ 0x2d
 8009b48:	232b      	movge	r3, #43	@ 0x2b
 8009b4a:	4249      	neglt	r1, r1
 8009b4c:	2909      	cmp	r1, #9
 8009b4e:	7002      	strb	r2, [r0, #0]
 8009b50:	7043      	strb	r3, [r0, #1]
 8009b52:	dd29      	ble.n	8009ba8 <__exponent+0x68>
 8009b54:	f10d 0307 	add.w	r3, sp, #7
 8009b58:	461d      	mov	r5, r3
 8009b5a:	270a      	movs	r7, #10
 8009b5c:	fbb1 f6f7 	udiv	r6, r1, r7
 8009b60:	461a      	mov	r2, r3
 8009b62:	fb07 1416 	mls	r4, r7, r6, r1
 8009b66:	3430      	adds	r4, #48	@ 0x30
 8009b68:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009b6c:	460c      	mov	r4, r1
 8009b6e:	2c63      	cmp	r4, #99	@ 0x63
 8009b70:	4631      	mov	r1, r6
 8009b72:	f103 33ff 	add.w	r3, r3, #4294967295
 8009b76:	dcf1      	bgt.n	8009b5c <__exponent+0x1c>
 8009b78:	3130      	adds	r1, #48	@ 0x30
 8009b7a:	1e94      	subs	r4, r2, #2
 8009b7c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009b80:	4623      	mov	r3, r4
 8009b82:	1c41      	adds	r1, r0, #1
 8009b84:	42ab      	cmp	r3, r5
 8009b86:	d30a      	bcc.n	8009b9e <__exponent+0x5e>
 8009b88:	f10d 0309 	add.w	r3, sp, #9
 8009b8c:	1a9b      	subs	r3, r3, r2
 8009b8e:	42ac      	cmp	r4, r5
 8009b90:	bf88      	it	hi
 8009b92:	2300      	movhi	r3, #0
 8009b94:	3302      	adds	r3, #2
 8009b96:	4403      	add	r3, r0
 8009b98:	1a18      	subs	r0, r3, r0
 8009b9a:	b003      	add	sp, #12
 8009b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b9e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009ba2:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009ba6:	e7ed      	b.n	8009b84 <__exponent+0x44>
 8009ba8:	2330      	movs	r3, #48	@ 0x30
 8009baa:	3130      	adds	r1, #48	@ 0x30
 8009bac:	7083      	strb	r3, [r0, #2]
 8009bae:	70c1      	strb	r1, [r0, #3]
 8009bb0:	1d03      	adds	r3, r0, #4
 8009bb2:	e7f1      	b.n	8009b98 <__exponent+0x58>

08009bb4 <_printf_float>:
 8009bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bb8:	b091      	sub	sp, #68	@ 0x44
 8009bba:	460c      	mov	r4, r1
 8009bbc:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8009bc0:	4616      	mov	r6, r2
 8009bc2:	461f      	mov	r7, r3
 8009bc4:	4605      	mov	r5, r0
 8009bc6:	f000 fd0f 	bl	800a5e8 <_localeconv_r>
 8009bca:	6803      	ldr	r3, [r0, #0]
 8009bcc:	4618      	mov	r0, r3
 8009bce:	9308      	str	r3, [sp, #32]
 8009bd0:	f7f6 fabe 	bl	8000150 <strlen>
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	930e      	str	r3, [sp, #56]	@ 0x38
 8009bd8:	f8d8 3000 	ldr.w	r3, [r8]
 8009bdc:	9009      	str	r0, [sp, #36]	@ 0x24
 8009bde:	3307      	adds	r3, #7
 8009be0:	f023 0307 	bic.w	r3, r3, #7
 8009be4:	f103 0208 	add.w	r2, r3, #8
 8009be8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009bec:	f8d4 b000 	ldr.w	fp, [r4]
 8009bf0:	f8c8 2000 	str.w	r2, [r8]
 8009bf4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009bf8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009bfc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009bfe:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8009c02:	f04f 32ff 	mov.w	r2, #4294967295
 8009c06:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009c0a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009c0e:	4b9c      	ldr	r3, [pc, #624]	@ (8009e80 <_printf_float+0x2cc>)
 8009c10:	f7f6 fefc 	bl	8000a0c <__aeabi_dcmpun>
 8009c14:	bb70      	cbnz	r0, 8009c74 <_printf_float+0xc0>
 8009c16:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009c1a:	f04f 32ff 	mov.w	r2, #4294967295
 8009c1e:	4b98      	ldr	r3, [pc, #608]	@ (8009e80 <_printf_float+0x2cc>)
 8009c20:	f7f6 fed6 	bl	80009d0 <__aeabi_dcmple>
 8009c24:	bb30      	cbnz	r0, 8009c74 <_printf_float+0xc0>
 8009c26:	2200      	movs	r2, #0
 8009c28:	2300      	movs	r3, #0
 8009c2a:	4640      	mov	r0, r8
 8009c2c:	4649      	mov	r1, r9
 8009c2e:	f7f6 fec5 	bl	80009bc <__aeabi_dcmplt>
 8009c32:	b110      	cbz	r0, 8009c3a <_printf_float+0x86>
 8009c34:	232d      	movs	r3, #45	@ 0x2d
 8009c36:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009c3a:	4a92      	ldr	r2, [pc, #584]	@ (8009e84 <_printf_float+0x2d0>)
 8009c3c:	4b92      	ldr	r3, [pc, #584]	@ (8009e88 <_printf_float+0x2d4>)
 8009c3e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009c42:	bf8c      	ite	hi
 8009c44:	4690      	movhi	r8, r2
 8009c46:	4698      	movls	r8, r3
 8009c48:	2303      	movs	r3, #3
 8009c4a:	f04f 0900 	mov.w	r9, #0
 8009c4e:	6123      	str	r3, [r4, #16]
 8009c50:	f02b 0304 	bic.w	r3, fp, #4
 8009c54:	6023      	str	r3, [r4, #0]
 8009c56:	4633      	mov	r3, r6
 8009c58:	4621      	mov	r1, r4
 8009c5a:	4628      	mov	r0, r5
 8009c5c:	9700      	str	r7, [sp, #0]
 8009c5e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8009c60:	f000 f9d4 	bl	800a00c <_printf_common>
 8009c64:	3001      	adds	r0, #1
 8009c66:	f040 8090 	bne.w	8009d8a <_printf_float+0x1d6>
 8009c6a:	f04f 30ff 	mov.w	r0, #4294967295
 8009c6e:	b011      	add	sp, #68	@ 0x44
 8009c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c74:	4642      	mov	r2, r8
 8009c76:	464b      	mov	r3, r9
 8009c78:	4640      	mov	r0, r8
 8009c7a:	4649      	mov	r1, r9
 8009c7c:	f7f6 fec6 	bl	8000a0c <__aeabi_dcmpun>
 8009c80:	b148      	cbz	r0, 8009c96 <_printf_float+0xe2>
 8009c82:	464b      	mov	r3, r9
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	bfb8      	it	lt
 8009c88:	232d      	movlt	r3, #45	@ 0x2d
 8009c8a:	4a80      	ldr	r2, [pc, #512]	@ (8009e8c <_printf_float+0x2d8>)
 8009c8c:	bfb8      	it	lt
 8009c8e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009c92:	4b7f      	ldr	r3, [pc, #508]	@ (8009e90 <_printf_float+0x2dc>)
 8009c94:	e7d3      	b.n	8009c3e <_printf_float+0x8a>
 8009c96:	6863      	ldr	r3, [r4, #4]
 8009c98:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8009c9c:	1c5a      	adds	r2, r3, #1
 8009c9e:	d13f      	bne.n	8009d20 <_printf_float+0x16c>
 8009ca0:	2306      	movs	r3, #6
 8009ca2:	6063      	str	r3, [r4, #4]
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8009caa:	6023      	str	r3, [r4, #0]
 8009cac:	9206      	str	r2, [sp, #24]
 8009cae:	aa0e      	add	r2, sp, #56	@ 0x38
 8009cb0:	e9cd a204 	strd	sl, r2, [sp, #16]
 8009cb4:	aa0d      	add	r2, sp, #52	@ 0x34
 8009cb6:	9203      	str	r2, [sp, #12]
 8009cb8:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8009cbc:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009cc0:	6863      	ldr	r3, [r4, #4]
 8009cc2:	4642      	mov	r2, r8
 8009cc4:	9300      	str	r3, [sp, #0]
 8009cc6:	4628      	mov	r0, r5
 8009cc8:	464b      	mov	r3, r9
 8009cca:	910a      	str	r1, [sp, #40]	@ 0x28
 8009ccc:	f7ff fed4 	bl	8009a78 <__cvt>
 8009cd0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009cd2:	4680      	mov	r8, r0
 8009cd4:	2947      	cmp	r1, #71	@ 0x47
 8009cd6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8009cd8:	d128      	bne.n	8009d2c <_printf_float+0x178>
 8009cda:	1cc8      	adds	r0, r1, #3
 8009cdc:	db02      	blt.n	8009ce4 <_printf_float+0x130>
 8009cde:	6863      	ldr	r3, [r4, #4]
 8009ce0:	4299      	cmp	r1, r3
 8009ce2:	dd40      	ble.n	8009d66 <_printf_float+0x1b2>
 8009ce4:	f1aa 0a02 	sub.w	sl, sl, #2
 8009ce8:	fa5f fa8a 	uxtb.w	sl, sl
 8009cec:	4652      	mov	r2, sl
 8009cee:	3901      	subs	r1, #1
 8009cf0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009cf4:	910d      	str	r1, [sp, #52]	@ 0x34
 8009cf6:	f7ff ff23 	bl	8009b40 <__exponent>
 8009cfa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009cfc:	4681      	mov	r9, r0
 8009cfe:	1813      	adds	r3, r2, r0
 8009d00:	2a01      	cmp	r2, #1
 8009d02:	6123      	str	r3, [r4, #16]
 8009d04:	dc02      	bgt.n	8009d0c <_printf_float+0x158>
 8009d06:	6822      	ldr	r2, [r4, #0]
 8009d08:	07d2      	lsls	r2, r2, #31
 8009d0a:	d501      	bpl.n	8009d10 <_printf_float+0x15c>
 8009d0c:	3301      	adds	r3, #1
 8009d0e:	6123      	str	r3, [r4, #16]
 8009d10:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d09e      	beq.n	8009c56 <_printf_float+0xa2>
 8009d18:	232d      	movs	r3, #45	@ 0x2d
 8009d1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009d1e:	e79a      	b.n	8009c56 <_printf_float+0xa2>
 8009d20:	2947      	cmp	r1, #71	@ 0x47
 8009d22:	d1bf      	bne.n	8009ca4 <_printf_float+0xf0>
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d1bd      	bne.n	8009ca4 <_printf_float+0xf0>
 8009d28:	2301      	movs	r3, #1
 8009d2a:	e7ba      	b.n	8009ca2 <_printf_float+0xee>
 8009d2c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009d30:	d9dc      	bls.n	8009cec <_printf_float+0x138>
 8009d32:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009d36:	d118      	bne.n	8009d6a <_printf_float+0x1b6>
 8009d38:	2900      	cmp	r1, #0
 8009d3a:	6863      	ldr	r3, [r4, #4]
 8009d3c:	dd0b      	ble.n	8009d56 <_printf_float+0x1a2>
 8009d3e:	6121      	str	r1, [r4, #16]
 8009d40:	b913      	cbnz	r3, 8009d48 <_printf_float+0x194>
 8009d42:	6822      	ldr	r2, [r4, #0]
 8009d44:	07d0      	lsls	r0, r2, #31
 8009d46:	d502      	bpl.n	8009d4e <_printf_float+0x19a>
 8009d48:	3301      	adds	r3, #1
 8009d4a:	440b      	add	r3, r1
 8009d4c:	6123      	str	r3, [r4, #16]
 8009d4e:	f04f 0900 	mov.w	r9, #0
 8009d52:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009d54:	e7dc      	b.n	8009d10 <_printf_float+0x15c>
 8009d56:	b913      	cbnz	r3, 8009d5e <_printf_float+0x1aa>
 8009d58:	6822      	ldr	r2, [r4, #0]
 8009d5a:	07d2      	lsls	r2, r2, #31
 8009d5c:	d501      	bpl.n	8009d62 <_printf_float+0x1ae>
 8009d5e:	3302      	adds	r3, #2
 8009d60:	e7f4      	b.n	8009d4c <_printf_float+0x198>
 8009d62:	2301      	movs	r3, #1
 8009d64:	e7f2      	b.n	8009d4c <_printf_float+0x198>
 8009d66:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009d6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d6c:	4299      	cmp	r1, r3
 8009d6e:	db05      	blt.n	8009d7c <_printf_float+0x1c8>
 8009d70:	6823      	ldr	r3, [r4, #0]
 8009d72:	6121      	str	r1, [r4, #16]
 8009d74:	07d8      	lsls	r0, r3, #31
 8009d76:	d5ea      	bpl.n	8009d4e <_printf_float+0x19a>
 8009d78:	1c4b      	adds	r3, r1, #1
 8009d7a:	e7e7      	b.n	8009d4c <_printf_float+0x198>
 8009d7c:	2900      	cmp	r1, #0
 8009d7e:	bfcc      	ite	gt
 8009d80:	2201      	movgt	r2, #1
 8009d82:	f1c1 0202 	rsble	r2, r1, #2
 8009d86:	4413      	add	r3, r2
 8009d88:	e7e0      	b.n	8009d4c <_printf_float+0x198>
 8009d8a:	6823      	ldr	r3, [r4, #0]
 8009d8c:	055a      	lsls	r2, r3, #21
 8009d8e:	d407      	bmi.n	8009da0 <_printf_float+0x1ec>
 8009d90:	6923      	ldr	r3, [r4, #16]
 8009d92:	4642      	mov	r2, r8
 8009d94:	4631      	mov	r1, r6
 8009d96:	4628      	mov	r0, r5
 8009d98:	47b8      	blx	r7
 8009d9a:	3001      	adds	r0, #1
 8009d9c:	d12b      	bne.n	8009df6 <_printf_float+0x242>
 8009d9e:	e764      	b.n	8009c6a <_printf_float+0xb6>
 8009da0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009da4:	f240 80dc 	bls.w	8009f60 <_printf_float+0x3ac>
 8009da8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009dac:	2200      	movs	r2, #0
 8009dae:	2300      	movs	r3, #0
 8009db0:	f7f6 fdfa 	bl	80009a8 <__aeabi_dcmpeq>
 8009db4:	2800      	cmp	r0, #0
 8009db6:	d033      	beq.n	8009e20 <_printf_float+0x26c>
 8009db8:	2301      	movs	r3, #1
 8009dba:	4631      	mov	r1, r6
 8009dbc:	4628      	mov	r0, r5
 8009dbe:	4a35      	ldr	r2, [pc, #212]	@ (8009e94 <_printf_float+0x2e0>)
 8009dc0:	47b8      	blx	r7
 8009dc2:	3001      	adds	r0, #1
 8009dc4:	f43f af51 	beq.w	8009c6a <_printf_float+0xb6>
 8009dc8:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8009dcc:	4543      	cmp	r3, r8
 8009dce:	db02      	blt.n	8009dd6 <_printf_float+0x222>
 8009dd0:	6823      	ldr	r3, [r4, #0]
 8009dd2:	07d8      	lsls	r0, r3, #31
 8009dd4:	d50f      	bpl.n	8009df6 <_printf_float+0x242>
 8009dd6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009dda:	4631      	mov	r1, r6
 8009ddc:	4628      	mov	r0, r5
 8009dde:	47b8      	blx	r7
 8009de0:	3001      	adds	r0, #1
 8009de2:	f43f af42 	beq.w	8009c6a <_printf_float+0xb6>
 8009de6:	f04f 0900 	mov.w	r9, #0
 8009dea:	f108 38ff 	add.w	r8, r8, #4294967295
 8009dee:	f104 0a1a 	add.w	sl, r4, #26
 8009df2:	45c8      	cmp	r8, r9
 8009df4:	dc09      	bgt.n	8009e0a <_printf_float+0x256>
 8009df6:	6823      	ldr	r3, [r4, #0]
 8009df8:	079b      	lsls	r3, r3, #30
 8009dfa:	f100 8102 	bmi.w	800a002 <_printf_float+0x44e>
 8009dfe:	68e0      	ldr	r0, [r4, #12]
 8009e00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e02:	4298      	cmp	r0, r3
 8009e04:	bfb8      	it	lt
 8009e06:	4618      	movlt	r0, r3
 8009e08:	e731      	b.n	8009c6e <_printf_float+0xba>
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	4652      	mov	r2, sl
 8009e0e:	4631      	mov	r1, r6
 8009e10:	4628      	mov	r0, r5
 8009e12:	47b8      	blx	r7
 8009e14:	3001      	adds	r0, #1
 8009e16:	f43f af28 	beq.w	8009c6a <_printf_float+0xb6>
 8009e1a:	f109 0901 	add.w	r9, r9, #1
 8009e1e:	e7e8      	b.n	8009df2 <_printf_float+0x23e>
 8009e20:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	dc38      	bgt.n	8009e98 <_printf_float+0x2e4>
 8009e26:	2301      	movs	r3, #1
 8009e28:	4631      	mov	r1, r6
 8009e2a:	4628      	mov	r0, r5
 8009e2c:	4a19      	ldr	r2, [pc, #100]	@ (8009e94 <_printf_float+0x2e0>)
 8009e2e:	47b8      	blx	r7
 8009e30:	3001      	adds	r0, #1
 8009e32:	f43f af1a 	beq.w	8009c6a <_printf_float+0xb6>
 8009e36:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8009e3a:	ea59 0303 	orrs.w	r3, r9, r3
 8009e3e:	d102      	bne.n	8009e46 <_printf_float+0x292>
 8009e40:	6823      	ldr	r3, [r4, #0]
 8009e42:	07d9      	lsls	r1, r3, #31
 8009e44:	d5d7      	bpl.n	8009df6 <_printf_float+0x242>
 8009e46:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009e4a:	4631      	mov	r1, r6
 8009e4c:	4628      	mov	r0, r5
 8009e4e:	47b8      	blx	r7
 8009e50:	3001      	adds	r0, #1
 8009e52:	f43f af0a 	beq.w	8009c6a <_printf_float+0xb6>
 8009e56:	f04f 0a00 	mov.w	sl, #0
 8009e5a:	f104 0b1a 	add.w	fp, r4, #26
 8009e5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009e60:	425b      	negs	r3, r3
 8009e62:	4553      	cmp	r3, sl
 8009e64:	dc01      	bgt.n	8009e6a <_printf_float+0x2b6>
 8009e66:	464b      	mov	r3, r9
 8009e68:	e793      	b.n	8009d92 <_printf_float+0x1de>
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	465a      	mov	r2, fp
 8009e6e:	4631      	mov	r1, r6
 8009e70:	4628      	mov	r0, r5
 8009e72:	47b8      	blx	r7
 8009e74:	3001      	adds	r0, #1
 8009e76:	f43f aef8 	beq.w	8009c6a <_printf_float+0xb6>
 8009e7a:	f10a 0a01 	add.w	sl, sl, #1
 8009e7e:	e7ee      	b.n	8009e5e <_printf_float+0x2aa>
 8009e80:	7fefffff 	.word	0x7fefffff
 8009e84:	0800d3c6 	.word	0x0800d3c6
 8009e88:	0800d3c2 	.word	0x0800d3c2
 8009e8c:	0800d3ce 	.word	0x0800d3ce
 8009e90:	0800d3ca 	.word	0x0800d3ca
 8009e94:	0800d501 	.word	0x0800d501
 8009e98:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009e9a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8009e9e:	4553      	cmp	r3, sl
 8009ea0:	bfa8      	it	ge
 8009ea2:	4653      	movge	r3, sl
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	4699      	mov	r9, r3
 8009ea8:	dc36      	bgt.n	8009f18 <_printf_float+0x364>
 8009eaa:	f04f 0b00 	mov.w	fp, #0
 8009eae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009eb2:	f104 021a 	add.w	r2, r4, #26
 8009eb6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009eb8:	930a      	str	r3, [sp, #40]	@ 0x28
 8009eba:	eba3 0309 	sub.w	r3, r3, r9
 8009ebe:	455b      	cmp	r3, fp
 8009ec0:	dc31      	bgt.n	8009f26 <_printf_float+0x372>
 8009ec2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009ec4:	459a      	cmp	sl, r3
 8009ec6:	dc3a      	bgt.n	8009f3e <_printf_float+0x38a>
 8009ec8:	6823      	ldr	r3, [r4, #0]
 8009eca:	07da      	lsls	r2, r3, #31
 8009ecc:	d437      	bmi.n	8009f3e <_printf_float+0x38a>
 8009ece:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009ed0:	ebaa 0903 	sub.w	r9, sl, r3
 8009ed4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ed6:	ebaa 0303 	sub.w	r3, sl, r3
 8009eda:	4599      	cmp	r9, r3
 8009edc:	bfa8      	it	ge
 8009ede:	4699      	movge	r9, r3
 8009ee0:	f1b9 0f00 	cmp.w	r9, #0
 8009ee4:	dc33      	bgt.n	8009f4e <_printf_float+0x39a>
 8009ee6:	f04f 0800 	mov.w	r8, #0
 8009eea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009eee:	f104 0b1a 	add.w	fp, r4, #26
 8009ef2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009ef4:	ebaa 0303 	sub.w	r3, sl, r3
 8009ef8:	eba3 0309 	sub.w	r3, r3, r9
 8009efc:	4543      	cmp	r3, r8
 8009efe:	f77f af7a 	ble.w	8009df6 <_printf_float+0x242>
 8009f02:	2301      	movs	r3, #1
 8009f04:	465a      	mov	r2, fp
 8009f06:	4631      	mov	r1, r6
 8009f08:	4628      	mov	r0, r5
 8009f0a:	47b8      	blx	r7
 8009f0c:	3001      	adds	r0, #1
 8009f0e:	f43f aeac 	beq.w	8009c6a <_printf_float+0xb6>
 8009f12:	f108 0801 	add.w	r8, r8, #1
 8009f16:	e7ec      	b.n	8009ef2 <_printf_float+0x33e>
 8009f18:	4642      	mov	r2, r8
 8009f1a:	4631      	mov	r1, r6
 8009f1c:	4628      	mov	r0, r5
 8009f1e:	47b8      	blx	r7
 8009f20:	3001      	adds	r0, #1
 8009f22:	d1c2      	bne.n	8009eaa <_printf_float+0x2f6>
 8009f24:	e6a1      	b.n	8009c6a <_printf_float+0xb6>
 8009f26:	2301      	movs	r3, #1
 8009f28:	4631      	mov	r1, r6
 8009f2a:	4628      	mov	r0, r5
 8009f2c:	920a      	str	r2, [sp, #40]	@ 0x28
 8009f2e:	47b8      	blx	r7
 8009f30:	3001      	adds	r0, #1
 8009f32:	f43f ae9a 	beq.w	8009c6a <_printf_float+0xb6>
 8009f36:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009f38:	f10b 0b01 	add.w	fp, fp, #1
 8009f3c:	e7bb      	b.n	8009eb6 <_printf_float+0x302>
 8009f3e:	4631      	mov	r1, r6
 8009f40:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009f44:	4628      	mov	r0, r5
 8009f46:	47b8      	blx	r7
 8009f48:	3001      	adds	r0, #1
 8009f4a:	d1c0      	bne.n	8009ece <_printf_float+0x31a>
 8009f4c:	e68d      	b.n	8009c6a <_printf_float+0xb6>
 8009f4e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009f50:	464b      	mov	r3, r9
 8009f52:	4631      	mov	r1, r6
 8009f54:	4628      	mov	r0, r5
 8009f56:	4442      	add	r2, r8
 8009f58:	47b8      	blx	r7
 8009f5a:	3001      	adds	r0, #1
 8009f5c:	d1c3      	bne.n	8009ee6 <_printf_float+0x332>
 8009f5e:	e684      	b.n	8009c6a <_printf_float+0xb6>
 8009f60:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8009f64:	f1ba 0f01 	cmp.w	sl, #1
 8009f68:	dc01      	bgt.n	8009f6e <_printf_float+0x3ba>
 8009f6a:	07db      	lsls	r3, r3, #31
 8009f6c:	d536      	bpl.n	8009fdc <_printf_float+0x428>
 8009f6e:	2301      	movs	r3, #1
 8009f70:	4642      	mov	r2, r8
 8009f72:	4631      	mov	r1, r6
 8009f74:	4628      	mov	r0, r5
 8009f76:	47b8      	blx	r7
 8009f78:	3001      	adds	r0, #1
 8009f7a:	f43f ae76 	beq.w	8009c6a <_printf_float+0xb6>
 8009f7e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009f82:	4631      	mov	r1, r6
 8009f84:	4628      	mov	r0, r5
 8009f86:	47b8      	blx	r7
 8009f88:	3001      	adds	r0, #1
 8009f8a:	f43f ae6e 	beq.w	8009c6a <_printf_float+0xb6>
 8009f8e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009f92:	2200      	movs	r2, #0
 8009f94:	2300      	movs	r3, #0
 8009f96:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009f9a:	f7f6 fd05 	bl	80009a8 <__aeabi_dcmpeq>
 8009f9e:	b9c0      	cbnz	r0, 8009fd2 <_printf_float+0x41e>
 8009fa0:	4653      	mov	r3, sl
 8009fa2:	f108 0201 	add.w	r2, r8, #1
 8009fa6:	4631      	mov	r1, r6
 8009fa8:	4628      	mov	r0, r5
 8009faa:	47b8      	blx	r7
 8009fac:	3001      	adds	r0, #1
 8009fae:	d10c      	bne.n	8009fca <_printf_float+0x416>
 8009fb0:	e65b      	b.n	8009c6a <_printf_float+0xb6>
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	465a      	mov	r2, fp
 8009fb6:	4631      	mov	r1, r6
 8009fb8:	4628      	mov	r0, r5
 8009fba:	47b8      	blx	r7
 8009fbc:	3001      	adds	r0, #1
 8009fbe:	f43f ae54 	beq.w	8009c6a <_printf_float+0xb6>
 8009fc2:	f108 0801 	add.w	r8, r8, #1
 8009fc6:	45d0      	cmp	r8, sl
 8009fc8:	dbf3      	blt.n	8009fb2 <_printf_float+0x3fe>
 8009fca:	464b      	mov	r3, r9
 8009fcc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009fd0:	e6e0      	b.n	8009d94 <_printf_float+0x1e0>
 8009fd2:	f04f 0800 	mov.w	r8, #0
 8009fd6:	f104 0b1a 	add.w	fp, r4, #26
 8009fda:	e7f4      	b.n	8009fc6 <_printf_float+0x412>
 8009fdc:	2301      	movs	r3, #1
 8009fde:	4642      	mov	r2, r8
 8009fe0:	e7e1      	b.n	8009fa6 <_printf_float+0x3f2>
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	464a      	mov	r2, r9
 8009fe6:	4631      	mov	r1, r6
 8009fe8:	4628      	mov	r0, r5
 8009fea:	47b8      	blx	r7
 8009fec:	3001      	adds	r0, #1
 8009fee:	f43f ae3c 	beq.w	8009c6a <_printf_float+0xb6>
 8009ff2:	f108 0801 	add.w	r8, r8, #1
 8009ff6:	68e3      	ldr	r3, [r4, #12]
 8009ff8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009ffa:	1a5b      	subs	r3, r3, r1
 8009ffc:	4543      	cmp	r3, r8
 8009ffe:	dcf0      	bgt.n	8009fe2 <_printf_float+0x42e>
 800a000:	e6fd      	b.n	8009dfe <_printf_float+0x24a>
 800a002:	f04f 0800 	mov.w	r8, #0
 800a006:	f104 0919 	add.w	r9, r4, #25
 800a00a:	e7f4      	b.n	8009ff6 <_printf_float+0x442>

0800a00c <_printf_common>:
 800a00c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a010:	4616      	mov	r6, r2
 800a012:	4698      	mov	r8, r3
 800a014:	688a      	ldr	r2, [r1, #8]
 800a016:	690b      	ldr	r3, [r1, #16]
 800a018:	4607      	mov	r7, r0
 800a01a:	4293      	cmp	r3, r2
 800a01c:	bfb8      	it	lt
 800a01e:	4613      	movlt	r3, r2
 800a020:	6033      	str	r3, [r6, #0]
 800a022:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a026:	460c      	mov	r4, r1
 800a028:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a02c:	b10a      	cbz	r2, 800a032 <_printf_common+0x26>
 800a02e:	3301      	adds	r3, #1
 800a030:	6033      	str	r3, [r6, #0]
 800a032:	6823      	ldr	r3, [r4, #0]
 800a034:	0699      	lsls	r1, r3, #26
 800a036:	bf42      	ittt	mi
 800a038:	6833      	ldrmi	r3, [r6, #0]
 800a03a:	3302      	addmi	r3, #2
 800a03c:	6033      	strmi	r3, [r6, #0]
 800a03e:	6825      	ldr	r5, [r4, #0]
 800a040:	f015 0506 	ands.w	r5, r5, #6
 800a044:	d106      	bne.n	800a054 <_printf_common+0x48>
 800a046:	f104 0a19 	add.w	sl, r4, #25
 800a04a:	68e3      	ldr	r3, [r4, #12]
 800a04c:	6832      	ldr	r2, [r6, #0]
 800a04e:	1a9b      	subs	r3, r3, r2
 800a050:	42ab      	cmp	r3, r5
 800a052:	dc2b      	bgt.n	800a0ac <_printf_common+0xa0>
 800a054:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a058:	6822      	ldr	r2, [r4, #0]
 800a05a:	3b00      	subs	r3, #0
 800a05c:	bf18      	it	ne
 800a05e:	2301      	movne	r3, #1
 800a060:	0692      	lsls	r2, r2, #26
 800a062:	d430      	bmi.n	800a0c6 <_printf_common+0xba>
 800a064:	4641      	mov	r1, r8
 800a066:	4638      	mov	r0, r7
 800a068:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a06c:	47c8      	blx	r9
 800a06e:	3001      	adds	r0, #1
 800a070:	d023      	beq.n	800a0ba <_printf_common+0xae>
 800a072:	6823      	ldr	r3, [r4, #0]
 800a074:	6922      	ldr	r2, [r4, #16]
 800a076:	f003 0306 	and.w	r3, r3, #6
 800a07a:	2b04      	cmp	r3, #4
 800a07c:	bf14      	ite	ne
 800a07e:	2500      	movne	r5, #0
 800a080:	6833      	ldreq	r3, [r6, #0]
 800a082:	f04f 0600 	mov.w	r6, #0
 800a086:	bf08      	it	eq
 800a088:	68e5      	ldreq	r5, [r4, #12]
 800a08a:	f104 041a 	add.w	r4, r4, #26
 800a08e:	bf08      	it	eq
 800a090:	1aed      	subeq	r5, r5, r3
 800a092:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a096:	bf08      	it	eq
 800a098:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a09c:	4293      	cmp	r3, r2
 800a09e:	bfc4      	itt	gt
 800a0a0:	1a9b      	subgt	r3, r3, r2
 800a0a2:	18ed      	addgt	r5, r5, r3
 800a0a4:	42b5      	cmp	r5, r6
 800a0a6:	d11a      	bne.n	800a0de <_printf_common+0xd2>
 800a0a8:	2000      	movs	r0, #0
 800a0aa:	e008      	b.n	800a0be <_printf_common+0xb2>
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	4652      	mov	r2, sl
 800a0b0:	4641      	mov	r1, r8
 800a0b2:	4638      	mov	r0, r7
 800a0b4:	47c8      	blx	r9
 800a0b6:	3001      	adds	r0, #1
 800a0b8:	d103      	bne.n	800a0c2 <_printf_common+0xb6>
 800a0ba:	f04f 30ff 	mov.w	r0, #4294967295
 800a0be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0c2:	3501      	adds	r5, #1
 800a0c4:	e7c1      	b.n	800a04a <_printf_common+0x3e>
 800a0c6:	2030      	movs	r0, #48	@ 0x30
 800a0c8:	18e1      	adds	r1, r4, r3
 800a0ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a0ce:	1c5a      	adds	r2, r3, #1
 800a0d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a0d4:	4422      	add	r2, r4
 800a0d6:	3302      	adds	r3, #2
 800a0d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a0dc:	e7c2      	b.n	800a064 <_printf_common+0x58>
 800a0de:	2301      	movs	r3, #1
 800a0e0:	4622      	mov	r2, r4
 800a0e2:	4641      	mov	r1, r8
 800a0e4:	4638      	mov	r0, r7
 800a0e6:	47c8      	blx	r9
 800a0e8:	3001      	adds	r0, #1
 800a0ea:	d0e6      	beq.n	800a0ba <_printf_common+0xae>
 800a0ec:	3601      	adds	r6, #1
 800a0ee:	e7d9      	b.n	800a0a4 <_printf_common+0x98>

0800a0f0 <_printf_i>:
 800a0f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a0f4:	7e0f      	ldrb	r7, [r1, #24]
 800a0f6:	4691      	mov	r9, r2
 800a0f8:	2f78      	cmp	r7, #120	@ 0x78
 800a0fa:	4680      	mov	r8, r0
 800a0fc:	460c      	mov	r4, r1
 800a0fe:	469a      	mov	sl, r3
 800a100:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a102:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a106:	d807      	bhi.n	800a118 <_printf_i+0x28>
 800a108:	2f62      	cmp	r7, #98	@ 0x62
 800a10a:	d80a      	bhi.n	800a122 <_printf_i+0x32>
 800a10c:	2f00      	cmp	r7, #0
 800a10e:	f000 80d1 	beq.w	800a2b4 <_printf_i+0x1c4>
 800a112:	2f58      	cmp	r7, #88	@ 0x58
 800a114:	f000 80b8 	beq.w	800a288 <_printf_i+0x198>
 800a118:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a11c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a120:	e03a      	b.n	800a198 <_printf_i+0xa8>
 800a122:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a126:	2b15      	cmp	r3, #21
 800a128:	d8f6      	bhi.n	800a118 <_printf_i+0x28>
 800a12a:	a101      	add	r1, pc, #4	@ (adr r1, 800a130 <_printf_i+0x40>)
 800a12c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a130:	0800a189 	.word	0x0800a189
 800a134:	0800a19d 	.word	0x0800a19d
 800a138:	0800a119 	.word	0x0800a119
 800a13c:	0800a119 	.word	0x0800a119
 800a140:	0800a119 	.word	0x0800a119
 800a144:	0800a119 	.word	0x0800a119
 800a148:	0800a19d 	.word	0x0800a19d
 800a14c:	0800a119 	.word	0x0800a119
 800a150:	0800a119 	.word	0x0800a119
 800a154:	0800a119 	.word	0x0800a119
 800a158:	0800a119 	.word	0x0800a119
 800a15c:	0800a29b 	.word	0x0800a29b
 800a160:	0800a1c7 	.word	0x0800a1c7
 800a164:	0800a255 	.word	0x0800a255
 800a168:	0800a119 	.word	0x0800a119
 800a16c:	0800a119 	.word	0x0800a119
 800a170:	0800a2bd 	.word	0x0800a2bd
 800a174:	0800a119 	.word	0x0800a119
 800a178:	0800a1c7 	.word	0x0800a1c7
 800a17c:	0800a119 	.word	0x0800a119
 800a180:	0800a119 	.word	0x0800a119
 800a184:	0800a25d 	.word	0x0800a25d
 800a188:	6833      	ldr	r3, [r6, #0]
 800a18a:	1d1a      	adds	r2, r3, #4
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	6032      	str	r2, [r6, #0]
 800a190:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a194:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a198:	2301      	movs	r3, #1
 800a19a:	e09c      	b.n	800a2d6 <_printf_i+0x1e6>
 800a19c:	6833      	ldr	r3, [r6, #0]
 800a19e:	6820      	ldr	r0, [r4, #0]
 800a1a0:	1d19      	adds	r1, r3, #4
 800a1a2:	6031      	str	r1, [r6, #0]
 800a1a4:	0606      	lsls	r6, r0, #24
 800a1a6:	d501      	bpl.n	800a1ac <_printf_i+0xbc>
 800a1a8:	681d      	ldr	r5, [r3, #0]
 800a1aa:	e003      	b.n	800a1b4 <_printf_i+0xc4>
 800a1ac:	0645      	lsls	r5, r0, #25
 800a1ae:	d5fb      	bpl.n	800a1a8 <_printf_i+0xb8>
 800a1b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a1b4:	2d00      	cmp	r5, #0
 800a1b6:	da03      	bge.n	800a1c0 <_printf_i+0xd0>
 800a1b8:	232d      	movs	r3, #45	@ 0x2d
 800a1ba:	426d      	negs	r5, r5
 800a1bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a1c0:	230a      	movs	r3, #10
 800a1c2:	4858      	ldr	r0, [pc, #352]	@ (800a324 <_printf_i+0x234>)
 800a1c4:	e011      	b.n	800a1ea <_printf_i+0xfa>
 800a1c6:	6821      	ldr	r1, [r4, #0]
 800a1c8:	6833      	ldr	r3, [r6, #0]
 800a1ca:	0608      	lsls	r0, r1, #24
 800a1cc:	f853 5b04 	ldr.w	r5, [r3], #4
 800a1d0:	d402      	bmi.n	800a1d8 <_printf_i+0xe8>
 800a1d2:	0649      	lsls	r1, r1, #25
 800a1d4:	bf48      	it	mi
 800a1d6:	b2ad      	uxthmi	r5, r5
 800a1d8:	2f6f      	cmp	r7, #111	@ 0x6f
 800a1da:	6033      	str	r3, [r6, #0]
 800a1dc:	bf14      	ite	ne
 800a1de:	230a      	movne	r3, #10
 800a1e0:	2308      	moveq	r3, #8
 800a1e2:	4850      	ldr	r0, [pc, #320]	@ (800a324 <_printf_i+0x234>)
 800a1e4:	2100      	movs	r1, #0
 800a1e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a1ea:	6866      	ldr	r6, [r4, #4]
 800a1ec:	2e00      	cmp	r6, #0
 800a1ee:	60a6      	str	r6, [r4, #8]
 800a1f0:	db05      	blt.n	800a1fe <_printf_i+0x10e>
 800a1f2:	6821      	ldr	r1, [r4, #0]
 800a1f4:	432e      	orrs	r6, r5
 800a1f6:	f021 0104 	bic.w	r1, r1, #4
 800a1fa:	6021      	str	r1, [r4, #0]
 800a1fc:	d04b      	beq.n	800a296 <_printf_i+0x1a6>
 800a1fe:	4616      	mov	r6, r2
 800a200:	fbb5 f1f3 	udiv	r1, r5, r3
 800a204:	fb03 5711 	mls	r7, r3, r1, r5
 800a208:	5dc7      	ldrb	r7, [r0, r7]
 800a20a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a20e:	462f      	mov	r7, r5
 800a210:	42bb      	cmp	r3, r7
 800a212:	460d      	mov	r5, r1
 800a214:	d9f4      	bls.n	800a200 <_printf_i+0x110>
 800a216:	2b08      	cmp	r3, #8
 800a218:	d10b      	bne.n	800a232 <_printf_i+0x142>
 800a21a:	6823      	ldr	r3, [r4, #0]
 800a21c:	07df      	lsls	r7, r3, #31
 800a21e:	d508      	bpl.n	800a232 <_printf_i+0x142>
 800a220:	6923      	ldr	r3, [r4, #16]
 800a222:	6861      	ldr	r1, [r4, #4]
 800a224:	4299      	cmp	r1, r3
 800a226:	bfde      	ittt	le
 800a228:	2330      	movle	r3, #48	@ 0x30
 800a22a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a22e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a232:	1b92      	subs	r2, r2, r6
 800a234:	6122      	str	r2, [r4, #16]
 800a236:	464b      	mov	r3, r9
 800a238:	4621      	mov	r1, r4
 800a23a:	4640      	mov	r0, r8
 800a23c:	f8cd a000 	str.w	sl, [sp]
 800a240:	aa03      	add	r2, sp, #12
 800a242:	f7ff fee3 	bl	800a00c <_printf_common>
 800a246:	3001      	adds	r0, #1
 800a248:	d14a      	bne.n	800a2e0 <_printf_i+0x1f0>
 800a24a:	f04f 30ff 	mov.w	r0, #4294967295
 800a24e:	b004      	add	sp, #16
 800a250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a254:	6823      	ldr	r3, [r4, #0]
 800a256:	f043 0320 	orr.w	r3, r3, #32
 800a25a:	6023      	str	r3, [r4, #0]
 800a25c:	2778      	movs	r7, #120	@ 0x78
 800a25e:	4832      	ldr	r0, [pc, #200]	@ (800a328 <_printf_i+0x238>)
 800a260:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a264:	6823      	ldr	r3, [r4, #0]
 800a266:	6831      	ldr	r1, [r6, #0]
 800a268:	061f      	lsls	r7, r3, #24
 800a26a:	f851 5b04 	ldr.w	r5, [r1], #4
 800a26e:	d402      	bmi.n	800a276 <_printf_i+0x186>
 800a270:	065f      	lsls	r7, r3, #25
 800a272:	bf48      	it	mi
 800a274:	b2ad      	uxthmi	r5, r5
 800a276:	6031      	str	r1, [r6, #0]
 800a278:	07d9      	lsls	r1, r3, #31
 800a27a:	bf44      	itt	mi
 800a27c:	f043 0320 	orrmi.w	r3, r3, #32
 800a280:	6023      	strmi	r3, [r4, #0]
 800a282:	b11d      	cbz	r5, 800a28c <_printf_i+0x19c>
 800a284:	2310      	movs	r3, #16
 800a286:	e7ad      	b.n	800a1e4 <_printf_i+0xf4>
 800a288:	4826      	ldr	r0, [pc, #152]	@ (800a324 <_printf_i+0x234>)
 800a28a:	e7e9      	b.n	800a260 <_printf_i+0x170>
 800a28c:	6823      	ldr	r3, [r4, #0]
 800a28e:	f023 0320 	bic.w	r3, r3, #32
 800a292:	6023      	str	r3, [r4, #0]
 800a294:	e7f6      	b.n	800a284 <_printf_i+0x194>
 800a296:	4616      	mov	r6, r2
 800a298:	e7bd      	b.n	800a216 <_printf_i+0x126>
 800a29a:	6833      	ldr	r3, [r6, #0]
 800a29c:	6825      	ldr	r5, [r4, #0]
 800a29e:	1d18      	adds	r0, r3, #4
 800a2a0:	6961      	ldr	r1, [r4, #20]
 800a2a2:	6030      	str	r0, [r6, #0]
 800a2a4:	062e      	lsls	r6, r5, #24
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	d501      	bpl.n	800a2ae <_printf_i+0x1be>
 800a2aa:	6019      	str	r1, [r3, #0]
 800a2ac:	e002      	b.n	800a2b4 <_printf_i+0x1c4>
 800a2ae:	0668      	lsls	r0, r5, #25
 800a2b0:	d5fb      	bpl.n	800a2aa <_printf_i+0x1ba>
 800a2b2:	8019      	strh	r1, [r3, #0]
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	4616      	mov	r6, r2
 800a2b8:	6123      	str	r3, [r4, #16]
 800a2ba:	e7bc      	b.n	800a236 <_printf_i+0x146>
 800a2bc:	6833      	ldr	r3, [r6, #0]
 800a2be:	2100      	movs	r1, #0
 800a2c0:	1d1a      	adds	r2, r3, #4
 800a2c2:	6032      	str	r2, [r6, #0]
 800a2c4:	681e      	ldr	r6, [r3, #0]
 800a2c6:	6862      	ldr	r2, [r4, #4]
 800a2c8:	4630      	mov	r0, r6
 800a2ca:	f000 fa62 	bl	800a792 <memchr>
 800a2ce:	b108      	cbz	r0, 800a2d4 <_printf_i+0x1e4>
 800a2d0:	1b80      	subs	r0, r0, r6
 800a2d2:	6060      	str	r0, [r4, #4]
 800a2d4:	6863      	ldr	r3, [r4, #4]
 800a2d6:	6123      	str	r3, [r4, #16]
 800a2d8:	2300      	movs	r3, #0
 800a2da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a2de:	e7aa      	b.n	800a236 <_printf_i+0x146>
 800a2e0:	4632      	mov	r2, r6
 800a2e2:	4649      	mov	r1, r9
 800a2e4:	4640      	mov	r0, r8
 800a2e6:	6923      	ldr	r3, [r4, #16]
 800a2e8:	47d0      	blx	sl
 800a2ea:	3001      	adds	r0, #1
 800a2ec:	d0ad      	beq.n	800a24a <_printf_i+0x15a>
 800a2ee:	6823      	ldr	r3, [r4, #0]
 800a2f0:	079b      	lsls	r3, r3, #30
 800a2f2:	d413      	bmi.n	800a31c <_printf_i+0x22c>
 800a2f4:	68e0      	ldr	r0, [r4, #12]
 800a2f6:	9b03      	ldr	r3, [sp, #12]
 800a2f8:	4298      	cmp	r0, r3
 800a2fa:	bfb8      	it	lt
 800a2fc:	4618      	movlt	r0, r3
 800a2fe:	e7a6      	b.n	800a24e <_printf_i+0x15e>
 800a300:	2301      	movs	r3, #1
 800a302:	4632      	mov	r2, r6
 800a304:	4649      	mov	r1, r9
 800a306:	4640      	mov	r0, r8
 800a308:	47d0      	blx	sl
 800a30a:	3001      	adds	r0, #1
 800a30c:	d09d      	beq.n	800a24a <_printf_i+0x15a>
 800a30e:	3501      	adds	r5, #1
 800a310:	68e3      	ldr	r3, [r4, #12]
 800a312:	9903      	ldr	r1, [sp, #12]
 800a314:	1a5b      	subs	r3, r3, r1
 800a316:	42ab      	cmp	r3, r5
 800a318:	dcf2      	bgt.n	800a300 <_printf_i+0x210>
 800a31a:	e7eb      	b.n	800a2f4 <_printf_i+0x204>
 800a31c:	2500      	movs	r5, #0
 800a31e:	f104 0619 	add.w	r6, r4, #25
 800a322:	e7f5      	b.n	800a310 <_printf_i+0x220>
 800a324:	0800d3d2 	.word	0x0800d3d2
 800a328:	0800d3e3 	.word	0x0800d3e3

0800a32c <std>:
 800a32c:	2300      	movs	r3, #0
 800a32e:	b510      	push	{r4, lr}
 800a330:	4604      	mov	r4, r0
 800a332:	e9c0 3300 	strd	r3, r3, [r0]
 800a336:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a33a:	6083      	str	r3, [r0, #8]
 800a33c:	8181      	strh	r1, [r0, #12]
 800a33e:	6643      	str	r3, [r0, #100]	@ 0x64
 800a340:	81c2      	strh	r2, [r0, #14]
 800a342:	6183      	str	r3, [r0, #24]
 800a344:	4619      	mov	r1, r3
 800a346:	2208      	movs	r2, #8
 800a348:	305c      	adds	r0, #92	@ 0x5c
 800a34a:	f000 f944 	bl	800a5d6 <memset>
 800a34e:	4b0d      	ldr	r3, [pc, #52]	@ (800a384 <std+0x58>)
 800a350:	6224      	str	r4, [r4, #32]
 800a352:	6263      	str	r3, [r4, #36]	@ 0x24
 800a354:	4b0c      	ldr	r3, [pc, #48]	@ (800a388 <std+0x5c>)
 800a356:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a358:	4b0c      	ldr	r3, [pc, #48]	@ (800a38c <std+0x60>)
 800a35a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a35c:	4b0c      	ldr	r3, [pc, #48]	@ (800a390 <std+0x64>)
 800a35e:	6323      	str	r3, [r4, #48]	@ 0x30
 800a360:	4b0c      	ldr	r3, [pc, #48]	@ (800a394 <std+0x68>)
 800a362:	429c      	cmp	r4, r3
 800a364:	d006      	beq.n	800a374 <std+0x48>
 800a366:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a36a:	4294      	cmp	r4, r2
 800a36c:	d002      	beq.n	800a374 <std+0x48>
 800a36e:	33d0      	adds	r3, #208	@ 0xd0
 800a370:	429c      	cmp	r4, r3
 800a372:	d105      	bne.n	800a380 <std+0x54>
 800a374:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a37c:	f000 ba06 	b.w	800a78c <__retarget_lock_init_recursive>
 800a380:	bd10      	pop	{r4, pc}
 800a382:	bf00      	nop
 800a384:	0800a54d 	.word	0x0800a54d
 800a388:	0800a573 	.word	0x0800a573
 800a38c:	0800a5ab 	.word	0x0800a5ab
 800a390:	0800a5cf 	.word	0x0800a5cf
 800a394:	2000298c 	.word	0x2000298c

0800a398 <stdio_exit_handler>:
 800a398:	4a02      	ldr	r2, [pc, #8]	@ (800a3a4 <stdio_exit_handler+0xc>)
 800a39a:	4903      	ldr	r1, [pc, #12]	@ (800a3a8 <stdio_exit_handler+0x10>)
 800a39c:	4803      	ldr	r0, [pc, #12]	@ (800a3ac <stdio_exit_handler+0x14>)
 800a39e:	f000 b869 	b.w	800a474 <_fwalk_sglue>
 800a3a2:	bf00      	nop
 800a3a4:	20000028 	.word	0x20000028
 800a3a8:	0800c75d 	.word	0x0800c75d
 800a3ac:	20000038 	.word	0x20000038

0800a3b0 <cleanup_stdio>:
 800a3b0:	6841      	ldr	r1, [r0, #4]
 800a3b2:	4b0c      	ldr	r3, [pc, #48]	@ (800a3e4 <cleanup_stdio+0x34>)
 800a3b4:	b510      	push	{r4, lr}
 800a3b6:	4299      	cmp	r1, r3
 800a3b8:	4604      	mov	r4, r0
 800a3ba:	d001      	beq.n	800a3c0 <cleanup_stdio+0x10>
 800a3bc:	f002 f9ce 	bl	800c75c <_fflush_r>
 800a3c0:	68a1      	ldr	r1, [r4, #8]
 800a3c2:	4b09      	ldr	r3, [pc, #36]	@ (800a3e8 <cleanup_stdio+0x38>)
 800a3c4:	4299      	cmp	r1, r3
 800a3c6:	d002      	beq.n	800a3ce <cleanup_stdio+0x1e>
 800a3c8:	4620      	mov	r0, r4
 800a3ca:	f002 f9c7 	bl	800c75c <_fflush_r>
 800a3ce:	68e1      	ldr	r1, [r4, #12]
 800a3d0:	4b06      	ldr	r3, [pc, #24]	@ (800a3ec <cleanup_stdio+0x3c>)
 800a3d2:	4299      	cmp	r1, r3
 800a3d4:	d004      	beq.n	800a3e0 <cleanup_stdio+0x30>
 800a3d6:	4620      	mov	r0, r4
 800a3d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3dc:	f002 b9be 	b.w	800c75c <_fflush_r>
 800a3e0:	bd10      	pop	{r4, pc}
 800a3e2:	bf00      	nop
 800a3e4:	2000298c 	.word	0x2000298c
 800a3e8:	200029f4 	.word	0x200029f4
 800a3ec:	20002a5c 	.word	0x20002a5c

0800a3f0 <global_stdio_init.part.0>:
 800a3f0:	b510      	push	{r4, lr}
 800a3f2:	4b0b      	ldr	r3, [pc, #44]	@ (800a420 <global_stdio_init.part.0+0x30>)
 800a3f4:	4c0b      	ldr	r4, [pc, #44]	@ (800a424 <global_stdio_init.part.0+0x34>)
 800a3f6:	4a0c      	ldr	r2, [pc, #48]	@ (800a428 <global_stdio_init.part.0+0x38>)
 800a3f8:	4620      	mov	r0, r4
 800a3fa:	601a      	str	r2, [r3, #0]
 800a3fc:	2104      	movs	r1, #4
 800a3fe:	2200      	movs	r2, #0
 800a400:	f7ff ff94 	bl	800a32c <std>
 800a404:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a408:	2201      	movs	r2, #1
 800a40a:	2109      	movs	r1, #9
 800a40c:	f7ff ff8e 	bl	800a32c <std>
 800a410:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a414:	2202      	movs	r2, #2
 800a416:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a41a:	2112      	movs	r1, #18
 800a41c:	f7ff bf86 	b.w	800a32c <std>
 800a420:	20002ac4 	.word	0x20002ac4
 800a424:	2000298c 	.word	0x2000298c
 800a428:	0800a399 	.word	0x0800a399

0800a42c <__sfp_lock_acquire>:
 800a42c:	4801      	ldr	r0, [pc, #4]	@ (800a434 <__sfp_lock_acquire+0x8>)
 800a42e:	f000 b9ae 	b.w	800a78e <__retarget_lock_acquire_recursive>
 800a432:	bf00      	nop
 800a434:	20002acd 	.word	0x20002acd

0800a438 <__sfp_lock_release>:
 800a438:	4801      	ldr	r0, [pc, #4]	@ (800a440 <__sfp_lock_release+0x8>)
 800a43a:	f000 b9a9 	b.w	800a790 <__retarget_lock_release_recursive>
 800a43e:	bf00      	nop
 800a440:	20002acd 	.word	0x20002acd

0800a444 <__sinit>:
 800a444:	b510      	push	{r4, lr}
 800a446:	4604      	mov	r4, r0
 800a448:	f7ff fff0 	bl	800a42c <__sfp_lock_acquire>
 800a44c:	6a23      	ldr	r3, [r4, #32]
 800a44e:	b11b      	cbz	r3, 800a458 <__sinit+0x14>
 800a450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a454:	f7ff bff0 	b.w	800a438 <__sfp_lock_release>
 800a458:	4b04      	ldr	r3, [pc, #16]	@ (800a46c <__sinit+0x28>)
 800a45a:	6223      	str	r3, [r4, #32]
 800a45c:	4b04      	ldr	r3, [pc, #16]	@ (800a470 <__sinit+0x2c>)
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d1f5      	bne.n	800a450 <__sinit+0xc>
 800a464:	f7ff ffc4 	bl	800a3f0 <global_stdio_init.part.0>
 800a468:	e7f2      	b.n	800a450 <__sinit+0xc>
 800a46a:	bf00      	nop
 800a46c:	0800a3b1 	.word	0x0800a3b1
 800a470:	20002ac4 	.word	0x20002ac4

0800a474 <_fwalk_sglue>:
 800a474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a478:	4607      	mov	r7, r0
 800a47a:	4688      	mov	r8, r1
 800a47c:	4614      	mov	r4, r2
 800a47e:	2600      	movs	r6, #0
 800a480:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a484:	f1b9 0901 	subs.w	r9, r9, #1
 800a488:	d505      	bpl.n	800a496 <_fwalk_sglue+0x22>
 800a48a:	6824      	ldr	r4, [r4, #0]
 800a48c:	2c00      	cmp	r4, #0
 800a48e:	d1f7      	bne.n	800a480 <_fwalk_sglue+0xc>
 800a490:	4630      	mov	r0, r6
 800a492:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a496:	89ab      	ldrh	r3, [r5, #12]
 800a498:	2b01      	cmp	r3, #1
 800a49a:	d907      	bls.n	800a4ac <_fwalk_sglue+0x38>
 800a49c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a4a0:	3301      	adds	r3, #1
 800a4a2:	d003      	beq.n	800a4ac <_fwalk_sglue+0x38>
 800a4a4:	4629      	mov	r1, r5
 800a4a6:	4638      	mov	r0, r7
 800a4a8:	47c0      	blx	r8
 800a4aa:	4306      	orrs	r6, r0
 800a4ac:	3568      	adds	r5, #104	@ 0x68
 800a4ae:	e7e9      	b.n	800a484 <_fwalk_sglue+0x10>

0800a4b0 <siprintf>:
 800a4b0:	b40e      	push	{r1, r2, r3}
 800a4b2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a4b6:	b510      	push	{r4, lr}
 800a4b8:	2400      	movs	r4, #0
 800a4ba:	b09d      	sub	sp, #116	@ 0x74
 800a4bc:	ab1f      	add	r3, sp, #124	@ 0x7c
 800a4be:	9002      	str	r0, [sp, #8]
 800a4c0:	9006      	str	r0, [sp, #24]
 800a4c2:	9107      	str	r1, [sp, #28]
 800a4c4:	9104      	str	r1, [sp, #16]
 800a4c6:	4809      	ldr	r0, [pc, #36]	@ (800a4ec <siprintf+0x3c>)
 800a4c8:	4909      	ldr	r1, [pc, #36]	@ (800a4f0 <siprintf+0x40>)
 800a4ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4ce:	9105      	str	r1, [sp, #20]
 800a4d0:	6800      	ldr	r0, [r0, #0]
 800a4d2:	a902      	add	r1, sp, #8
 800a4d4:	9301      	str	r3, [sp, #4]
 800a4d6:	941b      	str	r4, [sp, #108]	@ 0x6c
 800a4d8:	f001 fcaa 	bl	800be30 <_svfiprintf_r>
 800a4dc:	9b02      	ldr	r3, [sp, #8]
 800a4de:	701c      	strb	r4, [r3, #0]
 800a4e0:	b01d      	add	sp, #116	@ 0x74
 800a4e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4e6:	b003      	add	sp, #12
 800a4e8:	4770      	bx	lr
 800a4ea:	bf00      	nop
 800a4ec:	20000034 	.word	0x20000034
 800a4f0:	ffff0208 	.word	0xffff0208

0800a4f4 <siscanf>:
 800a4f4:	b40e      	push	{r1, r2, r3}
 800a4f6:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800a4fa:	b570      	push	{r4, r5, r6, lr}
 800a4fc:	2500      	movs	r5, #0
 800a4fe:	b09d      	sub	sp, #116	@ 0x74
 800a500:	ac21      	add	r4, sp, #132	@ 0x84
 800a502:	f854 6b04 	ldr.w	r6, [r4], #4
 800a506:	f8ad 2014 	strh.w	r2, [sp, #20]
 800a50a:	951b      	str	r5, [sp, #108]	@ 0x6c
 800a50c:	9002      	str	r0, [sp, #8]
 800a50e:	9006      	str	r0, [sp, #24]
 800a510:	f7f5 fe1e 	bl	8000150 <strlen>
 800a514:	4b0b      	ldr	r3, [pc, #44]	@ (800a544 <siscanf+0x50>)
 800a516:	9003      	str	r0, [sp, #12]
 800a518:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a51a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a51e:	9007      	str	r0, [sp, #28]
 800a520:	4809      	ldr	r0, [pc, #36]	@ (800a548 <siscanf+0x54>)
 800a522:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a526:	4632      	mov	r2, r6
 800a528:	4623      	mov	r3, r4
 800a52a:	a902      	add	r1, sp, #8
 800a52c:	6800      	ldr	r0, [r0, #0]
 800a52e:	950f      	str	r5, [sp, #60]	@ 0x3c
 800a530:	9514      	str	r5, [sp, #80]	@ 0x50
 800a532:	9401      	str	r4, [sp, #4]
 800a534:	f001 fdd2 	bl	800c0dc <__ssvfiscanf_r>
 800a538:	b01d      	add	sp, #116	@ 0x74
 800a53a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a53e:	b003      	add	sp, #12
 800a540:	4770      	bx	lr
 800a542:	bf00      	nop
 800a544:	0800a56f 	.word	0x0800a56f
 800a548:	20000034 	.word	0x20000034

0800a54c <__sread>:
 800a54c:	b510      	push	{r4, lr}
 800a54e:	460c      	mov	r4, r1
 800a550:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a554:	f000 f8cc 	bl	800a6f0 <_read_r>
 800a558:	2800      	cmp	r0, #0
 800a55a:	bfab      	itete	ge
 800a55c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a55e:	89a3      	ldrhlt	r3, [r4, #12]
 800a560:	181b      	addge	r3, r3, r0
 800a562:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a566:	bfac      	ite	ge
 800a568:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a56a:	81a3      	strhlt	r3, [r4, #12]
 800a56c:	bd10      	pop	{r4, pc}

0800a56e <__seofread>:
 800a56e:	2000      	movs	r0, #0
 800a570:	4770      	bx	lr

0800a572 <__swrite>:
 800a572:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a576:	461f      	mov	r7, r3
 800a578:	898b      	ldrh	r3, [r1, #12]
 800a57a:	4605      	mov	r5, r0
 800a57c:	05db      	lsls	r3, r3, #23
 800a57e:	460c      	mov	r4, r1
 800a580:	4616      	mov	r6, r2
 800a582:	d505      	bpl.n	800a590 <__swrite+0x1e>
 800a584:	2302      	movs	r3, #2
 800a586:	2200      	movs	r2, #0
 800a588:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a58c:	f000 f89e 	bl	800a6cc <_lseek_r>
 800a590:	89a3      	ldrh	r3, [r4, #12]
 800a592:	4632      	mov	r2, r6
 800a594:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a598:	81a3      	strh	r3, [r4, #12]
 800a59a:	4628      	mov	r0, r5
 800a59c:	463b      	mov	r3, r7
 800a59e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a5a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5a6:	f000 b8b5 	b.w	800a714 <_write_r>

0800a5aa <__sseek>:
 800a5aa:	b510      	push	{r4, lr}
 800a5ac:	460c      	mov	r4, r1
 800a5ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5b2:	f000 f88b 	bl	800a6cc <_lseek_r>
 800a5b6:	1c43      	adds	r3, r0, #1
 800a5b8:	89a3      	ldrh	r3, [r4, #12]
 800a5ba:	bf15      	itete	ne
 800a5bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a5be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a5c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a5c6:	81a3      	strheq	r3, [r4, #12]
 800a5c8:	bf18      	it	ne
 800a5ca:	81a3      	strhne	r3, [r4, #12]
 800a5cc:	bd10      	pop	{r4, pc}

0800a5ce <__sclose>:
 800a5ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5d2:	f000 b80d 	b.w	800a5f0 <_close_r>

0800a5d6 <memset>:
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	4402      	add	r2, r0
 800a5da:	4293      	cmp	r3, r2
 800a5dc:	d100      	bne.n	800a5e0 <memset+0xa>
 800a5de:	4770      	bx	lr
 800a5e0:	f803 1b01 	strb.w	r1, [r3], #1
 800a5e4:	e7f9      	b.n	800a5da <memset+0x4>
	...

0800a5e8 <_localeconv_r>:
 800a5e8:	4800      	ldr	r0, [pc, #0]	@ (800a5ec <_localeconv_r+0x4>)
 800a5ea:	4770      	bx	lr
 800a5ec:	20000174 	.word	0x20000174

0800a5f0 <_close_r>:
 800a5f0:	b538      	push	{r3, r4, r5, lr}
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	4d05      	ldr	r5, [pc, #20]	@ (800a60c <_close_r+0x1c>)
 800a5f6:	4604      	mov	r4, r0
 800a5f8:	4608      	mov	r0, r1
 800a5fa:	602b      	str	r3, [r5, #0]
 800a5fc:	f7f7 fd89 	bl	8002112 <_close>
 800a600:	1c43      	adds	r3, r0, #1
 800a602:	d102      	bne.n	800a60a <_close_r+0x1a>
 800a604:	682b      	ldr	r3, [r5, #0]
 800a606:	b103      	cbz	r3, 800a60a <_close_r+0x1a>
 800a608:	6023      	str	r3, [r4, #0]
 800a60a:	bd38      	pop	{r3, r4, r5, pc}
 800a60c:	20002ac8 	.word	0x20002ac8

0800a610 <_reclaim_reent>:
 800a610:	4b2d      	ldr	r3, [pc, #180]	@ (800a6c8 <_reclaim_reent+0xb8>)
 800a612:	b570      	push	{r4, r5, r6, lr}
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	4604      	mov	r4, r0
 800a618:	4283      	cmp	r3, r0
 800a61a:	d053      	beq.n	800a6c4 <_reclaim_reent+0xb4>
 800a61c:	69c3      	ldr	r3, [r0, #28]
 800a61e:	b31b      	cbz	r3, 800a668 <_reclaim_reent+0x58>
 800a620:	68db      	ldr	r3, [r3, #12]
 800a622:	b163      	cbz	r3, 800a63e <_reclaim_reent+0x2e>
 800a624:	2500      	movs	r5, #0
 800a626:	69e3      	ldr	r3, [r4, #28]
 800a628:	68db      	ldr	r3, [r3, #12]
 800a62a:	5959      	ldr	r1, [r3, r5]
 800a62c:	b9b1      	cbnz	r1, 800a65c <_reclaim_reent+0x4c>
 800a62e:	3504      	adds	r5, #4
 800a630:	2d80      	cmp	r5, #128	@ 0x80
 800a632:	d1f8      	bne.n	800a626 <_reclaim_reent+0x16>
 800a634:	69e3      	ldr	r3, [r4, #28]
 800a636:	4620      	mov	r0, r4
 800a638:	68d9      	ldr	r1, [r3, #12]
 800a63a:	f000 ff25 	bl	800b488 <_free_r>
 800a63e:	69e3      	ldr	r3, [r4, #28]
 800a640:	6819      	ldr	r1, [r3, #0]
 800a642:	b111      	cbz	r1, 800a64a <_reclaim_reent+0x3a>
 800a644:	4620      	mov	r0, r4
 800a646:	f000 ff1f 	bl	800b488 <_free_r>
 800a64a:	69e3      	ldr	r3, [r4, #28]
 800a64c:	689d      	ldr	r5, [r3, #8]
 800a64e:	b15d      	cbz	r5, 800a668 <_reclaim_reent+0x58>
 800a650:	4629      	mov	r1, r5
 800a652:	4620      	mov	r0, r4
 800a654:	682d      	ldr	r5, [r5, #0]
 800a656:	f000 ff17 	bl	800b488 <_free_r>
 800a65a:	e7f8      	b.n	800a64e <_reclaim_reent+0x3e>
 800a65c:	680e      	ldr	r6, [r1, #0]
 800a65e:	4620      	mov	r0, r4
 800a660:	f000 ff12 	bl	800b488 <_free_r>
 800a664:	4631      	mov	r1, r6
 800a666:	e7e1      	b.n	800a62c <_reclaim_reent+0x1c>
 800a668:	6961      	ldr	r1, [r4, #20]
 800a66a:	b111      	cbz	r1, 800a672 <_reclaim_reent+0x62>
 800a66c:	4620      	mov	r0, r4
 800a66e:	f000 ff0b 	bl	800b488 <_free_r>
 800a672:	69e1      	ldr	r1, [r4, #28]
 800a674:	b111      	cbz	r1, 800a67c <_reclaim_reent+0x6c>
 800a676:	4620      	mov	r0, r4
 800a678:	f000 ff06 	bl	800b488 <_free_r>
 800a67c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a67e:	b111      	cbz	r1, 800a686 <_reclaim_reent+0x76>
 800a680:	4620      	mov	r0, r4
 800a682:	f000 ff01 	bl	800b488 <_free_r>
 800a686:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a688:	b111      	cbz	r1, 800a690 <_reclaim_reent+0x80>
 800a68a:	4620      	mov	r0, r4
 800a68c:	f000 fefc 	bl	800b488 <_free_r>
 800a690:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800a692:	b111      	cbz	r1, 800a69a <_reclaim_reent+0x8a>
 800a694:	4620      	mov	r0, r4
 800a696:	f000 fef7 	bl	800b488 <_free_r>
 800a69a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800a69c:	b111      	cbz	r1, 800a6a4 <_reclaim_reent+0x94>
 800a69e:	4620      	mov	r0, r4
 800a6a0:	f000 fef2 	bl	800b488 <_free_r>
 800a6a4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800a6a6:	b111      	cbz	r1, 800a6ae <_reclaim_reent+0x9e>
 800a6a8:	4620      	mov	r0, r4
 800a6aa:	f000 feed 	bl	800b488 <_free_r>
 800a6ae:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a6b0:	b111      	cbz	r1, 800a6b8 <_reclaim_reent+0xa8>
 800a6b2:	4620      	mov	r0, r4
 800a6b4:	f000 fee8 	bl	800b488 <_free_r>
 800a6b8:	6a23      	ldr	r3, [r4, #32]
 800a6ba:	b11b      	cbz	r3, 800a6c4 <_reclaim_reent+0xb4>
 800a6bc:	4620      	mov	r0, r4
 800a6be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a6c2:	4718      	bx	r3
 800a6c4:	bd70      	pop	{r4, r5, r6, pc}
 800a6c6:	bf00      	nop
 800a6c8:	20000034 	.word	0x20000034

0800a6cc <_lseek_r>:
 800a6cc:	b538      	push	{r3, r4, r5, lr}
 800a6ce:	4604      	mov	r4, r0
 800a6d0:	4608      	mov	r0, r1
 800a6d2:	4611      	mov	r1, r2
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	4d05      	ldr	r5, [pc, #20]	@ (800a6ec <_lseek_r+0x20>)
 800a6d8:	602a      	str	r2, [r5, #0]
 800a6da:	461a      	mov	r2, r3
 800a6dc:	f7f7 fd3d 	bl	800215a <_lseek>
 800a6e0:	1c43      	adds	r3, r0, #1
 800a6e2:	d102      	bne.n	800a6ea <_lseek_r+0x1e>
 800a6e4:	682b      	ldr	r3, [r5, #0]
 800a6e6:	b103      	cbz	r3, 800a6ea <_lseek_r+0x1e>
 800a6e8:	6023      	str	r3, [r4, #0]
 800a6ea:	bd38      	pop	{r3, r4, r5, pc}
 800a6ec:	20002ac8 	.word	0x20002ac8

0800a6f0 <_read_r>:
 800a6f0:	b538      	push	{r3, r4, r5, lr}
 800a6f2:	4604      	mov	r4, r0
 800a6f4:	4608      	mov	r0, r1
 800a6f6:	4611      	mov	r1, r2
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	4d05      	ldr	r5, [pc, #20]	@ (800a710 <_read_r+0x20>)
 800a6fc:	602a      	str	r2, [r5, #0]
 800a6fe:	461a      	mov	r2, r3
 800a700:	f7f7 fcce 	bl	80020a0 <_read>
 800a704:	1c43      	adds	r3, r0, #1
 800a706:	d102      	bne.n	800a70e <_read_r+0x1e>
 800a708:	682b      	ldr	r3, [r5, #0]
 800a70a:	b103      	cbz	r3, 800a70e <_read_r+0x1e>
 800a70c:	6023      	str	r3, [r4, #0]
 800a70e:	bd38      	pop	{r3, r4, r5, pc}
 800a710:	20002ac8 	.word	0x20002ac8

0800a714 <_write_r>:
 800a714:	b538      	push	{r3, r4, r5, lr}
 800a716:	4604      	mov	r4, r0
 800a718:	4608      	mov	r0, r1
 800a71a:	4611      	mov	r1, r2
 800a71c:	2200      	movs	r2, #0
 800a71e:	4d05      	ldr	r5, [pc, #20]	@ (800a734 <_write_r+0x20>)
 800a720:	602a      	str	r2, [r5, #0]
 800a722:	461a      	mov	r2, r3
 800a724:	f7f7 fcd9 	bl	80020da <_write>
 800a728:	1c43      	adds	r3, r0, #1
 800a72a:	d102      	bne.n	800a732 <_write_r+0x1e>
 800a72c:	682b      	ldr	r3, [r5, #0]
 800a72e:	b103      	cbz	r3, 800a732 <_write_r+0x1e>
 800a730:	6023      	str	r3, [r4, #0]
 800a732:	bd38      	pop	{r3, r4, r5, pc}
 800a734:	20002ac8 	.word	0x20002ac8

0800a738 <__errno>:
 800a738:	4b01      	ldr	r3, [pc, #4]	@ (800a740 <__errno+0x8>)
 800a73a:	6818      	ldr	r0, [r3, #0]
 800a73c:	4770      	bx	lr
 800a73e:	bf00      	nop
 800a740:	20000034 	.word	0x20000034

0800a744 <__libc_init_array>:
 800a744:	b570      	push	{r4, r5, r6, lr}
 800a746:	2600      	movs	r6, #0
 800a748:	4d0c      	ldr	r5, [pc, #48]	@ (800a77c <__libc_init_array+0x38>)
 800a74a:	4c0d      	ldr	r4, [pc, #52]	@ (800a780 <__libc_init_array+0x3c>)
 800a74c:	1b64      	subs	r4, r4, r5
 800a74e:	10a4      	asrs	r4, r4, #2
 800a750:	42a6      	cmp	r6, r4
 800a752:	d109      	bne.n	800a768 <__libc_init_array+0x24>
 800a754:	f002 fcee 	bl	800d134 <_init>
 800a758:	2600      	movs	r6, #0
 800a75a:	4d0a      	ldr	r5, [pc, #40]	@ (800a784 <__libc_init_array+0x40>)
 800a75c:	4c0a      	ldr	r4, [pc, #40]	@ (800a788 <__libc_init_array+0x44>)
 800a75e:	1b64      	subs	r4, r4, r5
 800a760:	10a4      	asrs	r4, r4, #2
 800a762:	42a6      	cmp	r6, r4
 800a764:	d105      	bne.n	800a772 <__libc_init_array+0x2e>
 800a766:	bd70      	pop	{r4, r5, r6, pc}
 800a768:	f855 3b04 	ldr.w	r3, [r5], #4
 800a76c:	4798      	blx	r3
 800a76e:	3601      	adds	r6, #1
 800a770:	e7ee      	b.n	800a750 <__libc_init_array+0xc>
 800a772:	f855 3b04 	ldr.w	r3, [r5], #4
 800a776:	4798      	blx	r3
 800a778:	3601      	adds	r6, #1
 800a77a:	e7f2      	b.n	800a762 <__libc_init_array+0x1e>
 800a77c:	0800d754 	.word	0x0800d754
 800a780:	0800d754 	.word	0x0800d754
 800a784:	0800d754 	.word	0x0800d754
 800a788:	0800d758 	.word	0x0800d758

0800a78c <__retarget_lock_init_recursive>:
 800a78c:	4770      	bx	lr

0800a78e <__retarget_lock_acquire_recursive>:
 800a78e:	4770      	bx	lr

0800a790 <__retarget_lock_release_recursive>:
 800a790:	4770      	bx	lr

0800a792 <memchr>:
 800a792:	4603      	mov	r3, r0
 800a794:	b510      	push	{r4, lr}
 800a796:	b2c9      	uxtb	r1, r1
 800a798:	4402      	add	r2, r0
 800a79a:	4293      	cmp	r3, r2
 800a79c:	4618      	mov	r0, r3
 800a79e:	d101      	bne.n	800a7a4 <memchr+0x12>
 800a7a0:	2000      	movs	r0, #0
 800a7a2:	e003      	b.n	800a7ac <memchr+0x1a>
 800a7a4:	7804      	ldrb	r4, [r0, #0]
 800a7a6:	3301      	adds	r3, #1
 800a7a8:	428c      	cmp	r4, r1
 800a7aa:	d1f6      	bne.n	800a79a <memchr+0x8>
 800a7ac:	bd10      	pop	{r4, pc}

0800a7ae <memcpy>:
 800a7ae:	440a      	add	r2, r1
 800a7b0:	4291      	cmp	r1, r2
 800a7b2:	f100 33ff 	add.w	r3, r0, #4294967295
 800a7b6:	d100      	bne.n	800a7ba <memcpy+0xc>
 800a7b8:	4770      	bx	lr
 800a7ba:	b510      	push	{r4, lr}
 800a7bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a7c0:	4291      	cmp	r1, r2
 800a7c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a7c6:	d1f9      	bne.n	800a7bc <memcpy+0xe>
 800a7c8:	bd10      	pop	{r4, pc}

0800a7ca <quorem>:
 800a7ca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7ce:	6903      	ldr	r3, [r0, #16]
 800a7d0:	690c      	ldr	r4, [r1, #16]
 800a7d2:	4607      	mov	r7, r0
 800a7d4:	42a3      	cmp	r3, r4
 800a7d6:	db7e      	blt.n	800a8d6 <quorem+0x10c>
 800a7d8:	3c01      	subs	r4, #1
 800a7da:	00a3      	lsls	r3, r4, #2
 800a7dc:	f100 0514 	add.w	r5, r0, #20
 800a7e0:	f101 0814 	add.w	r8, r1, #20
 800a7e4:	9300      	str	r3, [sp, #0]
 800a7e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a7ea:	9301      	str	r3, [sp, #4]
 800a7ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a7f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a7f4:	3301      	adds	r3, #1
 800a7f6:	429a      	cmp	r2, r3
 800a7f8:	fbb2 f6f3 	udiv	r6, r2, r3
 800a7fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a800:	d32e      	bcc.n	800a860 <quorem+0x96>
 800a802:	f04f 0a00 	mov.w	sl, #0
 800a806:	46c4      	mov	ip, r8
 800a808:	46ae      	mov	lr, r5
 800a80a:	46d3      	mov	fp, sl
 800a80c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a810:	b298      	uxth	r0, r3
 800a812:	fb06 a000 	mla	r0, r6, r0, sl
 800a816:	0c1b      	lsrs	r3, r3, #16
 800a818:	0c02      	lsrs	r2, r0, #16
 800a81a:	fb06 2303 	mla	r3, r6, r3, r2
 800a81e:	f8de 2000 	ldr.w	r2, [lr]
 800a822:	b280      	uxth	r0, r0
 800a824:	b292      	uxth	r2, r2
 800a826:	1a12      	subs	r2, r2, r0
 800a828:	445a      	add	r2, fp
 800a82a:	f8de 0000 	ldr.w	r0, [lr]
 800a82e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a832:	b29b      	uxth	r3, r3
 800a834:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a838:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a83c:	b292      	uxth	r2, r2
 800a83e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a842:	45e1      	cmp	r9, ip
 800a844:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a848:	f84e 2b04 	str.w	r2, [lr], #4
 800a84c:	d2de      	bcs.n	800a80c <quorem+0x42>
 800a84e:	9b00      	ldr	r3, [sp, #0]
 800a850:	58eb      	ldr	r3, [r5, r3]
 800a852:	b92b      	cbnz	r3, 800a860 <quorem+0x96>
 800a854:	9b01      	ldr	r3, [sp, #4]
 800a856:	3b04      	subs	r3, #4
 800a858:	429d      	cmp	r5, r3
 800a85a:	461a      	mov	r2, r3
 800a85c:	d32f      	bcc.n	800a8be <quorem+0xf4>
 800a85e:	613c      	str	r4, [r7, #16]
 800a860:	4638      	mov	r0, r7
 800a862:	f001 f981 	bl	800bb68 <__mcmp>
 800a866:	2800      	cmp	r0, #0
 800a868:	db25      	blt.n	800a8b6 <quorem+0xec>
 800a86a:	4629      	mov	r1, r5
 800a86c:	2000      	movs	r0, #0
 800a86e:	f858 2b04 	ldr.w	r2, [r8], #4
 800a872:	f8d1 c000 	ldr.w	ip, [r1]
 800a876:	fa1f fe82 	uxth.w	lr, r2
 800a87a:	fa1f f38c 	uxth.w	r3, ip
 800a87e:	eba3 030e 	sub.w	r3, r3, lr
 800a882:	4403      	add	r3, r0
 800a884:	0c12      	lsrs	r2, r2, #16
 800a886:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a88a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a88e:	b29b      	uxth	r3, r3
 800a890:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a894:	45c1      	cmp	r9, r8
 800a896:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a89a:	f841 3b04 	str.w	r3, [r1], #4
 800a89e:	d2e6      	bcs.n	800a86e <quorem+0xa4>
 800a8a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a8a4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a8a8:	b922      	cbnz	r2, 800a8b4 <quorem+0xea>
 800a8aa:	3b04      	subs	r3, #4
 800a8ac:	429d      	cmp	r5, r3
 800a8ae:	461a      	mov	r2, r3
 800a8b0:	d30b      	bcc.n	800a8ca <quorem+0x100>
 800a8b2:	613c      	str	r4, [r7, #16]
 800a8b4:	3601      	adds	r6, #1
 800a8b6:	4630      	mov	r0, r6
 800a8b8:	b003      	add	sp, #12
 800a8ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8be:	6812      	ldr	r2, [r2, #0]
 800a8c0:	3b04      	subs	r3, #4
 800a8c2:	2a00      	cmp	r2, #0
 800a8c4:	d1cb      	bne.n	800a85e <quorem+0x94>
 800a8c6:	3c01      	subs	r4, #1
 800a8c8:	e7c6      	b.n	800a858 <quorem+0x8e>
 800a8ca:	6812      	ldr	r2, [r2, #0]
 800a8cc:	3b04      	subs	r3, #4
 800a8ce:	2a00      	cmp	r2, #0
 800a8d0:	d1ef      	bne.n	800a8b2 <quorem+0xe8>
 800a8d2:	3c01      	subs	r4, #1
 800a8d4:	e7ea      	b.n	800a8ac <quorem+0xe2>
 800a8d6:	2000      	movs	r0, #0
 800a8d8:	e7ee      	b.n	800a8b8 <quorem+0xee>
 800a8da:	0000      	movs	r0, r0
 800a8dc:	0000      	movs	r0, r0
	...

0800a8e0 <_dtoa_r>:
 800a8e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8e4:	4614      	mov	r4, r2
 800a8e6:	461d      	mov	r5, r3
 800a8e8:	69c7      	ldr	r7, [r0, #28]
 800a8ea:	b097      	sub	sp, #92	@ 0x5c
 800a8ec:	4681      	mov	r9, r0
 800a8ee:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800a8f2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800a8f4:	b97f      	cbnz	r7, 800a916 <_dtoa_r+0x36>
 800a8f6:	2010      	movs	r0, #16
 800a8f8:	f000 fe0e 	bl	800b518 <malloc>
 800a8fc:	4602      	mov	r2, r0
 800a8fe:	f8c9 001c 	str.w	r0, [r9, #28]
 800a902:	b920      	cbnz	r0, 800a90e <_dtoa_r+0x2e>
 800a904:	21ef      	movs	r1, #239	@ 0xef
 800a906:	4bac      	ldr	r3, [pc, #688]	@ (800abb8 <_dtoa_r+0x2d8>)
 800a908:	48ac      	ldr	r0, [pc, #688]	@ (800abbc <_dtoa_r+0x2dc>)
 800a90a:	f001 ffeb 	bl	800c8e4 <__assert_func>
 800a90e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a912:	6007      	str	r7, [r0, #0]
 800a914:	60c7      	str	r7, [r0, #12]
 800a916:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a91a:	6819      	ldr	r1, [r3, #0]
 800a91c:	b159      	cbz	r1, 800a936 <_dtoa_r+0x56>
 800a91e:	685a      	ldr	r2, [r3, #4]
 800a920:	2301      	movs	r3, #1
 800a922:	4093      	lsls	r3, r2
 800a924:	604a      	str	r2, [r1, #4]
 800a926:	608b      	str	r3, [r1, #8]
 800a928:	4648      	mov	r0, r9
 800a92a:	f000 feeb 	bl	800b704 <_Bfree>
 800a92e:	2200      	movs	r2, #0
 800a930:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a934:	601a      	str	r2, [r3, #0]
 800a936:	1e2b      	subs	r3, r5, #0
 800a938:	bfaf      	iteee	ge
 800a93a:	2300      	movge	r3, #0
 800a93c:	2201      	movlt	r2, #1
 800a93e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a942:	9307      	strlt	r3, [sp, #28]
 800a944:	bfa8      	it	ge
 800a946:	6033      	strge	r3, [r6, #0]
 800a948:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800a94c:	4b9c      	ldr	r3, [pc, #624]	@ (800abc0 <_dtoa_r+0x2e0>)
 800a94e:	bfb8      	it	lt
 800a950:	6032      	strlt	r2, [r6, #0]
 800a952:	ea33 0308 	bics.w	r3, r3, r8
 800a956:	d112      	bne.n	800a97e <_dtoa_r+0x9e>
 800a958:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a95c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800a95e:	6013      	str	r3, [r2, #0]
 800a960:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a964:	4323      	orrs	r3, r4
 800a966:	f000 855e 	beq.w	800b426 <_dtoa_r+0xb46>
 800a96a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a96c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800abc4 <_dtoa_r+0x2e4>
 800a970:	2b00      	cmp	r3, #0
 800a972:	f000 8560 	beq.w	800b436 <_dtoa_r+0xb56>
 800a976:	f10a 0303 	add.w	r3, sl, #3
 800a97a:	f000 bd5a 	b.w	800b432 <_dtoa_r+0xb52>
 800a97e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a982:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a986:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a98a:	2200      	movs	r2, #0
 800a98c:	2300      	movs	r3, #0
 800a98e:	f7f6 f80b 	bl	80009a8 <__aeabi_dcmpeq>
 800a992:	4607      	mov	r7, r0
 800a994:	b158      	cbz	r0, 800a9ae <_dtoa_r+0xce>
 800a996:	2301      	movs	r3, #1
 800a998:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800a99a:	6013      	str	r3, [r2, #0]
 800a99c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a99e:	b113      	cbz	r3, 800a9a6 <_dtoa_r+0xc6>
 800a9a0:	4b89      	ldr	r3, [pc, #548]	@ (800abc8 <_dtoa_r+0x2e8>)
 800a9a2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a9a4:	6013      	str	r3, [r2, #0]
 800a9a6:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800abcc <_dtoa_r+0x2ec>
 800a9aa:	f000 bd44 	b.w	800b436 <_dtoa_r+0xb56>
 800a9ae:	ab14      	add	r3, sp, #80	@ 0x50
 800a9b0:	9301      	str	r3, [sp, #4]
 800a9b2:	ab15      	add	r3, sp, #84	@ 0x54
 800a9b4:	9300      	str	r3, [sp, #0]
 800a9b6:	4648      	mov	r0, r9
 800a9b8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a9bc:	f001 f984 	bl	800bcc8 <__d2b>
 800a9c0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800a9c4:	9003      	str	r0, [sp, #12]
 800a9c6:	2e00      	cmp	r6, #0
 800a9c8:	d078      	beq.n	800aabc <_dtoa_r+0x1dc>
 800a9ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a9ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a9d0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a9d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a9d8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a9dc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a9e0:	9712      	str	r7, [sp, #72]	@ 0x48
 800a9e2:	4619      	mov	r1, r3
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	4b7a      	ldr	r3, [pc, #488]	@ (800abd0 <_dtoa_r+0x2f0>)
 800a9e8:	f7f5 fbbe 	bl	8000168 <__aeabi_dsub>
 800a9ec:	a36c      	add	r3, pc, #432	@ (adr r3, 800aba0 <_dtoa_r+0x2c0>)
 800a9ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9f2:	f7f5 fd71 	bl	80004d8 <__aeabi_dmul>
 800a9f6:	a36c      	add	r3, pc, #432	@ (adr r3, 800aba8 <_dtoa_r+0x2c8>)
 800a9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9fc:	f7f5 fbb6 	bl	800016c <__adddf3>
 800aa00:	4604      	mov	r4, r0
 800aa02:	4630      	mov	r0, r6
 800aa04:	460d      	mov	r5, r1
 800aa06:	f7f5 fcfd 	bl	8000404 <__aeabi_i2d>
 800aa0a:	a369      	add	r3, pc, #420	@ (adr r3, 800abb0 <_dtoa_r+0x2d0>)
 800aa0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa10:	f7f5 fd62 	bl	80004d8 <__aeabi_dmul>
 800aa14:	4602      	mov	r2, r0
 800aa16:	460b      	mov	r3, r1
 800aa18:	4620      	mov	r0, r4
 800aa1a:	4629      	mov	r1, r5
 800aa1c:	f7f5 fba6 	bl	800016c <__adddf3>
 800aa20:	4604      	mov	r4, r0
 800aa22:	460d      	mov	r5, r1
 800aa24:	f7f6 f808 	bl	8000a38 <__aeabi_d2iz>
 800aa28:	2200      	movs	r2, #0
 800aa2a:	4607      	mov	r7, r0
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	4620      	mov	r0, r4
 800aa30:	4629      	mov	r1, r5
 800aa32:	f7f5 ffc3 	bl	80009bc <__aeabi_dcmplt>
 800aa36:	b140      	cbz	r0, 800aa4a <_dtoa_r+0x16a>
 800aa38:	4638      	mov	r0, r7
 800aa3a:	f7f5 fce3 	bl	8000404 <__aeabi_i2d>
 800aa3e:	4622      	mov	r2, r4
 800aa40:	462b      	mov	r3, r5
 800aa42:	f7f5 ffb1 	bl	80009a8 <__aeabi_dcmpeq>
 800aa46:	b900      	cbnz	r0, 800aa4a <_dtoa_r+0x16a>
 800aa48:	3f01      	subs	r7, #1
 800aa4a:	2f16      	cmp	r7, #22
 800aa4c:	d854      	bhi.n	800aaf8 <_dtoa_r+0x218>
 800aa4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aa52:	4b60      	ldr	r3, [pc, #384]	@ (800abd4 <_dtoa_r+0x2f4>)
 800aa54:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800aa58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa5c:	f7f5 ffae 	bl	80009bc <__aeabi_dcmplt>
 800aa60:	2800      	cmp	r0, #0
 800aa62:	d04b      	beq.n	800aafc <_dtoa_r+0x21c>
 800aa64:	2300      	movs	r3, #0
 800aa66:	3f01      	subs	r7, #1
 800aa68:	930f      	str	r3, [sp, #60]	@ 0x3c
 800aa6a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800aa6c:	1b9b      	subs	r3, r3, r6
 800aa6e:	1e5a      	subs	r2, r3, #1
 800aa70:	bf49      	itett	mi
 800aa72:	f1c3 0301 	rsbmi	r3, r3, #1
 800aa76:	2300      	movpl	r3, #0
 800aa78:	9304      	strmi	r3, [sp, #16]
 800aa7a:	2300      	movmi	r3, #0
 800aa7c:	9209      	str	r2, [sp, #36]	@ 0x24
 800aa7e:	bf54      	ite	pl
 800aa80:	9304      	strpl	r3, [sp, #16]
 800aa82:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800aa84:	2f00      	cmp	r7, #0
 800aa86:	db3b      	blt.n	800ab00 <_dtoa_r+0x220>
 800aa88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa8a:	970e      	str	r7, [sp, #56]	@ 0x38
 800aa8c:	443b      	add	r3, r7
 800aa8e:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa90:	2300      	movs	r3, #0
 800aa92:	930a      	str	r3, [sp, #40]	@ 0x28
 800aa94:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800aa96:	2b09      	cmp	r3, #9
 800aa98:	d865      	bhi.n	800ab66 <_dtoa_r+0x286>
 800aa9a:	2b05      	cmp	r3, #5
 800aa9c:	bfc4      	itt	gt
 800aa9e:	3b04      	subgt	r3, #4
 800aaa0:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800aaa2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800aaa4:	bfc8      	it	gt
 800aaa6:	2400      	movgt	r4, #0
 800aaa8:	f1a3 0302 	sub.w	r3, r3, #2
 800aaac:	bfd8      	it	le
 800aaae:	2401      	movle	r4, #1
 800aab0:	2b03      	cmp	r3, #3
 800aab2:	d864      	bhi.n	800ab7e <_dtoa_r+0x29e>
 800aab4:	e8df f003 	tbb	[pc, r3]
 800aab8:	2c385553 	.word	0x2c385553
 800aabc:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800aac0:	441e      	add	r6, r3
 800aac2:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800aac6:	2b20      	cmp	r3, #32
 800aac8:	bfc1      	itttt	gt
 800aaca:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800aace:	fa08 f803 	lslgt.w	r8, r8, r3
 800aad2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800aad6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800aada:	bfd6      	itet	le
 800aadc:	f1c3 0320 	rsble	r3, r3, #32
 800aae0:	ea48 0003 	orrgt.w	r0, r8, r3
 800aae4:	fa04 f003 	lslle.w	r0, r4, r3
 800aae8:	f7f5 fc7c 	bl	80003e4 <__aeabi_ui2d>
 800aaec:	2201      	movs	r2, #1
 800aaee:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800aaf2:	3e01      	subs	r6, #1
 800aaf4:	9212      	str	r2, [sp, #72]	@ 0x48
 800aaf6:	e774      	b.n	800a9e2 <_dtoa_r+0x102>
 800aaf8:	2301      	movs	r3, #1
 800aafa:	e7b5      	b.n	800aa68 <_dtoa_r+0x188>
 800aafc:	900f      	str	r0, [sp, #60]	@ 0x3c
 800aafe:	e7b4      	b.n	800aa6a <_dtoa_r+0x18a>
 800ab00:	9b04      	ldr	r3, [sp, #16]
 800ab02:	1bdb      	subs	r3, r3, r7
 800ab04:	9304      	str	r3, [sp, #16]
 800ab06:	427b      	negs	r3, r7
 800ab08:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	930e      	str	r3, [sp, #56]	@ 0x38
 800ab0e:	e7c1      	b.n	800aa94 <_dtoa_r+0x1b4>
 800ab10:	2301      	movs	r3, #1
 800ab12:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ab14:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ab16:	eb07 0b03 	add.w	fp, r7, r3
 800ab1a:	f10b 0301 	add.w	r3, fp, #1
 800ab1e:	2b01      	cmp	r3, #1
 800ab20:	9308      	str	r3, [sp, #32]
 800ab22:	bfb8      	it	lt
 800ab24:	2301      	movlt	r3, #1
 800ab26:	e006      	b.n	800ab36 <_dtoa_r+0x256>
 800ab28:	2301      	movs	r3, #1
 800ab2a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ab2c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	dd28      	ble.n	800ab84 <_dtoa_r+0x2a4>
 800ab32:	469b      	mov	fp, r3
 800ab34:	9308      	str	r3, [sp, #32]
 800ab36:	2100      	movs	r1, #0
 800ab38:	2204      	movs	r2, #4
 800ab3a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800ab3e:	f102 0514 	add.w	r5, r2, #20
 800ab42:	429d      	cmp	r5, r3
 800ab44:	d926      	bls.n	800ab94 <_dtoa_r+0x2b4>
 800ab46:	6041      	str	r1, [r0, #4]
 800ab48:	4648      	mov	r0, r9
 800ab4a:	f000 fd9b 	bl	800b684 <_Balloc>
 800ab4e:	4682      	mov	sl, r0
 800ab50:	2800      	cmp	r0, #0
 800ab52:	d143      	bne.n	800abdc <_dtoa_r+0x2fc>
 800ab54:	4602      	mov	r2, r0
 800ab56:	f240 11af 	movw	r1, #431	@ 0x1af
 800ab5a:	4b1f      	ldr	r3, [pc, #124]	@ (800abd8 <_dtoa_r+0x2f8>)
 800ab5c:	e6d4      	b.n	800a908 <_dtoa_r+0x28>
 800ab5e:	2300      	movs	r3, #0
 800ab60:	e7e3      	b.n	800ab2a <_dtoa_r+0x24a>
 800ab62:	2300      	movs	r3, #0
 800ab64:	e7d5      	b.n	800ab12 <_dtoa_r+0x232>
 800ab66:	2401      	movs	r4, #1
 800ab68:	2300      	movs	r3, #0
 800ab6a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ab6c:	9320      	str	r3, [sp, #128]	@ 0x80
 800ab6e:	f04f 3bff 	mov.w	fp, #4294967295
 800ab72:	2200      	movs	r2, #0
 800ab74:	2312      	movs	r3, #18
 800ab76:	f8cd b020 	str.w	fp, [sp, #32]
 800ab7a:	9221      	str	r2, [sp, #132]	@ 0x84
 800ab7c:	e7db      	b.n	800ab36 <_dtoa_r+0x256>
 800ab7e:	2301      	movs	r3, #1
 800ab80:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ab82:	e7f4      	b.n	800ab6e <_dtoa_r+0x28e>
 800ab84:	f04f 0b01 	mov.w	fp, #1
 800ab88:	465b      	mov	r3, fp
 800ab8a:	f8cd b020 	str.w	fp, [sp, #32]
 800ab8e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800ab92:	e7d0      	b.n	800ab36 <_dtoa_r+0x256>
 800ab94:	3101      	adds	r1, #1
 800ab96:	0052      	lsls	r2, r2, #1
 800ab98:	e7d1      	b.n	800ab3e <_dtoa_r+0x25e>
 800ab9a:	bf00      	nop
 800ab9c:	f3af 8000 	nop.w
 800aba0:	636f4361 	.word	0x636f4361
 800aba4:	3fd287a7 	.word	0x3fd287a7
 800aba8:	8b60c8b3 	.word	0x8b60c8b3
 800abac:	3fc68a28 	.word	0x3fc68a28
 800abb0:	509f79fb 	.word	0x509f79fb
 800abb4:	3fd34413 	.word	0x3fd34413
 800abb8:	0800d401 	.word	0x0800d401
 800abbc:	0800d418 	.word	0x0800d418
 800abc0:	7ff00000 	.word	0x7ff00000
 800abc4:	0800d3fd 	.word	0x0800d3fd
 800abc8:	0800d502 	.word	0x0800d502
 800abcc:	0800d501 	.word	0x0800d501
 800abd0:	3ff80000 	.word	0x3ff80000
 800abd4:	0800d580 	.word	0x0800d580
 800abd8:	0800d470 	.word	0x0800d470
 800abdc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800abe0:	6018      	str	r0, [r3, #0]
 800abe2:	9b08      	ldr	r3, [sp, #32]
 800abe4:	2b0e      	cmp	r3, #14
 800abe6:	f200 80a1 	bhi.w	800ad2c <_dtoa_r+0x44c>
 800abea:	2c00      	cmp	r4, #0
 800abec:	f000 809e 	beq.w	800ad2c <_dtoa_r+0x44c>
 800abf0:	2f00      	cmp	r7, #0
 800abf2:	dd33      	ble.n	800ac5c <_dtoa_r+0x37c>
 800abf4:	4b9c      	ldr	r3, [pc, #624]	@ (800ae68 <_dtoa_r+0x588>)
 800abf6:	f007 020f 	and.w	r2, r7, #15
 800abfa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800abfe:	05f8      	lsls	r0, r7, #23
 800ac00:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ac04:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 800ac08:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ac0c:	d516      	bpl.n	800ac3c <_dtoa_r+0x35c>
 800ac0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ac12:	4b96      	ldr	r3, [pc, #600]	@ (800ae6c <_dtoa_r+0x58c>)
 800ac14:	2603      	movs	r6, #3
 800ac16:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ac1a:	f7f5 fd87 	bl	800072c <__aeabi_ddiv>
 800ac1e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ac22:	f004 040f 	and.w	r4, r4, #15
 800ac26:	4d91      	ldr	r5, [pc, #580]	@ (800ae6c <_dtoa_r+0x58c>)
 800ac28:	b954      	cbnz	r4, 800ac40 <_dtoa_r+0x360>
 800ac2a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ac2e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac32:	f7f5 fd7b 	bl	800072c <__aeabi_ddiv>
 800ac36:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ac3a:	e028      	b.n	800ac8e <_dtoa_r+0x3ae>
 800ac3c:	2602      	movs	r6, #2
 800ac3e:	e7f2      	b.n	800ac26 <_dtoa_r+0x346>
 800ac40:	07e1      	lsls	r1, r4, #31
 800ac42:	d508      	bpl.n	800ac56 <_dtoa_r+0x376>
 800ac44:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ac48:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ac4c:	f7f5 fc44 	bl	80004d8 <__aeabi_dmul>
 800ac50:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ac54:	3601      	adds	r6, #1
 800ac56:	1064      	asrs	r4, r4, #1
 800ac58:	3508      	adds	r5, #8
 800ac5a:	e7e5      	b.n	800ac28 <_dtoa_r+0x348>
 800ac5c:	f000 80af 	beq.w	800adbe <_dtoa_r+0x4de>
 800ac60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ac64:	427c      	negs	r4, r7
 800ac66:	4b80      	ldr	r3, [pc, #512]	@ (800ae68 <_dtoa_r+0x588>)
 800ac68:	f004 020f 	and.w	r2, r4, #15
 800ac6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac74:	f7f5 fc30 	bl	80004d8 <__aeabi_dmul>
 800ac78:	2602      	movs	r6, #2
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ac80:	4d7a      	ldr	r5, [pc, #488]	@ (800ae6c <_dtoa_r+0x58c>)
 800ac82:	1124      	asrs	r4, r4, #4
 800ac84:	2c00      	cmp	r4, #0
 800ac86:	f040 808f 	bne.w	800ada8 <_dtoa_r+0x4c8>
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d1d3      	bne.n	800ac36 <_dtoa_r+0x356>
 800ac8e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800ac92:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	f000 8094 	beq.w	800adc2 <_dtoa_r+0x4e2>
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	4620      	mov	r0, r4
 800ac9e:	4629      	mov	r1, r5
 800aca0:	4b73      	ldr	r3, [pc, #460]	@ (800ae70 <_dtoa_r+0x590>)
 800aca2:	f7f5 fe8b 	bl	80009bc <__aeabi_dcmplt>
 800aca6:	2800      	cmp	r0, #0
 800aca8:	f000 808b 	beq.w	800adc2 <_dtoa_r+0x4e2>
 800acac:	9b08      	ldr	r3, [sp, #32]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	f000 8087 	beq.w	800adc2 <_dtoa_r+0x4e2>
 800acb4:	f1bb 0f00 	cmp.w	fp, #0
 800acb8:	dd34      	ble.n	800ad24 <_dtoa_r+0x444>
 800acba:	4620      	mov	r0, r4
 800acbc:	2200      	movs	r2, #0
 800acbe:	4629      	mov	r1, r5
 800acc0:	4b6c      	ldr	r3, [pc, #432]	@ (800ae74 <_dtoa_r+0x594>)
 800acc2:	f7f5 fc09 	bl	80004d8 <__aeabi_dmul>
 800acc6:	465c      	mov	r4, fp
 800acc8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800accc:	f107 38ff 	add.w	r8, r7, #4294967295
 800acd0:	3601      	adds	r6, #1
 800acd2:	4630      	mov	r0, r6
 800acd4:	f7f5 fb96 	bl	8000404 <__aeabi_i2d>
 800acd8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800acdc:	f7f5 fbfc 	bl	80004d8 <__aeabi_dmul>
 800ace0:	2200      	movs	r2, #0
 800ace2:	4b65      	ldr	r3, [pc, #404]	@ (800ae78 <_dtoa_r+0x598>)
 800ace4:	f7f5 fa42 	bl	800016c <__adddf3>
 800ace8:	4605      	mov	r5, r0
 800acea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800acee:	2c00      	cmp	r4, #0
 800acf0:	d16a      	bne.n	800adc8 <_dtoa_r+0x4e8>
 800acf2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800acf6:	2200      	movs	r2, #0
 800acf8:	4b60      	ldr	r3, [pc, #384]	@ (800ae7c <_dtoa_r+0x59c>)
 800acfa:	f7f5 fa35 	bl	8000168 <__aeabi_dsub>
 800acfe:	4602      	mov	r2, r0
 800ad00:	460b      	mov	r3, r1
 800ad02:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ad06:	462a      	mov	r2, r5
 800ad08:	4633      	mov	r3, r6
 800ad0a:	f7f5 fe75 	bl	80009f8 <__aeabi_dcmpgt>
 800ad0e:	2800      	cmp	r0, #0
 800ad10:	f040 8298 	bne.w	800b244 <_dtoa_r+0x964>
 800ad14:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ad18:	462a      	mov	r2, r5
 800ad1a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ad1e:	f7f5 fe4d 	bl	80009bc <__aeabi_dcmplt>
 800ad22:	bb38      	cbnz	r0, 800ad74 <_dtoa_r+0x494>
 800ad24:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ad28:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800ad2c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	f2c0 8157 	blt.w	800afe2 <_dtoa_r+0x702>
 800ad34:	2f0e      	cmp	r7, #14
 800ad36:	f300 8154 	bgt.w	800afe2 <_dtoa_r+0x702>
 800ad3a:	4b4b      	ldr	r3, [pc, #300]	@ (800ae68 <_dtoa_r+0x588>)
 800ad3c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ad40:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ad44:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ad48:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	f280 80e5 	bge.w	800af1a <_dtoa_r+0x63a>
 800ad50:	9b08      	ldr	r3, [sp, #32]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	f300 80e1 	bgt.w	800af1a <_dtoa_r+0x63a>
 800ad58:	d10c      	bne.n	800ad74 <_dtoa_r+0x494>
 800ad5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ad5e:	2200      	movs	r2, #0
 800ad60:	4b46      	ldr	r3, [pc, #280]	@ (800ae7c <_dtoa_r+0x59c>)
 800ad62:	f7f5 fbb9 	bl	80004d8 <__aeabi_dmul>
 800ad66:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ad6a:	f7f5 fe3b 	bl	80009e4 <__aeabi_dcmpge>
 800ad6e:	2800      	cmp	r0, #0
 800ad70:	f000 8266 	beq.w	800b240 <_dtoa_r+0x960>
 800ad74:	2400      	movs	r4, #0
 800ad76:	4625      	mov	r5, r4
 800ad78:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ad7a:	4656      	mov	r6, sl
 800ad7c:	ea6f 0803 	mvn.w	r8, r3
 800ad80:	2700      	movs	r7, #0
 800ad82:	4621      	mov	r1, r4
 800ad84:	4648      	mov	r0, r9
 800ad86:	f000 fcbd 	bl	800b704 <_Bfree>
 800ad8a:	2d00      	cmp	r5, #0
 800ad8c:	f000 80bd 	beq.w	800af0a <_dtoa_r+0x62a>
 800ad90:	b12f      	cbz	r7, 800ad9e <_dtoa_r+0x4be>
 800ad92:	42af      	cmp	r7, r5
 800ad94:	d003      	beq.n	800ad9e <_dtoa_r+0x4be>
 800ad96:	4639      	mov	r1, r7
 800ad98:	4648      	mov	r0, r9
 800ad9a:	f000 fcb3 	bl	800b704 <_Bfree>
 800ad9e:	4629      	mov	r1, r5
 800ada0:	4648      	mov	r0, r9
 800ada2:	f000 fcaf 	bl	800b704 <_Bfree>
 800ada6:	e0b0      	b.n	800af0a <_dtoa_r+0x62a>
 800ada8:	07e2      	lsls	r2, r4, #31
 800adaa:	d505      	bpl.n	800adb8 <_dtoa_r+0x4d8>
 800adac:	e9d5 2300 	ldrd	r2, r3, [r5]
 800adb0:	f7f5 fb92 	bl	80004d8 <__aeabi_dmul>
 800adb4:	2301      	movs	r3, #1
 800adb6:	3601      	adds	r6, #1
 800adb8:	1064      	asrs	r4, r4, #1
 800adba:	3508      	adds	r5, #8
 800adbc:	e762      	b.n	800ac84 <_dtoa_r+0x3a4>
 800adbe:	2602      	movs	r6, #2
 800adc0:	e765      	b.n	800ac8e <_dtoa_r+0x3ae>
 800adc2:	46b8      	mov	r8, r7
 800adc4:	9c08      	ldr	r4, [sp, #32]
 800adc6:	e784      	b.n	800acd2 <_dtoa_r+0x3f2>
 800adc8:	4b27      	ldr	r3, [pc, #156]	@ (800ae68 <_dtoa_r+0x588>)
 800adca:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800adcc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800add0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800add4:	4454      	add	r4, sl
 800add6:	2900      	cmp	r1, #0
 800add8:	d054      	beq.n	800ae84 <_dtoa_r+0x5a4>
 800adda:	2000      	movs	r0, #0
 800addc:	4928      	ldr	r1, [pc, #160]	@ (800ae80 <_dtoa_r+0x5a0>)
 800adde:	f7f5 fca5 	bl	800072c <__aeabi_ddiv>
 800ade2:	4633      	mov	r3, r6
 800ade4:	462a      	mov	r2, r5
 800ade6:	f7f5 f9bf 	bl	8000168 <__aeabi_dsub>
 800adea:	4656      	mov	r6, sl
 800adec:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800adf0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800adf4:	f7f5 fe20 	bl	8000a38 <__aeabi_d2iz>
 800adf8:	4605      	mov	r5, r0
 800adfa:	f7f5 fb03 	bl	8000404 <__aeabi_i2d>
 800adfe:	4602      	mov	r2, r0
 800ae00:	460b      	mov	r3, r1
 800ae02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ae06:	f7f5 f9af 	bl	8000168 <__aeabi_dsub>
 800ae0a:	4602      	mov	r2, r0
 800ae0c:	460b      	mov	r3, r1
 800ae0e:	3530      	adds	r5, #48	@ 0x30
 800ae10:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ae14:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ae18:	f806 5b01 	strb.w	r5, [r6], #1
 800ae1c:	f7f5 fdce 	bl	80009bc <__aeabi_dcmplt>
 800ae20:	2800      	cmp	r0, #0
 800ae22:	d172      	bne.n	800af0a <_dtoa_r+0x62a>
 800ae24:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ae28:	2000      	movs	r0, #0
 800ae2a:	4911      	ldr	r1, [pc, #68]	@ (800ae70 <_dtoa_r+0x590>)
 800ae2c:	f7f5 f99c 	bl	8000168 <__aeabi_dsub>
 800ae30:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ae34:	f7f5 fdc2 	bl	80009bc <__aeabi_dcmplt>
 800ae38:	2800      	cmp	r0, #0
 800ae3a:	f040 80b4 	bne.w	800afa6 <_dtoa_r+0x6c6>
 800ae3e:	42a6      	cmp	r6, r4
 800ae40:	f43f af70 	beq.w	800ad24 <_dtoa_r+0x444>
 800ae44:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ae48:	2200      	movs	r2, #0
 800ae4a:	4b0a      	ldr	r3, [pc, #40]	@ (800ae74 <_dtoa_r+0x594>)
 800ae4c:	f7f5 fb44 	bl	80004d8 <__aeabi_dmul>
 800ae50:	2200      	movs	r2, #0
 800ae52:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ae56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ae5a:	4b06      	ldr	r3, [pc, #24]	@ (800ae74 <_dtoa_r+0x594>)
 800ae5c:	f7f5 fb3c 	bl	80004d8 <__aeabi_dmul>
 800ae60:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ae64:	e7c4      	b.n	800adf0 <_dtoa_r+0x510>
 800ae66:	bf00      	nop
 800ae68:	0800d580 	.word	0x0800d580
 800ae6c:	0800d558 	.word	0x0800d558
 800ae70:	3ff00000 	.word	0x3ff00000
 800ae74:	40240000 	.word	0x40240000
 800ae78:	401c0000 	.word	0x401c0000
 800ae7c:	40140000 	.word	0x40140000
 800ae80:	3fe00000 	.word	0x3fe00000
 800ae84:	4631      	mov	r1, r6
 800ae86:	4628      	mov	r0, r5
 800ae88:	f7f5 fb26 	bl	80004d8 <__aeabi_dmul>
 800ae8c:	4656      	mov	r6, sl
 800ae8e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ae92:	9413      	str	r4, [sp, #76]	@ 0x4c
 800ae94:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ae98:	f7f5 fdce 	bl	8000a38 <__aeabi_d2iz>
 800ae9c:	4605      	mov	r5, r0
 800ae9e:	f7f5 fab1 	bl	8000404 <__aeabi_i2d>
 800aea2:	4602      	mov	r2, r0
 800aea4:	460b      	mov	r3, r1
 800aea6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aeaa:	f7f5 f95d 	bl	8000168 <__aeabi_dsub>
 800aeae:	4602      	mov	r2, r0
 800aeb0:	460b      	mov	r3, r1
 800aeb2:	3530      	adds	r5, #48	@ 0x30
 800aeb4:	f806 5b01 	strb.w	r5, [r6], #1
 800aeb8:	42a6      	cmp	r6, r4
 800aeba:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800aebe:	f04f 0200 	mov.w	r2, #0
 800aec2:	d124      	bne.n	800af0e <_dtoa_r+0x62e>
 800aec4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800aec8:	4bae      	ldr	r3, [pc, #696]	@ (800b184 <_dtoa_r+0x8a4>)
 800aeca:	f7f5 f94f 	bl	800016c <__adddf3>
 800aece:	4602      	mov	r2, r0
 800aed0:	460b      	mov	r3, r1
 800aed2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aed6:	f7f5 fd8f 	bl	80009f8 <__aeabi_dcmpgt>
 800aeda:	2800      	cmp	r0, #0
 800aedc:	d163      	bne.n	800afa6 <_dtoa_r+0x6c6>
 800aede:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800aee2:	2000      	movs	r0, #0
 800aee4:	49a7      	ldr	r1, [pc, #668]	@ (800b184 <_dtoa_r+0x8a4>)
 800aee6:	f7f5 f93f 	bl	8000168 <__aeabi_dsub>
 800aeea:	4602      	mov	r2, r0
 800aeec:	460b      	mov	r3, r1
 800aeee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aef2:	f7f5 fd63 	bl	80009bc <__aeabi_dcmplt>
 800aef6:	2800      	cmp	r0, #0
 800aef8:	f43f af14 	beq.w	800ad24 <_dtoa_r+0x444>
 800aefc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800aefe:	1e73      	subs	r3, r6, #1
 800af00:	9313      	str	r3, [sp, #76]	@ 0x4c
 800af02:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800af06:	2b30      	cmp	r3, #48	@ 0x30
 800af08:	d0f8      	beq.n	800aefc <_dtoa_r+0x61c>
 800af0a:	4647      	mov	r7, r8
 800af0c:	e03b      	b.n	800af86 <_dtoa_r+0x6a6>
 800af0e:	4b9e      	ldr	r3, [pc, #632]	@ (800b188 <_dtoa_r+0x8a8>)
 800af10:	f7f5 fae2 	bl	80004d8 <__aeabi_dmul>
 800af14:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800af18:	e7bc      	b.n	800ae94 <_dtoa_r+0x5b4>
 800af1a:	4656      	mov	r6, sl
 800af1c:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800af20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af24:	4620      	mov	r0, r4
 800af26:	4629      	mov	r1, r5
 800af28:	f7f5 fc00 	bl	800072c <__aeabi_ddiv>
 800af2c:	f7f5 fd84 	bl	8000a38 <__aeabi_d2iz>
 800af30:	4680      	mov	r8, r0
 800af32:	f7f5 fa67 	bl	8000404 <__aeabi_i2d>
 800af36:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af3a:	f7f5 facd 	bl	80004d8 <__aeabi_dmul>
 800af3e:	4602      	mov	r2, r0
 800af40:	460b      	mov	r3, r1
 800af42:	4620      	mov	r0, r4
 800af44:	4629      	mov	r1, r5
 800af46:	f7f5 f90f 	bl	8000168 <__aeabi_dsub>
 800af4a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800af4e:	9d08      	ldr	r5, [sp, #32]
 800af50:	f806 4b01 	strb.w	r4, [r6], #1
 800af54:	eba6 040a 	sub.w	r4, r6, sl
 800af58:	42a5      	cmp	r5, r4
 800af5a:	4602      	mov	r2, r0
 800af5c:	460b      	mov	r3, r1
 800af5e:	d133      	bne.n	800afc8 <_dtoa_r+0x6e8>
 800af60:	f7f5 f904 	bl	800016c <__adddf3>
 800af64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af68:	4604      	mov	r4, r0
 800af6a:	460d      	mov	r5, r1
 800af6c:	f7f5 fd44 	bl	80009f8 <__aeabi_dcmpgt>
 800af70:	b9c0      	cbnz	r0, 800afa4 <_dtoa_r+0x6c4>
 800af72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af76:	4620      	mov	r0, r4
 800af78:	4629      	mov	r1, r5
 800af7a:	f7f5 fd15 	bl	80009a8 <__aeabi_dcmpeq>
 800af7e:	b110      	cbz	r0, 800af86 <_dtoa_r+0x6a6>
 800af80:	f018 0f01 	tst.w	r8, #1
 800af84:	d10e      	bne.n	800afa4 <_dtoa_r+0x6c4>
 800af86:	4648      	mov	r0, r9
 800af88:	9903      	ldr	r1, [sp, #12]
 800af8a:	f000 fbbb 	bl	800b704 <_Bfree>
 800af8e:	2300      	movs	r3, #0
 800af90:	7033      	strb	r3, [r6, #0]
 800af92:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800af94:	3701      	adds	r7, #1
 800af96:	601f      	str	r7, [r3, #0]
 800af98:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	f000 824b 	beq.w	800b436 <_dtoa_r+0xb56>
 800afa0:	601e      	str	r6, [r3, #0]
 800afa2:	e248      	b.n	800b436 <_dtoa_r+0xb56>
 800afa4:	46b8      	mov	r8, r7
 800afa6:	4633      	mov	r3, r6
 800afa8:	461e      	mov	r6, r3
 800afaa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800afae:	2a39      	cmp	r2, #57	@ 0x39
 800afb0:	d106      	bne.n	800afc0 <_dtoa_r+0x6e0>
 800afb2:	459a      	cmp	sl, r3
 800afb4:	d1f8      	bne.n	800afa8 <_dtoa_r+0x6c8>
 800afb6:	2230      	movs	r2, #48	@ 0x30
 800afb8:	f108 0801 	add.w	r8, r8, #1
 800afbc:	f88a 2000 	strb.w	r2, [sl]
 800afc0:	781a      	ldrb	r2, [r3, #0]
 800afc2:	3201      	adds	r2, #1
 800afc4:	701a      	strb	r2, [r3, #0]
 800afc6:	e7a0      	b.n	800af0a <_dtoa_r+0x62a>
 800afc8:	2200      	movs	r2, #0
 800afca:	4b6f      	ldr	r3, [pc, #444]	@ (800b188 <_dtoa_r+0x8a8>)
 800afcc:	f7f5 fa84 	bl	80004d8 <__aeabi_dmul>
 800afd0:	2200      	movs	r2, #0
 800afd2:	2300      	movs	r3, #0
 800afd4:	4604      	mov	r4, r0
 800afd6:	460d      	mov	r5, r1
 800afd8:	f7f5 fce6 	bl	80009a8 <__aeabi_dcmpeq>
 800afdc:	2800      	cmp	r0, #0
 800afde:	d09f      	beq.n	800af20 <_dtoa_r+0x640>
 800afe0:	e7d1      	b.n	800af86 <_dtoa_r+0x6a6>
 800afe2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800afe4:	2a00      	cmp	r2, #0
 800afe6:	f000 80ea 	beq.w	800b1be <_dtoa_r+0x8de>
 800afea:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800afec:	2a01      	cmp	r2, #1
 800afee:	f300 80cd 	bgt.w	800b18c <_dtoa_r+0x8ac>
 800aff2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800aff4:	2a00      	cmp	r2, #0
 800aff6:	f000 80c1 	beq.w	800b17c <_dtoa_r+0x89c>
 800affa:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800affe:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b000:	9e04      	ldr	r6, [sp, #16]
 800b002:	9a04      	ldr	r2, [sp, #16]
 800b004:	2101      	movs	r1, #1
 800b006:	441a      	add	r2, r3
 800b008:	9204      	str	r2, [sp, #16]
 800b00a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b00c:	4648      	mov	r0, r9
 800b00e:	441a      	add	r2, r3
 800b010:	9209      	str	r2, [sp, #36]	@ 0x24
 800b012:	f000 fc2b 	bl	800b86c <__i2b>
 800b016:	4605      	mov	r5, r0
 800b018:	b166      	cbz	r6, 800b034 <_dtoa_r+0x754>
 800b01a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	dd09      	ble.n	800b034 <_dtoa_r+0x754>
 800b020:	42b3      	cmp	r3, r6
 800b022:	bfa8      	it	ge
 800b024:	4633      	movge	r3, r6
 800b026:	9a04      	ldr	r2, [sp, #16]
 800b028:	1af6      	subs	r6, r6, r3
 800b02a:	1ad2      	subs	r2, r2, r3
 800b02c:	9204      	str	r2, [sp, #16]
 800b02e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b030:	1ad3      	subs	r3, r2, r3
 800b032:	9309      	str	r3, [sp, #36]	@ 0x24
 800b034:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b036:	b30b      	cbz	r3, 800b07c <_dtoa_r+0x79c>
 800b038:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	f000 80c6 	beq.w	800b1cc <_dtoa_r+0x8ec>
 800b040:	2c00      	cmp	r4, #0
 800b042:	f000 80c0 	beq.w	800b1c6 <_dtoa_r+0x8e6>
 800b046:	4629      	mov	r1, r5
 800b048:	4622      	mov	r2, r4
 800b04a:	4648      	mov	r0, r9
 800b04c:	f000 fcc6 	bl	800b9dc <__pow5mult>
 800b050:	9a03      	ldr	r2, [sp, #12]
 800b052:	4601      	mov	r1, r0
 800b054:	4605      	mov	r5, r0
 800b056:	4648      	mov	r0, r9
 800b058:	f000 fc1e 	bl	800b898 <__multiply>
 800b05c:	9903      	ldr	r1, [sp, #12]
 800b05e:	4680      	mov	r8, r0
 800b060:	4648      	mov	r0, r9
 800b062:	f000 fb4f 	bl	800b704 <_Bfree>
 800b066:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b068:	1b1b      	subs	r3, r3, r4
 800b06a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b06c:	f000 80b1 	beq.w	800b1d2 <_dtoa_r+0x8f2>
 800b070:	4641      	mov	r1, r8
 800b072:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b074:	4648      	mov	r0, r9
 800b076:	f000 fcb1 	bl	800b9dc <__pow5mult>
 800b07a:	9003      	str	r0, [sp, #12]
 800b07c:	2101      	movs	r1, #1
 800b07e:	4648      	mov	r0, r9
 800b080:	f000 fbf4 	bl	800b86c <__i2b>
 800b084:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b086:	4604      	mov	r4, r0
 800b088:	2b00      	cmp	r3, #0
 800b08a:	f000 81d8 	beq.w	800b43e <_dtoa_r+0xb5e>
 800b08e:	461a      	mov	r2, r3
 800b090:	4601      	mov	r1, r0
 800b092:	4648      	mov	r0, r9
 800b094:	f000 fca2 	bl	800b9dc <__pow5mult>
 800b098:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b09a:	4604      	mov	r4, r0
 800b09c:	2b01      	cmp	r3, #1
 800b09e:	f300 809f 	bgt.w	800b1e0 <_dtoa_r+0x900>
 800b0a2:	9b06      	ldr	r3, [sp, #24]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	f040 8097 	bne.w	800b1d8 <_dtoa_r+0x8f8>
 800b0aa:	9b07      	ldr	r3, [sp, #28]
 800b0ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	f040 8093 	bne.w	800b1dc <_dtoa_r+0x8fc>
 800b0b6:	9b07      	ldr	r3, [sp, #28]
 800b0b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b0bc:	0d1b      	lsrs	r3, r3, #20
 800b0be:	051b      	lsls	r3, r3, #20
 800b0c0:	b133      	cbz	r3, 800b0d0 <_dtoa_r+0x7f0>
 800b0c2:	9b04      	ldr	r3, [sp, #16]
 800b0c4:	3301      	adds	r3, #1
 800b0c6:	9304      	str	r3, [sp, #16]
 800b0c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0ca:	3301      	adds	r3, #1
 800b0cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b0ce:	2301      	movs	r3, #1
 800b0d0:	930a      	str	r3, [sp, #40]	@ 0x28
 800b0d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	f000 81b8 	beq.w	800b44a <_dtoa_r+0xb6a>
 800b0da:	6923      	ldr	r3, [r4, #16]
 800b0dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b0e0:	6918      	ldr	r0, [r3, #16]
 800b0e2:	f000 fb77 	bl	800b7d4 <__hi0bits>
 800b0e6:	f1c0 0020 	rsb	r0, r0, #32
 800b0ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0ec:	4418      	add	r0, r3
 800b0ee:	f010 001f 	ands.w	r0, r0, #31
 800b0f2:	f000 8082 	beq.w	800b1fa <_dtoa_r+0x91a>
 800b0f6:	f1c0 0320 	rsb	r3, r0, #32
 800b0fa:	2b04      	cmp	r3, #4
 800b0fc:	dd73      	ble.n	800b1e6 <_dtoa_r+0x906>
 800b0fe:	9b04      	ldr	r3, [sp, #16]
 800b100:	f1c0 001c 	rsb	r0, r0, #28
 800b104:	4403      	add	r3, r0
 800b106:	9304      	str	r3, [sp, #16]
 800b108:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b10a:	4406      	add	r6, r0
 800b10c:	4403      	add	r3, r0
 800b10e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b110:	9b04      	ldr	r3, [sp, #16]
 800b112:	2b00      	cmp	r3, #0
 800b114:	dd05      	ble.n	800b122 <_dtoa_r+0x842>
 800b116:	461a      	mov	r2, r3
 800b118:	4648      	mov	r0, r9
 800b11a:	9903      	ldr	r1, [sp, #12]
 800b11c:	f000 fcb8 	bl	800ba90 <__lshift>
 800b120:	9003      	str	r0, [sp, #12]
 800b122:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b124:	2b00      	cmp	r3, #0
 800b126:	dd05      	ble.n	800b134 <_dtoa_r+0x854>
 800b128:	4621      	mov	r1, r4
 800b12a:	461a      	mov	r2, r3
 800b12c:	4648      	mov	r0, r9
 800b12e:	f000 fcaf 	bl	800ba90 <__lshift>
 800b132:	4604      	mov	r4, r0
 800b134:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b136:	2b00      	cmp	r3, #0
 800b138:	d061      	beq.n	800b1fe <_dtoa_r+0x91e>
 800b13a:	4621      	mov	r1, r4
 800b13c:	9803      	ldr	r0, [sp, #12]
 800b13e:	f000 fd13 	bl	800bb68 <__mcmp>
 800b142:	2800      	cmp	r0, #0
 800b144:	da5b      	bge.n	800b1fe <_dtoa_r+0x91e>
 800b146:	2300      	movs	r3, #0
 800b148:	220a      	movs	r2, #10
 800b14a:	4648      	mov	r0, r9
 800b14c:	9903      	ldr	r1, [sp, #12]
 800b14e:	f000 fafb 	bl	800b748 <__multadd>
 800b152:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b154:	f107 38ff 	add.w	r8, r7, #4294967295
 800b158:	9003      	str	r0, [sp, #12]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	f000 8177 	beq.w	800b44e <_dtoa_r+0xb6e>
 800b160:	4629      	mov	r1, r5
 800b162:	2300      	movs	r3, #0
 800b164:	220a      	movs	r2, #10
 800b166:	4648      	mov	r0, r9
 800b168:	f000 faee 	bl	800b748 <__multadd>
 800b16c:	f1bb 0f00 	cmp.w	fp, #0
 800b170:	4605      	mov	r5, r0
 800b172:	dc6f      	bgt.n	800b254 <_dtoa_r+0x974>
 800b174:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b176:	2b02      	cmp	r3, #2
 800b178:	dc49      	bgt.n	800b20e <_dtoa_r+0x92e>
 800b17a:	e06b      	b.n	800b254 <_dtoa_r+0x974>
 800b17c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b17e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b182:	e73c      	b.n	800affe <_dtoa_r+0x71e>
 800b184:	3fe00000 	.word	0x3fe00000
 800b188:	40240000 	.word	0x40240000
 800b18c:	9b08      	ldr	r3, [sp, #32]
 800b18e:	1e5c      	subs	r4, r3, #1
 800b190:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b192:	42a3      	cmp	r3, r4
 800b194:	db09      	blt.n	800b1aa <_dtoa_r+0x8ca>
 800b196:	1b1c      	subs	r4, r3, r4
 800b198:	9b08      	ldr	r3, [sp, #32]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	f6bf af30 	bge.w	800b000 <_dtoa_r+0x720>
 800b1a0:	9b04      	ldr	r3, [sp, #16]
 800b1a2:	9a08      	ldr	r2, [sp, #32]
 800b1a4:	1a9e      	subs	r6, r3, r2
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	e72b      	b.n	800b002 <_dtoa_r+0x722>
 800b1aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b1ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b1ae:	1ae3      	subs	r3, r4, r3
 800b1b0:	441a      	add	r2, r3
 800b1b2:	940a      	str	r4, [sp, #40]	@ 0x28
 800b1b4:	9e04      	ldr	r6, [sp, #16]
 800b1b6:	2400      	movs	r4, #0
 800b1b8:	9b08      	ldr	r3, [sp, #32]
 800b1ba:	920e      	str	r2, [sp, #56]	@ 0x38
 800b1bc:	e721      	b.n	800b002 <_dtoa_r+0x722>
 800b1be:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b1c0:	9e04      	ldr	r6, [sp, #16]
 800b1c2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b1c4:	e728      	b.n	800b018 <_dtoa_r+0x738>
 800b1c6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b1ca:	e751      	b.n	800b070 <_dtoa_r+0x790>
 800b1cc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b1ce:	9903      	ldr	r1, [sp, #12]
 800b1d0:	e750      	b.n	800b074 <_dtoa_r+0x794>
 800b1d2:	f8cd 800c 	str.w	r8, [sp, #12]
 800b1d6:	e751      	b.n	800b07c <_dtoa_r+0x79c>
 800b1d8:	2300      	movs	r3, #0
 800b1da:	e779      	b.n	800b0d0 <_dtoa_r+0x7f0>
 800b1dc:	9b06      	ldr	r3, [sp, #24]
 800b1de:	e777      	b.n	800b0d0 <_dtoa_r+0x7f0>
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	930a      	str	r3, [sp, #40]	@ 0x28
 800b1e4:	e779      	b.n	800b0da <_dtoa_r+0x7fa>
 800b1e6:	d093      	beq.n	800b110 <_dtoa_r+0x830>
 800b1e8:	9a04      	ldr	r2, [sp, #16]
 800b1ea:	331c      	adds	r3, #28
 800b1ec:	441a      	add	r2, r3
 800b1ee:	9204      	str	r2, [sp, #16]
 800b1f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b1f2:	441e      	add	r6, r3
 800b1f4:	441a      	add	r2, r3
 800b1f6:	9209      	str	r2, [sp, #36]	@ 0x24
 800b1f8:	e78a      	b.n	800b110 <_dtoa_r+0x830>
 800b1fa:	4603      	mov	r3, r0
 800b1fc:	e7f4      	b.n	800b1e8 <_dtoa_r+0x908>
 800b1fe:	9b08      	ldr	r3, [sp, #32]
 800b200:	46b8      	mov	r8, r7
 800b202:	2b00      	cmp	r3, #0
 800b204:	dc20      	bgt.n	800b248 <_dtoa_r+0x968>
 800b206:	469b      	mov	fp, r3
 800b208:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b20a:	2b02      	cmp	r3, #2
 800b20c:	dd1e      	ble.n	800b24c <_dtoa_r+0x96c>
 800b20e:	f1bb 0f00 	cmp.w	fp, #0
 800b212:	f47f adb1 	bne.w	800ad78 <_dtoa_r+0x498>
 800b216:	4621      	mov	r1, r4
 800b218:	465b      	mov	r3, fp
 800b21a:	2205      	movs	r2, #5
 800b21c:	4648      	mov	r0, r9
 800b21e:	f000 fa93 	bl	800b748 <__multadd>
 800b222:	4601      	mov	r1, r0
 800b224:	4604      	mov	r4, r0
 800b226:	9803      	ldr	r0, [sp, #12]
 800b228:	f000 fc9e 	bl	800bb68 <__mcmp>
 800b22c:	2800      	cmp	r0, #0
 800b22e:	f77f ada3 	ble.w	800ad78 <_dtoa_r+0x498>
 800b232:	4656      	mov	r6, sl
 800b234:	2331      	movs	r3, #49	@ 0x31
 800b236:	f108 0801 	add.w	r8, r8, #1
 800b23a:	f806 3b01 	strb.w	r3, [r6], #1
 800b23e:	e59f      	b.n	800ad80 <_dtoa_r+0x4a0>
 800b240:	46b8      	mov	r8, r7
 800b242:	9c08      	ldr	r4, [sp, #32]
 800b244:	4625      	mov	r5, r4
 800b246:	e7f4      	b.n	800b232 <_dtoa_r+0x952>
 800b248:	f8dd b020 	ldr.w	fp, [sp, #32]
 800b24c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b24e:	2b00      	cmp	r3, #0
 800b250:	f000 8101 	beq.w	800b456 <_dtoa_r+0xb76>
 800b254:	2e00      	cmp	r6, #0
 800b256:	dd05      	ble.n	800b264 <_dtoa_r+0x984>
 800b258:	4629      	mov	r1, r5
 800b25a:	4632      	mov	r2, r6
 800b25c:	4648      	mov	r0, r9
 800b25e:	f000 fc17 	bl	800ba90 <__lshift>
 800b262:	4605      	mov	r5, r0
 800b264:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b266:	2b00      	cmp	r3, #0
 800b268:	d05c      	beq.n	800b324 <_dtoa_r+0xa44>
 800b26a:	4648      	mov	r0, r9
 800b26c:	6869      	ldr	r1, [r5, #4]
 800b26e:	f000 fa09 	bl	800b684 <_Balloc>
 800b272:	4606      	mov	r6, r0
 800b274:	b928      	cbnz	r0, 800b282 <_dtoa_r+0x9a2>
 800b276:	4602      	mov	r2, r0
 800b278:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b27c:	4b80      	ldr	r3, [pc, #512]	@ (800b480 <_dtoa_r+0xba0>)
 800b27e:	f7ff bb43 	b.w	800a908 <_dtoa_r+0x28>
 800b282:	692a      	ldr	r2, [r5, #16]
 800b284:	f105 010c 	add.w	r1, r5, #12
 800b288:	3202      	adds	r2, #2
 800b28a:	0092      	lsls	r2, r2, #2
 800b28c:	300c      	adds	r0, #12
 800b28e:	f7ff fa8e 	bl	800a7ae <memcpy>
 800b292:	2201      	movs	r2, #1
 800b294:	4631      	mov	r1, r6
 800b296:	4648      	mov	r0, r9
 800b298:	f000 fbfa 	bl	800ba90 <__lshift>
 800b29c:	462f      	mov	r7, r5
 800b29e:	4605      	mov	r5, r0
 800b2a0:	f10a 0301 	add.w	r3, sl, #1
 800b2a4:	9304      	str	r3, [sp, #16]
 800b2a6:	eb0a 030b 	add.w	r3, sl, fp
 800b2aa:	930a      	str	r3, [sp, #40]	@ 0x28
 800b2ac:	9b06      	ldr	r3, [sp, #24]
 800b2ae:	f003 0301 	and.w	r3, r3, #1
 800b2b2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b2b4:	9b04      	ldr	r3, [sp, #16]
 800b2b6:	4621      	mov	r1, r4
 800b2b8:	9803      	ldr	r0, [sp, #12]
 800b2ba:	f103 3bff 	add.w	fp, r3, #4294967295
 800b2be:	f7ff fa84 	bl	800a7ca <quorem>
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	4639      	mov	r1, r7
 800b2c6:	3330      	adds	r3, #48	@ 0x30
 800b2c8:	9006      	str	r0, [sp, #24]
 800b2ca:	9803      	ldr	r0, [sp, #12]
 800b2cc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b2ce:	f000 fc4b 	bl	800bb68 <__mcmp>
 800b2d2:	462a      	mov	r2, r5
 800b2d4:	9008      	str	r0, [sp, #32]
 800b2d6:	4621      	mov	r1, r4
 800b2d8:	4648      	mov	r0, r9
 800b2da:	f000 fc61 	bl	800bba0 <__mdiff>
 800b2de:	68c2      	ldr	r2, [r0, #12]
 800b2e0:	4606      	mov	r6, r0
 800b2e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b2e4:	bb02      	cbnz	r2, 800b328 <_dtoa_r+0xa48>
 800b2e6:	4601      	mov	r1, r0
 800b2e8:	9803      	ldr	r0, [sp, #12]
 800b2ea:	f000 fc3d 	bl	800bb68 <__mcmp>
 800b2ee:	4602      	mov	r2, r0
 800b2f0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b2f2:	4631      	mov	r1, r6
 800b2f4:	4648      	mov	r0, r9
 800b2f6:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800b2fa:	f000 fa03 	bl	800b704 <_Bfree>
 800b2fe:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b300:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b302:	9e04      	ldr	r6, [sp, #16]
 800b304:	ea42 0103 	orr.w	r1, r2, r3
 800b308:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b30a:	4319      	orrs	r1, r3
 800b30c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b30e:	d10d      	bne.n	800b32c <_dtoa_r+0xa4c>
 800b310:	2b39      	cmp	r3, #57	@ 0x39
 800b312:	d027      	beq.n	800b364 <_dtoa_r+0xa84>
 800b314:	9a08      	ldr	r2, [sp, #32]
 800b316:	2a00      	cmp	r2, #0
 800b318:	dd01      	ble.n	800b31e <_dtoa_r+0xa3e>
 800b31a:	9b06      	ldr	r3, [sp, #24]
 800b31c:	3331      	adds	r3, #49	@ 0x31
 800b31e:	f88b 3000 	strb.w	r3, [fp]
 800b322:	e52e      	b.n	800ad82 <_dtoa_r+0x4a2>
 800b324:	4628      	mov	r0, r5
 800b326:	e7b9      	b.n	800b29c <_dtoa_r+0x9bc>
 800b328:	2201      	movs	r2, #1
 800b32a:	e7e2      	b.n	800b2f2 <_dtoa_r+0xa12>
 800b32c:	9908      	ldr	r1, [sp, #32]
 800b32e:	2900      	cmp	r1, #0
 800b330:	db04      	blt.n	800b33c <_dtoa_r+0xa5c>
 800b332:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800b334:	4301      	orrs	r1, r0
 800b336:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b338:	4301      	orrs	r1, r0
 800b33a:	d120      	bne.n	800b37e <_dtoa_r+0xa9e>
 800b33c:	2a00      	cmp	r2, #0
 800b33e:	ddee      	ble.n	800b31e <_dtoa_r+0xa3e>
 800b340:	2201      	movs	r2, #1
 800b342:	9903      	ldr	r1, [sp, #12]
 800b344:	4648      	mov	r0, r9
 800b346:	9304      	str	r3, [sp, #16]
 800b348:	f000 fba2 	bl	800ba90 <__lshift>
 800b34c:	4621      	mov	r1, r4
 800b34e:	9003      	str	r0, [sp, #12]
 800b350:	f000 fc0a 	bl	800bb68 <__mcmp>
 800b354:	2800      	cmp	r0, #0
 800b356:	9b04      	ldr	r3, [sp, #16]
 800b358:	dc02      	bgt.n	800b360 <_dtoa_r+0xa80>
 800b35a:	d1e0      	bne.n	800b31e <_dtoa_r+0xa3e>
 800b35c:	07da      	lsls	r2, r3, #31
 800b35e:	d5de      	bpl.n	800b31e <_dtoa_r+0xa3e>
 800b360:	2b39      	cmp	r3, #57	@ 0x39
 800b362:	d1da      	bne.n	800b31a <_dtoa_r+0xa3a>
 800b364:	2339      	movs	r3, #57	@ 0x39
 800b366:	f88b 3000 	strb.w	r3, [fp]
 800b36a:	4633      	mov	r3, r6
 800b36c:	461e      	mov	r6, r3
 800b36e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b372:	3b01      	subs	r3, #1
 800b374:	2a39      	cmp	r2, #57	@ 0x39
 800b376:	d04e      	beq.n	800b416 <_dtoa_r+0xb36>
 800b378:	3201      	adds	r2, #1
 800b37a:	701a      	strb	r2, [r3, #0]
 800b37c:	e501      	b.n	800ad82 <_dtoa_r+0x4a2>
 800b37e:	2a00      	cmp	r2, #0
 800b380:	dd03      	ble.n	800b38a <_dtoa_r+0xaaa>
 800b382:	2b39      	cmp	r3, #57	@ 0x39
 800b384:	d0ee      	beq.n	800b364 <_dtoa_r+0xa84>
 800b386:	3301      	adds	r3, #1
 800b388:	e7c9      	b.n	800b31e <_dtoa_r+0xa3e>
 800b38a:	9a04      	ldr	r2, [sp, #16]
 800b38c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b38e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b392:	428a      	cmp	r2, r1
 800b394:	d028      	beq.n	800b3e8 <_dtoa_r+0xb08>
 800b396:	2300      	movs	r3, #0
 800b398:	220a      	movs	r2, #10
 800b39a:	9903      	ldr	r1, [sp, #12]
 800b39c:	4648      	mov	r0, r9
 800b39e:	f000 f9d3 	bl	800b748 <__multadd>
 800b3a2:	42af      	cmp	r7, r5
 800b3a4:	9003      	str	r0, [sp, #12]
 800b3a6:	f04f 0300 	mov.w	r3, #0
 800b3aa:	f04f 020a 	mov.w	r2, #10
 800b3ae:	4639      	mov	r1, r7
 800b3b0:	4648      	mov	r0, r9
 800b3b2:	d107      	bne.n	800b3c4 <_dtoa_r+0xae4>
 800b3b4:	f000 f9c8 	bl	800b748 <__multadd>
 800b3b8:	4607      	mov	r7, r0
 800b3ba:	4605      	mov	r5, r0
 800b3bc:	9b04      	ldr	r3, [sp, #16]
 800b3be:	3301      	adds	r3, #1
 800b3c0:	9304      	str	r3, [sp, #16]
 800b3c2:	e777      	b.n	800b2b4 <_dtoa_r+0x9d4>
 800b3c4:	f000 f9c0 	bl	800b748 <__multadd>
 800b3c8:	4629      	mov	r1, r5
 800b3ca:	4607      	mov	r7, r0
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	220a      	movs	r2, #10
 800b3d0:	4648      	mov	r0, r9
 800b3d2:	f000 f9b9 	bl	800b748 <__multadd>
 800b3d6:	4605      	mov	r5, r0
 800b3d8:	e7f0      	b.n	800b3bc <_dtoa_r+0xadc>
 800b3da:	f1bb 0f00 	cmp.w	fp, #0
 800b3de:	bfcc      	ite	gt
 800b3e0:	465e      	movgt	r6, fp
 800b3e2:	2601      	movle	r6, #1
 800b3e4:	2700      	movs	r7, #0
 800b3e6:	4456      	add	r6, sl
 800b3e8:	2201      	movs	r2, #1
 800b3ea:	9903      	ldr	r1, [sp, #12]
 800b3ec:	4648      	mov	r0, r9
 800b3ee:	9304      	str	r3, [sp, #16]
 800b3f0:	f000 fb4e 	bl	800ba90 <__lshift>
 800b3f4:	4621      	mov	r1, r4
 800b3f6:	9003      	str	r0, [sp, #12]
 800b3f8:	f000 fbb6 	bl	800bb68 <__mcmp>
 800b3fc:	2800      	cmp	r0, #0
 800b3fe:	dcb4      	bgt.n	800b36a <_dtoa_r+0xa8a>
 800b400:	d102      	bne.n	800b408 <_dtoa_r+0xb28>
 800b402:	9b04      	ldr	r3, [sp, #16]
 800b404:	07db      	lsls	r3, r3, #31
 800b406:	d4b0      	bmi.n	800b36a <_dtoa_r+0xa8a>
 800b408:	4633      	mov	r3, r6
 800b40a:	461e      	mov	r6, r3
 800b40c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b410:	2a30      	cmp	r2, #48	@ 0x30
 800b412:	d0fa      	beq.n	800b40a <_dtoa_r+0xb2a>
 800b414:	e4b5      	b.n	800ad82 <_dtoa_r+0x4a2>
 800b416:	459a      	cmp	sl, r3
 800b418:	d1a8      	bne.n	800b36c <_dtoa_r+0xa8c>
 800b41a:	2331      	movs	r3, #49	@ 0x31
 800b41c:	f108 0801 	add.w	r8, r8, #1
 800b420:	f88a 3000 	strb.w	r3, [sl]
 800b424:	e4ad      	b.n	800ad82 <_dtoa_r+0x4a2>
 800b426:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b428:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800b484 <_dtoa_r+0xba4>
 800b42c:	b11b      	cbz	r3, 800b436 <_dtoa_r+0xb56>
 800b42e:	f10a 0308 	add.w	r3, sl, #8
 800b432:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b434:	6013      	str	r3, [r2, #0]
 800b436:	4650      	mov	r0, sl
 800b438:	b017      	add	sp, #92	@ 0x5c
 800b43a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b43e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b440:	2b01      	cmp	r3, #1
 800b442:	f77f ae2e 	ble.w	800b0a2 <_dtoa_r+0x7c2>
 800b446:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b448:	930a      	str	r3, [sp, #40]	@ 0x28
 800b44a:	2001      	movs	r0, #1
 800b44c:	e64d      	b.n	800b0ea <_dtoa_r+0x80a>
 800b44e:	f1bb 0f00 	cmp.w	fp, #0
 800b452:	f77f aed9 	ble.w	800b208 <_dtoa_r+0x928>
 800b456:	4656      	mov	r6, sl
 800b458:	4621      	mov	r1, r4
 800b45a:	9803      	ldr	r0, [sp, #12]
 800b45c:	f7ff f9b5 	bl	800a7ca <quorem>
 800b460:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800b464:	f806 3b01 	strb.w	r3, [r6], #1
 800b468:	eba6 020a 	sub.w	r2, r6, sl
 800b46c:	4593      	cmp	fp, r2
 800b46e:	ddb4      	ble.n	800b3da <_dtoa_r+0xafa>
 800b470:	2300      	movs	r3, #0
 800b472:	220a      	movs	r2, #10
 800b474:	4648      	mov	r0, r9
 800b476:	9903      	ldr	r1, [sp, #12]
 800b478:	f000 f966 	bl	800b748 <__multadd>
 800b47c:	9003      	str	r0, [sp, #12]
 800b47e:	e7eb      	b.n	800b458 <_dtoa_r+0xb78>
 800b480:	0800d470 	.word	0x0800d470
 800b484:	0800d3f4 	.word	0x0800d3f4

0800b488 <_free_r>:
 800b488:	b538      	push	{r3, r4, r5, lr}
 800b48a:	4605      	mov	r5, r0
 800b48c:	2900      	cmp	r1, #0
 800b48e:	d040      	beq.n	800b512 <_free_r+0x8a>
 800b490:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b494:	1f0c      	subs	r4, r1, #4
 800b496:	2b00      	cmp	r3, #0
 800b498:	bfb8      	it	lt
 800b49a:	18e4      	addlt	r4, r4, r3
 800b49c:	f000 f8e6 	bl	800b66c <__malloc_lock>
 800b4a0:	4a1c      	ldr	r2, [pc, #112]	@ (800b514 <_free_r+0x8c>)
 800b4a2:	6813      	ldr	r3, [r2, #0]
 800b4a4:	b933      	cbnz	r3, 800b4b4 <_free_r+0x2c>
 800b4a6:	6063      	str	r3, [r4, #4]
 800b4a8:	6014      	str	r4, [r2, #0]
 800b4aa:	4628      	mov	r0, r5
 800b4ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b4b0:	f000 b8e2 	b.w	800b678 <__malloc_unlock>
 800b4b4:	42a3      	cmp	r3, r4
 800b4b6:	d908      	bls.n	800b4ca <_free_r+0x42>
 800b4b8:	6820      	ldr	r0, [r4, #0]
 800b4ba:	1821      	adds	r1, r4, r0
 800b4bc:	428b      	cmp	r3, r1
 800b4be:	bf01      	itttt	eq
 800b4c0:	6819      	ldreq	r1, [r3, #0]
 800b4c2:	685b      	ldreq	r3, [r3, #4]
 800b4c4:	1809      	addeq	r1, r1, r0
 800b4c6:	6021      	streq	r1, [r4, #0]
 800b4c8:	e7ed      	b.n	800b4a6 <_free_r+0x1e>
 800b4ca:	461a      	mov	r2, r3
 800b4cc:	685b      	ldr	r3, [r3, #4]
 800b4ce:	b10b      	cbz	r3, 800b4d4 <_free_r+0x4c>
 800b4d0:	42a3      	cmp	r3, r4
 800b4d2:	d9fa      	bls.n	800b4ca <_free_r+0x42>
 800b4d4:	6811      	ldr	r1, [r2, #0]
 800b4d6:	1850      	adds	r0, r2, r1
 800b4d8:	42a0      	cmp	r0, r4
 800b4da:	d10b      	bne.n	800b4f4 <_free_r+0x6c>
 800b4dc:	6820      	ldr	r0, [r4, #0]
 800b4de:	4401      	add	r1, r0
 800b4e0:	1850      	adds	r0, r2, r1
 800b4e2:	4283      	cmp	r3, r0
 800b4e4:	6011      	str	r1, [r2, #0]
 800b4e6:	d1e0      	bne.n	800b4aa <_free_r+0x22>
 800b4e8:	6818      	ldr	r0, [r3, #0]
 800b4ea:	685b      	ldr	r3, [r3, #4]
 800b4ec:	4408      	add	r0, r1
 800b4ee:	6010      	str	r0, [r2, #0]
 800b4f0:	6053      	str	r3, [r2, #4]
 800b4f2:	e7da      	b.n	800b4aa <_free_r+0x22>
 800b4f4:	d902      	bls.n	800b4fc <_free_r+0x74>
 800b4f6:	230c      	movs	r3, #12
 800b4f8:	602b      	str	r3, [r5, #0]
 800b4fa:	e7d6      	b.n	800b4aa <_free_r+0x22>
 800b4fc:	6820      	ldr	r0, [r4, #0]
 800b4fe:	1821      	adds	r1, r4, r0
 800b500:	428b      	cmp	r3, r1
 800b502:	bf01      	itttt	eq
 800b504:	6819      	ldreq	r1, [r3, #0]
 800b506:	685b      	ldreq	r3, [r3, #4]
 800b508:	1809      	addeq	r1, r1, r0
 800b50a:	6021      	streq	r1, [r4, #0]
 800b50c:	6063      	str	r3, [r4, #4]
 800b50e:	6054      	str	r4, [r2, #4]
 800b510:	e7cb      	b.n	800b4aa <_free_r+0x22>
 800b512:	bd38      	pop	{r3, r4, r5, pc}
 800b514:	20002ad4 	.word	0x20002ad4

0800b518 <malloc>:
 800b518:	4b02      	ldr	r3, [pc, #8]	@ (800b524 <malloc+0xc>)
 800b51a:	4601      	mov	r1, r0
 800b51c:	6818      	ldr	r0, [r3, #0]
 800b51e:	f000 b825 	b.w	800b56c <_malloc_r>
 800b522:	bf00      	nop
 800b524:	20000034 	.word	0x20000034

0800b528 <sbrk_aligned>:
 800b528:	b570      	push	{r4, r5, r6, lr}
 800b52a:	4e0f      	ldr	r6, [pc, #60]	@ (800b568 <sbrk_aligned+0x40>)
 800b52c:	460c      	mov	r4, r1
 800b52e:	6831      	ldr	r1, [r6, #0]
 800b530:	4605      	mov	r5, r0
 800b532:	b911      	cbnz	r1, 800b53a <sbrk_aligned+0x12>
 800b534:	f001 f9c6 	bl	800c8c4 <_sbrk_r>
 800b538:	6030      	str	r0, [r6, #0]
 800b53a:	4621      	mov	r1, r4
 800b53c:	4628      	mov	r0, r5
 800b53e:	f001 f9c1 	bl	800c8c4 <_sbrk_r>
 800b542:	1c43      	adds	r3, r0, #1
 800b544:	d103      	bne.n	800b54e <sbrk_aligned+0x26>
 800b546:	f04f 34ff 	mov.w	r4, #4294967295
 800b54a:	4620      	mov	r0, r4
 800b54c:	bd70      	pop	{r4, r5, r6, pc}
 800b54e:	1cc4      	adds	r4, r0, #3
 800b550:	f024 0403 	bic.w	r4, r4, #3
 800b554:	42a0      	cmp	r0, r4
 800b556:	d0f8      	beq.n	800b54a <sbrk_aligned+0x22>
 800b558:	1a21      	subs	r1, r4, r0
 800b55a:	4628      	mov	r0, r5
 800b55c:	f001 f9b2 	bl	800c8c4 <_sbrk_r>
 800b560:	3001      	adds	r0, #1
 800b562:	d1f2      	bne.n	800b54a <sbrk_aligned+0x22>
 800b564:	e7ef      	b.n	800b546 <sbrk_aligned+0x1e>
 800b566:	bf00      	nop
 800b568:	20002ad0 	.word	0x20002ad0

0800b56c <_malloc_r>:
 800b56c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b570:	1ccd      	adds	r5, r1, #3
 800b572:	f025 0503 	bic.w	r5, r5, #3
 800b576:	3508      	adds	r5, #8
 800b578:	2d0c      	cmp	r5, #12
 800b57a:	bf38      	it	cc
 800b57c:	250c      	movcc	r5, #12
 800b57e:	2d00      	cmp	r5, #0
 800b580:	4606      	mov	r6, r0
 800b582:	db01      	blt.n	800b588 <_malloc_r+0x1c>
 800b584:	42a9      	cmp	r1, r5
 800b586:	d904      	bls.n	800b592 <_malloc_r+0x26>
 800b588:	230c      	movs	r3, #12
 800b58a:	6033      	str	r3, [r6, #0]
 800b58c:	2000      	movs	r0, #0
 800b58e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b592:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b668 <_malloc_r+0xfc>
 800b596:	f000 f869 	bl	800b66c <__malloc_lock>
 800b59a:	f8d8 3000 	ldr.w	r3, [r8]
 800b59e:	461c      	mov	r4, r3
 800b5a0:	bb44      	cbnz	r4, 800b5f4 <_malloc_r+0x88>
 800b5a2:	4629      	mov	r1, r5
 800b5a4:	4630      	mov	r0, r6
 800b5a6:	f7ff ffbf 	bl	800b528 <sbrk_aligned>
 800b5aa:	1c43      	adds	r3, r0, #1
 800b5ac:	4604      	mov	r4, r0
 800b5ae:	d158      	bne.n	800b662 <_malloc_r+0xf6>
 800b5b0:	f8d8 4000 	ldr.w	r4, [r8]
 800b5b4:	4627      	mov	r7, r4
 800b5b6:	2f00      	cmp	r7, #0
 800b5b8:	d143      	bne.n	800b642 <_malloc_r+0xd6>
 800b5ba:	2c00      	cmp	r4, #0
 800b5bc:	d04b      	beq.n	800b656 <_malloc_r+0xea>
 800b5be:	6823      	ldr	r3, [r4, #0]
 800b5c0:	4639      	mov	r1, r7
 800b5c2:	4630      	mov	r0, r6
 800b5c4:	eb04 0903 	add.w	r9, r4, r3
 800b5c8:	f001 f97c 	bl	800c8c4 <_sbrk_r>
 800b5cc:	4581      	cmp	r9, r0
 800b5ce:	d142      	bne.n	800b656 <_malloc_r+0xea>
 800b5d0:	6821      	ldr	r1, [r4, #0]
 800b5d2:	4630      	mov	r0, r6
 800b5d4:	1a6d      	subs	r5, r5, r1
 800b5d6:	4629      	mov	r1, r5
 800b5d8:	f7ff ffa6 	bl	800b528 <sbrk_aligned>
 800b5dc:	3001      	adds	r0, #1
 800b5de:	d03a      	beq.n	800b656 <_malloc_r+0xea>
 800b5e0:	6823      	ldr	r3, [r4, #0]
 800b5e2:	442b      	add	r3, r5
 800b5e4:	6023      	str	r3, [r4, #0]
 800b5e6:	f8d8 3000 	ldr.w	r3, [r8]
 800b5ea:	685a      	ldr	r2, [r3, #4]
 800b5ec:	bb62      	cbnz	r2, 800b648 <_malloc_r+0xdc>
 800b5ee:	f8c8 7000 	str.w	r7, [r8]
 800b5f2:	e00f      	b.n	800b614 <_malloc_r+0xa8>
 800b5f4:	6822      	ldr	r2, [r4, #0]
 800b5f6:	1b52      	subs	r2, r2, r5
 800b5f8:	d420      	bmi.n	800b63c <_malloc_r+0xd0>
 800b5fa:	2a0b      	cmp	r2, #11
 800b5fc:	d917      	bls.n	800b62e <_malloc_r+0xc2>
 800b5fe:	1961      	adds	r1, r4, r5
 800b600:	42a3      	cmp	r3, r4
 800b602:	6025      	str	r5, [r4, #0]
 800b604:	bf18      	it	ne
 800b606:	6059      	strne	r1, [r3, #4]
 800b608:	6863      	ldr	r3, [r4, #4]
 800b60a:	bf08      	it	eq
 800b60c:	f8c8 1000 	streq.w	r1, [r8]
 800b610:	5162      	str	r2, [r4, r5]
 800b612:	604b      	str	r3, [r1, #4]
 800b614:	4630      	mov	r0, r6
 800b616:	f000 f82f 	bl	800b678 <__malloc_unlock>
 800b61a:	f104 000b 	add.w	r0, r4, #11
 800b61e:	1d23      	adds	r3, r4, #4
 800b620:	f020 0007 	bic.w	r0, r0, #7
 800b624:	1ac2      	subs	r2, r0, r3
 800b626:	bf1c      	itt	ne
 800b628:	1a1b      	subne	r3, r3, r0
 800b62a:	50a3      	strne	r3, [r4, r2]
 800b62c:	e7af      	b.n	800b58e <_malloc_r+0x22>
 800b62e:	6862      	ldr	r2, [r4, #4]
 800b630:	42a3      	cmp	r3, r4
 800b632:	bf0c      	ite	eq
 800b634:	f8c8 2000 	streq.w	r2, [r8]
 800b638:	605a      	strne	r2, [r3, #4]
 800b63a:	e7eb      	b.n	800b614 <_malloc_r+0xa8>
 800b63c:	4623      	mov	r3, r4
 800b63e:	6864      	ldr	r4, [r4, #4]
 800b640:	e7ae      	b.n	800b5a0 <_malloc_r+0x34>
 800b642:	463c      	mov	r4, r7
 800b644:	687f      	ldr	r7, [r7, #4]
 800b646:	e7b6      	b.n	800b5b6 <_malloc_r+0x4a>
 800b648:	461a      	mov	r2, r3
 800b64a:	685b      	ldr	r3, [r3, #4]
 800b64c:	42a3      	cmp	r3, r4
 800b64e:	d1fb      	bne.n	800b648 <_malloc_r+0xdc>
 800b650:	2300      	movs	r3, #0
 800b652:	6053      	str	r3, [r2, #4]
 800b654:	e7de      	b.n	800b614 <_malloc_r+0xa8>
 800b656:	230c      	movs	r3, #12
 800b658:	4630      	mov	r0, r6
 800b65a:	6033      	str	r3, [r6, #0]
 800b65c:	f000 f80c 	bl	800b678 <__malloc_unlock>
 800b660:	e794      	b.n	800b58c <_malloc_r+0x20>
 800b662:	6005      	str	r5, [r0, #0]
 800b664:	e7d6      	b.n	800b614 <_malloc_r+0xa8>
 800b666:	bf00      	nop
 800b668:	20002ad4 	.word	0x20002ad4

0800b66c <__malloc_lock>:
 800b66c:	4801      	ldr	r0, [pc, #4]	@ (800b674 <__malloc_lock+0x8>)
 800b66e:	f7ff b88e 	b.w	800a78e <__retarget_lock_acquire_recursive>
 800b672:	bf00      	nop
 800b674:	20002acc 	.word	0x20002acc

0800b678 <__malloc_unlock>:
 800b678:	4801      	ldr	r0, [pc, #4]	@ (800b680 <__malloc_unlock+0x8>)
 800b67a:	f7ff b889 	b.w	800a790 <__retarget_lock_release_recursive>
 800b67e:	bf00      	nop
 800b680:	20002acc 	.word	0x20002acc

0800b684 <_Balloc>:
 800b684:	b570      	push	{r4, r5, r6, lr}
 800b686:	69c6      	ldr	r6, [r0, #28]
 800b688:	4604      	mov	r4, r0
 800b68a:	460d      	mov	r5, r1
 800b68c:	b976      	cbnz	r6, 800b6ac <_Balloc+0x28>
 800b68e:	2010      	movs	r0, #16
 800b690:	f7ff ff42 	bl	800b518 <malloc>
 800b694:	4602      	mov	r2, r0
 800b696:	61e0      	str	r0, [r4, #28]
 800b698:	b920      	cbnz	r0, 800b6a4 <_Balloc+0x20>
 800b69a:	216b      	movs	r1, #107	@ 0x6b
 800b69c:	4b17      	ldr	r3, [pc, #92]	@ (800b6fc <_Balloc+0x78>)
 800b69e:	4818      	ldr	r0, [pc, #96]	@ (800b700 <_Balloc+0x7c>)
 800b6a0:	f001 f920 	bl	800c8e4 <__assert_func>
 800b6a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b6a8:	6006      	str	r6, [r0, #0]
 800b6aa:	60c6      	str	r6, [r0, #12]
 800b6ac:	69e6      	ldr	r6, [r4, #28]
 800b6ae:	68f3      	ldr	r3, [r6, #12]
 800b6b0:	b183      	cbz	r3, 800b6d4 <_Balloc+0x50>
 800b6b2:	69e3      	ldr	r3, [r4, #28]
 800b6b4:	68db      	ldr	r3, [r3, #12]
 800b6b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b6ba:	b9b8      	cbnz	r0, 800b6ec <_Balloc+0x68>
 800b6bc:	2101      	movs	r1, #1
 800b6be:	fa01 f605 	lsl.w	r6, r1, r5
 800b6c2:	1d72      	adds	r2, r6, #5
 800b6c4:	4620      	mov	r0, r4
 800b6c6:	0092      	lsls	r2, r2, #2
 800b6c8:	f001 f92a 	bl	800c920 <_calloc_r>
 800b6cc:	b160      	cbz	r0, 800b6e8 <_Balloc+0x64>
 800b6ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b6d2:	e00e      	b.n	800b6f2 <_Balloc+0x6e>
 800b6d4:	2221      	movs	r2, #33	@ 0x21
 800b6d6:	2104      	movs	r1, #4
 800b6d8:	4620      	mov	r0, r4
 800b6da:	f001 f921 	bl	800c920 <_calloc_r>
 800b6de:	69e3      	ldr	r3, [r4, #28]
 800b6e0:	60f0      	str	r0, [r6, #12]
 800b6e2:	68db      	ldr	r3, [r3, #12]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d1e4      	bne.n	800b6b2 <_Balloc+0x2e>
 800b6e8:	2000      	movs	r0, #0
 800b6ea:	bd70      	pop	{r4, r5, r6, pc}
 800b6ec:	6802      	ldr	r2, [r0, #0]
 800b6ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b6f8:	e7f7      	b.n	800b6ea <_Balloc+0x66>
 800b6fa:	bf00      	nop
 800b6fc:	0800d401 	.word	0x0800d401
 800b700:	0800d481 	.word	0x0800d481

0800b704 <_Bfree>:
 800b704:	b570      	push	{r4, r5, r6, lr}
 800b706:	69c6      	ldr	r6, [r0, #28]
 800b708:	4605      	mov	r5, r0
 800b70a:	460c      	mov	r4, r1
 800b70c:	b976      	cbnz	r6, 800b72c <_Bfree+0x28>
 800b70e:	2010      	movs	r0, #16
 800b710:	f7ff ff02 	bl	800b518 <malloc>
 800b714:	4602      	mov	r2, r0
 800b716:	61e8      	str	r0, [r5, #28]
 800b718:	b920      	cbnz	r0, 800b724 <_Bfree+0x20>
 800b71a:	218f      	movs	r1, #143	@ 0x8f
 800b71c:	4b08      	ldr	r3, [pc, #32]	@ (800b740 <_Bfree+0x3c>)
 800b71e:	4809      	ldr	r0, [pc, #36]	@ (800b744 <_Bfree+0x40>)
 800b720:	f001 f8e0 	bl	800c8e4 <__assert_func>
 800b724:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b728:	6006      	str	r6, [r0, #0]
 800b72a:	60c6      	str	r6, [r0, #12]
 800b72c:	b13c      	cbz	r4, 800b73e <_Bfree+0x3a>
 800b72e:	69eb      	ldr	r3, [r5, #28]
 800b730:	6862      	ldr	r2, [r4, #4]
 800b732:	68db      	ldr	r3, [r3, #12]
 800b734:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b738:	6021      	str	r1, [r4, #0]
 800b73a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b73e:	bd70      	pop	{r4, r5, r6, pc}
 800b740:	0800d401 	.word	0x0800d401
 800b744:	0800d481 	.word	0x0800d481

0800b748 <__multadd>:
 800b748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b74c:	4607      	mov	r7, r0
 800b74e:	460c      	mov	r4, r1
 800b750:	461e      	mov	r6, r3
 800b752:	2000      	movs	r0, #0
 800b754:	690d      	ldr	r5, [r1, #16]
 800b756:	f101 0c14 	add.w	ip, r1, #20
 800b75a:	f8dc 3000 	ldr.w	r3, [ip]
 800b75e:	3001      	adds	r0, #1
 800b760:	b299      	uxth	r1, r3
 800b762:	fb02 6101 	mla	r1, r2, r1, r6
 800b766:	0c1e      	lsrs	r6, r3, #16
 800b768:	0c0b      	lsrs	r3, r1, #16
 800b76a:	fb02 3306 	mla	r3, r2, r6, r3
 800b76e:	b289      	uxth	r1, r1
 800b770:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b774:	4285      	cmp	r5, r0
 800b776:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b77a:	f84c 1b04 	str.w	r1, [ip], #4
 800b77e:	dcec      	bgt.n	800b75a <__multadd+0x12>
 800b780:	b30e      	cbz	r6, 800b7c6 <__multadd+0x7e>
 800b782:	68a3      	ldr	r3, [r4, #8]
 800b784:	42ab      	cmp	r3, r5
 800b786:	dc19      	bgt.n	800b7bc <__multadd+0x74>
 800b788:	6861      	ldr	r1, [r4, #4]
 800b78a:	4638      	mov	r0, r7
 800b78c:	3101      	adds	r1, #1
 800b78e:	f7ff ff79 	bl	800b684 <_Balloc>
 800b792:	4680      	mov	r8, r0
 800b794:	b928      	cbnz	r0, 800b7a2 <__multadd+0x5a>
 800b796:	4602      	mov	r2, r0
 800b798:	21ba      	movs	r1, #186	@ 0xba
 800b79a:	4b0c      	ldr	r3, [pc, #48]	@ (800b7cc <__multadd+0x84>)
 800b79c:	480c      	ldr	r0, [pc, #48]	@ (800b7d0 <__multadd+0x88>)
 800b79e:	f001 f8a1 	bl	800c8e4 <__assert_func>
 800b7a2:	6922      	ldr	r2, [r4, #16]
 800b7a4:	f104 010c 	add.w	r1, r4, #12
 800b7a8:	3202      	adds	r2, #2
 800b7aa:	0092      	lsls	r2, r2, #2
 800b7ac:	300c      	adds	r0, #12
 800b7ae:	f7fe fffe 	bl	800a7ae <memcpy>
 800b7b2:	4621      	mov	r1, r4
 800b7b4:	4638      	mov	r0, r7
 800b7b6:	f7ff ffa5 	bl	800b704 <_Bfree>
 800b7ba:	4644      	mov	r4, r8
 800b7bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b7c0:	3501      	adds	r5, #1
 800b7c2:	615e      	str	r6, [r3, #20]
 800b7c4:	6125      	str	r5, [r4, #16]
 800b7c6:	4620      	mov	r0, r4
 800b7c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7cc:	0800d470 	.word	0x0800d470
 800b7d0:	0800d481 	.word	0x0800d481

0800b7d4 <__hi0bits>:
 800b7d4:	4603      	mov	r3, r0
 800b7d6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b7da:	bf3a      	itte	cc
 800b7dc:	0403      	lslcc	r3, r0, #16
 800b7de:	2010      	movcc	r0, #16
 800b7e0:	2000      	movcs	r0, #0
 800b7e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b7e6:	bf3c      	itt	cc
 800b7e8:	021b      	lslcc	r3, r3, #8
 800b7ea:	3008      	addcc	r0, #8
 800b7ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b7f0:	bf3c      	itt	cc
 800b7f2:	011b      	lslcc	r3, r3, #4
 800b7f4:	3004      	addcc	r0, #4
 800b7f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b7fa:	bf3c      	itt	cc
 800b7fc:	009b      	lslcc	r3, r3, #2
 800b7fe:	3002      	addcc	r0, #2
 800b800:	2b00      	cmp	r3, #0
 800b802:	db05      	blt.n	800b810 <__hi0bits+0x3c>
 800b804:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b808:	f100 0001 	add.w	r0, r0, #1
 800b80c:	bf08      	it	eq
 800b80e:	2020      	moveq	r0, #32
 800b810:	4770      	bx	lr

0800b812 <__lo0bits>:
 800b812:	6803      	ldr	r3, [r0, #0]
 800b814:	4602      	mov	r2, r0
 800b816:	f013 0007 	ands.w	r0, r3, #7
 800b81a:	d00b      	beq.n	800b834 <__lo0bits+0x22>
 800b81c:	07d9      	lsls	r1, r3, #31
 800b81e:	d421      	bmi.n	800b864 <__lo0bits+0x52>
 800b820:	0798      	lsls	r0, r3, #30
 800b822:	bf49      	itett	mi
 800b824:	085b      	lsrmi	r3, r3, #1
 800b826:	089b      	lsrpl	r3, r3, #2
 800b828:	2001      	movmi	r0, #1
 800b82a:	6013      	strmi	r3, [r2, #0]
 800b82c:	bf5c      	itt	pl
 800b82e:	2002      	movpl	r0, #2
 800b830:	6013      	strpl	r3, [r2, #0]
 800b832:	4770      	bx	lr
 800b834:	b299      	uxth	r1, r3
 800b836:	b909      	cbnz	r1, 800b83c <__lo0bits+0x2a>
 800b838:	2010      	movs	r0, #16
 800b83a:	0c1b      	lsrs	r3, r3, #16
 800b83c:	b2d9      	uxtb	r1, r3
 800b83e:	b909      	cbnz	r1, 800b844 <__lo0bits+0x32>
 800b840:	3008      	adds	r0, #8
 800b842:	0a1b      	lsrs	r3, r3, #8
 800b844:	0719      	lsls	r1, r3, #28
 800b846:	bf04      	itt	eq
 800b848:	091b      	lsreq	r3, r3, #4
 800b84a:	3004      	addeq	r0, #4
 800b84c:	0799      	lsls	r1, r3, #30
 800b84e:	bf04      	itt	eq
 800b850:	089b      	lsreq	r3, r3, #2
 800b852:	3002      	addeq	r0, #2
 800b854:	07d9      	lsls	r1, r3, #31
 800b856:	d403      	bmi.n	800b860 <__lo0bits+0x4e>
 800b858:	085b      	lsrs	r3, r3, #1
 800b85a:	f100 0001 	add.w	r0, r0, #1
 800b85e:	d003      	beq.n	800b868 <__lo0bits+0x56>
 800b860:	6013      	str	r3, [r2, #0]
 800b862:	4770      	bx	lr
 800b864:	2000      	movs	r0, #0
 800b866:	4770      	bx	lr
 800b868:	2020      	movs	r0, #32
 800b86a:	4770      	bx	lr

0800b86c <__i2b>:
 800b86c:	b510      	push	{r4, lr}
 800b86e:	460c      	mov	r4, r1
 800b870:	2101      	movs	r1, #1
 800b872:	f7ff ff07 	bl	800b684 <_Balloc>
 800b876:	4602      	mov	r2, r0
 800b878:	b928      	cbnz	r0, 800b886 <__i2b+0x1a>
 800b87a:	f240 1145 	movw	r1, #325	@ 0x145
 800b87e:	4b04      	ldr	r3, [pc, #16]	@ (800b890 <__i2b+0x24>)
 800b880:	4804      	ldr	r0, [pc, #16]	@ (800b894 <__i2b+0x28>)
 800b882:	f001 f82f 	bl	800c8e4 <__assert_func>
 800b886:	2301      	movs	r3, #1
 800b888:	6144      	str	r4, [r0, #20]
 800b88a:	6103      	str	r3, [r0, #16]
 800b88c:	bd10      	pop	{r4, pc}
 800b88e:	bf00      	nop
 800b890:	0800d470 	.word	0x0800d470
 800b894:	0800d481 	.word	0x0800d481

0800b898 <__multiply>:
 800b898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b89c:	4617      	mov	r7, r2
 800b89e:	690a      	ldr	r2, [r1, #16]
 800b8a0:	693b      	ldr	r3, [r7, #16]
 800b8a2:	4689      	mov	r9, r1
 800b8a4:	429a      	cmp	r2, r3
 800b8a6:	bfa2      	ittt	ge
 800b8a8:	463b      	movge	r3, r7
 800b8aa:	460f      	movge	r7, r1
 800b8ac:	4699      	movge	r9, r3
 800b8ae:	693d      	ldr	r5, [r7, #16]
 800b8b0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b8b4:	68bb      	ldr	r3, [r7, #8]
 800b8b6:	6879      	ldr	r1, [r7, #4]
 800b8b8:	eb05 060a 	add.w	r6, r5, sl
 800b8bc:	42b3      	cmp	r3, r6
 800b8be:	b085      	sub	sp, #20
 800b8c0:	bfb8      	it	lt
 800b8c2:	3101      	addlt	r1, #1
 800b8c4:	f7ff fede 	bl	800b684 <_Balloc>
 800b8c8:	b930      	cbnz	r0, 800b8d8 <__multiply+0x40>
 800b8ca:	4602      	mov	r2, r0
 800b8cc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b8d0:	4b40      	ldr	r3, [pc, #256]	@ (800b9d4 <__multiply+0x13c>)
 800b8d2:	4841      	ldr	r0, [pc, #260]	@ (800b9d8 <__multiply+0x140>)
 800b8d4:	f001 f806 	bl	800c8e4 <__assert_func>
 800b8d8:	f100 0414 	add.w	r4, r0, #20
 800b8dc:	4623      	mov	r3, r4
 800b8de:	2200      	movs	r2, #0
 800b8e0:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800b8e4:	4573      	cmp	r3, lr
 800b8e6:	d320      	bcc.n	800b92a <__multiply+0x92>
 800b8e8:	f107 0814 	add.w	r8, r7, #20
 800b8ec:	f109 0114 	add.w	r1, r9, #20
 800b8f0:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800b8f4:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800b8f8:	9302      	str	r3, [sp, #8]
 800b8fa:	1beb      	subs	r3, r5, r7
 800b8fc:	3b15      	subs	r3, #21
 800b8fe:	f023 0303 	bic.w	r3, r3, #3
 800b902:	3304      	adds	r3, #4
 800b904:	3715      	adds	r7, #21
 800b906:	42bd      	cmp	r5, r7
 800b908:	bf38      	it	cc
 800b90a:	2304      	movcc	r3, #4
 800b90c:	9301      	str	r3, [sp, #4]
 800b90e:	9b02      	ldr	r3, [sp, #8]
 800b910:	9103      	str	r1, [sp, #12]
 800b912:	428b      	cmp	r3, r1
 800b914:	d80c      	bhi.n	800b930 <__multiply+0x98>
 800b916:	2e00      	cmp	r6, #0
 800b918:	dd03      	ble.n	800b922 <__multiply+0x8a>
 800b91a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d055      	beq.n	800b9ce <__multiply+0x136>
 800b922:	6106      	str	r6, [r0, #16]
 800b924:	b005      	add	sp, #20
 800b926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b92a:	f843 2b04 	str.w	r2, [r3], #4
 800b92e:	e7d9      	b.n	800b8e4 <__multiply+0x4c>
 800b930:	f8b1 a000 	ldrh.w	sl, [r1]
 800b934:	f1ba 0f00 	cmp.w	sl, #0
 800b938:	d01f      	beq.n	800b97a <__multiply+0xe2>
 800b93a:	46c4      	mov	ip, r8
 800b93c:	46a1      	mov	r9, r4
 800b93e:	2700      	movs	r7, #0
 800b940:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b944:	f8d9 3000 	ldr.w	r3, [r9]
 800b948:	fa1f fb82 	uxth.w	fp, r2
 800b94c:	b29b      	uxth	r3, r3
 800b94e:	fb0a 330b 	mla	r3, sl, fp, r3
 800b952:	443b      	add	r3, r7
 800b954:	f8d9 7000 	ldr.w	r7, [r9]
 800b958:	0c12      	lsrs	r2, r2, #16
 800b95a:	0c3f      	lsrs	r7, r7, #16
 800b95c:	fb0a 7202 	mla	r2, sl, r2, r7
 800b960:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800b964:	b29b      	uxth	r3, r3
 800b966:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b96a:	4565      	cmp	r5, ip
 800b96c:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800b970:	f849 3b04 	str.w	r3, [r9], #4
 800b974:	d8e4      	bhi.n	800b940 <__multiply+0xa8>
 800b976:	9b01      	ldr	r3, [sp, #4]
 800b978:	50e7      	str	r7, [r4, r3]
 800b97a:	9b03      	ldr	r3, [sp, #12]
 800b97c:	3104      	adds	r1, #4
 800b97e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b982:	f1b9 0f00 	cmp.w	r9, #0
 800b986:	d020      	beq.n	800b9ca <__multiply+0x132>
 800b988:	4647      	mov	r7, r8
 800b98a:	46a4      	mov	ip, r4
 800b98c:	f04f 0a00 	mov.w	sl, #0
 800b990:	6823      	ldr	r3, [r4, #0]
 800b992:	f8b7 b000 	ldrh.w	fp, [r7]
 800b996:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800b99a:	b29b      	uxth	r3, r3
 800b99c:	fb09 220b 	mla	r2, r9, fp, r2
 800b9a0:	4452      	add	r2, sl
 800b9a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b9a6:	f84c 3b04 	str.w	r3, [ip], #4
 800b9aa:	f857 3b04 	ldr.w	r3, [r7], #4
 800b9ae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b9b2:	f8bc 3000 	ldrh.w	r3, [ip]
 800b9b6:	42bd      	cmp	r5, r7
 800b9b8:	fb09 330a 	mla	r3, r9, sl, r3
 800b9bc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800b9c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b9c4:	d8e5      	bhi.n	800b992 <__multiply+0xfa>
 800b9c6:	9a01      	ldr	r2, [sp, #4]
 800b9c8:	50a3      	str	r3, [r4, r2]
 800b9ca:	3404      	adds	r4, #4
 800b9cc:	e79f      	b.n	800b90e <__multiply+0x76>
 800b9ce:	3e01      	subs	r6, #1
 800b9d0:	e7a1      	b.n	800b916 <__multiply+0x7e>
 800b9d2:	bf00      	nop
 800b9d4:	0800d470 	.word	0x0800d470
 800b9d8:	0800d481 	.word	0x0800d481

0800b9dc <__pow5mult>:
 800b9dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9e0:	4615      	mov	r5, r2
 800b9e2:	f012 0203 	ands.w	r2, r2, #3
 800b9e6:	4607      	mov	r7, r0
 800b9e8:	460e      	mov	r6, r1
 800b9ea:	d007      	beq.n	800b9fc <__pow5mult+0x20>
 800b9ec:	4c25      	ldr	r4, [pc, #148]	@ (800ba84 <__pow5mult+0xa8>)
 800b9ee:	3a01      	subs	r2, #1
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b9f6:	f7ff fea7 	bl	800b748 <__multadd>
 800b9fa:	4606      	mov	r6, r0
 800b9fc:	10ad      	asrs	r5, r5, #2
 800b9fe:	d03d      	beq.n	800ba7c <__pow5mult+0xa0>
 800ba00:	69fc      	ldr	r4, [r7, #28]
 800ba02:	b97c      	cbnz	r4, 800ba24 <__pow5mult+0x48>
 800ba04:	2010      	movs	r0, #16
 800ba06:	f7ff fd87 	bl	800b518 <malloc>
 800ba0a:	4602      	mov	r2, r0
 800ba0c:	61f8      	str	r0, [r7, #28]
 800ba0e:	b928      	cbnz	r0, 800ba1c <__pow5mult+0x40>
 800ba10:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ba14:	4b1c      	ldr	r3, [pc, #112]	@ (800ba88 <__pow5mult+0xac>)
 800ba16:	481d      	ldr	r0, [pc, #116]	@ (800ba8c <__pow5mult+0xb0>)
 800ba18:	f000 ff64 	bl	800c8e4 <__assert_func>
 800ba1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ba20:	6004      	str	r4, [r0, #0]
 800ba22:	60c4      	str	r4, [r0, #12]
 800ba24:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ba28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ba2c:	b94c      	cbnz	r4, 800ba42 <__pow5mult+0x66>
 800ba2e:	f240 2171 	movw	r1, #625	@ 0x271
 800ba32:	4638      	mov	r0, r7
 800ba34:	f7ff ff1a 	bl	800b86c <__i2b>
 800ba38:	2300      	movs	r3, #0
 800ba3a:	4604      	mov	r4, r0
 800ba3c:	f8c8 0008 	str.w	r0, [r8, #8]
 800ba40:	6003      	str	r3, [r0, #0]
 800ba42:	f04f 0900 	mov.w	r9, #0
 800ba46:	07eb      	lsls	r3, r5, #31
 800ba48:	d50a      	bpl.n	800ba60 <__pow5mult+0x84>
 800ba4a:	4631      	mov	r1, r6
 800ba4c:	4622      	mov	r2, r4
 800ba4e:	4638      	mov	r0, r7
 800ba50:	f7ff ff22 	bl	800b898 <__multiply>
 800ba54:	4680      	mov	r8, r0
 800ba56:	4631      	mov	r1, r6
 800ba58:	4638      	mov	r0, r7
 800ba5a:	f7ff fe53 	bl	800b704 <_Bfree>
 800ba5e:	4646      	mov	r6, r8
 800ba60:	106d      	asrs	r5, r5, #1
 800ba62:	d00b      	beq.n	800ba7c <__pow5mult+0xa0>
 800ba64:	6820      	ldr	r0, [r4, #0]
 800ba66:	b938      	cbnz	r0, 800ba78 <__pow5mult+0x9c>
 800ba68:	4622      	mov	r2, r4
 800ba6a:	4621      	mov	r1, r4
 800ba6c:	4638      	mov	r0, r7
 800ba6e:	f7ff ff13 	bl	800b898 <__multiply>
 800ba72:	6020      	str	r0, [r4, #0]
 800ba74:	f8c0 9000 	str.w	r9, [r0]
 800ba78:	4604      	mov	r4, r0
 800ba7a:	e7e4      	b.n	800ba46 <__pow5mult+0x6a>
 800ba7c:	4630      	mov	r0, r6
 800ba7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba82:	bf00      	nop
 800ba84:	0800d54c 	.word	0x0800d54c
 800ba88:	0800d401 	.word	0x0800d401
 800ba8c:	0800d481 	.word	0x0800d481

0800ba90 <__lshift>:
 800ba90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba94:	460c      	mov	r4, r1
 800ba96:	4607      	mov	r7, r0
 800ba98:	4691      	mov	r9, r2
 800ba9a:	6923      	ldr	r3, [r4, #16]
 800ba9c:	6849      	ldr	r1, [r1, #4]
 800ba9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800baa2:	68a3      	ldr	r3, [r4, #8]
 800baa4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800baa8:	f108 0601 	add.w	r6, r8, #1
 800baac:	42b3      	cmp	r3, r6
 800baae:	db0b      	blt.n	800bac8 <__lshift+0x38>
 800bab0:	4638      	mov	r0, r7
 800bab2:	f7ff fde7 	bl	800b684 <_Balloc>
 800bab6:	4605      	mov	r5, r0
 800bab8:	b948      	cbnz	r0, 800bace <__lshift+0x3e>
 800baba:	4602      	mov	r2, r0
 800babc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bac0:	4b27      	ldr	r3, [pc, #156]	@ (800bb60 <__lshift+0xd0>)
 800bac2:	4828      	ldr	r0, [pc, #160]	@ (800bb64 <__lshift+0xd4>)
 800bac4:	f000 ff0e 	bl	800c8e4 <__assert_func>
 800bac8:	3101      	adds	r1, #1
 800baca:	005b      	lsls	r3, r3, #1
 800bacc:	e7ee      	b.n	800baac <__lshift+0x1c>
 800bace:	2300      	movs	r3, #0
 800bad0:	f100 0114 	add.w	r1, r0, #20
 800bad4:	f100 0210 	add.w	r2, r0, #16
 800bad8:	4618      	mov	r0, r3
 800bada:	4553      	cmp	r3, sl
 800badc:	db33      	blt.n	800bb46 <__lshift+0xb6>
 800bade:	6920      	ldr	r0, [r4, #16]
 800bae0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bae4:	f104 0314 	add.w	r3, r4, #20
 800bae8:	f019 091f 	ands.w	r9, r9, #31
 800baec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800baf0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800baf4:	d02b      	beq.n	800bb4e <__lshift+0xbe>
 800baf6:	468a      	mov	sl, r1
 800baf8:	2200      	movs	r2, #0
 800bafa:	f1c9 0e20 	rsb	lr, r9, #32
 800bafe:	6818      	ldr	r0, [r3, #0]
 800bb00:	fa00 f009 	lsl.w	r0, r0, r9
 800bb04:	4310      	orrs	r0, r2
 800bb06:	f84a 0b04 	str.w	r0, [sl], #4
 800bb0a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb0e:	459c      	cmp	ip, r3
 800bb10:	fa22 f20e 	lsr.w	r2, r2, lr
 800bb14:	d8f3      	bhi.n	800bafe <__lshift+0x6e>
 800bb16:	ebac 0304 	sub.w	r3, ip, r4
 800bb1a:	3b15      	subs	r3, #21
 800bb1c:	f023 0303 	bic.w	r3, r3, #3
 800bb20:	3304      	adds	r3, #4
 800bb22:	f104 0015 	add.w	r0, r4, #21
 800bb26:	4560      	cmp	r0, ip
 800bb28:	bf88      	it	hi
 800bb2a:	2304      	movhi	r3, #4
 800bb2c:	50ca      	str	r2, [r1, r3]
 800bb2e:	b10a      	cbz	r2, 800bb34 <__lshift+0xa4>
 800bb30:	f108 0602 	add.w	r6, r8, #2
 800bb34:	3e01      	subs	r6, #1
 800bb36:	4638      	mov	r0, r7
 800bb38:	4621      	mov	r1, r4
 800bb3a:	612e      	str	r6, [r5, #16]
 800bb3c:	f7ff fde2 	bl	800b704 <_Bfree>
 800bb40:	4628      	mov	r0, r5
 800bb42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb46:	f842 0f04 	str.w	r0, [r2, #4]!
 800bb4a:	3301      	adds	r3, #1
 800bb4c:	e7c5      	b.n	800bada <__lshift+0x4a>
 800bb4e:	3904      	subs	r1, #4
 800bb50:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb54:	459c      	cmp	ip, r3
 800bb56:	f841 2f04 	str.w	r2, [r1, #4]!
 800bb5a:	d8f9      	bhi.n	800bb50 <__lshift+0xc0>
 800bb5c:	e7ea      	b.n	800bb34 <__lshift+0xa4>
 800bb5e:	bf00      	nop
 800bb60:	0800d470 	.word	0x0800d470
 800bb64:	0800d481 	.word	0x0800d481

0800bb68 <__mcmp>:
 800bb68:	4603      	mov	r3, r0
 800bb6a:	690a      	ldr	r2, [r1, #16]
 800bb6c:	6900      	ldr	r0, [r0, #16]
 800bb6e:	b530      	push	{r4, r5, lr}
 800bb70:	1a80      	subs	r0, r0, r2
 800bb72:	d10e      	bne.n	800bb92 <__mcmp+0x2a>
 800bb74:	3314      	adds	r3, #20
 800bb76:	3114      	adds	r1, #20
 800bb78:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bb7c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bb80:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bb84:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bb88:	4295      	cmp	r5, r2
 800bb8a:	d003      	beq.n	800bb94 <__mcmp+0x2c>
 800bb8c:	d205      	bcs.n	800bb9a <__mcmp+0x32>
 800bb8e:	f04f 30ff 	mov.w	r0, #4294967295
 800bb92:	bd30      	pop	{r4, r5, pc}
 800bb94:	42a3      	cmp	r3, r4
 800bb96:	d3f3      	bcc.n	800bb80 <__mcmp+0x18>
 800bb98:	e7fb      	b.n	800bb92 <__mcmp+0x2a>
 800bb9a:	2001      	movs	r0, #1
 800bb9c:	e7f9      	b.n	800bb92 <__mcmp+0x2a>
	...

0800bba0 <__mdiff>:
 800bba0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bba4:	4689      	mov	r9, r1
 800bba6:	4606      	mov	r6, r0
 800bba8:	4611      	mov	r1, r2
 800bbaa:	4648      	mov	r0, r9
 800bbac:	4614      	mov	r4, r2
 800bbae:	f7ff ffdb 	bl	800bb68 <__mcmp>
 800bbb2:	1e05      	subs	r5, r0, #0
 800bbb4:	d112      	bne.n	800bbdc <__mdiff+0x3c>
 800bbb6:	4629      	mov	r1, r5
 800bbb8:	4630      	mov	r0, r6
 800bbba:	f7ff fd63 	bl	800b684 <_Balloc>
 800bbbe:	4602      	mov	r2, r0
 800bbc0:	b928      	cbnz	r0, 800bbce <__mdiff+0x2e>
 800bbc2:	f240 2137 	movw	r1, #567	@ 0x237
 800bbc6:	4b3e      	ldr	r3, [pc, #248]	@ (800bcc0 <__mdiff+0x120>)
 800bbc8:	483e      	ldr	r0, [pc, #248]	@ (800bcc4 <__mdiff+0x124>)
 800bbca:	f000 fe8b 	bl	800c8e4 <__assert_func>
 800bbce:	2301      	movs	r3, #1
 800bbd0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bbd4:	4610      	mov	r0, r2
 800bbd6:	b003      	add	sp, #12
 800bbd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbdc:	bfbc      	itt	lt
 800bbde:	464b      	movlt	r3, r9
 800bbe0:	46a1      	movlt	r9, r4
 800bbe2:	4630      	mov	r0, r6
 800bbe4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bbe8:	bfba      	itte	lt
 800bbea:	461c      	movlt	r4, r3
 800bbec:	2501      	movlt	r5, #1
 800bbee:	2500      	movge	r5, #0
 800bbf0:	f7ff fd48 	bl	800b684 <_Balloc>
 800bbf4:	4602      	mov	r2, r0
 800bbf6:	b918      	cbnz	r0, 800bc00 <__mdiff+0x60>
 800bbf8:	f240 2145 	movw	r1, #581	@ 0x245
 800bbfc:	4b30      	ldr	r3, [pc, #192]	@ (800bcc0 <__mdiff+0x120>)
 800bbfe:	e7e3      	b.n	800bbc8 <__mdiff+0x28>
 800bc00:	f100 0b14 	add.w	fp, r0, #20
 800bc04:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bc08:	f109 0310 	add.w	r3, r9, #16
 800bc0c:	60c5      	str	r5, [r0, #12]
 800bc0e:	f04f 0c00 	mov.w	ip, #0
 800bc12:	f109 0514 	add.w	r5, r9, #20
 800bc16:	46d9      	mov	r9, fp
 800bc18:	6926      	ldr	r6, [r4, #16]
 800bc1a:	f104 0e14 	add.w	lr, r4, #20
 800bc1e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bc22:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bc26:	9301      	str	r3, [sp, #4]
 800bc28:	9b01      	ldr	r3, [sp, #4]
 800bc2a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bc2e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bc32:	b281      	uxth	r1, r0
 800bc34:	9301      	str	r3, [sp, #4]
 800bc36:	fa1f f38a 	uxth.w	r3, sl
 800bc3a:	1a5b      	subs	r3, r3, r1
 800bc3c:	0c00      	lsrs	r0, r0, #16
 800bc3e:	4463      	add	r3, ip
 800bc40:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bc44:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bc48:	b29b      	uxth	r3, r3
 800bc4a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bc4e:	4576      	cmp	r6, lr
 800bc50:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bc54:	f849 3b04 	str.w	r3, [r9], #4
 800bc58:	d8e6      	bhi.n	800bc28 <__mdiff+0x88>
 800bc5a:	1b33      	subs	r3, r6, r4
 800bc5c:	3b15      	subs	r3, #21
 800bc5e:	f023 0303 	bic.w	r3, r3, #3
 800bc62:	3415      	adds	r4, #21
 800bc64:	3304      	adds	r3, #4
 800bc66:	42a6      	cmp	r6, r4
 800bc68:	bf38      	it	cc
 800bc6a:	2304      	movcc	r3, #4
 800bc6c:	441d      	add	r5, r3
 800bc6e:	445b      	add	r3, fp
 800bc70:	461e      	mov	r6, r3
 800bc72:	462c      	mov	r4, r5
 800bc74:	4544      	cmp	r4, r8
 800bc76:	d30e      	bcc.n	800bc96 <__mdiff+0xf6>
 800bc78:	f108 0103 	add.w	r1, r8, #3
 800bc7c:	1b49      	subs	r1, r1, r5
 800bc7e:	f021 0103 	bic.w	r1, r1, #3
 800bc82:	3d03      	subs	r5, #3
 800bc84:	45a8      	cmp	r8, r5
 800bc86:	bf38      	it	cc
 800bc88:	2100      	movcc	r1, #0
 800bc8a:	440b      	add	r3, r1
 800bc8c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bc90:	b199      	cbz	r1, 800bcba <__mdiff+0x11a>
 800bc92:	6117      	str	r7, [r2, #16]
 800bc94:	e79e      	b.n	800bbd4 <__mdiff+0x34>
 800bc96:	46e6      	mov	lr, ip
 800bc98:	f854 1b04 	ldr.w	r1, [r4], #4
 800bc9c:	fa1f fc81 	uxth.w	ip, r1
 800bca0:	44f4      	add	ip, lr
 800bca2:	0c08      	lsrs	r0, r1, #16
 800bca4:	4471      	add	r1, lr
 800bca6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bcaa:	b289      	uxth	r1, r1
 800bcac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bcb0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bcb4:	f846 1b04 	str.w	r1, [r6], #4
 800bcb8:	e7dc      	b.n	800bc74 <__mdiff+0xd4>
 800bcba:	3f01      	subs	r7, #1
 800bcbc:	e7e6      	b.n	800bc8c <__mdiff+0xec>
 800bcbe:	bf00      	nop
 800bcc0:	0800d470 	.word	0x0800d470
 800bcc4:	0800d481 	.word	0x0800d481

0800bcc8 <__d2b>:
 800bcc8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800bccc:	2101      	movs	r1, #1
 800bcce:	4690      	mov	r8, r2
 800bcd0:	4699      	mov	r9, r3
 800bcd2:	9e08      	ldr	r6, [sp, #32]
 800bcd4:	f7ff fcd6 	bl	800b684 <_Balloc>
 800bcd8:	4604      	mov	r4, r0
 800bcda:	b930      	cbnz	r0, 800bcea <__d2b+0x22>
 800bcdc:	4602      	mov	r2, r0
 800bcde:	f240 310f 	movw	r1, #783	@ 0x30f
 800bce2:	4b23      	ldr	r3, [pc, #140]	@ (800bd70 <__d2b+0xa8>)
 800bce4:	4823      	ldr	r0, [pc, #140]	@ (800bd74 <__d2b+0xac>)
 800bce6:	f000 fdfd 	bl	800c8e4 <__assert_func>
 800bcea:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bcee:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bcf2:	b10d      	cbz	r5, 800bcf8 <__d2b+0x30>
 800bcf4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bcf8:	9301      	str	r3, [sp, #4]
 800bcfa:	f1b8 0300 	subs.w	r3, r8, #0
 800bcfe:	d024      	beq.n	800bd4a <__d2b+0x82>
 800bd00:	4668      	mov	r0, sp
 800bd02:	9300      	str	r3, [sp, #0]
 800bd04:	f7ff fd85 	bl	800b812 <__lo0bits>
 800bd08:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bd0c:	b1d8      	cbz	r0, 800bd46 <__d2b+0x7e>
 800bd0e:	f1c0 0320 	rsb	r3, r0, #32
 800bd12:	fa02 f303 	lsl.w	r3, r2, r3
 800bd16:	430b      	orrs	r3, r1
 800bd18:	40c2      	lsrs	r2, r0
 800bd1a:	6163      	str	r3, [r4, #20]
 800bd1c:	9201      	str	r2, [sp, #4]
 800bd1e:	9b01      	ldr	r3, [sp, #4]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	bf0c      	ite	eq
 800bd24:	2201      	moveq	r2, #1
 800bd26:	2202      	movne	r2, #2
 800bd28:	61a3      	str	r3, [r4, #24]
 800bd2a:	6122      	str	r2, [r4, #16]
 800bd2c:	b1ad      	cbz	r5, 800bd5a <__d2b+0x92>
 800bd2e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bd32:	4405      	add	r5, r0
 800bd34:	6035      	str	r5, [r6, #0]
 800bd36:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bd3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd3c:	6018      	str	r0, [r3, #0]
 800bd3e:	4620      	mov	r0, r4
 800bd40:	b002      	add	sp, #8
 800bd42:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800bd46:	6161      	str	r1, [r4, #20]
 800bd48:	e7e9      	b.n	800bd1e <__d2b+0x56>
 800bd4a:	a801      	add	r0, sp, #4
 800bd4c:	f7ff fd61 	bl	800b812 <__lo0bits>
 800bd50:	9b01      	ldr	r3, [sp, #4]
 800bd52:	2201      	movs	r2, #1
 800bd54:	6163      	str	r3, [r4, #20]
 800bd56:	3020      	adds	r0, #32
 800bd58:	e7e7      	b.n	800bd2a <__d2b+0x62>
 800bd5a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bd5e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bd62:	6030      	str	r0, [r6, #0]
 800bd64:	6918      	ldr	r0, [r3, #16]
 800bd66:	f7ff fd35 	bl	800b7d4 <__hi0bits>
 800bd6a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bd6e:	e7e4      	b.n	800bd3a <__d2b+0x72>
 800bd70:	0800d470 	.word	0x0800d470
 800bd74:	0800d481 	.word	0x0800d481

0800bd78 <__ssputs_r>:
 800bd78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd7c:	461f      	mov	r7, r3
 800bd7e:	688e      	ldr	r6, [r1, #8]
 800bd80:	4682      	mov	sl, r0
 800bd82:	42be      	cmp	r6, r7
 800bd84:	460c      	mov	r4, r1
 800bd86:	4690      	mov	r8, r2
 800bd88:	680b      	ldr	r3, [r1, #0]
 800bd8a:	d82d      	bhi.n	800bde8 <__ssputs_r+0x70>
 800bd8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bd90:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bd94:	d026      	beq.n	800bde4 <__ssputs_r+0x6c>
 800bd96:	6965      	ldr	r5, [r4, #20]
 800bd98:	6909      	ldr	r1, [r1, #16]
 800bd9a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bd9e:	eba3 0901 	sub.w	r9, r3, r1
 800bda2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bda6:	1c7b      	adds	r3, r7, #1
 800bda8:	444b      	add	r3, r9
 800bdaa:	106d      	asrs	r5, r5, #1
 800bdac:	429d      	cmp	r5, r3
 800bdae:	bf38      	it	cc
 800bdb0:	461d      	movcc	r5, r3
 800bdb2:	0553      	lsls	r3, r2, #21
 800bdb4:	d527      	bpl.n	800be06 <__ssputs_r+0x8e>
 800bdb6:	4629      	mov	r1, r5
 800bdb8:	f7ff fbd8 	bl	800b56c <_malloc_r>
 800bdbc:	4606      	mov	r6, r0
 800bdbe:	b360      	cbz	r0, 800be1a <__ssputs_r+0xa2>
 800bdc0:	464a      	mov	r2, r9
 800bdc2:	6921      	ldr	r1, [r4, #16]
 800bdc4:	f7fe fcf3 	bl	800a7ae <memcpy>
 800bdc8:	89a3      	ldrh	r3, [r4, #12]
 800bdca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bdce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bdd2:	81a3      	strh	r3, [r4, #12]
 800bdd4:	6126      	str	r6, [r4, #16]
 800bdd6:	444e      	add	r6, r9
 800bdd8:	6026      	str	r6, [r4, #0]
 800bdda:	463e      	mov	r6, r7
 800bddc:	6165      	str	r5, [r4, #20]
 800bdde:	eba5 0509 	sub.w	r5, r5, r9
 800bde2:	60a5      	str	r5, [r4, #8]
 800bde4:	42be      	cmp	r6, r7
 800bde6:	d900      	bls.n	800bdea <__ssputs_r+0x72>
 800bde8:	463e      	mov	r6, r7
 800bdea:	4632      	mov	r2, r6
 800bdec:	4641      	mov	r1, r8
 800bdee:	6820      	ldr	r0, [r4, #0]
 800bdf0:	f000 fd4d 	bl	800c88e <memmove>
 800bdf4:	2000      	movs	r0, #0
 800bdf6:	68a3      	ldr	r3, [r4, #8]
 800bdf8:	1b9b      	subs	r3, r3, r6
 800bdfa:	60a3      	str	r3, [r4, #8]
 800bdfc:	6823      	ldr	r3, [r4, #0]
 800bdfe:	4433      	add	r3, r6
 800be00:	6023      	str	r3, [r4, #0]
 800be02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be06:	462a      	mov	r2, r5
 800be08:	f000 fdb0 	bl	800c96c <_realloc_r>
 800be0c:	4606      	mov	r6, r0
 800be0e:	2800      	cmp	r0, #0
 800be10:	d1e0      	bne.n	800bdd4 <__ssputs_r+0x5c>
 800be12:	4650      	mov	r0, sl
 800be14:	6921      	ldr	r1, [r4, #16]
 800be16:	f7ff fb37 	bl	800b488 <_free_r>
 800be1a:	230c      	movs	r3, #12
 800be1c:	f8ca 3000 	str.w	r3, [sl]
 800be20:	89a3      	ldrh	r3, [r4, #12]
 800be22:	f04f 30ff 	mov.w	r0, #4294967295
 800be26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be2a:	81a3      	strh	r3, [r4, #12]
 800be2c:	e7e9      	b.n	800be02 <__ssputs_r+0x8a>
	...

0800be30 <_svfiprintf_r>:
 800be30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be34:	4698      	mov	r8, r3
 800be36:	898b      	ldrh	r3, [r1, #12]
 800be38:	4607      	mov	r7, r0
 800be3a:	061b      	lsls	r3, r3, #24
 800be3c:	460d      	mov	r5, r1
 800be3e:	4614      	mov	r4, r2
 800be40:	b09d      	sub	sp, #116	@ 0x74
 800be42:	d510      	bpl.n	800be66 <_svfiprintf_r+0x36>
 800be44:	690b      	ldr	r3, [r1, #16]
 800be46:	b973      	cbnz	r3, 800be66 <_svfiprintf_r+0x36>
 800be48:	2140      	movs	r1, #64	@ 0x40
 800be4a:	f7ff fb8f 	bl	800b56c <_malloc_r>
 800be4e:	6028      	str	r0, [r5, #0]
 800be50:	6128      	str	r0, [r5, #16]
 800be52:	b930      	cbnz	r0, 800be62 <_svfiprintf_r+0x32>
 800be54:	230c      	movs	r3, #12
 800be56:	603b      	str	r3, [r7, #0]
 800be58:	f04f 30ff 	mov.w	r0, #4294967295
 800be5c:	b01d      	add	sp, #116	@ 0x74
 800be5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be62:	2340      	movs	r3, #64	@ 0x40
 800be64:	616b      	str	r3, [r5, #20]
 800be66:	2300      	movs	r3, #0
 800be68:	9309      	str	r3, [sp, #36]	@ 0x24
 800be6a:	2320      	movs	r3, #32
 800be6c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800be70:	2330      	movs	r3, #48	@ 0x30
 800be72:	f04f 0901 	mov.w	r9, #1
 800be76:	f8cd 800c 	str.w	r8, [sp, #12]
 800be7a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800c014 <_svfiprintf_r+0x1e4>
 800be7e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800be82:	4623      	mov	r3, r4
 800be84:	469a      	mov	sl, r3
 800be86:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be8a:	b10a      	cbz	r2, 800be90 <_svfiprintf_r+0x60>
 800be8c:	2a25      	cmp	r2, #37	@ 0x25
 800be8e:	d1f9      	bne.n	800be84 <_svfiprintf_r+0x54>
 800be90:	ebba 0b04 	subs.w	fp, sl, r4
 800be94:	d00b      	beq.n	800beae <_svfiprintf_r+0x7e>
 800be96:	465b      	mov	r3, fp
 800be98:	4622      	mov	r2, r4
 800be9a:	4629      	mov	r1, r5
 800be9c:	4638      	mov	r0, r7
 800be9e:	f7ff ff6b 	bl	800bd78 <__ssputs_r>
 800bea2:	3001      	adds	r0, #1
 800bea4:	f000 80a7 	beq.w	800bff6 <_svfiprintf_r+0x1c6>
 800bea8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800beaa:	445a      	add	r2, fp
 800beac:	9209      	str	r2, [sp, #36]	@ 0x24
 800beae:	f89a 3000 	ldrb.w	r3, [sl]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	f000 809f 	beq.w	800bff6 <_svfiprintf_r+0x1c6>
 800beb8:	2300      	movs	r3, #0
 800beba:	f04f 32ff 	mov.w	r2, #4294967295
 800bebe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bec2:	f10a 0a01 	add.w	sl, sl, #1
 800bec6:	9304      	str	r3, [sp, #16]
 800bec8:	9307      	str	r3, [sp, #28]
 800beca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bece:	931a      	str	r3, [sp, #104]	@ 0x68
 800bed0:	4654      	mov	r4, sl
 800bed2:	2205      	movs	r2, #5
 800bed4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bed8:	484e      	ldr	r0, [pc, #312]	@ (800c014 <_svfiprintf_r+0x1e4>)
 800beda:	f7fe fc5a 	bl	800a792 <memchr>
 800bede:	9a04      	ldr	r2, [sp, #16]
 800bee0:	b9d8      	cbnz	r0, 800bf1a <_svfiprintf_r+0xea>
 800bee2:	06d0      	lsls	r0, r2, #27
 800bee4:	bf44      	itt	mi
 800bee6:	2320      	movmi	r3, #32
 800bee8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800beec:	0711      	lsls	r1, r2, #28
 800beee:	bf44      	itt	mi
 800bef0:	232b      	movmi	r3, #43	@ 0x2b
 800bef2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bef6:	f89a 3000 	ldrb.w	r3, [sl]
 800befa:	2b2a      	cmp	r3, #42	@ 0x2a
 800befc:	d015      	beq.n	800bf2a <_svfiprintf_r+0xfa>
 800befe:	4654      	mov	r4, sl
 800bf00:	2000      	movs	r0, #0
 800bf02:	f04f 0c0a 	mov.w	ip, #10
 800bf06:	9a07      	ldr	r2, [sp, #28]
 800bf08:	4621      	mov	r1, r4
 800bf0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf0e:	3b30      	subs	r3, #48	@ 0x30
 800bf10:	2b09      	cmp	r3, #9
 800bf12:	d94b      	bls.n	800bfac <_svfiprintf_r+0x17c>
 800bf14:	b1b0      	cbz	r0, 800bf44 <_svfiprintf_r+0x114>
 800bf16:	9207      	str	r2, [sp, #28]
 800bf18:	e014      	b.n	800bf44 <_svfiprintf_r+0x114>
 800bf1a:	eba0 0308 	sub.w	r3, r0, r8
 800bf1e:	fa09 f303 	lsl.w	r3, r9, r3
 800bf22:	4313      	orrs	r3, r2
 800bf24:	46a2      	mov	sl, r4
 800bf26:	9304      	str	r3, [sp, #16]
 800bf28:	e7d2      	b.n	800bed0 <_svfiprintf_r+0xa0>
 800bf2a:	9b03      	ldr	r3, [sp, #12]
 800bf2c:	1d19      	adds	r1, r3, #4
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	9103      	str	r1, [sp, #12]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	bfbb      	ittet	lt
 800bf36:	425b      	neglt	r3, r3
 800bf38:	f042 0202 	orrlt.w	r2, r2, #2
 800bf3c:	9307      	strge	r3, [sp, #28]
 800bf3e:	9307      	strlt	r3, [sp, #28]
 800bf40:	bfb8      	it	lt
 800bf42:	9204      	strlt	r2, [sp, #16]
 800bf44:	7823      	ldrb	r3, [r4, #0]
 800bf46:	2b2e      	cmp	r3, #46	@ 0x2e
 800bf48:	d10a      	bne.n	800bf60 <_svfiprintf_r+0x130>
 800bf4a:	7863      	ldrb	r3, [r4, #1]
 800bf4c:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf4e:	d132      	bne.n	800bfb6 <_svfiprintf_r+0x186>
 800bf50:	9b03      	ldr	r3, [sp, #12]
 800bf52:	3402      	adds	r4, #2
 800bf54:	1d1a      	adds	r2, r3, #4
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	9203      	str	r2, [sp, #12]
 800bf5a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bf5e:	9305      	str	r3, [sp, #20]
 800bf60:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800c018 <_svfiprintf_r+0x1e8>
 800bf64:	2203      	movs	r2, #3
 800bf66:	4650      	mov	r0, sl
 800bf68:	7821      	ldrb	r1, [r4, #0]
 800bf6a:	f7fe fc12 	bl	800a792 <memchr>
 800bf6e:	b138      	cbz	r0, 800bf80 <_svfiprintf_r+0x150>
 800bf70:	2240      	movs	r2, #64	@ 0x40
 800bf72:	9b04      	ldr	r3, [sp, #16]
 800bf74:	eba0 000a 	sub.w	r0, r0, sl
 800bf78:	4082      	lsls	r2, r0
 800bf7a:	4313      	orrs	r3, r2
 800bf7c:	3401      	adds	r4, #1
 800bf7e:	9304      	str	r3, [sp, #16]
 800bf80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf84:	2206      	movs	r2, #6
 800bf86:	4825      	ldr	r0, [pc, #148]	@ (800c01c <_svfiprintf_r+0x1ec>)
 800bf88:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bf8c:	f7fe fc01 	bl	800a792 <memchr>
 800bf90:	2800      	cmp	r0, #0
 800bf92:	d036      	beq.n	800c002 <_svfiprintf_r+0x1d2>
 800bf94:	4b22      	ldr	r3, [pc, #136]	@ (800c020 <_svfiprintf_r+0x1f0>)
 800bf96:	bb1b      	cbnz	r3, 800bfe0 <_svfiprintf_r+0x1b0>
 800bf98:	9b03      	ldr	r3, [sp, #12]
 800bf9a:	3307      	adds	r3, #7
 800bf9c:	f023 0307 	bic.w	r3, r3, #7
 800bfa0:	3308      	adds	r3, #8
 800bfa2:	9303      	str	r3, [sp, #12]
 800bfa4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfa6:	4433      	add	r3, r6
 800bfa8:	9309      	str	r3, [sp, #36]	@ 0x24
 800bfaa:	e76a      	b.n	800be82 <_svfiprintf_r+0x52>
 800bfac:	460c      	mov	r4, r1
 800bfae:	2001      	movs	r0, #1
 800bfb0:	fb0c 3202 	mla	r2, ip, r2, r3
 800bfb4:	e7a8      	b.n	800bf08 <_svfiprintf_r+0xd8>
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	f04f 0c0a 	mov.w	ip, #10
 800bfbc:	4619      	mov	r1, r3
 800bfbe:	3401      	adds	r4, #1
 800bfc0:	9305      	str	r3, [sp, #20]
 800bfc2:	4620      	mov	r0, r4
 800bfc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bfc8:	3a30      	subs	r2, #48	@ 0x30
 800bfca:	2a09      	cmp	r2, #9
 800bfcc:	d903      	bls.n	800bfd6 <_svfiprintf_r+0x1a6>
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d0c6      	beq.n	800bf60 <_svfiprintf_r+0x130>
 800bfd2:	9105      	str	r1, [sp, #20]
 800bfd4:	e7c4      	b.n	800bf60 <_svfiprintf_r+0x130>
 800bfd6:	4604      	mov	r4, r0
 800bfd8:	2301      	movs	r3, #1
 800bfda:	fb0c 2101 	mla	r1, ip, r1, r2
 800bfde:	e7f0      	b.n	800bfc2 <_svfiprintf_r+0x192>
 800bfe0:	ab03      	add	r3, sp, #12
 800bfe2:	9300      	str	r3, [sp, #0]
 800bfe4:	462a      	mov	r2, r5
 800bfe6:	4638      	mov	r0, r7
 800bfe8:	4b0e      	ldr	r3, [pc, #56]	@ (800c024 <_svfiprintf_r+0x1f4>)
 800bfea:	a904      	add	r1, sp, #16
 800bfec:	f7fd fde2 	bl	8009bb4 <_printf_float>
 800bff0:	1c42      	adds	r2, r0, #1
 800bff2:	4606      	mov	r6, r0
 800bff4:	d1d6      	bne.n	800bfa4 <_svfiprintf_r+0x174>
 800bff6:	89ab      	ldrh	r3, [r5, #12]
 800bff8:	065b      	lsls	r3, r3, #25
 800bffa:	f53f af2d 	bmi.w	800be58 <_svfiprintf_r+0x28>
 800bffe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c000:	e72c      	b.n	800be5c <_svfiprintf_r+0x2c>
 800c002:	ab03      	add	r3, sp, #12
 800c004:	9300      	str	r3, [sp, #0]
 800c006:	462a      	mov	r2, r5
 800c008:	4638      	mov	r0, r7
 800c00a:	4b06      	ldr	r3, [pc, #24]	@ (800c024 <_svfiprintf_r+0x1f4>)
 800c00c:	a904      	add	r1, sp, #16
 800c00e:	f7fe f86f 	bl	800a0f0 <_printf_i>
 800c012:	e7ed      	b.n	800bff0 <_svfiprintf_r+0x1c0>
 800c014:	0800d4da 	.word	0x0800d4da
 800c018:	0800d4e0 	.word	0x0800d4e0
 800c01c:	0800d4e4 	.word	0x0800d4e4
 800c020:	08009bb5 	.word	0x08009bb5
 800c024:	0800bd79 	.word	0x0800bd79

0800c028 <_sungetc_r>:
 800c028:	b538      	push	{r3, r4, r5, lr}
 800c02a:	1c4b      	adds	r3, r1, #1
 800c02c:	4614      	mov	r4, r2
 800c02e:	d103      	bne.n	800c038 <_sungetc_r+0x10>
 800c030:	f04f 35ff 	mov.w	r5, #4294967295
 800c034:	4628      	mov	r0, r5
 800c036:	bd38      	pop	{r3, r4, r5, pc}
 800c038:	8993      	ldrh	r3, [r2, #12]
 800c03a:	b2cd      	uxtb	r5, r1
 800c03c:	f023 0320 	bic.w	r3, r3, #32
 800c040:	8193      	strh	r3, [r2, #12]
 800c042:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c044:	6852      	ldr	r2, [r2, #4]
 800c046:	b18b      	cbz	r3, 800c06c <_sungetc_r+0x44>
 800c048:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800c04a:	4293      	cmp	r3, r2
 800c04c:	dd08      	ble.n	800c060 <_sungetc_r+0x38>
 800c04e:	6823      	ldr	r3, [r4, #0]
 800c050:	1e5a      	subs	r2, r3, #1
 800c052:	6022      	str	r2, [r4, #0]
 800c054:	f803 5c01 	strb.w	r5, [r3, #-1]
 800c058:	6863      	ldr	r3, [r4, #4]
 800c05a:	3301      	adds	r3, #1
 800c05c:	6063      	str	r3, [r4, #4]
 800c05e:	e7e9      	b.n	800c034 <_sungetc_r+0xc>
 800c060:	4621      	mov	r1, r4
 800c062:	f000 fbdc 	bl	800c81e <__submore>
 800c066:	2800      	cmp	r0, #0
 800c068:	d0f1      	beq.n	800c04e <_sungetc_r+0x26>
 800c06a:	e7e1      	b.n	800c030 <_sungetc_r+0x8>
 800c06c:	6921      	ldr	r1, [r4, #16]
 800c06e:	6823      	ldr	r3, [r4, #0]
 800c070:	b151      	cbz	r1, 800c088 <_sungetc_r+0x60>
 800c072:	4299      	cmp	r1, r3
 800c074:	d208      	bcs.n	800c088 <_sungetc_r+0x60>
 800c076:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800c07a:	42a9      	cmp	r1, r5
 800c07c:	d104      	bne.n	800c088 <_sungetc_r+0x60>
 800c07e:	3b01      	subs	r3, #1
 800c080:	3201      	adds	r2, #1
 800c082:	6023      	str	r3, [r4, #0]
 800c084:	6062      	str	r2, [r4, #4]
 800c086:	e7d5      	b.n	800c034 <_sungetc_r+0xc>
 800c088:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 800c08c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c090:	6363      	str	r3, [r4, #52]	@ 0x34
 800c092:	2303      	movs	r3, #3
 800c094:	63a3      	str	r3, [r4, #56]	@ 0x38
 800c096:	4623      	mov	r3, r4
 800c098:	f803 5f46 	strb.w	r5, [r3, #70]!
 800c09c:	6023      	str	r3, [r4, #0]
 800c09e:	2301      	movs	r3, #1
 800c0a0:	e7dc      	b.n	800c05c <_sungetc_r+0x34>

0800c0a2 <__ssrefill_r>:
 800c0a2:	b510      	push	{r4, lr}
 800c0a4:	460c      	mov	r4, r1
 800c0a6:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800c0a8:	b169      	cbz	r1, 800c0c6 <__ssrefill_r+0x24>
 800c0aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c0ae:	4299      	cmp	r1, r3
 800c0b0:	d001      	beq.n	800c0b6 <__ssrefill_r+0x14>
 800c0b2:	f7ff f9e9 	bl	800b488 <_free_r>
 800c0b6:	2000      	movs	r0, #0
 800c0b8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c0ba:	6360      	str	r0, [r4, #52]	@ 0x34
 800c0bc:	6063      	str	r3, [r4, #4]
 800c0be:	b113      	cbz	r3, 800c0c6 <__ssrefill_r+0x24>
 800c0c0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800c0c2:	6023      	str	r3, [r4, #0]
 800c0c4:	bd10      	pop	{r4, pc}
 800c0c6:	6923      	ldr	r3, [r4, #16]
 800c0c8:	f04f 30ff 	mov.w	r0, #4294967295
 800c0cc:	6023      	str	r3, [r4, #0]
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	6063      	str	r3, [r4, #4]
 800c0d2:	89a3      	ldrh	r3, [r4, #12]
 800c0d4:	f043 0320 	orr.w	r3, r3, #32
 800c0d8:	81a3      	strh	r3, [r4, #12]
 800c0da:	e7f3      	b.n	800c0c4 <__ssrefill_r+0x22>

0800c0dc <__ssvfiscanf_r>:
 800c0dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0e0:	460c      	mov	r4, r1
 800c0e2:	2100      	movs	r1, #0
 800c0e4:	4606      	mov	r6, r0
 800c0e6:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800c0ea:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800c0ee:	49ab      	ldr	r1, [pc, #684]	@ (800c39c <__ssvfiscanf_r+0x2c0>)
 800c0f0:	f10d 0804 	add.w	r8, sp, #4
 800c0f4:	91a0      	str	r1, [sp, #640]	@ 0x280
 800c0f6:	49aa      	ldr	r1, [pc, #680]	@ (800c3a0 <__ssvfiscanf_r+0x2c4>)
 800c0f8:	4faa      	ldr	r7, [pc, #680]	@ (800c3a4 <__ssvfiscanf_r+0x2c8>)
 800c0fa:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800c0fe:	91a1      	str	r1, [sp, #644]	@ 0x284
 800c100:	9300      	str	r3, [sp, #0]
 800c102:	f892 9000 	ldrb.w	r9, [r2]
 800c106:	f1b9 0f00 	cmp.w	r9, #0
 800c10a:	f000 8159 	beq.w	800c3c0 <__ssvfiscanf_r+0x2e4>
 800c10e:	f817 3009 	ldrb.w	r3, [r7, r9]
 800c112:	1c55      	adds	r5, r2, #1
 800c114:	f013 0308 	ands.w	r3, r3, #8
 800c118:	d019      	beq.n	800c14e <__ssvfiscanf_r+0x72>
 800c11a:	6863      	ldr	r3, [r4, #4]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	dd0f      	ble.n	800c140 <__ssvfiscanf_r+0x64>
 800c120:	6823      	ldr	r3, [r4, #0]
 800c122:	781a      	ldrb	r2, [r3, #0]
 800c124:	5cba      	ldrb	r2, [r7, r2]
 800c126:	0712      	lsls	r2, r2, #28
 800c128:	d401      	bmi.n	800c12e <__ssvfiscanf_r+0x52>
 800c12a:	462a      	mov	r2, r5
 800c12c:	e7e9      	b.n	800c102 <__ssvfiscanf_r+0x26>
 800c12e:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800c130:	3301      	adds	r3, #1
 800c132:	3201      	adds	r2, #1
 800c134:	9245      	str	r2, [sp, #276]	@ 0x114
 800c136:	6862      	ldr	r2, [r4, #4]
 800c138:	6023      	str	r3, [r4, #0]
 800c13a:	3a01      	subs	r2, #1
 800c13c:	6062      	str	r2, [r4, #4]
 800c13e:	e7ec      	b.n	800c11a <__ssvfiscanf_r+0x3e>
 800c140:	4621      	mov	r1, r4
 800c142:	4630      	mov	r0, r6
 800c144:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c146:	4798      	blx	r3
 800c148:	2800      	cmp	r0, #0
 800c14a:	d0e9      	beq.n	800c120 <__ssvfiscanf_r+0x44>
 800c14c:	e7ed      	b.n	800c12a <__ssvfiscanf_r+0x4e>
 800c14e:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 800c152:	f040 8086 	bne.w	800c262 <__ssvfiscanf_r+0x186>
 800c156:	9341      	str	r3, [sp, #260]	@ 0x104
 800c158:	9343      	str	r3, [sp, #268]	@ 0x10c
 800c15a:	7853      	ldrb	r3, [r2, #1]
 800c15c:	2b2a      	cmp	r3, #42	@ 0x2a
 800c15e:	bf04      	itt	eq
 800c160:	2310      	moveq	r3, #16
 800c162:	1c95      	addeq	r5, r2, #2
 800c164:	f04f 020a 	mov.w	r2, #10
 800c168:	bf08      	it	eq
 800c16a:	9341      	streq	r3, [sp, #260]	@ 0x104
 800c16c:	46aa      	mov	sl, r5
 800c16e:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800c172:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800c176:	2b09      	cmp	r3, #9
 800c178:	d91e      	bls.n	800c1b8 <__ssvfiscanf_r+0xdc>
 800c17a:	f8df b22c 	ldr.w	fp, [pc, #556]	@ 800c3a8 <__ssvfiscanf_r+0x2cc>
 800c17e:	2203      	movs	r2, #3
 800c180:	4658      	mov	r0, fp
 800c182:	f7fe fb06 	bl	800a792 <memchr>
 800c186:	b138      	cbz	r0, 800c198 <__ssvfiscanf_r+0xbc>
 800c188:	2301      	movs	r3, #1
 800c18a:	4655      	mov	r5, sl
 800c18c:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800c18e:	eba0 000b 	sub.w	r0, r0, fp
 800c192:	4083      	lsls	r3, r0
 800c194:	4313      	orrs	r3, r2
 800c196:	9341      	str	r3, [sp, #260]	@ 0x104
 800c198:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c19c:	2b78      	cmp	r3, #120	@ 0x78
 800c19e:	d806      	bhi.n	800c1ae <__ssvfiscanf_r+0xd2>
 800c1a0:	2b57      	cmp	r3, #87	@ 0x57
 800c1a2:	d810      	bhi.n	800c1c6 <__ssvfiscanf_r+0xea>
 800c1a4:	2b25      	cmp	r3, #37	@ 0x25
 800c1a6:	d05c      	beq.n	800c262 <__ssvfiscanf_r+0x186>
 800c1a8:	d856      	bhi.n	800c258 <__ssvfiscanf_r+0x17c>
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d074      	beq.n	800c298 <__ssvfiscanf_r+0x1bc>
 800c1ae:	2303      	movs	r3, #3
 800c1b0:	9347      	str	r3, [sp, #284]	@ 0x11c
 800c1b2:	230a      	movs	r3, #10
 800c1b4:	9342      	str	r3, [sp, #264]	@ 0x108
 800c1b6:	e087      	b.n	800c2c8 <__ssvfiscanf_r+0x1ec>
 800c1b8:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800c1ba:	4655      	mov	r5, sl
 800c1bc:	fb02 1103 	mla	r1, r2, r3, r1
 800c1c0:	3930      	subs	r1, #48	@ 0x30
 800c1c2:	9143      	str	r1, [sp, #268]	@ 0x10c
 800c1c4:	e7d2      	b.n	800c16c <__ssvfiscanf_r+0x90>
 800c1c6:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800c1ca:	2a20      	cmp	r2, #32
 800c1cc:	d8ef      	bhi.n	800c1ae <__ssvfiscanf_r+0xd2>
 800c1ce:	a101      	add	r1, pc, #4	@ (adr r1, 800c1d4 <__ssvfiscanf_r+0xf8>)
 800c1d0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c1d4:	0800c2a7 	.word	0x0800c2a7
 800c1d8:	0800c1af 	.word	0x0800c1af
 800c1dc:	0800c1af 	.word	0x0800c1af
 800c1e0:	0800c301 	.word	0x0800c301
 800c1e4:	0800c1af 	.word	0x0800c1af
 800c1e8:	0800c1af 	.word	0x0800c1af
 800c1ec:	0800c1af 	.word	0x0800c1af
 800c1f0:	0800c1af 	.word	0x0800c1af
 800c1f4:	0800c1af 	.word	0x0800c1af
 800c1f8:	0800c1af 	.word	0x0800c1af
 800c1fc:	0800c1af 	.word	0x0800c1af
 800c200:	0800c317 	.word	0x0800c317
 800c204:	0800c2fd 	.word	0x0800c2fd
 800c208:	0800c25f 	.word	0x0800c25f
 800c20c:	0800c25f 	.word	0x0800c25f
 800c210:	0800c25f 	.word	0x0800c25f
 800c214:	0800c1af 	.word	0x0800c1af
 800c218:	0800c2b9 	.word	0x0800c2b9
 800c21c:	0800c1af 	.word	0x0800c1af
 800c220:	0800c1af 	.word	0x0800c1af
 800c224:	0800c1af 	.word	0x0800c1af
 800c228:	0800c1af 	.word	0x0800c1af
 800c22c:	0800c327 	.word	0x0800c327
 800c230:	0800c2c1 	.word	0x0800c2c1
 800c234:	0800c29f 	.word	0x0800c29f
 800c238:	0800c1af 	.word	0x0800c1af
 800c23c:	0800c1af 	.word	0x0800c1af
 800c240:	0800c323 	.word	0x0800c323
 800c244:	0800c1af 	.word	0x0800c1af
 800c248:	0800c2fd 	.word	0x0800c2fd
 800c24c:	0800c1af 	.word	0x0800c1af
 800c250:	0800c1af 	.word	0x0800c1af
 800c254:	0800c2a7 	.word	0x0800c2a7
 800c258:	3b45      	subs	r3, #69	@ 0x45
 800c25a:	2b02      	cmp	r3, #2
 800c25c:	d8a7      	bhi.n	800c1ae <__ssvfiscanf_r+0xd2>
 800c25e:	2305      	movs	r3, #5
 800c260:	e031      	b.n	800c2c6 <__ssvfiscanf_r+0x1ea>
 800c262:	6863      	ldr	r3, [r4, #4]
 800c264:	2b00      	cmp	r3, #0
 800c266:	dd0d      	ble.n	800c284 <__ssvfiscanf_r+0x1a8>
 800c268:	6823      	ldr	r3, [r4, #0]
 800c26a:	781a      	ldrb	r2, [r3, #0]
 800c26c:	454a      	cmp	r2, r9
 800c26e:	f040 80a7 	bne.w	800c3c0 <__ssvfiscanf_r+0x2e4>
 800c272:	3301      	adds	r3, #1
 800c274:	6862      	ldr	r2, [r4, #4]
 800c276:	6023      	str	r3, [r4, #0]
 800c278:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800c27a:	3a01      	subs	r2, #1
 800c27c:	3301      	adds	r3, #1
 800c27e:	6062      	str	r2, [r4, #4]
 800c280:	9345      	str	r3, [sp, #276]	@ 0x114
 800c282:	e752      	b.n	800c12a <__ssvfiscanf_r+0x4e>
 800c284:	4621      	mov	r1, r4
 800c286:	4630      	mov	r0, r6
 800c288:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c28a:	4798      	blx	r3
 800c28c:	2800      	cmp	r0, #0
 800c28e:	d0eb      	beq.n	800c268 <__ssvfiscanf_r+0x18c>
 800c290:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800c292:	2800      	cmp	r0, #0
 800c294:	f040 808c 	bne.w	800c3b0 <__ssvfiscanf_r+0x2d4>
 800c298:	f04f 30ff 	mov.w	r0, #4294967295
 800c29c:	e08c      	b.n	800c3b8 <__ssvfiscanf_r+0x2dc>
 800c29e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800c2a0:	f042 0220 	orr.w	r2, r2, #32
 800c2a4:	9241      	str	r2, [sp, #260]	@ 0x104
 800c2a6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800c2a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c2ac:	9241      	str	r2, [sp, #260]	@ 0x104
 800c2ae:	2210      	movs	r2, #16
 800c2b0:	2b6e      	cmp	r3, #110	@ 0x6e
 800c2b2:	9242      	str	r2, [sp, #264]	@ 0x108
 800c2b4:	d902      	bls.n	800c2bc <__ssvfiscanf_r+0x1e0>
 800c2b6:	e005      	b.n	800c2c4 <__ssvfiscanf_r+0x1e8>
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	9342      	str	r3, [sp, #264]	@ 0x108
 800c2bc:	2303      	movs	r3, #3
 800c2be:	e002      	b.n	800c2c6 <__ssvfiscanf_r+0x1ea>
 800c2c0:	2308      	movs	r3, #8
 800c2c2:	9342      	str	r3, [sp, #264]	@ 0x108
 800c2c4:	2304      	movs	r3, #4
 800c2c6:	9347      	str	r3, [sp, #284]	@ 0x11c
 800c2c8:	6863      	ldr	r3, [r4, #4]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	dd39      	ble.n	800c342 <__ssvfiscanf_r+0x266>
 800c2ce:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800c2d0:	0659      	lsls	r1, r3, #25
 800c2d2:	d404      	bmi.n	800c2de <__ssvfiscanf_r+0x202>
 800c2d4:	6823      	ldr	r3, [r4, #0]
 800c2d6:	781a      	ldrb	r2, [r3, #0]
 800c2d8:	5cba      	ldrb	r2, [r7, r2]
 800c2da:	0712      	lsls	r2, r2, #28
 800c2dc:	d438      	bmi.n	800c350 <__ssvfiscanf_r+0x274>
 800c2de:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800c2e0:	2b02      	cmp	r3, #2
 800c2e2:	dc47      	bgt.n	800c374 <__ssvfiscanf_r+0x298>
 800c2e4:	466b      	mov	r3, sp
 800c2e6:	4622      	mov	r2, r4
 800c2e8:	4630      	mov	r0, r6
 800c2ea:	a941      	add	r1, sp, #260	@ 0x104
 800c2ec:	f000 f86a 	bl	800c3c4 <_scanf_chars>
 800c2f0:	2801      	cmp	r0, #1
 800c2f2:	d065      	beq.n	800c3c0 <__ssvfiscanf_r+0x2e4>
 800c2f4:	2802      	cmp	r0, #2
 800c2f6:	f47f af18 	bne.w	800c12a <__ssvfiscanf_r+0x4e>
 800c2fa:	e7c9      	b.n	800c290 <__ssvfiscanf_r+0x1b4>
 800c2fc:	220a      	movs	r2, #10
 800c2fe:	e7d7      	b.n	800c2b0 <__ssvfiscanf_r+0x1d4>
 800c300:	4629      	mov	r1, r5
 800c302:	4640      	mov	r0, r8
 800c304:	f000 fa52 	bl	800c7ac <__sccl>
 800c308:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800c30a:	4605      	mov	r5, r0
 800c30c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c310:	9341      	str	r3, [sp, #260]	@ 0x104
 800c312:	2301      	movs	r3, #1
 800c314:	e7d7      	b.n	800c2c6 <__ssvfiscanf_r+0x1ea>
 800c316:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800c318:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c31c:	9341      	str	r3, [sp, #260]	@ 0x104
 800c31e:	2300      	movs	r3, #0
 800c320:	e7d1      	b.n	800c2c6 <__ssvfiscanf_r+0x1ea>
 800c322:	2302      	movs	r3, #2
 800c324:	e7cf      	b.n	800c2c6 <__ssvfiscanf_r+0x1ea>
 800c326:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800c328:	06c3      	lsls	r3, r0, #27
 800c32a:	f53f aefe 	bmi.w	800c12a <__ssvfiscanf_r+0x4e>
 800c32e:	9b00      	ldr	r3, [sp, #0]
 800c330:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800c332:	1d19      	adds	r1, r3, #4
 800c334:	9100      	str	r1, [sp, #0]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	07c0      	lsls	r0, r0, #31
 800c33a:	bf4c      	ite	mi
 800c33c:	801a      	strhmi	r2, [r3, #0]
 800c33e:	601a      	strpl	r2, [r3, #0]
 800c340:	e6f3      	b.n	800c12a <__ssvfiscanf_r+0x4e>
 800c342:	4621      	mov	r1, r4
 800c344:	4630      	mov	r0, r6
 800c346:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c348:	4798      	blx	r3
 800c34a:	2800      	cmp	r0, #0
 800c34c:	d0bf      	beq.n	800c2ce <__ssvfiscanf_r+0x1f2>
 800c34e:	e79f      	b.n	800c290 <__ssvfiscanf_r+0x1b4>
 800c350:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800c352:	3201      	adds	r2, #1
 800c354:	9245      	str	r2, [sp, #276]	@ 0x114
 800c356:	6862      	ldr	r2, [r4, #4]
 800c358:	3a01      	subs	r2, #1
 800c35a:	2a00      	cmp	r2, #0
 800c35c:	6062      	str	r2, [r4, #4]
 800c35e:	dd02      	ble.n	800c366 <__ssvfiscanf_r+0x28a>
 800c360:	3301      	adds	r3, #1
 800c362:	6023      	str	r3, [r4, #0]
 800c364:	e7b6      	b.n	800c2d4 <__ssvfiscanf_r+0x1f8>
 800c366:	4621      	mov	r1, r4
 800c368:	4630      	mov	r0, r6
 800c36a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c36c:	4798      	blx	r3
 800c36e:	2800      	cmp	r0, #0
 800c370:	d0b0      	beq.n	800c2d4 <__ssvfiscanf_r+0x1f8>
 800c372:	e78d      	b.n	800c290 <__ssvfiscanf_r+0x1b4>
 800c374:	2b04      	cmp	r3, #4
 800c376:	dc06      	bgt.n	800c386 <__ssvfiscanf_r+0x2aa>
 800c378:	466b      	mov	r3, sp
 800c37a:	4622      	mov	r2, r4
 800c37c:	4630      	mov	r0, r6
 800c37e:	a941      	add	r1, sp, #260	@ 0x104
 800c380:	f000 f87a 	bl	800c478 <_scanf_i>
 800c384:	e7b4      	b.n	800c2f0 <__ssvfiscanf_r+0x214>
 800c386:	4b09      	ldr	r3, [pc, #36]	@ (800c3ac <__ssvfiscanf_r+0x2d0>)
 800c388:	2b00      	cmp	r3, #0
 800c38a:	f43f aece 	beq.w	800c12a <__ssvfiscanf_r+0x4e>
 800c38e:	466b      	mov	r3, sp
 800c390:	4622      	mov	r2, r4
 800c392:	4630      	mov	r0, r6
 800c394:	a941      	add	r1, sp, #260	@ 0x104
 800c396:	f3af 8000 	nop.w
 800c39a:	e7a9      	b.n	800c2f0 <__ssvfiscanf_r+0x214>
 800c39c:	0800c029 	.word	0x0800c029
 800c3a0:	0800c0a3 	.word	0x0800c0a3
 800c3a4:	0800d649 	.word	0x0800d649
 800c3a8:	0800d4e0 	.word	0x0800d4e0
 800c3ac:	00000000 	.word	0x00000000
 800c3b0:	89a3      	ldrh	r3, [r4, #12]
 800c3b2:	065b      	lsls	r3, r3, #25
 800c3b4:	f53f af70 	bmi.w	800c298 <__ssvfiscanf_r+0x1bc>
 800c3b8:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 800c3bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3c0:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800c3c2:	e7f9      	b.n	800c3b8 <__ssvfiscanf_r+0x2dc>

0800c3c4 <_scanf_chars>:
 800c3c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3c8:	4615      	mov	r5, r2
 800c3ca:	688a      	ldr	r2, [r1, #8]
 800c3cc:	4680      	mov	r8, r0
 800c3ce:	460c      	mov	r4, r1
 800c3d0:	b932      	cbnz	r2, 800c3e0 <_scanf_chars+0x1c>
 800c3d2:	698a      	ldr	r2, [r1, #24]
 800c3d4:	2a00      	cmp	r2, #0
 800c3d6:	bf14      	ite	ne
 800c3d8:	f04f 32ff 	movne.w	r2, #4294967295
 800c3dc:	2201      	moveq	r2, #1
 800c3de:	608a      	str	r2, [r1, #8]
 800c3e0:	2700      	movs	r7, #0
 800c3e2:	6822      	ldr	r2, [r4, #0]
 800c3e4:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 800c474 <_scanf_chars+0xb0>
 800c3e8:	06d1      	lsls	r1, r2, #27
 800c3ea:	bf5f      	itttt	pl
 800c3ec:	681a      	ldrpl	r2, [r3, #0]
 800c3ee:	1d11      	addpl	r1, r2, #4
 800c3f0:	6019      	strpl	r1, [r3, #0]
 800c3f2:	6816      	ldrpl	r6, [r2, #0]
 800c3f4:	69a0      	ldr	r0, [r4, #24]
 800c3f6:	b188      	cbz	r0, 800c41c <_scanf_chars+0x58>
 800c3f8:	2801      	cmp	r0, #1
 800c3fa:	d107      	bne.n	800c40c <_scanf_chars+0x48>
 800c3fc:	682b      	ldr	r3, [r5, #0]
 800c3fe:	781a      	ldrb	r2, [r3, #0]
 800c400:	6963      	ldr	r3, [r4, #20]
 800c402:	5c9b      	ldrb	r3, [r3, r2]
 800c404:	b953      	cbnz	r3, 800c41c <_scanf_chars+0x58>
 800c406:	2f00      	cmp	r7, #0
 800c408:	d031      	beq.n	800c46e <_scanf_chars+0xaa>
 800c40a:	e022      	b.n	800c452 <_scanf_chars+0x8e>
 800c40c:	2802      	cmp	r0, #2
 800c40e:	d120      	bne.n	800c452 <_scanf_chars+0x8e>
 800c410:	682b      	ldr	r3, [r5, #0]
 800c412:	781b      	ldrb	r3, [r3, #0]
 800c414:	f819 3003 	ldrb.w	r3, [r9, r3]
 800c418:	071b      	lsls	r3, r3, #28
 800c41a:	d41a      	bmi.n	800c452 <_scanf_chars+0x8e>
 800c41c:	6823      	ldr	r3, [r4, #0]
 800c41e:	3701      	adds	r7, #1
 800c420:	06da      	lsls	r2, r3, #27
 800c422:	bf5e      	ittt	pl
 800c424:	682b      	ldrpl	r3, [r5, #0]
 800c426:	781b      	ldrbpl	r3, [r3, #0]
 800c428:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c42c:	682a      	ldr	r2, [r5, #0]
 800c42e:	686b      	ldr	r3, [r5, #4]
 800c430:	3201      	adds	r2, #1
 800c432:	602a      	str	r2, [r5, #0]
 800c434:	68a2      	ldr	r2, [r4, #8]
 800c436:	3b01      	subs	r3, #1
 800c438:	3a01      	subs	r2, #1
 800c43a:	606b      	str	r3, [r5, #4]
 800c43c:	60a2      	str	r2, [r4, #8]
 800c43e:	b142      	cbz	r2, 800c452 <_scanf_chars+0x8e>
 800c440:	2b00      	cmp	r3, #0
 800c442:	dcd7      	bgt.n	800c3f4 <_scanf_chars+0x30>
 800c444:	4629      	mov	r1, r5
 800c446:	4640      	mov	r0, r8
 800c448:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c44c:	4798      	blx	r3
 800c44e:	2800      	cmp	r0, #0
 800c450:	d0d0      	beq.n	800c3f4 <_scanf_chars+0x30>
 800c452:	6823      	ldr	r3, [r4, #0]
 800c454:	f013 0310 	ands.w	r3, r3, #16
 800c458:	d105      	bne.n	800c466 <_scanf_chars+0xa2>
 800c45a:	68e2      	ldr	r2, [r4, #12]
 800c45c:	3201      	adds	r2, #1
 800c45e:	60e2      	str	r2, [r4, #12]
 800c460:	69a2      	ldr	r2, [r4, #24]
 800c462:	b102      	cbz	r2, 800c466 <_scanf_chars+0xa2>
 800c464:	7033      	strb	r3, [r6, #0]
 800c466:	2000      	movs	r0, #0
 800c468:	6923      	ldr	r3, [r4, #16]
 800c46a:	443b      	add	r3, r7
 800c46c:	6123      	str	r3, [r4, #16]
 800c46e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c472:	bf00      	nop
 800c474:	0800d649 	.word	0x0800d649

0800c478 <_scanf_i>:
 800c478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c47c:	460c      	mov	r4, r1
 800c47e:	4698      	mov	r8, r3
 800c480:	4b72      	ldr	r3, [pc, #456]	@ (800c64c <_scanf_i+0x1d4>)
 800c482:	b087      	sub	sp, #28
 800c484:	4682      	mov	sl, r0
 800c486:	4616      	mov	r6, r2
 800c488:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c48c:	ab03      	add	r3, sp, #12
 800c48e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c492:	4b6f      	ldr	r3, [pc, #444]	@ (800c650 <_scanf_i+0x1d8>)
 800c494:	69a1      	ldr	r1, [r4, #24]
 800c496:	4a6f      	ldr	r2, [pc, #444]	@ (800c654 <_scanf_i+0x1dc>)
 800c498:	4627      	mov	r7, r4
 800c49a:	2903      	cmp	r1, #3
 800c49c:	bf08      	it	eq
 800c49e:	461a      	moveq	r2, r3
 800c4a0:	68a3      	ldr	r3, [r4, #8]
 800c4a2:	9201      	str	r2, [sp, #4]
 800c4a4:	1e5a      	subs	r2, r3, #1
 800c4a6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800c4aa:	bf81      	itttt	hi
 800c4ac:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800c4b0:	eb03 0905 	addhi.w	r9, r3, r5
 800c4b4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800c4b8:	60a3      	strhi	r3, [r4, #8]
 800c4ba:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c4be:	bf98      	it	ls
 800c4c0:	f04f 0900 	movls.w	r9, #0
 800c4c4:	463d      	mov	r5, r7
 800c4c6:	f04f 0b00 	mov.w	fp, #0
 800c4ca:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800c4ce:	6023      	str	r3, [r4, #0]
 800c4d0:	6831      	ldr	r1, [r6, #0]
 800c4d2:	ab03      	add	r3, sp, #12
 800c4d4:	2202      	movs	r2, #2
 800c4d6:	7809      	ldrb	r1, [r1, #0]
 800c4d8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c4dc:	f7fe f959 	bl	800a792 <memchr>
 800c4e0:	b328      	cbz	r0, 800c52e <_scanf_i+0xb6>
 800c4e2:	f1bb 0f01 	cmp.w	fp, #1
 800c4e6:	d159      	bne.n	800c59c <_scanf_i+0x124>
 800c4e8:	6862      	ldr	r2, [r4, #4]
 800c4ea:	b92a      	cbnz	r2, 800c4f8 <_scanf_i+0x80>
 800c4ec:	2108      	movs	r1, #8
 800c4ee:	6822      	ldr	r2, [r4, #0]
 800c4f0:	6061      	str	r1, [r4, #4]
 800c4f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c4f6:	6022      	str	r2, [r4, #0]
 800c4f8:	6822      	ldr	r2, [r4, #0]
 800c4fa:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800c4fe:	6022      	str	r2, [r4, #0]
 800c500:	68a2      	ldr	r2, [r4, #8]
 800c502:	1e51      	subs	r1, r2, #1
 800c504:	60a1      	str	r1, [r4, #8]
 800c506:	b192      	cbz	r2, 800c52e <_scanf_i+0xb6>
 800c508:	6832      	ldr	r2, [r6, #0]
 800c50a:	1c51      	adds	r1, r2, #1
 800c50c:	6031      	str	r1, [r6, #0]
 800c50e:	7812      	ldrb	r2, [r2, #0]
 800c510:	f805 2b01 	strb.w	r2, [r5], #1
 800c514:	6872      	ldr	r2, [r6, #4]
 800c516:	3a01      	subs	r2, #1
 800c518:	2a00      	cmp	r2, #0
 800c51a:	6072      	str	r2, [r6, #4]
 800c51c:	dc07      	bgt.n	800c52e <_scanf_i+0xb6>
 800c51e:	4631      	mov	r1, r6
 800c520:	4650      	mov	r0, sl
 800c522:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800c526:	4790      	blx	r2
 800c528:	2800      	cmp	r0, #0
 800c52a:	f040 8085 	bne.w	800c638 <_scanf_i+0x1c0>
 800c52e:	f10b 0b01 	add.w	fp, fp, #1
 800c532:	f1bb 0f03 	cmp.w	fp, #3
 800c536:	d1cb      	bne.n	800c4d0 <_scanf_i+0x58>
 800c538:	6863      	ldr	r3, [r4, #4]
 800c53a:	b90b      	cbnz	r3, 800c540 <_scanf_i+0xc8>
 800c53c:	230a      	movs	r3, #10
 800c53e:	6063      	str	r3, [r4, #4]
 800c540:	6863      	ldr	r3, [r4, #4]
 800c542:	4945      	ldr	r1, [pc, #276]	@ (800c658 <_scanf_i+0x1e0>)
 800c544:	6960      	ldr	r0, [r4, #20]
 800c546:	1ac9      	subs	r1, r1, r3
 800c548:	f000 f930 	bl	800c7ac <__sccl>
 800c54c:	f04f 0b00 	mov.w	fp, #0
 800c550:	68a3      	ldr	r3, [r4, #8]
 800c552:	6822      	ldr	r2, [r4, #0]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d03d      	beq.n	800c5d4 <_scanf_i+0x15c>
 800c558:	6831      	ldr	r1, [r6, #0]
 800c55a:	6960      	ldr	r0, [r4, #20]
 800c55c:	f891 c000 	ldrb.w	ip, [r1]
 800c560:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c564:	2800      	cmp	r0, #0
 800c566:	d035      	beq.n	800c5d4 <_scanf_i+0x15c>
 800c568:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800c56c:	d124      	bne.n	800c5b8 <_scanf_i+0x140>
 800c56e:	0510      	lsls	r0, r2, #20
 800c570:	d522      	bpl.n	800c5b8 <_scanf_i+0x140>
 800c572:	f10b 0b01 	add.w	fp, fp, #1
 800c576:	f1b9 0f00 	cmp.w	r9, #0
 800c57a:	d003      	beq.n	800c584 <_scanf_i+0x10c>
 800c57c:	3301      	adds	r3, #1
 800c57e:	f109 39ff 	add.w	r9, r9, #4294967295
 800c582:	60a3      	str	r3, [r4, #8]
 800c584:	6873      	ldr	r3, [r6, #4]
 800c586:	3b01      	subs	r3, #1
 800c588:	2b00      	cmp	r3, #0
 800c58a:	6073      	str	r3, [r6, #4]
 800c58c:	dd1b      	ble.n	800c5c6 <_scanf_i+0x14e>
 800c58e:	6833      	ldr	r3, [r6, #0]
 800c590:	3301      	adds	r3, #1
 800c592:	6033      	str	r3, [r6, #0]
 800c594:	68a3      	ldr	r3, [r4, #8]
 800c596:	3b01      	subs	r3, #1
 800c598:	60a3      	str	r3, [r4, #8]
 800c59a:	e7d9      	b.n	800c550 <_scanf_i+0xd8>
 800c59c:	f1bb 0f02 	cmp.w	fp, #2
 800c5a0:	d1ae      	bne.n	800c500 <_scanf_i+0x88>
 800c5a2:	6822      	ldr	r2, [r4, #0]
 800c5a4:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800c5a8:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800c5ac:	d1c4      	bne.n	800c538 <_scanf_i+0xc0>
 800c5ae:	2110      	movs	r1, #16
 800c5b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c5b4:	6061      	str	r1, [r4, #4]
 800c5b6:	e7a2      	b.n	800c4fe <_scanf_i+0x86>
 800c5b8:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800c5bc:	6022      	str	r2, [r4, #0]
 800c5be:	780b      	ldrb	r3, [r1, #0]
 800c5c0:	f805 3b01 	strb.w	r3, [r5], #1
 800c5c4:	e7de      	b.n	800c584 <_scanf_i+0x10c>
 800c5c6:	4631      	mov	r1, r6
 800c5c8:	4650      	mov	r0, sl
 800c5ca:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c5ce:	4798      	blx	r3
 800c5d0:	2800      	cmp	r0, #0
 800c5d2:	d0df      	beq.n	800c594 <_scanf_i+0x11c>
 800c5d4:	6823      	ldr	r3, [r4, #0]
 800c5d6:	05d9      	lsls	r1, r3, #23
 800c5d8:	d50d      	bpl.n	800c5f6 <_scanf_i+0x17e>
 800c5da:	42bd      	cmp	r5, r7
 800c5dc:	d909      	bls.n	800c5f2 <_scanf_i+0x17a>
 800c5de:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c5e2:	4632      	mov	r2, r6
 800c5e4:	4650      	mov	r0, sl
 800c5e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c5ea:	f105 39ff 	add.w	r9, r5, #4294967295
 800c5ee:	4798      	blx	r3
 800c5f0:	464d      	mov	r5, r9
 800c5f2:	42bd      	cmp	r5, r7
 800c5f4:	d028      	beq.n	800c648 <_scanf_i+0x1d0>
 800c5f6:	6822      	ldr	r2, [r4, #0]
 800c5f8:	f012 0210 	ands.w	r2, r2, #16
 800c5fc:	d113      	bne.n	800c626 <_scanf_i+0x1ae>
 800c5fe:	702a      	strb	r2, [r5, #0]
 800c600:	4639      	mov	r1, r7
 800c602:	6863      	ldr	r3, [r4, #4]
 800c604:	4650      	mov	r0, sl
 800c606:	9e01      	ldr	r6, [sp, #4]
 800c608:	47b0      	blx	r6
 800c60a:	f8d8 3000 	ldr.w	r3, [r8]
 800c60e:	6821      	ldr	r1, [r4, #0]
 800c610:	1d1a      	adds	r2, r3, #4
 800c612:	f8c8 2000 	str.w	r2, [r8]
 800c616:	f011 0f20 	tst.w	r1, #32
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	d00f      	beq.n	800c63e <_scanf_i+0x1c6>
 800c61e:	6018      	str	r0, [r3, #0]
 800c620:	68e3      	ldr	r3, [r4, #12]
 800c622:	3301      	adds	r3, #1
 800c624:	60e3      	str	r3, [r4, #12]
 800c626:	2000      	movs	r0, #0
 800c628:	6923      	ldr	r3, [r4, #16]
 800c62a:	1bed      	subs	r5, r5, r7
 800c62c:	445d      	add	r5, fp
 800c62e:	442b      	add	r3, r5
 800c630:	6123      	str	r3, [r4, #16]
 800c632:	b007      	add	sp, #28
 800c634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c638:	f04f 0b00 	mov.w	fp, #0
 800c63c:	e7ca      	b.n	800c5d4 <_scanf_i+0x15c>
 800c63e:	07ca      	lsls	r2, r1, #31
 800c640:	bf4c      	ite	mi
 800c642:	8018      	strhmi	r0, [r3, #0]
 800c644:	6018      	strpl	r0, [r3, #0]
 800c646:	e7eb      	b.n	800c620 <_scanf_i+0x1a8>
 800c648:	2001      	movs	r0, #1
 800c64a:	e7f2      	b.n	800c632 <_scanf_i+0x1ba>
 800c64c:	0800d2a8 	.word	0x0800d2a8
 800c650:	0800cabd 	.word	0x0800cabd
 800c654:	0800cb9d 	.word	0x0800cb9d
 800c658:	0800d4fb 	.word	0x0800d4fb

0800c65c <__sflush_r>:
 800c65c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c662:	0716      	lsls	r6, r2, #28
 800c664:	4605      	mov	r5, r0
 800c666:	460c      	mov	r4, r1
 800c668:	d454      	bmi.n	800c714 <__sflush_r+0xb8>
 800c66a:	684b      	ldr	r3, [r1, #4]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	dc02      	bgt.n	800c676 <__sflush_r+0x1a>
 800c670:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c672:	2b00      	cmp	r3, #0
 800c674:	dd48      	ble.n	800c708 <__sflush_r+0xac>
 800c676:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c678:	2e00      	cmp	r6, #0
 800c67a:	d045      	beq.n	800c708 <__sflush_r+0xac>
 800c67c:	2300      	movs	r3, #0
 800c67e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c682:	682f      	ldr	r7, [r5, #0]
 800c684:	6a21      	ldr	r1, [r4, #32]
 800c686:	602b      	str	r3, [r5, #0]
 800c688:	d030      	beq.n	800c6ec <__sflush_r+0x90>
 800c68a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c68c:	89a3      	ldrh	r3, [r4, #12]
 800c68e:	0759      	lsls	r1, r3, #29
 800c690:	d505      	bpl.n	800c69e <__sflush_r+0x42>
 800c692:	6863      	ldr	r3, [r4, #4]
 800c694:	1ad2      	subs	r2, r2, r3
 800c696:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c698:	b10b      	cbz	r3, 800c69e <__sflush_r+0x42>
 800c69a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c69c:	1ad2      	subs	r2, r2, r3
 800c69e:	2300      	movs	r3, #0
 800c6a0:	4628      	mov	r0, r5
 800c6a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c6a4:	6a21      	ldr	r1, [r4, #32]
 800c6a6:	47b0      	blx	r6
 800c6a8:	1c43      	adds	r3, r0, #1
 800c6aa:	89a3      	ldrh	r3, [r4, #12]
 800c6ac:	d106      	bne.n	800c6bc <__sflush_r+0x60>
 800c6ae:	6829      	ldr	r1, [r5, #0]
 800c6b0:	291d      	cmp	r1, #29
 800c6b2:	d82b      	bhi.n	800c70c <__sflush_r+0xb0>
 800c6b4:	4a28      	ldr	r2, [pc, #160]	@ (800c758 <__sflush_r+0xfc>)
 800c6b6:	40ca      	lsrs	r2, r1
 800c6b8:	07d6      	lsls	r6, r2, #31
 800c6ba:	d527      	bpl.n	800c70c <__sflush_r+0xb0>
 800c6bc:	2200      	movs	r2, #0
 800c6be:	6062      	str	r2, [r4, #4]
 800c6c0:	6922      	ldr	r2, [r4, #16]
 800c6c2:	04d9      	lsls	r1, r3, #19
 800c6c4:	6022      	str	r2, [r4, #0]
 800c6c6:	d504      	bpl.n	800c6d2 <__sflush_r+0x76>
 800c6c8:	1c42      	adds	r2, r0, #1
 800c6ca:	d101      	bne.n	800c6d0 <__sflush_r+0x74>
 800c6cc:	682b      	ldr	r3, [r5, #0]
 800c6ce:	b903      	cbnz	r3, 800c6d2 <__sflush_r+0x76>
 800c6d0:	6560      	str	r0, [r4, #84]	@ 0x54
 800c6d2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c6d4:	602f      	str	r7, [r5, #0]
 800c6d6:	b1b9      	cbz	r1, 800c708 <__sflush_r+0xac>
 800c6d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c6dc:	4299      	cmp	r1, r3
 800c6de:	d002      	beq.n	800c6e6 <__sflush_r+0x8a>
 800c6e0:	4628      	mov	r0, r5
 800c6e2:	f7fe fed1 	bl	800b488 <_free_r>
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	6363      	str	r3, [r4, #52]	@ 0x34
 800c6ea:	e00d      	b.n	800c708 <__sflush_r+0xac>
 800c6ec:	2301      	movs	r3, #1
 800c6ee:	4628      	mov	r0, r5
 800c6f0:	47b0      	blx	r6
 800c6f2:	4602      	mov	r2, r0
 800c6f4:	1c50      	adds	r0, r2, #1
 800c6f6:	d1c9      	bne.n	800c68c <__sflush_r+0x30>
 800c6f8:	682b      	ldr	r3, [r5, #0]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d0c6      	beq.n	800c68c <__sflush_r+0x30>
 800c6fe:	2b1d      	cmp	r3, #29
 800c700:	d001      	beq.n	800c706 <__sflush_r+0xaa>
 800c702:	2b16      	cmp	r3, #22
 800c704:	d11d      	bne.n	800c742 <__sflush_r+0xe6>
 800c706:	602f      	str	r7, [r5, #0]
 800c708:	2000      	movs	r0, #0
 800c70a:	e021      	b.n	800c750 <__sflush_r+0xf4>
 800c70c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c710:	b21b      	sxth	r3, r3
 800c712:	e01a      	b.n	800c74a <__sflush_r+0xee>
 800c714:	690f      	ldr	r7, [r1, #16]
 800c716:	2f00      	cmp	r7, #0
 800c718:	d0f6      	beq.n	800c708 <__sflush_r+0xac>
 800c71a:	0793      	lsls	r3, r2, #30
 800c71c:	bf18      	it	ne
 800c71e:	2300      	movne	r3, #0
 800c720:	680e      	ldr	r6, [r1, #0]
 800c722:	bf08      	it	eq
 800c724:	694b      	ldreq	r3, [r1, #20]
 800c726:	1bf6      	subs	r6, r6, r7
 800c728:	600f      	str	r7, [r1, #0]
 800c72a:	608b      	str	r3, [r1, #8]
 800c72c:	2e00      	cmp	r6, #0
 800c72e:	ddeb      	ble.n	800c708 <__sflush_r+0xac>
 800c730:	4633      	mov	r3, r6
 800c732:	463a      	mov	r2, r7
 800c734:	4628      	mov	r0, r5
 800c736:	6a21      	ldr	r1, [r4, #32]
 800c738:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800c73c:	47e0      	blx	ip
 800c73e:	2800      	cmp	r0, #0
 800c740:	dc07      	bgt.n	800c752 <__sflush_r+0xf6>
 800c742:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c746:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c74a:	f04f 30ff 	mov.w	r0, #4294967295
 800c74e:	81a3      	strh	r3, [r4, #12]
 800c750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c752:	4407      	add	r7, r0
 800c754:	1a36      	subs	r6, r6, r0
 800c756:	e7e9      	b.n	800c72c <__sflush_r+0xd0>
 800c758:	20400001 	.word	0x20400001

0800c75c <_fflush_r>:
 800c75c:	b538      	push	{r3, r4, r5, lr}
 800c75e:	690b      	ldr	r3, [r1, #16]
 800c760:	4605      	mov	r5, r0
 800c762:	460c      	mov	r4, r1
 800c764:	b913      	cbnz	r3, 800c76c <_fflush_r+0x10>
 800c766:	2500      	movs	r5, #0
 800c768:	4628      	mov	r0, r5
 800c76a:	bd38      	pop	{r3, r4, r5, pc}
 800c76c:	b118      	cbz	r0, 800c776 <_fflush_r+0x1a>
 800c76e:	6a03      	ldr	r3, [r0, #32]
 800c770:	b90b      	cbnz	r3, 800c776 <_fflush_r+0x1a>
 800c772:	f7fd fe67 	bl	800a444 <__sinit>
 800c776:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d0f3      	beq.n	800c766 <_fflush_r+0xa>
 800c77e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c780:	07d0      	lsls	r0, r2, #31
 800c782:	d404      	bmi.n	800c78e <_fflush_r+0x32>
 800c784:	0599      	lsls	r1, r3, #22
 800c786:	d402      	bmi.n	800c78e <_fflush_r+0x32>
 800c788:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c78a:	f7fe f800 	bl	800a78e <__retarget_lock_acquire_recursive>
 800c78e:	4628      	mov	r0, r5
 800c790:	4621      	mov	r1, r4
 800c792:	f7ff ff63 	bl	800c65c <__sflush_r>
 800c796:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c798:	4605      	mov	r5, r0
 800c79a:	07da      	lsls	r2, r3, #31
 800c79c:	d4e4      	bmi.n	800c768 <_fflush_r+0xc>
 800c79e:	89a3      	ldrh	r3, [r4, #12]
 800c7a0:	059b      	lsls	r3, r3, #22
 800c7a2:	d4e1      	bmi.n	800c768 <_fflush_r+0xc>
 800c7a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c7a6:	f7fd fff3 	bl	800a790 <__retarget_lock_release_recursive>
 800c7aa:	e7dd      	b.n	800c768 <_fflush_r+0xc>

0800c7ac <__sccl>:
 800c7ac:	b570      	push	{r4, r5, r6, lr}
 800c7ae:	780b      	ldrb	r3, [r1, #0]
 800c7b0:	4604      	mov	r4, r0
 800c7b2:	2b5e      	cmp	r3, #94	@ 0x5e
 800c7b4:	bf0b      	itete	eq
 800c7b6:	784b      	ldrbeq	r3, [r1, #1]
 800c7b8:	1c4a      	addne	r2, r1, #1
 800c7ba:	1c8a      	addeq	r2, r1, #2
 800c7bc:	2100      	movne	r1, #0
 800c7be:	bf08      	it	eq
 800c7c0:	2101      	moveq	r1, #1
 800c7c2:	3801      	subs	r0, #1
 800c7c4:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800c7c8:	f800 1f01 	strb.w	r1, [r0, #1]!
 800c7cc:	42a8      	cmp	r0, r5
 800c7ce:	d1fb      	bne.n	800c7c8 <__sccl+0x1c>
 800c7d0:	b90b      	cbnz	r3, 800c7d6 <__sccl+0x2a>
 800c7d2:	1e50      	subs	r0, r2, #1
 800c7d4:	bd70      	pop	{r4, r5, r6, pc}
 800c7d6:	f081 0101 	eor.w	r1, r1, #1
 800c7da:	4610      	mov	r0, r2
 800c7dc:	54e1      	strb	r1, [r4, r3]
 800c7de:	4602      	mov	r2, r0
 800c7e0:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c7e4:	2d2d      	cmp	r5, #45	@ 0x2d
 800c7e6:	d005      	beq.n	800c7f4 <__sccl+0x48>
 800c7e8:	2d5d      	cmp	r5, #93	@ 0x5d
 800c7ea:	d016      	beq.n	800c81a <__sccl+0x6e>
 800c7ec:	2d00      	cmp	r5, #0
 800c7ee:	d0f1      	beq.n	800c7d4 <__sccl+0x28>
 800c7f0:	462b      	mov	r3, r5
 800c7f2:	e7f2      	b.n	800c7da <__sccl+0x2e>
 800c7f4:	7846      	ldrb	r6, [r0, #1]
 800c7f6:	2e5d      	cmp	r6, #93	@ 0x5d
 800c7f8:	d0fa      	beq.n	800c7f0 <__sccl+0x44>
 800c7fa:	42b3      	cmp	r3, r6
 800c7fc:	dcf8      	bgt.n	800c7f0 <__sccl+0x44>
 800c7fe:	461a      	mov	r2, r3
 800c800:	3002      	adds	r0, #2
 800c802:	3201      	adds	r2, #1
 800c804:	4296      	cmp	r6, r2
 800c806:	54a1      	strb	r1, [r4, r2]
 800c808:	dcfb      	bgt.n	800c802 <__sccl+0x56>
 800c80a:	1af2      	subs	r2, r6, r3
 800c80c:	3a01      	subs	r2, #1
 800c80e:	42b3      	cmp	r3, r6
 800c810:	bfa8      	it	ge
 800c812:	2200      	movge	r2, #0
 800c814:	1c5d      	adds	r5, r3, #1
 800c816:	18ab      	adds	r3, r5, r2
 800c818:	e7e1      	b.n	800c7de <__sccl+0x32>
 800c81a:	4610      	mov	r0, r2
 800c81c:	e7da      	b.n	800c7d4 <__sccl+0x28>

0800c81e <__submore>:
 800c81e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c822:	460c      	mov	r4, r1
 800c824:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800c826:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c82a:	4299      	cmp	r1, r3
 800c82c:	d11b      	bne.n	800c866 <__submore+0x48>
 800c82e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800c832:	f7fe fe9b 	bl	800b56c <_malloc_r>
 800c836:	b918      	cbnz	r0, 800c840 <__submore+0x22>
 800c838:	f04f 30ff 	mov.w	r0, #4294967295
 800c83c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c840:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c844:	63a3      	str	r3, [r4, #56]	@ 0x38
 800c846:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800c84a:	6360      	str	r0, [r4, #52]	@ 0x34
 800c84c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800c850:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800c854:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800c858:	7043      	strb	r3, [r0, #1]
 800c85a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800c85e:	7003      	strb	r3, [r0, #0]
 800c860:	6020      	str	r0, [r4, #0]
 800c862:	2000      	movs	r0, #0
 800c864:	e7ea      	b.n	800c83c <__submore+0x1e>
 800c866:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800c868:	0077      	lsls	r7, r6, #1
 800c86a:	463a      	mov	r2, r7
 800c86c:	f000 f87e 	bl	800c96c <_realloc_r>
 800c870:	4605      	mov	r5, r0
 800c872:	2800      	cmp	r0, #0
 800c874:	d0e0      	beq.n	800c838 <__submore+0x1a>
 800c876:	eb00 0806 	add.w	r8, r0, r6
 800c87a:	4601      	mov	r1, r0
 800c87c:	4632      	mov	r2, r6
 800c87e:	4640      	mov	r0, r8
 800c880:	f7fd ff95 	bl	800a7ae <memcpy>
 800c884:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800c888:	f8c4 8000 	str.w	r8, [r4]
 800c88c:	e7e9      	b.n	800c862 <__submore+0x44>

0800c88e <memmove>:
 800c88e:	4288      	cmp	r0, r1
 800c890:	b510      	push	{r4, lr}
 800c892:	eb01 0402 	add.w	r4, r1, r2
 800c896:	d902      	bls.n	800c89e <memmove+0x10>
 800c898:	4284      	cmp	r4, r0
 800c89a:	4623      	mov	r3, r4
 800c89c:	d807      	bhi.n	800c8ae <memmove+0x20>
 800c89e:	1e43      	subs	r3, r0, #1
 800c8a0:	42a1      	cmp	r1, r4
 800c8a2:	d008      	beq.n	800c8b6 <memmove+0x28>
 800c8a4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c8a8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c8ac:	e7f8      	b.n	800c8a0 <memmove+0x12>
 800c8ae:	4601      	mov	r1, r0
 800c8b0:	4402      	add	r2, r0
 800c8b2:	428a      	cmp	r2, r1
 800c8b4:	d100      	bne.n	800c8b8 <memmove+0x2a>
 800c8b6:	bd10      	pop	{r4, pc}
 800c8b8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c8bc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c8c0:	e7f7      	b.n	800c8b2 <memmove+0x24>
	...

0800c8c4 <_sbrk_r>:
 800c8c4:	b538      	push	{r3, r4, r5, lr}
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	4d05      	ldr	r5, [pc, #20]	@ (800c8e0 <_sbrk_r+0x1c>)
 800c8ca:	4604      	mov	r4, r0
 800c8cc:	4608      	mov	r0, r1
 800c8ce:	602b      	str	r3, [r5, #0]
 800c8d0:	f7f5 fc50 	bl	8002174 <_sbrk>
 800c8d4:	1c43      	adds	r3, r0, #1
 800c8d6:	d102      	bne.n	800c8de <_sbrk_r+0x1a>
 800c8d8:	682b      	ldr	r3, [r5, #0]
 800c8da:	b103      	cbz	r3, 800c8de <_sbrk_r+0x1a>
 800c8dc:	6023      	str	r3, [r4, #0]
 800c8de:	bd38      	pop	{r3, r4, r5, pc}
 800c8e0:	20002ac8 	.word	0x20002ac8

0800c8e4 <__assert_func>:
 800c8e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c8e6:	4614      	mov	r4, r2
 800c8e8:	461a      	mov	r2, r3
 800c8ea:	4b09      	ldr	r3, [pc, #36]	@ (800c910 <__assert_func+0x2c>)
 800c8ec:	4605      	mov	r5, r0
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	68d8      	ldr	r0, [r3, #12]
 800c8f2:	b14c      	cbz	r4, 800c908 <__assert_func+0x24>
 800c8f4:	4b07      	ldr	r3, [pc, #28]	@ (800c914 <__assert_func+0x30>)
 800c8f6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c8fa:	9100      	str	r1, [sp, #0]
 800c8fc:	462b      	mov	r3, r5
 800c8fe:	4906      	ldr	r1, [pc, #24]	@ (800c918 <__assert_func+0x34>)
 800c900:	f000 f95c 	bl	800cbbc <fiprintf>
 800c904:	f000 f96c 	bl	800cbe0 <abort>
 800c908:	4b04      	ldr	r3, [pc, #16]	@ (800c91c <__assert_func+0x38>)
 800c90a:	461c      	mov	r4, r3
 800c90c:	e7f3      	b.n	800c8f6 <__assert_func+0x12>
 800c90e:	bf00      	nop
 800c910:	20000034 	.word	0x20000034
 800c914:	0800d510 	.word	0x0800d510
 800c918:	0800d51d 	.word	0x0800d51d
 800c91c:	0800d54b 	.word	0x0800d54b

0800c920 <_calloc_r>:
 800c920:	b570      	push	{r4, r5, r6, lr}
 800c922:	fba1 5402 	umull	r5, r4, r1, r2
 800c926:	b934      	cbnz	r4, 800c936 <_calloc_r+0x16>
 800c928:	4629      	mov	r1, r5
 800c92a:	f7fe fe1f 	bl	800b56c <_malloc_r>
 800c92e:	4606      	mov	r6, r0
 800c930:	b928      	cbnz	r0, 800c93e <_calloc_r+0x1e>
 800c932:	4630      	mov	r0, r6
 800c934:	bd70      	pop	{r4, r5, r6, pc}
 800c936:	220c      	movs	r2, #12
 800c938:	2600      	movs	r6, #0
 800c93a:	6002      	str	r2, [r0, #0]
 800c93c:	e7f9      	b.n	800c932 <_calloc_r+0x12>
 800c93e:	462a      	mov	r2, r5
 800c940:	4621      	mov	r1, r4
 800c942:	f7fd fe48 	bl	800a5d6 <memset>
 800c946:	e7f4      	b.n	800c932 <_calloc_r+0x12>

0800c948 <__ascii_mbtowc>:
 800c948:	b082      	sub	sp, #8
 800c94a:	b901      	cbnz	r1, 800c94e <__ascii_mbtowc+0x6>
 800c94c:	a901      	add	r1, sp, #4
 800c94e:	b142      	cbz	r2, 800c962 <__ascii_mbtowc+0x1a>
 800c950:	b14b      	cbz	r3, 800c966 <__ascii_mbtowc+0x1e>
 800c952:	7813      	ldrb	r3, [r2, #0]
 800c954:	600b      	str	r3, [r1, #0]
 800c956:	7812      	ldrb	r2, [r2, #0]
 800c958:	1e10      	subs	r0, r2, #0
 800c95a:	bf18      	it	ne
 800c95c:	2001      	movne	r0, #1
 800c95e:	b002      	add	sp, #8
 800c960:	4770      	bx	lr
 800c962:	4610      	mov	r0, r2
 800c964:	e7fb      	b.n	800c95e <__ascii_mbtowc+0x16>
 800c966:	f06f 0001 	mvn.w	r0, #1
 800c96a:	e7f8      	b.n	800c95e <__ascii_mbtowc+0x16>

0800c96c <_realloc_r>:
 800c96c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c970:	4607      	mov	r7, r0
 800c972:	4614      	mov	r4, r2
 800c974:	460d      	mov	r5, r1
 800c976:	b921      	cbnz	r1, 800c982 <_realloc_r+0x16>
 800c978:	4611      	mov	r1, r2
 800c97a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c97e:	f7fe bdf5 	b.w	800b56c <_malloc_r>
 800c982:	b92a      	cbnz	r2, 800c990 <_realloc_r+0x24>
 800c984:	f7fe fd80 	bl	800b488 <_free_r>
 800c988:	4625      	mov	r5, r4
 800c98a:	4628      	mov	r0, r5
 800c98c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c990:	f000 f92d 	bl	800cbee <_malloc_usable_size_r>
 800c994:	4284      	cmp	r4, r0
 800c996:	4606      	mov	r6, r0
 800c998:	d802      	bhi.n	800c9a0 <_realloc_r+0x34>
 800c99a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c99e:	d8f4      	bhi.n	800c98a <_realloc_r+0x1e>
 800c9a0:	4621      	mov	r1, r4
 800c9a2:	4638      	mov	r0, r7
 800c9a4:	f7fe fde2 	bl	800b56c <_malloc_r>
 800c9a8:	4680      	mov	r8, r0
 800c9aa:	b908      	cbnz	r0, 800c9b0 <_realloc_r+0x44>
 800c9ac:	4645      	mov	r5, r8
 800c9ae:	e7ec      	b.n	800c98a <_realloc_r+0x1e>
 800c9b0:	42b4      	cmp	r4, r6
 800c9b2:	4622      	mov	r2, r4
 800c9b4:	4629      	mov	r1, r5
 800c9b6:	bf28      	it	cs
 800c9b8:	4632      	movcs	r2, r6
 800c9ba:	f7fd fef8 	bl	800a7ae <memcpy>
 800c9be:	4629      	mov	r1, r5
 800c9c0:	4638      	mov	r0, r7
 800c9c2:	f7fe fd61 	bl	800b488 <_free_r>
 800c9c6:	e7f1      	b.n	800c9ac <_realloc_r+0x40>

0800c9c8 <_strtol_l.isra.0>:
 800c9c8:	2b24      	cmp	r3, #36	@ 0x24
 800c9ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9ce:	4686      	mov	lr, r0
 800c9d0:	4690      	mov	r8, r2
 800c9d2:	d801      	bhi.n	800c9d8 <_strtol_l.isra.0+0x10>
 800c9d4:	2b01      	cmp	r3, #1
 800c9d6:	d106      	bne.n	800c9e6 <_strtol_l.isra.0+0x1e>
 800c9d8:	f7fd feae 	bl	800a738 <__errno>
 800c9dc:	2316      	movs	r3, #22
 800c9de:	6003      	str	r3, [r0, #0]
 800c9e0:	2000      	movs	r0, #0
 800c9e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9e6:	460d      	mov	r5, r1
 800c9e8:	4833      	ldr	r0, [pc, #204]	@ (800cab8 <_strtol_l.isra.0+0xf0>)
 800c9ea:	462a      	mov	r2, r5
 800c9ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c9f0:	5d06      	ldrb	r6, [r0, r4]
 800c9f2:	f016 0608 	ands.w	r6, r6, #8
 800c9f6:	d1f8      	bne.n	800c9ea <_strtol_l.isra.0+0x22>
 800c9f8:	2c2d      	cmp	r4, #45	@ 0x2d
 800c9fa:	d110      	bne.n	800ca1e <_strtol_l.isra.0+0x56>
 800c9fc:	2601      	movs	r6, #1
 800c9fe:	782c      	ldrb	r4, [r5, #0]
 800ca00:	1c95      	adds	r5, r2, #2
 800ca02:	f033 0210 	bics.w	r2, r3, #16
 800ca06:	d115      	bne.n	800ca34 <_strtol_l.isra.0+0x6c>
 800ca08:	2c30      	cmp	r4, #48	@ 0x30
 800ca0a:	d10d      	bne.n	800ca28 <_strtol_l.isra.0+0x60>
 800ca0c:	782a      	ldrb	r2, [r5, #0]
 800ca0e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ca12:	2a58      	cmp	r2, #88	@ 0x58
 800ca14:	d108      	bne.n	800ca28 <_strtol_l.isra.0+0x60>
 800ca16:	786c      	ldrb	r4, [r5, #1]
 800ca18:	3502      	adds	r5, #2
 800ca1a:	2310      	movs	r3, #16
 800ca1c:	e00a      	b.n	800ca34 <_strtol_l.isra.0+0x6c>
 800ca1e:	2c2b      	cmp	r4, #43	@ 0x2b
 800ca20:	bf04      	itt	eq
 800ca22:	782c      	ldrbeq	r4, [r5, #0]
 800ca24:	1c95      	addeq	r5, r2, #2
 800ca26:	e7ec      	b.n	800ca02 <_strtol_l.isra.0+0x3a>
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d1f6      	bne.n	800ca1a <_strtol_l.isra.0+0x52>
 800ca2c:	2c30      	cmp	r4, #48	@ 0x30
 800ca2e:	bf14      	ite	ne
 800ca30:	230a      	movne	r3, #10
 800ca32:	2308      	moveq	r3, #8
 800ca34:	2200      	movs	r2, #0
 800ca36:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ca3a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ca3e:	fbbc f9f3 	udiv	r9, ip, r3
 800ca42:	4610      	mov	r0, r2
 800ca44:	fb03 ca19 	mls	sl, r3, r9, ip
 800ca48:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ca4c:	2f09      	cmp	r7, #9
 800ca4e:	d80f      	bhi.n	800ca70 <_strtol_l.isra.0+0xa8>
 800ca50:	463c      	mov	r4, r7
 800ca52:	42a3      	cmp	r3, r4
 800ca54:	dd1b      	ble.n	800ca8e <_strtol_l.isra.0+0xc6>
 800ca56:	1c57      	adds	r7, r2, #1
 800ca58:	d007      	beq.n	800ca6a <_strtol_l.isra.0+0xa2>
 800ca5a:	4581      	cmp	r9, r0
 800ca5c:	d314      	bcc.n	800ca88 <_strtol_l.isra.0+0xc0>
 800ca5e:	d101      	bne.n	800ca64 <_strtol_l.isra.0+0x9c>
 800ca60:	45a2      	cmp	sl, r4
 800ca62:	db11      	blt.n	800ca88 <_strtol_l.isra.0+0xc0>
 800ca64:	2201      	movs	r2, #1
 800ca66:	fb00 4003 	mla	r0, r0, r3, r4
 800ca6a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ca6e:	e7eb      	b.n	800ca48 <_strtol_l.isra.0+0x80>
 800ca70:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ca74:	2f19      	cmp	r7, #25
 800ca76:	d801      	bhi.n	800ca7c <_strtol_l.isra.0+0xb4>
 800ca78:	3c37      	subs	r4, #55	@ 0x37
 800ca7a:	e7ea      	b.n	800ca52 <_strtol_l.isra.0+0x8a>
 800ca7c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ca80:	2f19      	cmp	r7, #25
 800ca82:	d804      	bhi.n	800ca8e <_strtol_l.isra.0+0xc6>
 800ca84:	3c57      	subs	r4, #87	@ 0x57
 800ca86:	e7e4      	b.n	800ca52 <_strtol_l.isra.0+0x8a>
 800ca88:	f04f 32ff 	mov.w	r2, #4294967295
 800ca8c:	e7ed      	b.n	800ca6a <_strtol_l.isra.0+0xa2>
 800ca8e:	1c53      	adds	r3, r2, #1
 800ca90:	d108      	bne.n	800caa4 <_strtol_l.isra.0+0xdc>
 800ca92:	2322      	movs	r3, #34	@ 0x22
 800ca94:	4660      	mov	r0, ip
 800ca96:	f8ce 3000 	str.w	r3, [lr]
 800ca9a:	f1b8 0f00 	cmp.w	r8, #0
 800ca9e:	d0a0      	beq.n	800c9e2 <_strtol_l.isra.0+0x1a>
 800caa0:	1e69      	subs	r1, r5, #1
 800caa2:	e006      	b.n	800cab2 <_strtol_l.isra.0+0xea>
 800caa4:	b106      	cbz	r6, 800caa8 <_strtol_l.isra.0+0xe0>
 800caa6:	4240      	negs	r0, r0
 800caa8:	f1b8 0f00 	cmp.w	r8, #0
 800caac:	d099      	beq.n	800c9e2 <_strtol_l.isra.0+0x1a>
 800caae:	2a00      	cmp	r2, #0
 800cab0:	d1f6      	bne.n	800caa0 <_strtol_l.isra.0+0xd8>
 800cab2:	f8c8 1000 	str.w	r1, [r8]
 800cab6:	e794      	b.n	800c9e2 <_strtol_l.isra.0+0x1a>
 800cab8:	0800d649 	.word	0x0800d649

0800cabc <_strtol_r>:
 800cabc:	f7ff bf84 	b.w	800c9c8 <_strtol_l.isra.0>

0800cac0 <_strtoul_l.isra.0>:
 800cac0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cac4:	4686      	mov	lr, r0
 800cac6:	460d      	mov	r5, r1
 800cac8:	4e33      	ldr	r6, [pc, #204]	@ (800cb98 <_strtoul_l.isra.0+0xd8>)
 800caca:	4628      	mov	r0, r5
 800cacc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cad0:	5d37      	ldrb	r7, [r6, r4]
 800cad2:	f017 0708 	ands.w	r7, r7, #8
 800cad6:	d1f8      	bne.n	800caca <_strtoul_l.isra.0+0xa>
 800cad8:	2c2d      	cmp	r4, #45	@ 0x2d
 800cada:	d110      	bne.n	800cafe <_strtoul_l.isra.0+0x3e>
 800cadc:	2701      	movs	r7, #1
 800cade:	782c      	ldrb	r4, [r5, #0]
 800cae0:	1c85      	adds	r5, r0, #2
 800cae2:	f033 0010 	bics.w	r0, r3, #16
 800cae6:	d115      	bne.n	800cb14 <_strtoul_l.isra.0+0x54>
 800cae8:	2c30      	cmp	r4, #48	@ 0x30
 800caea:	d10d      	bne.n	800cb08 <_strtoul_l.isra.0+0x48>
 800caec:	7828      	ldrb	r0, [r5, #0]
 800caee:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800caf2:	2858      	cmp	r0, #88	@ 0x58
 800caf4:	d108      	bne.n	800cb08 <_strtoul_l.isra.0+0x48>
 800caf6:	786c      	ldrb	r4, [r5, #1]
 800caf8:	3502      	adds	r5, #2
 800cafa:	2310      	movs	r3, #16
 800cafc:	e00a      	b.n	800cb14 <_strtoul_l.isra.0+0x54>
 800cafe:	2c2b      	cmp	r4, #43	@ 0x2b
 800cb00:	bf04      	itt	eq
 800cb02:	782c      	ldrbeq	r4, [r5, #0]
 800cb04:	1c85      	addeq	r5, r0, #2
 800cb06:	e7ec      	b.n	800cae2 <_strtoul_l.isra.0+0x22>
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d1f6      	bne.n	800cafa <_strtoul_l.isra.0+0x3a>
 800cb0c:	2c30      	cmp	r4, #48	@ 0x30
 800cb0e:	bf14      	ite	ne
 800cb10:	230a      	movne	r3, #10
 800cb12:	2308      	moveq	r3, #8
 800cb14:	f04f 38ff 	mov.w	r8, #4294967295
 800cb18:	fbb8 f8f3 	udiv	r8, r8, r3
 800cb1c:	2600      	movs	r6, #0
 800cb1e:	fb03 f908 	mul.w	r9, r3, r8
 800cb22:	4630      	mov	r0, r6
 800cb24:	ea6f 0909 	mvn.w	r9, r9
 800cb28:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800cb2c:	f1bc 0f09 	cmp.w	ip, #9
 800cb30:	d810      	bhi.n	800cb54 <_strtoul_l.isra.0+0x94>
 800cb32:	4664      	mov	r4, ip
 800cb34:	42a3      	cmp	r3, r4
 800cb36:	dd1e      	ble.n	800cb76 <_strtoul_l.isra.0+0xb6>
 800cb38:	f1b6 3fff 	cmp.w	r6, #4294967295
 800cb3c:	d007      	beq.n	800cb4e <_strtoul_l.isra.0+0x8e>
 800cb3e:	4580      	cmp	r8, r0
 800cb40:	d316      	bcc.n	800cb70 <_strtoul_l.isra.0+0xb0>
 800cb42:	d101      	bne.n	800cb48 <_strtoul_l.isra.0+0x88>
 800cb44:	45a1      	cmp	r9, r4
 800cb46:	db13      	blt.n	800cb70 <_strtoul_l.isra.0+0xb0>
 800cb48:	2601      	movs	r6, #1
 800cb4a:	fb00 4003 	mla	r0, r0, r3, r4
 800cb4e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cb52:	e7e9      	b.n	800cb28 <_strtoul_l.isra.0+0x68>
 800cb54:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800cb58:	f1bc 0f19 	cmp.w	ip, #25
 800cb5c:	d801      	bhi.n	800cb62 <_strtoul_l.isra.0+0xa2>
 800cb5e:	3c37      	subs	r4, #55	@ 0x37
 800cb60:	e7e8      	b.n	800cb34 <_strtoul_l.isra.0+0x74>
 800cb62:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800cb66:	f1bc 0f19 	cmp.w	ip, #25
 800cb6a:	d804      	bhi.n	800cb76 <_strtoul_l.isra.0+0xb6>
 800cb6c:	3c57      	subs	r4, #87	@ 0x57
 800cb6e:	e7e1      	b.n	800cb34 <_strtoul_l.isra.0+0x74>
 800cb70:	f04f 36ff 	mov.w	r6, #4294967295
 800cb74:	e7eb      	b.n	800cb4e <_strtoul_l.isra.0+0x8e>
 800cb76:	1c73      	adds	r3, r6, #1
 800cb78:	d106      	bne.n	800cb88 <_strtoul_l.isra.0+0xc8>
 800cb7a:	2322      	movs	r3, #34	@ 0x22
 800cb7c:	4630      	mov	r0, r6
 800cb7e:	f8ce 3000 	str.w	r3, [lr]
 800cb82:	b932      	cbnz	r2, 800cb92 <_strtoul_l.isra.0+0xd2>
 800cb84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb88:	b107      	cbz	r7, 800cb8c <_strtoul_l.isra.0+0xcc>
 800cb8a:	4240      	negs	r0, r0
 800cb8c:	2a00      	cmp	r2, #0
 800cb8e:	d0f9      	beq.n	800cb84 <_strtoul_l.isra.0+0xc4>
 800cb90:	b106      	cbz	r6, 800cb94 <_strtoul_l.isra.0+0xd4>
 800cb92:	1e69      	subs	r1, r5, #1
 800cb94:	6011      	str	r1, [r2, #0]
 800cb96:	e7f5      	b.n	800cb84 <_strtoul_l.isra.0+0xc4>
 800cb98:	0800d649 	.word	0x0800d649

0800cb9c <_strtoul_r>:
 800cb9c:	f7ff bf90 	b.w	800cac0 <_strtoul_l.isra.0>

0800cba0 <__ascii_wctomb>:
 800cba0:	4603      	mov	r3, r0
 800cba2:	4608      	mov	r0, r1
 800cba4:	b141      	cbz	r1, 800cbb8 <__ascii_wctomb+0x18>
 800cba6:	2aff      	cmp	r2, #255	@ 0xff
 800cba8:	d904      	bls.n	800cbb4 <__ascii_wctomb+0x14>
 800cbaa:	228a      	movs	r2, #138	@ 0x8a
 800cbac:	f04f 30ff 	mov.w	r0, #4294967295
 800cbb0:	601a      	str	r2, [r3, #0]
 800cbb2:	4770      	bx	lr
 800cbb4:	2001      	movs	r0, #1
 800cbb6:	700a      	strb	r2, [r1, #0]
 800cbb8:	4770      	bx	lr
	...

0800cbbc <fiprintf>:
 800cbbc:	b40e      	push	{r1, r2, r3}
 800cbbe:	b503      	push	{r0, r1, lr}
 800cbc0:	4601      	mov	r1, r0
 800cbc2:	ab03      	add	r3, sp, #12
 800cbc4:	4805      	ldr	r0, [pc, #20]	@ (800cbdc <fiprintf+0x20>)
 800cbc6:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbca:	6800      	ldr	r0, [r0, #0]
 800cbcc:	9301      	str	r3, [sp, #4]
 800cbce:	f000 f83d 	bl	800cc4c <_vfiprintf_r>
 800cbd2:	b002      	add	sp, #8
 800cbd4:	f85d eb04 	ldr.w	lr, [sp], #4
 800cbd8:	b003      	add	sp, #12
 800cbda:	4770      	bx	lr
 800cbdc:	20000034 	.word	0x20000034

0800cbe0 <abort>:
 800cbe0:	2006      	movs	r0, #6
 800cbe2:	b508      	push	{r3, lr}
 800cbe4:	f000 fa06 	bl	800cff4 <raise>
 800cbe8:	2001      	movs	r0, #1
 800cbea:	f7f5 fa4e 	bl	800208a <_exit>

0800cbee <_malloc_usable_size_r>:
 800cbee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cbf2:	1f18      	subs	r0, r3, #4
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	bfbc      	itt	lt
 800cbf8:	580b      	ldrlt	r3, [r1, r0]
 800cbfa:	18c0      	addlt	r0, r0, r3
 800cbfc:	4770      	bx	lr

0800cbfe <__sfputc_r>:
 800cbfe:	6893      	ldr	r3, [r2, #8]
 800cc00:	b410      	push	{r4}
 800cc02:	3b01      	subs	r3, #1
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	6093      	str	r3, [r2, #8]
 800cc08:	da07      	bge.n	800cc1a <__sfputc_r+0x1c>
 800cc0a:	6994      	ldr	r4, [r2, #24]
 800cc0c:	42a3      	cmp	r3, r4
 800cc0e:	db01      	blt.n	800cc14 <__sfputc_r+0x16>
 800cc10:	290a      	cmp	r1, #10
 800cc12:	d102      	bne.n	800cc1a <__sfputc_r+0x1c>
 800cc14:	bc10      	pop	{r4}
 800cc16:	f000 b931 	b.w	800ce7c <__swbuf_r>
 800cc1a:	6813      	ldr	r3, [r2, #0]
 800cc1c:	1c58      	adds	r0, r3, #1
 800cc1e:	6010      	str	r0, [r2, #0]
 800cc20:	7019      	strb	r1, [r3, #0]
 800cc22:	4608      	mov	r0, r1
 800cc24:	bc10      	pop	{r4}
 800cc26:	4770      	bx	lr

0800cc28 <__sfputs_r>:
 800cc28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc2a:	4606      	mov	r6, r0
 800cc2c:	460f      	mov	r7, r1
 800cc2e:	4614      	mov	r4, r2
 800cc30:	18d5      	adds	r5, r2, r3
 800cc32:	42ac      	cmp	r4, r5
 800cc34:	d101      	bne.n	800cc3a <__sfputs_r+0x12>
 800cc36:	2000      	movs	r0, #0
 800cc38:	e007      	b.n	800cc4a <__sfputs_r+0x22>
 800cc3a:	463a      	mov	r2, r7
 800cc3c:	4630      	mov	r0, r6
 800cc3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc42:	f7ff ffdc 	bl	800cbfe <__sfputc_r>
 800cc46:	1c43      	adds	r3, r0, #1
 800cc48:	d1f3      	bne.n	800cc32 <__sfputs_r+0xa>
 800cc4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cc4c <_vfiprintf_r>:
 800cc4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc50:	460d      	mov	r5, r1
 800cc52:	4614      	mov	r4, r2
 800cc54:	4698      	mov	r8, r3
 800cc56:	4606      	mov	r6, r0
 800cc58:	b09d      	sub	sp, #116	@ 0x74
 800cc5a:	b118      	cbz	r0, 800cc64 <_vfiprintf_r+0x18>
 800cc5c:	6a03      	ldr	r3, [r0, #32]
 800cc5e:	b90b      	cbnz	r3, 800cc64 <_vfiprintf_r+0x18>
 800cc60:	f7fd fbf0 	bl	800a444 <__sinit>
 800cc64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cc66:	07d9      	lsls	r1, r3, #31
 800cc68:	d405      	bmi.n	800cc76 <_vfiprintf_r+0x2a>
 800cc6a:	89ab      	ldrh	r3, [r5, #12]
 800cc6c:	059a      	lsls	r2, r3, #22
 800cc6e:	d402      	bmi.n	800cc76 <_vfiprintf_r+0x2a>
 800cc70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cc72:	f7fd fd8c 	bl	800a78e <__retarget_lock_acquire_recursive>
 800cc76:	89ab      	ldrh	r3, [r5, #12]
 800cc78:	071b      	lsls	r3, r3, #28
 800cc7a:	d501      	bpl.n	800cc80 <_vfiprintf_r+0x34>
 800cc7c:	692b      	ldr	r3, [r5, #16]
 800cc7e:	b99b      	cbnz	r3, 800cca8 <_vfiprintf_r+0x5c>
 800cc80:	4629      	mov	r1, r5
 800cc82:	4630      	mov	r0, r6
 800cc84:	f000 f938 	bl	800cef8 <__swsetup_r>
 800cc88:	b170      	cbz	r0, 800cca8 <_vfiprintf_r+0x5c>
 800cc8a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cc8c:	07dc      	lsls	r4, r3, #31
 800cc8e:	d504      	bpl.n	800cc9a <_vfiprintf_r+0x4e>
 800cc90:	f04f 30ff 	mov.w	r0, #4294967295
 800cc94:	b01d      	add	sp, #116	@ 0x74
 800cc96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc9a:	89ab      	ldrh	r3, [r5, #12]
 800cc9c:	0598      	lsls	r0, r3, #22
 800cc9e:	d4f7      	bmi.n	800cc90 <_vfiprintf_r+0x44>
 800cca0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cca2:	f7fd fd75 	bl	800a790 <__retarget_lock_release_recursive>
 800cca6:	e7f3      	b.n	800cc90 <_vfiprintf_r+0x44>
 800cca8:	2300      	movs	r3, #0
 800ccaa:	9309      	str	r3, [sp, #36]	@ 0x24
 800ccac:	2320      	movs	r3, #32
 800ccae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ccb2:	2330      	movs	r3, #48	@ 0x30
 800ccb4:	f04f 0901 	mov.w	r9, #1
 800ccb8:	f8cd 800c 	str.w	r8, [sp, #12]
 800ccbc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800ce68 <_vfiprintf_r+0x21c>
 800ccc0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ccc4:	4623      	mov	r3, r4
 800ccc6:	469a      	mov	sl, r3
 800ccc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cccc:	b10a      	cbz	r2, 800ccd2 <_vfiprintf_r+0x86>
 800ccce:	2a25      	cmp	r2, #37	@ 0x25
 800ccd0:	d1f9      	bne.n	800ccc6 <_vfiprintf_r+0x7a>
 800ccd2:	ebba 0b04 	subs.w	fp, sl, r4
 800ccd6:	d00b      	beq.n	800ccf0 <_vfiprintf_r+0xa4>
 800ccd8:	465b      	mov	r3, fp
 800ccda:	4622      	mov	r2, r4
 800ccdc:	4629      	mov	r1, r5
 800ccde:	4630      	mov	r0, r6
 800cce0:	f7ff ffa2 	bl	800cc28 <__sfputs_r>
 800cce4:	3001      	adds	r0, #1
 800cce6:	f000 80a7 	beq.w	800ce38 <_vfiprintf_r+0x1ec>
 800ccea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ccec:	445a      	add	r2, fp
 800ccee:	9209      	str	r2, [sp, #36]	@ 0x24
 800ccf0:	f89a 3000 	ldrb.w	r3, [sl]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	f000 809f 	beq.w	800ce38 <_vfiprintf_r+0x1ec>
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	f04f 32ff 	mov.w	r2, #4294967295
 800cd00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd04:	f10a 0a01 	add.w	sl, sl, #1
 800cd08:	9304      	str	r3, [sp, #16]
 800cd0a:	9307      	str	r3, [sp, #28]
 800cd0c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cd10:	931a      	str	r3, [sp, #104]	@ 0x68
 800cd12:	4654      	mov	r4, sl
 800cd14:	2205      	movs	r2, #5
 800cd16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd1a:	4853      	ldr	r0, [pc, #332]	@ (800ce68 <_vfiprintf_r+0x21c>)
 800cd1c:	f7fd fd39 	bl	800a792 <memchr>
 800cd20:	9a04      	ldr	r2, [sp, #16]
 800cd22:	b9d8      	cbnz	r0, 800cd5c <_vfiprintf_r+0x110>
 800cd24:	06d1      	lsls	r1, r2, #27
 800cd26:	bf44      	itt	mi
 800cd28:	2320      	movmi	r3, #32
 800cd2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cd2e:	0713      	lsls	r3, r2, #28
 800cd30:	bf44      	itt	mi
 800cd32:	232b      	movmi	r3, #43	@ 0x2b
 800cd34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cd38:	f89a 3000 	ldrb.w	r3, [sl]
 800cd3c:	2b2a      	cmp	r3, #42	@ 0x2a
 800cd3e:	d015      	beq.n	800cd6c <_vfiprintf_r+0x120>
 800cd40:	4654      	mov	r4, sl
 800cd42:	2000      	movs	r0, #0
 800cd44:	f04f 0c0a 	mov.w	ip, #10
 800cd48:	9a07      	ldr	r2, [sp, #28]
 800cd4a:	4621      	mov	r1, r4
 800cd4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd50:	3b30      	subs	r3, #48	@ 0x30
 800cd52:	2b09      	cmp	r3, #9
 800cd54:	d94b      	bls.n	800cdee <_vfiprintf_r+0x1a2>
 800cd56:	b1b0      	cbz	r0, 800cd86 <_vfiprintf_r+0x13a>
 800cd58:	9207      	str	r2, [sp, #28]
 800cd5a:	e014      	b.n	800cd86 <_vfiprintf_r+0x13a>
 800cd5c:	eba0 0308 	sub.w	r3, r0, r8
 800cd60:	fa09 f303 	lsl.w	r3, r9, r3
 800cd64:	4313      	orrs	r3, r2
 800cd66:	46a2      	mov	sl, r4
 800cd68:	9304      	str	r3, [sp, #16]
 800cd6a:	e7d2      	b.n	800cd12 <_vfiprintf_r+0xc6>
 800cd6c:	9b03      	ldr	r3, [sp, #12]
 800cd6e:	1d19      	adds	r1, r3, #4
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	9103      	str	r1, [sp, #12]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	bfbb      	ittet	lt
 800cd78:	425b      	neglt	r3, r3
 800cd7a:	f042 0202 	orrlt.w	r2, r2, #2
 800cd7e:	9307      	strge	r3, [sp, #28]
 800cd80:	9307      	strlt	r3, [sp, #28]
 800cd82:	bfb8      	it	lt
 800cd84:	9204      	strlt	r2, [sp, #16]
 800cd86:	7823      	ldrb	r3, [r4, #0]
 800cd88:	2b2e      	cmp	r3, #46	@ 0x2e
 800cd8a:	d10a      	bne.n	800cda2 <_vfiprintf_r+0x156>
 800cd8c:	7863      	ldrb	r3, [r4, #1]
 800cd8e:	2b2a      	cmp	r3, #42	@ 0x2a
 800cd90:	d132      	bne.n	800cdf8 <_vfiprintf_r+0x1ac>
 800cd92:	9b03      	ldr	r3, [sp, #12]
 800cd94:	3402      	adds	r4, #2
 800cd96:	1d1a      	adds	r2, r3, #4
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	9203      	str	r2, [sp, #12]
 800cd9c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cda0:	9305      	str	r3, [sp, #20]
 800cda2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800ce6c <_vfiprintf_r+0x220>
 800cda6:	2203      	movs	r2, #3
 800cda8:	4650      	mov	r0, sl
 800cdaa:	7821      	ldrb	r1, [r4, #0]
 800cdac:	f7fd fcf1 	bl	800a792 <memchr>
 800cdb0:	b138      	cbz	r0, 800cdc2 <_vfiprintf_r+0x176>
 800cdb2:	2240      	movs	r2, #64	@ 0x40
 800cdb4:	9b04      	ldr	r3, [sp, #16]
 800cdb6:	eba0 000a 	sub.w	r0, r0, sl
 800cdba:	4082      	lsls	r2, r0
 800cdbc:	4313      	orrs	r3, r2
 800cdbe:	3401      	adds	r4, #1
 800cdc0:	9304      	str	r3, [sp, #16]
 800cdc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdc6:	2206      	movs	r2, #6
 800cdc8:	4829      	ldr	r0, [pc, #164]	@ (800ce70 <_vfiprintf_r+0x224>)
 800cdca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cdce:	f7fd fce0 	bl	800a792 <memchr>
 800cdd2:	2800      	cmp	r0, #0
 800cdd4:	d03f      	beq.n	800ce56 <_vfiprintf_r+0x20a>
 800cdd6:	4b27      	ldr	r3, [pc, #156]	@ (800ce74 <_vfiprintf_r+0x228>)
 800cdd8:	bb1b      	cbnz	r3, 800ce22 <_vfiprintf_r+0x1d6>
 800cdda:	9b03      	ldr	r3, [sp, #12]
 800cddc:	3307      	adds	r3, #7
 800cdde:	f023 0307 	bic.w	r3, r3, #7
 800cde2:	3308      	adds	r3, #8
 800cde4:	9303      	str	r3, [sp, #12]
 800cde6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cde8:	443b      	add	r3, r7
 800cdea:	9309      	str	r3, [sp, #36]	@ 0x24
 800cdec:	e76a      	b.n	800ccc4 <_vfiprintf_r+0x78>
 800cdee:	460c      	mov	r4, r1
 800cdf0:	2001      	movs	r0, #1
 800cdf2:	fb0c 3202 	mla	r2, ip, r2, r3
 800cdf6:	e7a8      	b.n	800cd4a <_vfiprintf_r+0xfe>
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	f04f 0c0a 	mov.w	ip, #10
 800cdfe:	4619      	mov	r1, r3
 800ce00:	3401      	adds	r4, #1
 800ce02:	9305      	str	r3, [sp, #20]
 800ce04:	4620      	mov	r0, r4
 800ce06:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce0a:	3a30      	subs	r2, #48	@ 0x30
 800ce0c:	2a09      	cmp	r2, #9
 800ce0e:	d903      	bls.n	800ce18 <_vfiprintf_r+0x1cc>
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d0c6      	beq.n	800cda2 <_vfiprintf_r+0x156>
 800ce14:	9105      	str	r1, [sp, #20]
 800ce16:	e7c4      	b.n	800cda2 <_vfiprintf_r+0x156>
 800ce18:	4604      	mov	r4, r0
 800ce1a:	2301      	movs	r3, #1
 800ce1c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce20:	e7f0      	b.n	800ce04 <_vfiprintf_r+0x1b8>
 800ce22:	ab03      	add	r3, sp, #12
 800ce24:	9300      	str	r3, [sp, #0]
 800ce26:	462a      	mov	r2, r5
 800ce28:	4630      	mov	r0, r6
 800ce2a:	4b13      	ldr	r3, [pc, #76]	@ (800ce78 <_vfiprintf_r+0x22c>)
 800ce2c:	a904      	add	r1, sp, #16
 800ce2e:	f7fc fec1 	bl	8009bb4 <_printf_float>
 800ce32:	4607      	mov	r7, r0
 800ce34:	1c78      	adds	r0, r7, #1
 800ce36:	d1d6      	bne.n	800cde6 <_vfiprintf_r+0x19a>
 800ce38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ce3a:	07d9      	lsls	r1, r3, #31
 800ce3c:	d405      	bmi.n	800ce4a <_vfiprintf_r+0x1fe>
 800ce3e:	89ab      	ldrh	r3, [r5, #12]
 800ce40:	059a      	lsls	r2, r3, #22
 800ce42:	d402      	bmi.n	800ce4a <_vfiprintf_r+0x1fe>
 800ce44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ce46:	f7fd fca3 	bl	800a790 <__retarget_lock_release_recursive>
 800ce4a:	89ab      	ldrh	r3, [r5, #12]
 800ce4c:	065b      	lsls	r3, r3, #25
 800ce4e:	f53f af1f 	bmi.w	800cc90 <_vfiprintf_r+0x44>
 800ce52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ce54:	e71e      	b.n	800cc94 <_vfiprintf_r+0x48>
 800ce56:	ab03      	add	r3, sp, #12
 800ce58:	9300      	str	r3, [sp, #0]
 800ce5a:	462a      	mov	r2, r5
 800ce5c:	4630      	mov	r0, r6
 800ce5e:	4b06      	ldr	r3, [pc, #24]	@ (800ce78 <_vfiprintf_r+0x22c>)
 800ce60:	a904      	add	r1, sp, #16
 800ce62:	f7fd f945 	bl	800a0f0 <_printf_i>
 800ce66:	e7e4      	b.n	800ce32 <_vfiprintf_r+0x1e6>
 800ce68:	0800d4da 	.word	0x0800d4da
 800ce6c:	0800d4e0 	.word	0x0800d4e0
 800ce70:	0800d4e4 	.word	0x0800d4e4
 800ce74:	08009bb5 	.word	0x08009bb5
 800ce78:	0800cc29 	.word	0x0800cc29

0800ce7c <__swbuf_r>:
 800ce7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce7e:	460e      	mov	r6, r1
 800ce80:	4614      	mov	r4, r2
 800ce82:	4605      	mov	r5, r0
 800ce84:	b118      	cbz	r0, 800ce8e <__swbuf_r+0x12>
 800ce86:	6a03      	ldr	r3, [r0, #32]
 800ce88:	b90b      	cbnz	r3, 800ce8e <__swbuf_r+0x12>
 800ce8a:	f7fd fadb 	bl	800a444 <__sinit>
 800ce8e:	69a3      	ldr	r3, [r4, #24]
 800ce90:	60a3      	str	r3, [r4, #8]
 800ce92:	89a3      	ldrh	r3, [r4, #12]
 800ce94:	071a      	lsls	r2, r3, #28
 800ce96:	d501      	bpl.n	800ce9c <__swbuf_r+0x20>
 800ce98:	6923      	ldr	r3, [r4, #16]
 800ce9a:	b943      	cbnz	r3, 800ceae <__swbuf_r+0x32>
 800ce9c:	4621      	mov	r1, r4
 800ce9e:	4628      	mov	r0, r5
 800cea0:	f000 f82a 	bl	800cef8 <__swsetup_r>
 800cea4:	b118      	cbz	r0, 800ceae <__swbuf_r+0x32>
 800cea6:	f04f 37ff 	mov.w	r7, #4294967295
 800ceaa:	4638      	mov	r0, r7
 800ceac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ceae:	6823      	ldr	r3, [r4, #0]
 800ceb0:	6922      	ldr	r2, [r4, #16]
 800ceb2:	b2f6      	uxtb	r6, r6
 800ceb4:	1a98      	subs	r0, r3, r2
 800ceb6:	6963      	ldr	r3, [r4, #20]
 800ceb8:	4637      	mov	r7, r6
 800ceba:	4283      	cmp	r3, r0
 800cebc:	dc05      	bgt.n	800ceca <__swbuf_r+0x4e>
 800cebe:	4621      	mov	r1, r4
 800cec0:	4628      	mov	r0, r5
 800cec2:	f7ff fc4b 	bl	800c75c <_fflush_r>
 800cec6:	2800      	cmp	r0, #0
 800cec8:	d1ed      	bne.n	800cea6 <__swbuf_r+0x2a>
 800ceca:	68a3      	ldr	r3, [r4, #8]
 800cecc:	3b01      	subs	r3, #1
 800cece:	60a3      	str	r3, [r4, #8]
 800ced0:	6823      	ldr	r3, [r4, #0]
 800ced2:	1c5a      	adds	r2, r3, #1
 800ced4:	6022      	str	r2, [r4, #0]
 800ced6:	701e      	strb	r6, [r3, #0]
 800ced8:	6962      	ldr	r2, [r4, #20]
 800ceda:	1c43      	adds	r3, r0, #1
 800cedc:	429a      	cmp	r2, r3
 800cede:	d004      	beq.n	800ceea <__swbuf_r+0x6e>
 800cee0:	89a3      	ldrh	r3, [r4, #12]
 800cee2:	07db      	lsls	r3, r3, #31
 800cee4:	d5e1      	bpl.n	800ceaa <__swbuf_r+0x2e>
 800cee6:	2e0a      	cmp	r6, #10
 800cee8:	d1df      	bne.n	800ceaa <__swbuf_r+0x2e>
 800ceea:	4621      	mov	r1, r4
 800ceec:	4628      	mov	r0, r5
 800ceee:	f7ff fc35 	bl	800c75c <_fflush_r>
 800cef2:	2800      	cmp	r0, #0
 800cef4:	d0d9      	beq.n	800ceaa <__swbuf_r+0x2e>
 800cef6:	e7d6      	b.n	800cea6 <__swbuf_r+0x2a>

0800cef8 <__swsetup_r>:
 800cef8:	b538      	push	{r3, r4, r5, lr}
 800cefa:	4b29      	ldr	r3, [pc, #164]	@ (800cfa0 <__swsetup_r+0xa8>)
 800cefc:	4605      	mov	r5, r0
 800cefe:	6818      	ldr	r0, [r3, #0]
 800cf00:	460c      	mov	r4, r1
 800cf02:	b118      	cbz	r0, 800cf0c <__swsetup_r+0x14>
 800cf04:	6a03      	ldr	r3, [r0, #32]
 800cf06:	b90b      	cbnz	r3, 800cf0c <__swsetup_r+0x14>
 800cf08:	f7fd fa9c 	bl	800a444 <__sinit>
 800cf0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf10:	0719      	lsls	r1, r3, #28
 800cf12:	d422      	bmi.n	800cf5a <__swsetup_r+0x62>
 800cf14:	06da      	lsls	r2, r3, #27
 800cf16:	d407      	bmi.n	800cf28 <__swsetup_r+0x30>
 800cf18:	2209      	movs	r2, #9
 800cf1a:	602a      	str	r2, [r5, #0]
 800cf1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cf20:	f04f 30ff 	mov.w	r0, #4294967295
 800cf24:	81a3      	strh	r3, [r4, #12]
 800cf26:	e033      	b.n	800cf90 <__swsetup_r+0x98>
 800cf28:	0758      	lsls	r0, r3, #29
 800cf2a:	d512      	bpl.n	800cf52 <__swsetup_r+0x5a>
 800cf2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cf2e:	b141      	cbz	r1, 800cf42 <__swsetup_r+0x4a>
 800cf30:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cf34:	4299      	cmp	r1, r3
 800cf36:	d002      	beq.n	800cf3e <__swsetup_r+0x46>
 800cf38:	4628      	mov	r0, r5
 800cf3a:	f7fe faa5 	bl	800b488 <_free_r>
 800cf3e:	2300      	movs	r3, #0
 800cf40:	6363      	str	r3, [r4, #52]	@ 0x34
 800cf42:	89a3      	ldrh	r3, [r4, #12]
 800cf44:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cf48:	81a3      	strh	r3, [r4, #12]
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	6063      	str	r3, [r4, #4]
 800cf4e:	6923      	ldr	r3, [r4, #16]
 800cf50:	6023      	str	r3, [r4, #0]
 800cf52:	89a3      	ldrh	r3, [r4, #12]
 800cf54:	f043 0308 	orr.w	r3, r3, #8
 800cf58:	81a3      	strh	r3, [r4, #12]
 800cf5a:	6923      	ldr	r3, [r4, #16]
 800cf5c:	b94b      	cbnz	r3, 800cf72 <__swsetup_r+0x7a>
 800cf5e:	89a3      	ldrh	r3, [r4, #12]
 800cf60:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cf64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cf68:	d003      	beq.n	800cf72 <__swsetup_r+0x7a>
 800cf6a:	4621      	mov	r1, r4
 800cf6c:	4628      	mov	r0, r5
 800cf6e:	f000 f882 	bl	800d076 <__smakebuf_r>
 800cf72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf76:	f013 0201 	ands.w	r2, r3, #1
 800cf7a:	d00a      	beq.n	800cf92 <__swsetup_r+0x9a>
 800cf7c:	2200      	movs	r2, #0
 800cf7e:	60a2      	str	r2, [r4, #8]
 800cf80:	6962      	ldr	r2, [r4, #20]
 800cf82:	4252      	negs	r2, r2
 800cf84:	61a2      	str	r2, [r4, #24]
 800cf86:	6922      	ldr	r2, [r4, #16]
 800cf88:	b942      	cbnz	r2, 800cf9c <__swsetup_r+0xa4>
 800cf8a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cf8e:	d1c5      	bne.n	800cf1c <__swsetup_r+0x24>
 800cf90:	bd38      	pop	{r3, r4, r5, pc}
 800cf92:	0799      	lsls	r1, r3, #30
 800cf94:	bf58      	it	pl
 800cf96:	6962      	ldrpl	r2, [r4, #20]
 800cf98:	60a2      	str	r2, [r4, #8]
 800cf9a:	e7f4      	b.n	800cf86 <__swsetup_r+0x8e>
 800cf9c:	2000      	movs	r0, #0
 800cf9e:	e7f7      	b.n	800cf90 <__swsetup_r+0x98>
 800cfa0:	20000034 	.word	0x20000034

0800cfa4 <_raise_r>:
 800cfa4:	291f      	cmp	r1, #31
 800cfa6:	b538      	push	{r3, r4, r5, lr}
 800cfa8:	4605      	mov	r5, r0
 800cfaa:	460c      	mov	r4, r1
 800cfac:	d904      	bls.n	800cfb8 <_raise_r+0x14>
 800cfae:	2316      	movs	r3, #22
 800cfb0:	6003      	str	r3, [r0, #0]
 800cfb2:	f04f 30ff 	mov.w	r0, #4294967295
 800cfb6:	bd38      	pop	{r3, r4, r5, pc}
 800cfb8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cfba:	b112      	cbz	r2, 800cfc2 <_raise_r+0x1e>
 800cfbc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cfc0:	b94b      	cbnz	r3, 800cfd6 <_raise_r+0x32>
 800cfc2:	4628      	mov	r0, r5
 800cfc4:	f000 f830 	bl	800d028 <_getpid_r>
 800cfc8:	4622      	mov	r2, r4
 800cfca:	4601      	mov	r1, r0
 800cfcc:	4628      	mov	r0, r5
 800cfce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cfd2:	f000 b817 	b.w	800d004 <_kill_r>
 800cfd6:	2b01      	cmp	r3, #1
 800cfd8:	d00a      	beq.n	800cff0 <_raise_r+0x4c>
 800cfda:	1c59      	adds	r1, r3, #1
 800cfdc:	d103      	bne.n	800cfe6 <_raise_r+0x42>
 800cfde:	2316      	movs	r3, #22
 800cfe0:	6003      	str	r3, [r0, #0]
 800cfe2:	2001      	movs	r0, #1
 800cfe4:	e7e7      	b.n	800cfb6 <_raise_r+0x12>
 800cfe6:	2100      	movs	r1, #0
 800cfe8:	4620      	mov	r0, r4
 800cfea:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cfee:	4798      	blx	r3
 800cff0:	2000      	movs	r0, #0
 800cff2:	e7e0      	b.n	800cfb6 <_raise_r+0x12>

0800cff4 <raise>:
 800cff4:	4b02      	ldr	r3, [pc, #8]	@ (800d000 <raise+0xc>)
 800cff6:	4601      	mov	r1, r0
 800cff8:	6818      	ldr	r0, [r3, #0]
 800cffa:	f7ff bfd3 	b.w	800cfa4 <_raise_r>
 800cffe:	bf00      	nop
 800d000:	20000034 	.word	0x20000034

0800d004 <_kill_r>:
 800d004:	b538      	push	{r3, r4, r5, lr}
 800d006:	2300      	movs	r3, #0
 800d008:	4d06      	ldr	r5, [pc, #24]	@ (800d024 <_kill_r+0x20>)
 800d00a:	4604      	mov	r4, r0
 800d00c:	4608      	mov	r0, r1
 800d00e:	4611      	mov	r1, r2
 800d010:	602b      	str	r3, [r5, #0]
 800d012:	f7f5 f82a 	bl	800206a <_kill>
 800d016:	1c43      	adds	r3, r0, #1
 800d018:	d102      	bne.n	800d020 <_kill_r+0x1c>
 800d01a:	682b      	ldr	r3, [r5, #0]
 800d01c:	b103      	cbz	r3, 800d020 <_kill_r+0x1c>
 800d01e:	6023      	str	r3, [r4, #0]
 800d020:	bd38      	pop	{r3, r4, r5, pc}
 800d022:	bf00      	nop
 800d024:	20002ac8 	.word	0x20002ac8

0800d028 <_getpid_r>:
 800d028:	f7f5 b818 	b.w	800205c <_getpid>

0800d02c <__swhatbuf_r>:
 800d02c:	b570      	push	{r4, r5, r6, lr}
 800d02e:	460c      	mov	r4, r1
 800d030:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d034:	4615      	mov	r5, r2
 800d036:	2900      	cmp	r1, #0
 800d038:	461e      	mov	r6, r3
 800d03a:	b096      	sub	sp, #88	@ 0x58
 800d03c:	da0c      	bge.n	800d058 <__swhatbuf_r+0x2c>
 800d03e:	89a3      	ldrh	r3, [r4, #12]
 800d040:	2100      	movs	r1, #0
 800d042:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d046:	bf14      	ite	ne
 800d048:	2340      	movne	r3, #64	@ 0x40
 800d04a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d04e:	2000      	movs	r0, #0
 800d050:	6031      	str	r1, [r6, #0]
 800d052:	602b      	str	r3, [r5, #0]
 800d054:	b016      	add	sp, #88	@ 0x58
 800d056:	bd70      	pop	{r4, r5, r6, pc}
 800d058:	466a      	mov	r2, sp
 800d05a:	f000 f849 	bl	800d0f0 <_fstat_r>
 800d05e:	2800      	cmp	r0, #0
 800d060:	dbed      	blt.n	800d03e <__swhatbuf_r+0x12>
 800d062:	9901      	ldr	r1, [sp, #4]
 800d064:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d068:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d06c:	4259      	negs	r1, r3
 800d06e:	4159      	adcs	r1, r3
 800d070:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d074:	e7eb      	b.n	800d04e <__swhatbuf_r+0x22>

0800d076 <__smakebuf_r>:
 800d076:	898b      	ldrh	r3, [r1, #12]
 800d078:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d07a:	079d      	lsls	r5, r3, #30
 800d07c:	4606      	mov	r6, r0
 800d07e:	460c      	mov	r4, r1
 800d080:	d507      	bpl.n	800d092 <__smakebuf_r+0x1c>
 800d082:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d086:	6023      	str	r3, [r4, #0]
 800d088:	6123      	str	r3, [r4, #16]
 800d08a:	2301      	movs	r3, #1
 800d08c:	6163      	str	r3, [r4, #20]
 800d08e:	b003      	add	sp, #12
 800d090:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d092:	466a      	mov	r2, sp
 800d094:	ab01      	add	r3, sp, #4
 800d096:	f7ff ffc9 	bl	800d02c <__swhatbuf_r>
 800d09a:	9f00      	ldr	r7, [sp, #0]
 800d09c:	4605      	mov	r5, r0
 800d09e:	4639      	mov	r1, r7
 800d0a0:	4630      	mov	r0, r6
 800d0a2:	f7fe fa63 	bl	800b56c <_malloc_r>
 800d0a6:	b948      	cbnz	r0, 800d0bc <__smakebuf_r+0x46>
 800d0a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d0ac:	059a      	lsls	r2, r3, #22
 800d0ae:	d4ee      	bmi.n	800d08e <__smakebuf_r+0x18>
 800d0b0:	f023 0303 	bic.w	r3, r3, #3
 800d0b4:	f043 0302 	orr.w	r3, r3, #2
 800d0b8:	81a3      	strh	r3, [r4, #12]
 800d0ba:	e7e2      	b.n	800d082 <__smakebuf_r+0xc>
 800d0bc:	89a3      	ldrh	r3, [r4, #12]
 800d0be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d0c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d0c6:	81a3      	strh	r3, [r4, #12]
 800d0c8:	9b01      	ldr	r3, [sp, #4]
 800d0ca:	6020      	str	r0, [r4, #0]
 800d0cc:	b15b      	cbz	r3, 800d0e6 <__smakebuf_r+0x70>
 800d0ce:	4630      	mov	r0, r6
 800d0d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d0d4:	f000 f81e 	bl	800d114 <_isatty_r>
 800d0d8:	b128      	cbz	r0, 800d0e6 <__smakebuf_r+0x70>
 800d0da:	89a3      	ldrh	r3, [r4, #12]
 800d0dc:	f023 0303 	bic.w	r3, r3, #3
 800d0e0:	f043 0301 	orr.w	r3, r3, #1
 800d0e4:	81a3      	strh	r3, [r4, #12]
 800d0e6:	89a3      	ldrh	r3, [r4, #12]
 800d0e8:	431d      	orrs	r5, r3
 800d0ea:	81a5      	strh	r5, [r4, #12]
 800d0ec:	e7cf      	b.n	800d08e <__smakebuf_r+0x18>
	...

0800d0f0 <_fstat_r>:
 800d0f0:	b538      	push	{r3, r4, r5, lr}
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	4d06      	ldr	r5, [pc, #24]	@ (800d110 <_fstat_r+0x20>)
 800d0f6:	4604      	mov	r4, r0
 800d0f8:	4608      	mov	r0, r1
 800d0fa:	4611      	mov	r1, r2
 800d0fc:	602b      	str	r3, [r5, #0]
 800d0fe:	f7f5 f813 	bl	8002128 <_fstat>
 800d102:	1c43      	adds	r3, r0, #1
 800d104:	d102      	bne.n	800d10c <_fstat_r+0x1c>
 800d106:	682b      	ldr	r3, [r5, #0]
 800d108:	b103      	cbz	r3, 800d10c <_fstat_r+0x1c>
 800d10a:	6023      	str	r3, [r4, #0]
 800d10c:	bd38      	pop	{r3, r4, r5, pc}
 800d10e:	bf00      	nop
 800d110:	20002ac8 	.word	0x20002ac8

0800d114 <_isatty_r>:
 800d114:	b538      	push	{r3, r4, r5, lr}
 800d116:	2300      	movs	r3, #0
 800d118:	4d05      	ldr	r5, [pc, #20]	@ (800d130 <_isatty_r+0x1c>)
 800d11a:	4604      	mov	r4, r0
 800d11c:	4608      	mov	r0, r1
 800d11e:	602b      	str	r3, [r5, #0]
 800d120:	f7f5 f811 	bl	8002146 <_isatty>
 800d124:	1c43      	adds	r3, r0, #1
 800d126:	d102      	bne.n	800d12e <_isatty_r+0x1a>
 800d128:	682b      	ldr	r3, [r5, #0]
 800d12a:	b103      	cbz	r3, 800d12e <_isatty_r+0x1a>
 800d12c:	6023      	str	r3, [r4, #0]
 800d12e:	bd38      	pop	{r3, r4, r5, pc}
 800d130:	20002ac8 	.word	0x20002ac8

0800d134 <_init>:
 800d134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d136:	bf00      	nop
 800d138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d13a:	bc08      	pop	{r3}
 800d13c:	469e      	mov	lr, r3
 800d13e:	4770      	bx	lr

0800d140 <_fini>:
 800d140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d142:	bf00      	nop
 800d144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d146:	bc08      	pop	{r3}
 800d148:	469e      	mov	lr, r3
 800d14a:	4770      	bx	lr
