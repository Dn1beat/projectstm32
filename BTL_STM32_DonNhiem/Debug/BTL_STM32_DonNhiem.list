
BTL_STM32_DonNhiem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084a8  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  080085b8  080085b8  000095b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a04  08008a04  0000a1e8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008a04  08008a04  00009a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a0c  08008a0c  0000a1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a0c  08008a0c  00009a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008a10  08008a10  00009a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  08008a14  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b8  200001e8  08008bfc  0000a1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a0  08008bfc  0000a4a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001007e  00000000  00000000  0000a211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023a3  00000000  00000000  0001a28f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001118  00000000  00000000  0001c638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d71  00000000  00000000  0001d750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019898  00000000  00000000  0001e4c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001346d  00000000  00000000  00037d59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093d25  00000000  00000000  0004b1c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000deeeb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cc4  00000000  00000000  000def30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000e4bf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	080085a0 	.word	0x080085a0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	080085a0 	.word	0x080085a0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000d4e:	4a38      	ldr	r2, [pc, #224]	@ (8000e30 <HD44780_Init+0xec>)
 8000d50:	79fb      	ldrb	r3, [r7, #7]
 8000d52:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000d54:	4b37      	ldr	r3, [pc, #220]	@ (8000e34 <HD44780_Init+0xf0>)
 8000d56:	2208      	movs	r2, #8
 8000d58:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000d5a:	4b37      	ldr	r3, [pc, #220]	@ (8000e38 <HD44780_Init+0xf4>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000d60:	4b33      	ldr	r3, [pc, #204]	@ (8000e30 <HD44780_Init+0xec>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d907      	bls.n	8000d78 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000d68:	4b33      	ldr	r3, [pc, #204]	@ (8000e38 <HD44780_Init+0xf4>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	f043 0308 	orr.w	r3, r3, #8
 8000d70:	b2da      	uxtb	r2, r3
 8000d72:	4b31      	ldr	r3, [pc, #196]	@ (8000e38 <HD44780_Init+0xf4>)
 8000d74:	701a      	strb	r2, [r3, #0]
 8000d76:	e006      	b.n	8000d86 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000d78:	4b2f      	ldr	r3, [pc, #188]	@ (8000e38 <HD44780_Init+0xf4>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	f043 0304 	orr.w	r3, r3, #4
 8000d80:	b2da      	uxtb	r2, r3
 8000d82:	4b2d      	ldr	r3, [pc, #180]	@ (8000e38 <HD44780_Init+0xf4>)
 8000d84:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000d86:	f000 f987 	bl	8001098 <DelayInit>
  HAL_Delay(50);
 8000d8a:	2032      	movs	r0, #50	@ 0x32
 8000d8c:	f000 ff6e 	bl	8001c6c <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000d90:	4b28      	ldr	r3, [pc, #160]	@ (8000e34 <HD44780_Init+0xf0>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f000 f945 	bl	8001024 <ExpanderWrite>
  HAL_Delay(1000);
 8000d9a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d9e:	f000 ff65 	bl	8001c6c <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000da2:	2030      	movs	r0, #48	@ 0x30
 8000da4:	f000 f92c 	bl	8001000 <Write4Bits>
  DelayUS(4500);
 8000da8:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000dac:	f000 f99c 	bl	80010e8 <DelayUS>

  Write4Bits(0x03 << 4);
 8000db0:	2030      	movs	r0, #48	@ 0x30
 8000db2:	f000 f925 	bl	8001000 <Write4Bits>
  DelayUS(4500);
 8000db6:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000dba:	f000 f995 	bl	80010e8 <DelayUS>

  Write4Bits(0x03 << 4);
 8000dbe:	2030      	movs	r0, #48	@ 0x30
 8000dc0:	f000 f91e 	bl	8001000 <Write4Bits>
  DelayUS(4500);
 8000dc4:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000dc8:	f000 f98e 	bl	80010e8 <DelayUS>

  Write4Bits(0x02 << 4);
 8000dcc:	2020      	movs	r0, #32
 8000dce:	f000 f917 	bl	8001000 <Write4Bits>
  DelayUS(100);
 8000dd2:	2064      	movs	r0, #100	@ 0x64
 8000dd4:	f000 f988 	bl	80010e8 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000dd8:	4b17      	ldr	r3, [pc, #92]	@ (8000e38 <HD44780_Init+0xf4>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	f043 0320 	orr.w	r3, r3, #32
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	4618      	mov	r0, r3
 8000de4:	f000 f8cf 	bl	8000f86 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000de8:	4b14      	ldr	r3, [pc, #80]	@ (8000e3c <HD44780_Init+0xf8>)
 8000dea:	2204      	movs	r2, #4
 8000dec:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8000dee:	f000 f875 	bl	8000edc <HD44780_Display>
  HD44780_Clear();
 8000df2:	f000 f82b 	bl	8000e4c <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000df6:	4b12      	ldr	r3, [pc, #72]	@ (8000e40 <HD44780_Init+0xfc>)
 8000df8:	2202      	movs	r2, #2
 8000dfa:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000dfc:	4b10      	ldr	r3, [pc, #64]	@ (8000e40 <HD44780_Init+0xfc>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	f043 0304 	orr.w	r3, r3, #4
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	4618      	mov	r0, r3
 8000e08:	f000 f8bd 	bl	8000f86 <SendCommand>
  DelayUS(4500);
 8000e0c:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000e10:	f000 f96a 	bl	80010e8 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8000e14:	490b      	ldr	r1, [pc, #44]	@ (8000e44 <HD44780_Init+0x100>)
 8000e16:	2000      	movs	r0, #0
 8000e18:	f000 f876 	bl	8000f08 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8000e1c:	490a      	ldr	r1, [pc, #40]	@ (8000e48 <HD44780_Init+0x104>)
 8000e1e:	2001      	movs	r0, #1
 8000e20:	f000 f872 	bl	8000f08 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000e24:	f000 f81d 	bl	8000e62 <HD44780_Home>
}
 8000e28:	bf00      	nop
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	20000207 	.word	0x20000207
 8000e34:	20000208 	.word	0x20000208
 8000e38:	20000204 	.word	0x20000204
 8000e3c:	20000205 	.word	0x20000205
 8000e40:	20000206 	.word	0x20000206
 8000e44:	20000000 	.word	0x20000000
 8000e48:	20000008 	.word	0x20000008

08000e4c <HD44780_Clear>:

void HD44780_Clear()
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000e50:	2001      	movs	r0, #1
 8000e52:	f000 f898 	bl	8000f86 <SendCommand>
  DelayUS(2000);
 8000e56:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000e5a:	f000 f945 	bl	80010e8 <DelayUS>
}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <HD44780_Home>:

void HD44780_Home()
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8000e66:	2002      	movs	r0, #2
 8000e68:	f000 f88d 	bl	8000f86 <SendCommand>
  DelayUS(2000);
 8000e6c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000e70:	f000 f93a 	bl	80010e8 <DelayUS>
}
 8000e74:	bf00      	nop
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000e78:	b590      	push	{r4, r7, lr}
 8000e7a:	b087      	sub	sp, #28
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	460a      	mov	r2, r1
 8000e82:	71fb      	strb	r3, [r7, #7]
 8000e84:	4613      	mov	r3, r2
 8000e86:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000e88:	4b12      	ldr	r3, [pc, #72]	@ (8000ed4 <HD44780_SetCursor+0x5c>)
 8000e8a:	f107 0408 	add.w	r4, r7, #8
 8000e8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8000e94:	4b10      	ldr	r3, [pc, #64]	@ (8000ed8 <HD44780_SetCursor+0x60>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	79ba      	ldrb	r2, [r7, #6]
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	d303      	bcc.n	8000ea6 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8000e9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed8 <HD44780_SetCursor+0x60>)
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8000ea6:	79bb      	ldrb	r3, [r7, #6]
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	3318      	adds	r3, #24
 8000eac:	443b      	add	r3, r7
 8000eae:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000eb2:	b2da      	uxtb	r2, r3
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	b25b      	sxtb	r3, r3
 8000ebc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000ec0:	b25b      	sxtb	r3, r3
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f000 f85e 	bl	8000f86 <SendCommand>
}
 8000eca:	bf00      	nop
 8000ecc:	371c      	adds	r7, #28
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd90      	pop	{r4, r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	080085b8 	.word	0x080085b8
 8000ed8:	20000207 	.word	0x20000207

08000edc <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000ee0:	4b08      	ldr	r3, [pc, #32]	@ (8000f04 <HD44780_Display+0x28>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	f043 0304 	orr.w	r3, r3, #4
 8000ee8:	b2da      	uxtb	r2, r3
 8000eea:	4b06      	ldr	r3, [pc, #24]	@ (8000f04 <HD44780_Display+0x28>)
 8000eec:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000eee:	4b05      	ldr	r3, [pc, #20]	@ (8000f04 <HD44780_Display+0x28>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	f043 0308 	orr.w	r3, r3, #8
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f000 f844 	bl	8000f86 <SendCommand>
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000205 	.word	0x20000205

08000f08 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	6039      	str	r1, [r7, #0]
 8000f12:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	f003 0307 	and.w	r3, r3, #7
 8000f1a:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f20:	00db      	lsls	r3, r3, #3
 8000f22:	b25b      	sxtb	r3, r3
 8000f24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f28:	b25b      	sxtb	r3, r3
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f000 f82a 	bl	8000f86 <SendCommand>
  for (int i=0; i<8; i++)
 8000f32:	2300      	movs	r3, #0
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	e009      	b.n	8000f4c <HD44780_CreateSpecialChar+0x44>
  {
    SendChar(charmap[i]);
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	683a      	ldr	r2, [r7, #0]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f000 f82e 	bl	8000fa2 <SendChar>
  for (int i=0; i<8; i++)
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	2b07      	cmp	r3, #7
 8000f50:	ddf2      	ble.n	8000f38 <HD44780_CreateSpecialChar+0x30>
  }
}
 8000f52:	bf00      	nop
 8000f54:	bf00      	nop
 8000f56:	3710      	adds	r7, #16
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8000f64:	e006      	b.n	8000f74 <HD44780_PrintStr+0x18>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	1c5a      	adds	r2, r3, #1
 8000f6a:	607a      	str	r2, [r7, #4]
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f000 f817 	bl	8000fa2 <SendChar>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d1f4      	bne.n	8000f66 <HD44780_PrintStr+0xa>
}
 8000f7c:	bf00      	nop
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b082      	sub	sp, #8
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	2100      	movs	r1, #0
 8000f94:	4618      	mov	r0, r3
 8000f96:	f000 f812 	bl	8000fbe <Send>
}
 8000f9a:	bf00      	nop
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <SendChar>:

static void SendChar(uint8_t ch)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b082      	sub	sp, #8
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	4603      	mov	r3, r0
 8000faa:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8000fac:	79fb      	ldrb	r3, [r7, #7]
 8000fae:	2101      	movs	r1, #1
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f000 f804 	bl	8000fbe <Send>
}
 8000fb6:	bf00      	nop
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b084      	sub	sp, #16
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	460a      	mov	r2, r1
 8000fc8:	71fb      	strb	r3, [r7, #7]
 8000fca:	4613      	mov	r3, r2
 8000fcc:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	f023 030f 	bic.w	r3, r3, #15
 8000fd4:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	011b      	lsls	r3, r3, #4
 8000fda:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8000fdc:	7bfa      	ldrb	r2, [r7, #15]
 8000fde:	79bb      	ldrb	r3, [r7, #6]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f000 f80b 	bl	8001000 <Write4Bits>
  Write4Bits((lownib)|mode);
 8000fea:	7bba      	ldrb	r2, [r7, #14]
 8000fec:	79bb      	ldrb	r3, [r7, #6]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 f804 	bl	8001000 <Write4Bits>
}
 8000ff8:	bf00      	nop
 8000ffa:	3710      	adds	r7, #16
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	4618      	mov	r0, r3
 800100e:	f000 f809 	bl	8001024 <ExpanderWrite>
  PulseEnable(value);
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	4618      	mov	r0, r3
 8001016:	f000 f821 	bl	800105c <PulseEnable>
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
	...

08001024 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af02      	add	r7, sp, #8
 800102a:	4603      	mov	r3, r0
 800102c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 800102e:	4b09      	ldr	r3, [pc, #36]	@ (8001054 <ExpanderWrite+0x30>)
 8001030:	781a      	ldrb	r2, [r3, #0]
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	4313      	orrs	r3, r2
 8001036:	b2db      	uxtb	r3, r3
 8001038:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 800103a:	f107 020f 	add.w	r2, r7, #15
 800103e:	230a      	movs	r3, #10
 8001040:	9300      	str	r3, [sp, #0]
 8001042:	2301      	movs	r3, #1
 8001044:	214e      	movs	r1, #78	@ 0x4e
 8001046:	4804      	ldr	r0, [pc, #16]	@ (8001058 <ExpanderWrite+0x34>)
 8001048:	f001 fe38 	bl	8002cbc <HAL_I2C_Master_Transmit>
}
 800104c:	bf00      	nop
 800104e:	3710      	adds	r7, #16
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20000208 	.word	0x20000208
 8001058:	2000023c 	.word	0x2000023c

0800105c <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	f043 0304 	orr.w	r3, r3, #4
 800106c:	b2db      	uxtb	r3, r3
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff ffd8 	bl	8001024 <ExpanderWrite>
  DelayUS(20);
 8001074:	2014      	movs	r0, #20
 8001076:	f000 f837 	bl	80010e8 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	f023 0304 	bic.w	r3, r3, #4
 8001080:	b2db      	uxtb	r3, r3
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff ffce 	bl	8001024 <ExpanderWrite>
  DelayUS(20);
 8001088:	2014      	movs	r0, #20
 800108a:	f000 f82d 	bl	80010e8 <DelayUS>
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
	...

08001098 <DelayInit>:

static void DelayInit(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 800109c:	4b10      	ldr	r3, [pc, #64]	@ (80010e0 <DelayInit+0x48>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	4a0f      	ldr	r2, [pc, #60]	@ (80010e0 <DelayInit+0x48>)
 80010a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80010a6:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 80010a8:	4b0d      	ldr	r3, [pc, #52]	@ (80010e0 <DelayInit+0x48>)
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	4a0c      	ldr	r2, [pc, #48]	@ (80010e0 <DelayInit+0x48>)
 80010ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80010b2:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80010b4:	4b0b      	ldr	r3, [pc, #44]	@ (80010e4 <DelayInit+0x4c>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a0a      	ldr	r2, [pc, #40]	@ (80010e4 <DelayInit+0x4c>)
 80010ba:	f023 0301 	bic.w	r3, r3, #1
 80010be:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80010c0:	4b08      	ldr	r3, [pc, #32]	@ (80010e4 <DelayInit+0x4c>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a07      	ldr	r2, [pc, #28]	@ (80010e4 <DelayInit+0x4c>)
 80010c6:	f043 0301 	orr.w	r3, r3, #1
 80010ca:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 80010cc:	4b05      	ldr	r3, [pc, #20]	@ (80010e4 <DelayInit+0x4c>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 80010d2:	bf00      	nop
  __ASM volatile ("NOP");
 80010d4:	bf00      	nop
  __ASM volatile ("NOP");
 80010d6:	bf00      	nop
}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	bc80      	pop	{r7}
 80010de:	4770      	bx	lr
 80010e0:	e000edf0 	.word	0xe000edf0
 80010e4:	e0001000 	.word	0xe0001000

080010e8 <DelayUS>:

static void DelayUS(uint32_t us) {
 80010e8:	b480      	push	{r7}
 80010ea:	b087      	sub	sp, #28
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 80010f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001128 <DelayUS+0x40>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a0d      	ldr	r2, [pc, #52]	@ (800112c <DelayUS+0x44>)
 80010f6:	fba2 2303 	umull	r2, r3, r2, r3
 80010fa:	0c9a      	lsrs	r2, r3, #18
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	fb02 f303 	mul.w	r3, r2, r3
 8001102:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8001104:	4b0a      	ldr	r3, [pc, #40]	@ (8001130 <DelayUS+0x48>)
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 800110a:	4b09      	ldr	r3, [pc, #36]	@ (8001130 <DelayUS+0x48>)
 800110c:	685a      	ldr	r2, [r3, #4]
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	697a      	ldr	r2, [r7, #20]
 8001118:	429a      	cmp	r2, r3
 800111a:	d8f6      	bhi.n	800110a <DelayUS+0x22>
}
 800111c:	bf00      	nop
 800111e:	bf00      	nop
 8001120:	371c      	adds	r7, #28
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr
 8001128:	20000014 	.word	0x20000014
 800112c:	431bde83 	.word	0x431bde83
 8001130:	e0001000 	.word	0xe0001000
 8001134:	00000000 	.word	0x00000000

08001138 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b09a      	sub	sp, #104	@ 0x68
 800113c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800113e:	f000 fd33 	bl	8001ba8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001142:	f000 f955 	bl	80013f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001146:	f000 fabb 	bl	80016c0 <MX_GPIO_Init>
  MX_ADC1_Init();
 800114a:	f000 f9ad 	bl	80014a8 <MX_ADC1_Init>
  MX_I2C1_Init();
 800114e:	f000 f9e9 	bl	8001524 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001152:	f000 fa15 	bl	8001580 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001156:	f000 fa89 	bl	800166c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HD44780_Init(2);
 800115a:	2002      	movs	r0, #2
 800115c:	f7ff fdf2 	bl	8000d44 <HD44780_Init>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001160:	210c      	movs	r1, #12
 8001162:	4893      	ldr	r0, [pc, #588]	@ (80013b0 <main+0x278>)
 8001164:	f002 ff26 	bl	8003fb4 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  // Các biến mốc thời gian cho các tác vụ
  uint32_t last_sensor_read_time = 0;
 8001168:	2300      	movs	r3, #0
 800116a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uint32_t last_uart_send_time = 0;
 800116c:	2300      	movs	r3, #0
 800116e:	65bb      	str	r3, [r7, #88]	@ 0x58
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//ADC
    if (HAL_GetTick() - last_sensor_read_time >= 2000)
 8001170:	f000 fd72 	bl	8001c58 <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800117e:	d373      	bcc.n	8001268 <main+0x130>
    {

        last_sensor_read_time = HAL_GetTick();
 8001180:	f000 fd6a 	bl	8001c58 <HAL_GetTick>
 8001184:	65f8      	str	r0, [r7, #92]	@ 0x5c

        HAL_ADC_Start(&hadc1);
 8001186:	488b      	ldr	r0, [pc, #556]	@ (80013b4 <main+0x27c>)
 8001188:	f000 fe6c 	bl	8001e64 <HAL_ADC_Start>
        HAL_ADC_PollForConversion(&hadc1, 100);
 800118c:	2164      	movs	r1, #100	@ 0x64
 800118e:	4889      	ldr	r0, [pc, #548]	@ (80013b4 <main+0x27c>)
 8001190:	f000 ff42 	bl	8002018 <HAL_ADC_PollForConversion>
        uint32_t adcVal = HAL_ADC_GetValue(&hadc1);
 8001194:	4887      	ldr	r0, [pc, #540]	@ (80013b4 <main+0x27c>)
 8001196:	f001 f845 	bl	8002224 <HAL_ADC_GetValue>
 800119a:	6578      	str	r0, [r7, #84]	@ 0x54
        HAL_ADC_Stop(&hadc1);
 800119c:	4885      	ldr	r0, [pc, #532]	@ (80013b4 <main+0x27c>)
 800119e:	f000 ff0f 	bl	8001fc0 <HAL_ADC_Stop>
        g_currentTemperature = ((1.43 - (float)adcVal * 3.3 / 4095.0) / 0.0043) + 25.0;
 80011a2:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80011a4:	f7ff fd76 	bl	8000c94 <__aeabi_ui2f>
 80011a8:	4603      	mov	r3, r0
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff f93c 	bl	8000428 <__aeabi_f2d>
 80011b0:	a377      	add	r3, pc, #476	@ (adr r3, 8001390 <main+0x258>)
 80011b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b6:	f7ff f98f 	bl	80004d8 <__aeabi_dmul>
 80011ba:	4602      	mov	r2, r0
 80011bc:	460b      	mov	r3, r1
 80011be:	4610      	mov	r0, r2
 80011c0:	4619      	mov	r1, r3
 80011c2:	a375      	add	r3, pc, #468	@ (adr r3, 8001398 <main+0x260>)
 80011c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c8:	f7ff fab0 	bl	800072c <__aeabi_ddiv>
 80011cc:	4602      	mov	r2, r0
 80011ce:	460b      	mov	r3, r1
 80011d0:	a173      	add	r1, pc, #460	@ (adr r1, 80013a0 <main+0x268>)
 80011d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80011d6:	f7fe ffc7 	bl	8000168 <__aeabi_dsub>
 80011da:	4602      	mov	r2, r0
 80011dc:	460b      	mov	r3, r1
 80011de:	4610      	mov	r0, r2
 80011e0:	4619      	mov	r1, r3
 80011e2:	a371      	add	r3, pc, #452	@ (adr r3, 80013a8 <main+0x270>)
 80011e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e8:	f7ff faa0 	bl	800072c <__aeabi_ddiv>
 80011ec:	4602      	mov	r2, r0
 80011ee:	460b      	mov	r3, r1
 80011f0:	4610      	mov	r0, r2
 80011f2:	4619      	mov	r1, r3
 80011f4:	f04f 0200 	mov.w	r2, #0
 80011f8:	4b6f      	ldr	r3, [pc, #444]	@ (80013b8 <main+0x280>)
 80011fa:	f7fe ffb7 	bl	800016c <__adddf3>
 80011fe:	4602      	mov	r2, r0
 8001200:	460b      	mov	r3, r1
 8001202:	4610      	mov	r0, r2
 8001204:	4619      	mov	r1, r3
 8001206:	f7ff fc3f 	bl	8000a88 <__aeabi_d2f>
 800120a:	4603      	mov	r3, r0
 800120c:	4a6b      	ldr	r2, [pc, #428]	@ (80013bc <main+0x284>)
 800120e:	6013      	str	r3, [r2, #0]

//LCD
        char lcdBuffer[20];
        sprintf(lcdBuffer, "Temp: %.1fC", g_currentTemperature);
 8001210:	4b6a      	ldr	r3, [pc, #424]	@ (80013bc <main+0x284>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff f907 	bl	8000428 <__aeabi_f2d>
 800121a:	4602      	mov	r2, r0
 800121c:	460b      	mov	r3, r1
 800121e:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 8001222:	4967      	ldr	r1, [pc, #412]	@ (80013c0 <main+0x288>)
 8001224:	f004 fbd8 	bl	80059d8 <siprintf>
        HD44780_SetCursor(0, 0);
 8001228:	2100      	movs	r1, #0
 800122a:	2000      	movs	r0, #0
 800122c:	f7ff fe24 	bl	8000e78 <HD44780_SetCursor>
        HD44780_PrintStr(lcdBuffer);
 8001230:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff fe91 	bl	8000f5c <HD44780_PrintStr>
        HD44780_PrintStr("    ");
 800123a:	4862      	ldr	r0, [pc, #392]	@ (80013c4 <main+0x28c>)
 800123c:	f7ff fe8e 	bl	8000f5c <HD44780_PrintStr>

        sprintf(lcdBuffer, "Freq: %luHz", g_currentFrequency);
 8001240:	4b61      	ldr	r3, [pc, #388]	@ (80013c8 <main+0x290>)
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001248:	4960      	ldr	r1, [pc, #384]	@ (80013cc <main+0x294>)
 800124a:	4618      	mov	r0, r3
 800124c:	f004 fbc4 	bl	80059d8 <siprintf>
        HD44780_SetCursor(0, 1);
 8001250:	2101      	movs	r1, #1
 8001252:	2000      	movs	r0, #0
 8001254:	f7ff fe10 	bl	8000e78 <HD44780_SetCursor>
        HD44780_PrintStr(lcdBuffer);
 8001258:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff fe7d 	bl	8000f5c <HD44780_PrintStr>
        HD44780_PrintStr("    ");
 8001262:	4858      	ldr	r0, [pc, #352]	@ (80013c4 <main+0x28c>)
 8001264:	f7ff fe7a 	bl	8000f5c <HD44780_PrintStr>
    }
//send UART
    if (HAL_GetTick() - last_uart_send_time >= 1000)
 8001268:	f000 fcf6 	bl	8001c58 <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001276:	d31b      	bcc.n	80012b0 <main+0x178>
    {
        last_uart_send_time = HAL_GetTick();
 8001278:	f000 fcee 	bl	8001c58 <HAL_GetTick>
 800127c:	65b8      	str	r0, [r7, #88]	@ 0x58

        char txBuffer[50];
        sprintf(txBuffer, "Temp: %.1f C, Freq: %lu Hz\r\n", g_currentTemperature, g_currentFrequency);
 800127e:	4b4f      	ldr	r3, [pc, #316]	@ (80013bc <main+0x284>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff f8d0 	bl	8000428 <__aeabi_f2d>
 8001288:	4602      	mov	r2, r0
 800128a:	460b      	mov	r3, r1
 800128c:	494e      	ldr	r1, [pc, #312]	@ (80013c8 <main+0x290>)
 800128e:	6809      	ldr	r1, [r1, #0]
 8001290:	1d38      	adds	r0, r7, #4
 8001292:	9100      	str	r1, [sp, #0]
 8001294:	494e      	ldr	r1, [pc, #312]	@ (80013d0 <main+0x298>)
 8001296:	f004 fb9f 	bl	80059d8 <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)txBuffer, strlen(txBuffer), 100);
 800129a:	1d3b      	adds	r3, r7, #4
 800129c:	4618      	mov	r0, r3
 800129e:	f7fe ff57 	bl	8000150 <strlen>
 80012a2:	4603      	mov	r3, r0
 80012a4:	b29a      	uxth	r2, r3
 80012a6:	1d39      	adds	r1, r7, #4
 80012a8:	2364      	movs	r3, #100	@ 0x64
 80012aa:	484a      	ldr	r0, [pc, #296]	@ (80013d4 <main+0x29c>)
 80012ac:	f003 fc0c 	bl	8004ac8 <HAL_UART_Transmit>
    }

//UART send
    if (HAL_UART_Receive(&huart1, &rxByte, 1, 10) == HAL_OK)
 80012b0:	230a      	movs	r3, #10
 80012b2:	2201      	movs	r2, #1
 80012b4:	4948      	ldr	r1, [pc, #288]	@ (80013d8 <main+0x2a0>)
 80012b6:	4847      	ldr	r0, [pc, #284]	@ (80013d4 <main+0x29c>)
 80012b8:	f003 fc91 	bl	8004bde <HAL_UART_Receive>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	f47f af56 	bne.w	8001170 <main+0x38>
    {
        if (rxByte != '\n' && rxByte != '\r' && cmdIndex < sizeof(cmdBuffer) - 1)
 80012c4:	4b44      	ldr	r3, [pc, #272]	@ (80013d8 <main+0x2a0>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b0a      	cmp	r3, #10
 80012ca:	d013      	beq.n	80012f4 <main+0x1bc>
 80012cc:	4b42      	ldr	r3, [pc, #264]	@ (80013d8 <main+0x2a0>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b0d      	cmp	r3, #13
 80012d2:	d00f      	beq.n	80012f4 <main+0x1bc>
 80012d4:	4b41      	ldr	r3, [pc, #260]	@ (80013dc <main+0x2a4>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b1e      	cmp	r3, #30
 80012da:	d80b      	bhi.n	80012f4 <main+0x1bc>
        {
            cmdBuffer[cmdIndex++] = rxByte;
 80012dc:	4b3f      	ldr	r3, [pc, #252]	@ (80013dc <main+0x2a4>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	1c5a      	adds	r2, r3, #1
 80012e2:	b2d1      	uxtb	r1, r2
 80012e4:	4a3d      	ldr	r2, [pc, #244]	@ (80013dc <main+0x2a4>)
 80012e6:	7011      	strb	r1, [r2, #0]
 80012e8:	461a      	mov	r2, r3
 80012ea:	4b3b      	ldr	r3, [pc, #236]	@ (80013d8 <main+0x2a0>)
 80012ec:	7819      	ldrb	r1, [r3, #0]
 80012ee:	4b3c      	ldr	r3, [pc, #240]	@ (80013e0 <main+0x2a8>)
 80012f0:	5499      	strb	r1, [r3, r2]
 80012f2:	e049      	b.n	8001388 <main+0x250>
        }
        else
        {
            cmdBuffer[cmdIndex] = '\0';
 80012f4:	4b39      	ldr	r3, [pc, #228]	@ (80013dc <main+0x2a4>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	461a      	mov	r2, r3
 80012fa:	4b39      	ldr	r3, [pc, #228]	@ (80013e0 <main+0x2a8>)
 80012fc:	2100      	movs	r1, #0
 80012fe:	5499      	strb	r1, [r3, r2]
            cmdIndex = 0;
 8001300:	4b36      	ldr	r3, [pc, #216]	@ (80013dc <main+0x2a4>)
 8001302:	2200      	movs	r2, #0
 8001304:	701a      	strb	r2, [r3, #0]

            if (strlen(cmdBuffer) > 0)
 8001306:	4b36      	ldr	r3, [pc, #216]	@ (80013e0 <main+0x2a8>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2b00      	cmp	r3, #0
 800130c:	f43f af30 	beq.w	8001170 <main+0x38>
            {
                int new_freq;
                if (sscanf(cmdBuffer, "FREQ=%d", &new_freq) > 0)
 8001310:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001314:	461a      	mov	r2, r3
 8001316:	4933      	ldr	r1, [pc, #204]	@ (80013e4 <main+0x2ac>)
 8001318:	4831      	ldr	r0, [pc, #196]	@ (80013e0 <main+0x2a8>)
 800131a:	f004 fb7f 	bl	8005a1c <siscanf>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	f77f af25 	ble.w	8001170 <main+0x38>
                {
                    if (new_freq > 0 && new_freq <= 20000)
 8001326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001328:	2b00      	cmp	r3, #0
 800132a:	f77f af21 	ble.w	8001170 <main+0x38>
 800132e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001330:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8001334:	4293      	cmp	r3, r2
 8001336:	f73f af1b 	bgt.w	8001170 <main+0x38>
                    {
                        uint32_t new_arr = 72000000 / (72 * new_freq) - 1;
 800133a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800133c:	4613      	mov	r3, r2
 800133e:	00db      	lsls	r3, r3, #3
 8001340:	4413      	add	r3, r2
 8001342:	00db      	lsls	r3, r3, #3
 8001344:	461a      	mov	r2, r3
 8001346:	4b28      	ldr	r3, [pc, #160]	@ (80013e8 <main+0x2b0>)
 8001348:	fb93 f3f2 	sdiv	r3, r3, r2
 800134c:	3b01      	subs	r3, #1
 800134e:	653b      	str	r3, [r7, #80]	@ 0x50
                        __HAL_TIM_SET_AUTORELOAD(&htim2, new_arr);
 8001350:	4b17      	ldr	r3, [pc, #92]	@ (80013b0 <main+0x278>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001356:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001358:	4a15      	ldr	r2, [pc, #84]	@ (80013b0 <main+0x278>)
 800135a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800135c:	60d3      	str	r3, [r2, #12]
                        g_currentFrequency = new_freq;
 800135e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001360:	461a      	mov	r2, r3
 8001362:	4b19      	ldr	r3, [pc, #100]	@ (80013c8 <main+0x290>)
 8001364:	601a      	str	r2, [r3, #0]

                        char txBuffer[50];
                        sprintf(txBuffer, "OK! Frequency set to %d Hz\r\n", new_freq);
 8001366:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001368:	1d3b      	adds	r3, r7, #4
 800136a:	4920      	ldr	r1, [pc, #128]	@ (80013ec <main+0x2b4>)
 800136c:	4618      	mov	r0, r3
 800136e:	f004 fb33 	bl	80059d8 <siprintf>
                        HAL_UART_Transmit(&huart1, (uint8_t*)txBuffer, strlen(txBuffer), 100);
 8001372:	1d3b      	adds	r3, r7, #4
 8001374:	4618      	mov	r0, r3
 8001376:	f7fe feeb 	bl	8000150 <strlen>
 800137a:	4603      	mov	r3, r0
 800137c:	b29a      	uxth	r2, r3
 800137e:	1d39      	adds	r1, r7, #4
 8001380:	2364      	movs	r3, #100	@ 0x64
 8001382:	4814      	ldr	r0, [pc, #80]	@ (80013d4 <main+0x29c>)
 8001384:	f003 fba0 	bl	8004ac8 <HAL_UART_Transmit>
    if (HAL_GetTick() - last_sensor_read_time >= 2000)
 8001388:	e6f2      	b.n	8001170 <main+0x38>
 800138a:	bf00      	nop
 800138c:	f3af 8000 	nop.w
 8001390:	66666666 	.word	0x66666666
 8001394:	400a6666 	.word	0x400a6666
 8001398:	00000000 	.word	0x00000000
 800139c:	40affe00 	.word	0x40affe00
 80013a0:	ae147ae1 	.word	0xae147ae1
 80013a4:	3ff6e147 	.word	0x3ff6e147
 80013a8:	75f6fd22 	.word	0x75f6fd22
 80013ac:	3f719ce0 	.word	0x3f719ce0
 80013b0:	20000290 	.word	0x20000290
 80013b4:	2000020c 	.word	0x2000020c
 80013b8:	40390000 	.word	0x40390000
 80013bc:	20000320 	.word	0x20000320
 80013c0:	080085c8 	.word	0x080085c8
 80013c4:	080085d4 	.word	0x080085d4
 80013c8:	20000010 	.word	0x20000010
 80013cc:	080085dc 	.word	0x080085dc
 80013d0:	080085e8 	.word	0x080085e8
 80013d4:	200002d8 	.word	0x200002d8
 80013d8:	20000324 	.word	0x20000324
 80013dc:	20000348 	.word	0x20000348
 80013e0:	20000328 	.word	0x20000328
 80013e4:	08008608 	.word	0x08008608
 80013e8:	044aa200 	.word	0x044aa200
 80013ec:	08008610 	.word	0x08008610

080013f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b094      	sub	sp, #80	@ 0x50
 80013f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013fa:	2228      	movs	r2, #40	@ 0x28
 80013fc:	2100      	movs	r1, #0
 80013fe:	4618      	mov	r0, r3
 8001400:	f004 fb7d 	bl	8005afe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001414:	1d3b      	adds	r3, r7, #4
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	605a      	str	r2, [r3, #4]
 800141c:	609a      	str	r2, [r3, #8]
 800141e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001420:	2301      	movs	r3, #1
 8001422:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001424:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001428:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800142a:	2300      	movs	r3, #0
 800142c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800142e:	2301      	movs	r3, #1
 8001430:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001432:	2302      	movs	r3, #2
 8001434:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001436:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800143a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800143c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001440:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001442:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001446:	4618      	mov	r0, r3
 8001448:	f001 ff90 	bl	800336c <HAL_RCC_OscConfig>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001452:	f000 f963 	bl	800171c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001456:	230f      	movs	r3, #15
 8001458:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800145a:	2302      	movs	r3, #2
 800145c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800145e:	2300      	movs	r3, #0
 8001460:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001462:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001466:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001468:	2300      	movs	r3, #0
 800146a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800146c:	f107 0314 	add.w	r3, r7, #20
 8001470:	2102      	movs	r1, #2
 8001472:	4618      	mov	r0, r3
 8001474:	f002 f9fc 	bl	8003870 <HAL_RCC_ClockConfig>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800147e:	f000 f94d 	bl	800171c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001482:	2302      	movs	r3, #2
 8001484:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001486:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800148a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800148c:	1d3b      	adds	r3, r7, #4
 800148e:	4618      	mov	r0, r3
 8001490:	f002 fb7c 	bl	8003b8c <HAL_RCCEx_PeriphCLKConfig>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800149a:	f000 f93f 	bl	800171c <Error_Handler>
  }
}
 800149e:	bf00      	nop
 80014a0:	3750      	adds	r7, #80	@ 0x50
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
	...

080014a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014ae:	1d3b      	adds	r3, r7, #4
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80014b8:	4b18      	ldr	r3, [pc, #96]	@ (800151c <MX_ADC1_Init+0x74>)
 80014ba:	4a19      	ldr	r2, [pc, #100]	@ (8001520 <MX_ADC1_Init+0x78>)
 80014bc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014be:	4b17      	ldr	r3, [pc, #92]	@ (800151c <MX_ADC1_Init+0x74>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014c4:	4b15      	ldr	r3, [pc, #84]	@ (800151c <MX_ADC1_Init+0x74>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014ca:	4b14      	ldr	r3, [pc, #80]	@ (800151c <MX_ADC1_Init+0x74>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014d0:	4b12      	ldr	r3, [pc, #72]	@ (800151c <MX_ADC1_Init+0x74>)
 80014d2:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80014d6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014d8:	4b10      	ldr	r3, [pc, #64]	@ (800151c <MX_ADC1_Init+0x74>)
 80014da:	2200      	movs	r2, #0
 80014dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80014de:	4b0f      	ldr	r3, [pc, #60]	@ (800151c <MX_ADC1_Init+0x74>)
 80014e0:	2201      	movs	r2, #1
 80014e2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014e4:	480d      	ldr	r0, [pc, #52]	@ (800151c <MX_ADC1_Init+0x74>)
 80014e6:	f000 fbe5 	bl	8001cb4 <HAL_ADC_Init>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80014f0:	f000 f914 	bl	800171c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80014f4:	2310      	movs	r3, #16
 80014f6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014f8:	2301      	movs	r3, #1
 80014fa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80014fc:	2307      	movs	r3, #7
 80014fe:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001500:	1d3b      	adds	r3, r7, #4
 8001502:	4619      	mov	r1, r3
 8001504:	4805      	ldr	r0, [pc, #20]	@ (800151c <MX_ADC1_Init+0x74>)
 8001506:	f000 fe99 	bl	800223c <HAL_ADC_ConfigChannel>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001510:	f000 f904 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001514:	bf00      	nop
 8001516:	3710      	adds	r7, #16
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	2000020c 	.word	0x2000020c
 8001520:	40012400 	.word	0x40012400

08001524 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001528:	4b12      	ldr	r3, [pc, #72]	@ (8001574 <MX_I2C1_Init+0x50>)
 800152a:	4a13      	ldr	r2, [pc, #76]	@ (8001578 <MX_I2C1_Init+0x54>)
 800152c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800152e:	4b11      	ldr	r3, [pc, #68]	@ (8001574 <MX_I2C1_Init+0x50>)
 8001530:	4a12      	ldr	r2, [pc, #72]	@ (800157c <MX_I2C1_Init+0x58>)
 8001532:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001534:	4b0f      	ldr	r3, [pc, #60]	@ (8001574 <MX_I2C1_Init+0x50>)
 8001536:	2200      	movs	r2, #0
 8001538:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800153a:	4b0e      	ldr	r3, [pc, #56]	@ (8001574 <MX_I2C1_Init+0x50>)
 800153c:	2200      	movs	r2, #0
 800153e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001540:	4b0c      	ldr	r3, [pc, #48]	@ (8001574 <MX_I2C1_Init+0x50>)
 8001542:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001546:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001548:	4b0a      	ldr	r3, [pc, #40]	@ (8001574 <MX_I2C1_Init+0x50>)
 800154a:	2200      	movs	r2, #0
 800154c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800154e:	4b09      	ldr	r3, [pc, #36]	@ (8001574 <MX_I2C1_Init+0x50>)
 8001550:	2200      	movs	r2, #0
 8001552:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001554:	4b07      	ldr	r3, [pc, #28]	@ (8001574 <MX_I2C1_Init+0x50>)
 8001556:	2200      	movs	r2, #0
 8001558:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800155a:	4b06      	ldr	r3, [pc, #24]	@ (8001574 <MX_I2C1_Init+0x50>)
 800155c:	2200      	movs	r2, #0
 800155e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001560:	4804      	ldr	r0, [pc, #16]	@ (8001574 <MX_I2C1_Init+0x50>)
 8001562:	f001 fa67 	bl	8002a34 <HAL_I2C_Init>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800156c:	f000 f8d6 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001570:	bf00      	nop
 8001572:	bd80      	pop	{r7, pc}
 8001574:	2000023c 	.word	0x2000023c
 8001578:	40005400 	.word	0x40005400
 800157c:	000186a0 	.word	0x000186a0

08001580 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b08e      	sub	sp, #56	@ 0x38
 8001584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001586:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	605a      	str	r2, [r3, #4]
 8001590:	609a      	str	r2, [r3, #8]
 8001592:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001594:	f107 0320 	add.w	r3, r7, #32
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800159e:	1d3b      	adds	r3, r7, #4
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	611a      	str	r2, [r3, #16]
 80015ac:	615a      	str	r2, [r3, #20]
 80015ae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015b0:	4b2d      	ldr	r3, [pc, #180]	@ (8001668 <MX_TIM2_Init+0xe8>)
 80015b2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80015b8:	4b2b      	ldr	r3, [pc, #172]	@ (8001668 <MX_TIM2_Init+0xe8>)
 80015ba:	2247      	movs	r2, #71	@ 0x47
 80015bc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015be:	4b2a      	ldr	r3, [pc, #168]	@ (8001668 <MX_TIM2_Init+0xe8>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80015c4:	4b28      	ldr	r3, [pc, #160]	@ (8001668 <MX_TIM2_Init+0xe8>)
 80015c6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80015ca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015cc:	4b26      	ldr	r3, [pc, #152]	@ (8001668 <MX_TIM2_Init+0xe8>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015d2:	4b25      	ldr	r3, [pc, #148]	@ (8001668 <MX_TIM2_Init+0xe8>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015d8:	4823      	ldr	r0, [pc, #140]	@ (8001668 <MX_TIM2_Init+0xe8>)
 80015da:	f002 fc43 	bl	8003e64 <HAL_TIM_Base_Init>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80015e4:	f000 f89a 	bl	800171c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015ee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015f2:	4619      	mov	r1, r3
 80015f4:	481c      	ldr	r0, [pc, #112]	@ (8001668 <MX_TIM2_Init+0xe8>)
 80015f6:	f002 fe41 	bl	800427c <HAL_TIM_ConfigClockSource>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001600:	f000 f88c 	bl	800171c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001604:	4818      	ldr	r0, [pc, #96]	@ (8001668 <MX_TIM2_Init+0xe8>)
 8001606:	f002 fc7c 	bl	8003f02 <HAL_TIM_PWM_Init>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001610:	f000 f884 	bl	800171c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001614:	2300      	movs	r3, #0
 8001616:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001618:	2300      	movs	r3, #0
 800161a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800161c:	f107 0320 	add.w	r3, r7, #32
 8001620:	4619      	mov	r1, r3
 8001622:	4811      	ldr	r0, [pc, #68]	@ (8001668 <MX_TIM2_Init+0xe8>)
 8001624:	f003 f9a2 	bl	800496c <HAL_TIMEx_MasterConfigSynchronization>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800162e:	f000 f875 	bl	800171c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001632:	2360      	movs	r3, #96	@ 0x60
 8001634:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8001636:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800163a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800163c:	2300      	movs	r3, #0
 800163e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001640:	2300      	movs	r3, #0
 8001642:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001644:	1d3b      	adds	r3, r7, #4
 8001646:	220c      	movs	r2, #12
 8001648:	4619      	mov	r1, r3
 800164a:	4807      	ldr	r0, [pc, #28]	@ (8001668 <MX_TIM2_Init+0xe8>)
 800164c:	f002 fd54 	bl	80040f8 <HAL_TIM_PWM_ConfigChannel>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001656:	f000 f861 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800165a:	4803      	ldr	r0, [pc, #12]	@ (8001668 <MX_TIM2_Init+0xe8>)
 800165c:	f000 f90e 	bl	800187c <HAL_TIM_MspPostInit>

}
 8001660:	bf00      	nop
 8001662:	3738      	adds	r7, #56	@ 0x38
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	20000290 	.word	0x20000290

0800166c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001670:	4b11      	ldr	r3, [pc, #68]	@ (80016b8 <MX_USART1_UART_Init+0x4c>)
 8001672:	4a12      	ldr	r2, [pc, #72]	@ (80016bc <MX_USART1_UART_Init+0x50>)
 8001674:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001676:	4b10      	ldr	r3, [pc, #64]	@ (80016b8 <MX_USART1_UART_Init+0x4c>)
 8001678:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800167c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800167e:	4b0e      	ldr	r3, [pc, #56]	@ (80016b8 <MX_USART1_UART_Init+0x4c>)
 8001680:	2200      	movs	r2, #0
 8001682:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001684:	4b0c      	ldr	r3, [pc, #48]	@ (80016b8 <MX_USART1_UART_Init+0x4c>)
 8001686:	2200      	movs	r2, #0
 8001688:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800168a:	4b0b      	ldr	r3, [pc, #44]	@ (80016b8 <MX_USART1_UART_Init+0x4c>)
 800168c:	2200      	movs	r2, #0
 800168e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001690:	4b09      	ldr	r3, [pc, #36]	@ (80016b8 <MX_USART1_UART_Init+0x4c>)
 8001692:	220c      	movs	r2, #12
 8001694:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001696:	4b08      	ldr	r3, [pc, #32]	@ (80016b8 <MX_USART1_UART_Init+0x4c>)
 8001698:	2200      	movs	r2, #0
 800169a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800169c:	4b06      	ldr	r3, [pc, #24]	@ (80016b8 <MX_USART1_UART_Init+0x4c>)
 800169e:	2200      	movs	r2, #0
 80016a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016a2:	4805      	ldr	r0, [pc, #20]	@ (80016b8 <MX_USART1_UART_Init+0x4c>)
 80016a4:	f003 f9c0 	bl	8004a28 <HAL_UART_Init>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80016ae:	f000 f835 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	200002d8 	.word	0x200002d8
 80016bc:	40013800 	.word	0x40013800

080016c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016c6:	4b14      	ldr	r3, [pc, #80]	@ (8001718 <MX_GPIO_Init+0x58>)
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	4a13      	ldr	r2, [pc, #76]	@ (8001718 <MX_GPIO_Init+0x58>)
 80016cc:	f043 0320 	orr.w	r3, r3, #32
 80016d0:	6193      	str	r3, [r2, #24]
 80016d2:	4b11      	ldr	r3, [pc, #68]	@ (8001718 <MX_GPIO_Init+0x58>)
 80016d4:	699b      	ldr	r3, [r3, #24]
 80016d6:	f003 0320 	and.w	r3, r3, #32
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016de:	4b0e      	ldr	r3, [pc, #56]	@ (8001718 <MX_GPIO_Init+0x58>)
 80016e0:	699b      	ldr	r3, [r3, #24]
 80016e2:	4a0d      	ldr	r2, [pc, #52]	@ (8001718 <MX_GPIO_Init+0x58>)
 80016e4:	f043 0304 	orr.w	r3, r3, #4
 80016e8:	6193      	str	r3, [r2, #24]
 80016ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001718 <MX_GPIO_Init+0x58>)
 80016ec:	699b      	ldr	r3, [r3, #24]
 80016ee:	f003 0304 	and.w	r3, r3, #4
 80016f2:	60bb      	str	r3, [r7, #8]
 80016f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f6:	4b08      	ldr	r3, [pc, #32]	@ (8001718 <MX_GPIO_Init+0x58>)
 80016f8:	699b      	ldr	r3, [r3, #24]
 80016fa:	4a07      	ldr	r2, [pc, #28]	@ (8001718 <MX_GPIO_Init+0x58>)
 80016fc:	f043 0308 	orr.w	r3, r3, #8
 8001700:	6193      	str	r3, [r2, #24]
 8001702:	4b05      	ldr	r3, [pc, #20]	@ (8001718 <MX_GPIO_Init+0x58>)
 8001704:	699b      	ldr	r3, [r3, #24]
 8001706:	f003 0308 	and.w	r3, r3, #8
 800170a:	607b      	str	r3, [r7, #4]
 800170c:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800170e:	bf00      	nop
 8001710:	3714      	adds	r7, #20
 8001712:	46bd      	mov	sp, r7
 8001714:	bc80      	pop	{r7}
 8001716:	4770      	bx	lr
 8001718:	40021000 	.word	0x40021000

0800171c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001720:	b672      	cpsid	i
}
 8001722:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001724:	bf00      	nop
 8001726:	e7fd      	b.n	8001724 <Error_Handler+0x8>

08001728 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001728:	b480      	push	{r7}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800172e:	4b15      	ldr	r3, [pc, #84]	@ (8001784 <HAL_MspInit+0x5c>)
 8001730:	699b      	ldr	r3, [r3, #24]
 8001732:	4a14      	ldr	r2, [pc, #80]	@ (8001784 <HAL_MspInit+0x5c>)
 8001734:	f043 0301 	orr.w	r3, r3, #1
 8001738:	6193      	str	r3, [r2, #24]
 800173a:	4b12      	ldr	r3, [pc, #72]	@ (8001784 <HAL_MspInit+0x5c>)
 800173c:	699b      	ldr	r3, [r3, #24]
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	60bb      	str	r3, [r7, #8]
 8001744:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001746:	4b0f      	ldr	r3, [pc, #60]	@ (8001784 <HAL_MspInit+0x5c>)
 8001748:	69db      	ldr	r3, [r3, #28]
 800174a:	4a0e      	ldr	r2, [pc, #56]	@ (8001784 <HAL_MspInit+0x5c>)
 800174c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001750:	61d3      	str	r3, [r2, #28]
 8001752:	4b0c      	ldr	r3, [pc, #48]	@ (8001784 <HAL_MspInit+0x5c>)
 8001754:	69db      	ldr	r3, [r3, #28]
 8001756:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800175a:	607b      	str	r3, [r7, #4]
 800175c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800175e:	4b0a      	ldr	r3, [pc, #40]	@ (8001788 <HAL_MspInit+0x60>)
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	4a04      	ldr	r2, [pc, #16]	@ (8001788 <HAL_MspInit+0x60>)
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800177a:	bf00      	nop
 800177c:	3714      	adds	r7, #20
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr
 8001784:	40021000 	.word	0x40021000
 8001788:	40010000 	.word	0x40010000

0800178c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a09      	ldr	r2, [pc, #36]	@ (80017c0 <HAL_ADC_MspInit+0x34>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d10b      	bne.n	80017b6 <HAL_ADC_MspInit+0x2a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800179e:	4b09      	ldr	r3, [pc, #36]	@ (80017c4 <HAL_ADC_MspInit+0x38>)
 80017a0:	699b      	ldr	r3, [r3, #24]
 80017a2:	4a08      	ldr	r2, [pc, #32]	@ (80017c4 <HAL_ADC_MspInit+0x38>)
 80017a4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017a8:	6193      	str	r3, [r2, #24]
 80017aa:	4b06      	ldr	r3, [pc, #24]	@ (80017c4 <HAL_ADC_MspInit+0x38>)
 80017ac:	699b      	ldr	r3, [r3, #24]
 80017ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80017b6:	bf00      	nop
 80017b8:	3714      	adds	r7, #20
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bc80      	pop	{r7}
 80017be:	4770      	bx	lr
 80017c0:	40012400 	.word	0x40012400
 80017c4:	40021000 	.word	0x40021000

080017c8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b088      	sub	sp, #32
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d0:	f107 0310 	add.w	r3, r7, #16
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	605a      	str	r2, [r3, #4]
 80017da:	609a      	str	r2, [r3, #8]
 80017dc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a15      	ldr	r2, [pc, #84]	@ (8001838 <HAL_I2C_MspInit+0x70>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d123      	bne.n	8001830 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e8:	4b14      	ldr	r3, [pc, #80]	@ (800183c <HAL_I2C_MspInit+0x74>)
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	4a13      	ldr	r2, [pc, #76]	@ (800183c <HAL_I2C_MspInit+0x74>)
 80017ee:	f043 0308 	orr.w	r3, r3, #8
 80017f2:	6193      	str	r3, [r2, #24]
 80017f4:	4b11      	ldr	r3, [pc, #68]	@ (800183c <HAL_I2C_MspInit+0x74>)
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	f003 0308 	and.w	r3, r3, #8
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001800:	23c0      	movs	r3, #192	@ 0xc0
 8001802:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001804:	2312      	movs	r3, #18
 8001806:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001808:	2303      	movs	r3, #3
 800180a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800180c:	f107 0310 	add.w	r3, r7, #16
 8001810:	4619      	mov	r1, r3
 8001812:	480b      	ldr	r0, [pc, #44]	@ (8001840 <HAL_I2C_MspInit+0x78>)
 8001814:	f000 ff8a 	bl	800272c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001818:	4b08      	ldr	r3, [pc, #32]	@ (800183c <HAL_I2C_MspInit+0x74>)
 800181a:	69db      	ldr	r3, [r3, #28]
 800181c:	4a07      	ldr	r2, [pc, #28]	@ (800183c <HAL_I2C_MspInit+0x74>)
 800181e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001822:	61d3      	str	r3, [r2, #28]
 8001824:	4b05      	ldr	r3, [pc, #20]	@ (800183c <HAL_I2C_MspInit+0x74>)
 8001826:	69db      	ldr	r3, [r3, #28]
 8001828:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800182c:	60bb      	str	r3, [r7, #8]
 800182e:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001830:	bf00      	nop
 8001832:	3720      	adds	r7, #32
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40005400 	.word	0x40005400
 800183c:	40021000 	.word	0x40021000
 8001840:	40010c00 	.word	0x40010c00

08001844 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001854:	d10b      	bne.n	800186e <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001856:	4b08      	ldr	r3, [pc, #32]	@ (8001878 <HAL_TIM_Base_MspInit+0x34>)
 8001858:	69db      	ldr	r3, [r3, #28]
 800185a:	4a07      	ldr	r2, [pc, #28]	@ (8001878 <HAL_TIM_Base_MspInit+0x34>)
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	61d3      	str	r3, [r2, #28]
 8001862:	4b05      	ldr	r3, [pc, #20]	@ (8001878 <HAL_TIM_Base_MspInit+0x34>)
 8001864:	69db      	ldr	r3, [r3, #28]
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	60fb      	str	r3, [r7, #12]
 800186c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 800186e:	bf00      	nop
 8001870:	3714      	adds	r7, #20
 8001872:	46bd      	mov	sp, r7
 8001874:	bc80      	pop	{r7}
 8001876:	4770      	bx	lr
 8001878:	40021000 	.word	0x40021000

0800187c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b088      	sub	sp, #32
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001884:	f107 0310 	add.w	r3, r7, #16
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	609a      	str	r2, [r3, #8]
 8001890:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800189a:	d117      	bne.n	80018cc <HAL_TIM_MspPostInit+0x50>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800189c:	4b0d      	ldr	r3, [pc, #52]	@ (80018d4 <HAL_TIM_MspPostInit+0x58>)
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	4a0c      	ldr	r2, [pc, #48]	@ (80018d4 <HAL_TIM_MspPostInit+0x58>)
 80018a2:	f043 0304 	orr.w	r3, r3, #4
 80018a6:	6193      	str	r3, [r2, #24]
 80018a8:	4b0a      	ldr	r3, [pc, #40]	@ (80018d4 <HAL_TIM_MspPostInit+0x58>)
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	f003 0304 	and.w	r3, r3, #4
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80018b4:	2308      	movs	r3, #8
 80018b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b8:	2302      	movs	r3, #2
 80018ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018bc:	2302      	movs	r3, #2
 80018be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c0:	f107 0310 	add.w	r3, r7, #16
 80018c4:	4619      	mov	r1, r3
 80018c6:	4804      	ldr	r0, [pc, #16]	@ (80018d8 <HAL_TIM_MspPostInit+0x5c>)
 80018c8:	f000 ff30 	bl	800272c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80018cc:	bf00      	nop
 80018ce:	3720      	adds	r7, #32
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40021000 	.word	0x40021000
 80018d8:	40010800 	.word	0x40010800

080018dc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b088      	sub	sp, #32
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e4:	f107 0310 	add.w	r3, r7, #16
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	609a      	str	r2, [r3, #8]
 80018f0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a1c      	ldr	r2, [pc, #112]	@ (8001968 <HAL_UART_MspInit+0x8c>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d131      	bne.n	8001960 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018fc:	4b1b      	ldr	r3, [pc, #108]	@ (800196c <HAL_UART_MspInit+0x90>)
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	4a1a      	ldr	r2, [pc, #104]	@ (800196c <HAL_UART_MspInit+0x90>)
 8001902:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001906:	6193      	str	r3, [r2, #24]
 8001908:	4b18      	ldr	r3, [pc, #96]	@ (800196c <HAL_UART_MspInit+0x90>)
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001910:	60fb      	str	r3, [r7, #12]
 8001912:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001914:	4b15      	ldr	r3, [pc, #84]	@ (800196c <HAL_UART_MspInit+0x90>)
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	4a14      	ldr	r2, [pc, #80]	@ (800196c <HAL_UART_MspInit+0x90>)
 800191a:	f043 0304 	orr.w	r3, r3, #4
 800191e:	6193      	str	r3, [r2, #24]
 8001920:	4b12      	ldr	r3, [pc, #72]	@ (800196c <HAL_UART_MspInit+0x90>)
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	f003 0304 	and.w	r3, r3, #4
 8001928:	60bb      	str	r3, [r7, #8]
 800192a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800192c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001930:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001932:	2302      	movs	r3, #2
 8001934:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001936:	2303      	movs	r3, #3
 8001938:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800193a:	f107 0310 	add.w	r3, r7, #16
 800193e:	4619      	mov	r1, r3
 8001940:	480b      	ldr	r0, [pc, #44]	@ (8001970 <HAL_UART_MspInit+0x94>)
 8001942:	f000 fef3 	bl	800272c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001946:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800194a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800194c:	2300      	movs	r3, #0
 800194e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001950:	2300      	movs	r3, #0
 8001952:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001954:	f107 0310 	add.w	r3, r7, #16
 8001958:	4619      	mov	r1, r3
 800195a:	4805      	ldr	r0, [pc, #20]	@ (8001970 <HAL_UART_MspInit+0x94>)
 800195c:	f000 fee6 	bl	800272c <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001960:	bf00      	nop
 8001962:	3720      	adds	r7, #32
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40013800 	.word	0x40013800
 800196c:	40021000 	.word	0x40021000
 8001970:	40010800 	.word	0x40010800

08001974 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001978:	bf00      	nop
 800197a:	e7fd      	b.n	8001978 <NMI_Handler+0x4>

0800197c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001980:	bf00      	nop
 8001982:	e7fd      	b.n	8001980 <HardFault_Handler+0x4>

08001984 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001988:	bf00      	nop
 800198a:	e7fd      	b.n	8001988 <MemManage_Handler+0x4>

0800198c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001990:	bf00      	nop
 8001992:	e7fd      	b.n	8001990 <BusFault_Handler+0x4>

08001994 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001998:	bf00      	nop
 800199a:	e7fd      	b.n	8001998 <UsageFault_Handler+0x4>

0800199c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019a0:	bf00      	nop
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bc80      	pop	{r7}
 80019a6:	4770      	bx	lr

080019a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019ac:	bf00      	nop
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bc80      	pop	{r7}
 80019b2:	4770      	bx	lr

080019b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019b8:	bf00      	nop
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bc80      	pop	{r7}
 80019be:	4770      	bx	lr

080019c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019c4:	f000 f936 	bl	8001c34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019c8:	bf00      	nop
 80019ca:	bd80      	pop	{r7, pc}

080019cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  return 1;
 80019d0:	2301      	movs	r3, #1
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bc80      	pop	{r7}
 80019d8:	4770      	bx	lr

080019da <_kill>:

int _kill(int pid, int sig)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b082      	sub	sp, #8
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
 80019e2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019e4:	f004 f8de 	bl	8005ba4 <__errno>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2216      	movs	r2, #22
 80019ec:	601a      	str	r2, [r3, #0]
  return -1;
 80019ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <_exit>:

void _exit (int status)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b082      	sub	sp, #8
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a02:	f04f 31ff 	mov.w	r1, #4294967295
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f7ff ffe7 	bl	80019da <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a0c:	bf00      	nop
 8001a0e:	e7fd      	b.n	8001a0c <_exit+0x12>

08001a10 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	617b      	str	r3, [r7, #20]
 8001a20:	e00a      	b.n	8001a38 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a22:	f3af 8000 	nop.w
 8001a26:	4601      	mov	r1, r0
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	1c5a      	adds	r2, r3, #1
 8001a2c:	60ba      	str	r2, [r7, #8]
 8001a2e:	b2ca      	uxtb	r2, r1
 8001a30:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	3301      	adds	r3, #1
 8001a36:	617b      	str	r3, [r7, #20]
 8001a38:	697a      	ldr	r2, [r7, #20]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	dbf0      	blt.n	8001a22 <_read+0x12>
  }

  return len;
 8001a40:	687b      	ldr	r3, [r7, #4]
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3718      	adds	r7, #24
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b086      	sub	sp, #24
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	60f8      	str	r0, [r7, #12]
 8001a52:	60b9      	str	r1, [r7, #8]
 8001a54:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a56:	2300      	movs	r3, #0
 8001a58:	617b      	str	r3, [r7, #20]
 8001a5a:	e009      	b.n	8001a70 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	1c5a      	adds	r2, r3, #1
 8001a60:	60ba      	str	r2, [r7, #8]
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	617b      	str	r3, [r7, #20]
 8001a70:	697a      	ldr	r2, [r7, #20]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	dbf1      	blt.n	8001a5c <_write+0x12>
  }
  return len;
 8001a78:	687b      	ldr	r3, [r7, #4]
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3718      	adds	r7, #24
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <_close>:

int _close(int file)
{
 8001a82:	b480      	push	{r7}
 8001a84:	b083      	sub	sp, #12
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bc80      	pop	{r7}
 8001a96:	4770      	bx	lr

08001a98 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001aa8:	605a      	str	r2, [r3, #4]
  return 0;
 8001aaa:	2300      	movs	r3, #0
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bc80      	pop	{r7}
 8001ab4:	4770      	bx	lr

08001ab6 <_isatty>:

int _isatty(int file)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b083      	sub	sp, #12
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001abe:	2301      	movs	r3, #1
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bc80      	pop	{r7}
 8001ac8:	4770      	bx	lr

08001aca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001aca:	b480      	push	{r7}
 8001acc:	b085      	sub	sp, #20
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	60f8      	str	r0, [r7, #12]
 8001ad2:	60b9      	str	r1, [r7, #8]
 8001ad4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3714      	adds	r7, #20
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bc80      	pop	{r7}
 8001ae0:	4770      	bx	lr
	...

08001ae4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001aec:	4a14      	ldr	r2, [pc, #80]	@ (8001b40 <_sbrk+0x5c>)
 8001aee:	4b15      	ldr	r3, [pc, #84]	@ (8001b44 <_sbrk+0x60>)
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001af8:	4b13      	ldr	r3, [pc, #76]	@ (8001b48 <_sbrk+0x64>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d102      	bne.n	8001b06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b00:	4b11      	ldr	r3, [pc, #68]	@ (8001b48 <_sbrk+0x64>)
 8001b02:	4a12      	ldr	r2, [pc, #72]	@ (8001b4c <_sbrk+0x68>)
 8001b04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b06:	4b10      	ldr	r3, [pc, #64]	@ (8001b48 <_sbrk+0x64>)
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d207      	bcs.n	8001b24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b14:	f004 f846 	bl	8005ba4 <__errno>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	220c      	movs	r2, #12
 8001b1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b22:	e009      	b.n	8001b38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b24:	4b08      	ldr	r3, [pc, #32]	@ (8001b48 <_sbrk+0x64>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b2a:	4b07      	ldr	r3, [pc, #28]	@ (8001b48 <_sbrk+0x64>)
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4413      	add	r3, r2
 8001b32:	4a05      	ldr	r2, [pc, #20]	@ (8001b48 <_sbrk+0x64>)
 8001b34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b36:	68fb      	ldr	r3, [r7, #12]
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3718      	adds	r7, #24
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	20005000 	.word	0x20005000
 8001b44:	00000400 	.word	0x00000400
 8001b48:	2000034c 	.word	0x2000034c
 8001b4c:	200004a0 	.word	0x200004a0

08001b50 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b54:	bf00      	nop
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bc80      	pop	{r7}
 8001b5a:	4770      	bx	lr

08001b5c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b5c:	f7ff fff8 	bl	8001b50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b60:	480b      	ldr	r0, [pc, #44]	@ (8001b90 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001b62:	490c      	ldr	r1, [pc, #48]	@ (8001b94 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001b64:	4a0c      	ldr	r2, [pc, #48]	@ (8001b98 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001b66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b68:	e002      	b.n	8001b70 <LoopCopyDataInit>

08001b6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b6e:	3304      	adds	r3, #4

08001b70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b74:	d3f9      	bcc.n	8001b6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b76:	4a09      	ldr	r2, [pc, #36]	@ (8001b9c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001b78:	4c09      	ldr	r4, [pc, #36]	@ (8001ba0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b7c:	e001      	b.n	8001b82 <LoopFillZerobss>

08001b7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b80:	3204      	adds	r2, #4

08001b82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b84:	d3fb      	bcc.n	8001b7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b86:	f004 f813 	bl	8005bb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b8a:	f7ff fad5 	bl	8001138 <main>
  bx lr
 8001b8e:	4770      	bx	lr
  ldr r0, =_sdata
 8001b90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b94:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001b98:	08008a14 	.word	0x08008a14
  ldr r2, =_sbss
 8001b9c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001ba0:	200004a0 	.word	0x200004a0

08001ba4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ba4:	e7fe      	b.n	8001ba4 <ADC1_2_IRQHandler>
	...

08001ba8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bac:	4b08      	ldr	r3, [pc, #32]	@ (8001bd0 <HAL_Init+0x28>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a07      	ldr	r2, [pc, #28]	@ (8001bd0 <HAL_Init+0x28>)
 8001bb2:	f043 0310 	orr.w	r3, r3, #16
 8001bb6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bb8:	2003      	movs	r0, #3
 8001bba:	f000 fd83 	bl	80026c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bbe:	200f      	movs	r0, #15
 8001bc0:	f000 f808 	bl	8001bd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bc4:	f7ff fdb0 	bl	8001728 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	40022000 	.word	0x40022000

08001bd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bdc:	4b12      	ldr	r3, [pc, #72]	@ (8001c28 <HAL_InitTick+0x54>)
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	4b12      	ldr	r3, [pc, #72]	@ (8001c2c <HAL_InitTick+0x58>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	4619      	mov	r1, r3
 8001be6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bea:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f000 fd8d 	bl	8002712 <HAL_SYSTICK_Config>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e00e      	b.n	8001c20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2b0f      	cmp	r3, #15
 8001c06:	d80a      	bhi.n	8001c1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c08:	2200      	movs	r2, #0
 8001c0a:	6879      	ldr	r1, [r7, #4]
 8001c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c10:	f000 fd63 	bl	80026da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c14:	4a06      	ldr	r2, [pc, #24]	@ (8001c30 <HAL_InitTick+0x5c>)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	e000      	b.n	8001c20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	20000014 	.word	0x20000014
 8001c2c:	2000001c 	.word	0x2000001c
 8001c30:	20000018 	.word	0x20000018

08001c34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c38:	4b05      	ldr	r3, [pc, #20]	@ (8001c50 <HAL_IncTick+0x1c>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	4b05      	ldr	r3, [pc, #20]	@ (8001c54 <HAL_IncTick+0x20>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4413      	add	r3, r2
 8001c44:	4a03      	ldr	r2, [pc, #12]	@ (8001c54 <HAL_IncTick+0x20>)
 8001c46:	6013      	str	r3, [r2, #0]
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bc80      	pop	{r7}
 8001c4e:	4770      	bx	lr
 8001c50:	2000001c 	.word	0x2000001c
 8001c54:	20000350 	.word	0x20000350

08001c58 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c5c:	4b02      	ldr	r3, [pc, #8]	@ (8001c68 <HAL_GetTick+0x10>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bc80      	pop	{r7}
 8001c66:	4770      	bx	lr
 8001c68:	20000350 	.word	0x20000350

08001c6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c74:	f7ff fff0 	bl	8001c58 <HAL_GetTick>
 8001c78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c84:	d005      	beq.n	8001c92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c86:	4b0a      	ldr	r3, [pc, #40]	@ (8001cb0 <HAL_Delay+0x44>)
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	4413      	add	r3, r2
 8001c90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c92:	bf00      	nop
 8001c94:	f7ff ffe0 	bl	8001c58 <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	68fa      	ldr	r2, [r7, #12]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d8f7      	bhi.n	8001c94 <HAL_Delay+0x28>
  {
  }
}
 8001ca4:	bf00      	nop
 8001ca6:	bf00      	nop
 8001ca8:	3710      	adds	r7, #16
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	2000001c 	.word	0x2000001c

08001cb4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b086      	sub	sp, #24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d101      	bne.n	8001cd6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e0be      	b.n	8001e54 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d109      	bne.n	8001cf8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f7ff fd4a 	bl	800178c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f000 fbf1 	bl	80024e0 <ADC_ConversionStop_Disable>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d06:	f003 0310 	and.w	r3, r3, #16
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	f040 8099 	bne.w	8001e42 <HAL_ADC_Init+0x18e>
 8001d10:	7dfb      	ldrb	r3, [r7, #23]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	f040 8095 	bne.w	8001e42 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d1c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001d20:	f023 0302 	bic.w	r3, r3, #2
 8001d24:	f043 0202 	orr.w	r2, r3, #2
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d34:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	7b1b      	ldrb	r3, [r3, #12]
 8001d3a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001d3c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d3e:	68ba      	ldr	r2, [r7, #8]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d4c:	d003      	beq.n	8001d56 <HAL_ADC_Init+0xa2>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d102      	bne.n	8001d5c <HAL_ADC_Init+0xa8>
 8001d56:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d5a:	e000      	b.n	8001d5e <HAL_ADC_Init+0xaa>
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	7d1b      	ldrb	r3, [r3, #20]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d119      	bne.n	8001da0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	7b1b      	ldrb	r3, [r3, #12]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d109      	bne.n	8001d88 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	035a      	lsls	r2, r3, #13
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001d84:	613b      	str	r3, [r7, #16]
 8001d86:	e00b      	b.n	8001da0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d8c:	f043 0220 	orr.w	r2, r3, #32
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d98:	f043 0201 	orr.w	r2, r3, #1
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	430a      	orrs	r2, r1
 8001db2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	689a      	ldr	r2, [r3, #8]
 8001dba:	4b28      	ldr	r3, [pc, #160]	@ (8001e5c <HAL_ADC_Init+0x1a8>)
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	6812      	ldr	r2, [r2, #0]
 8001dc2:	68b9      	ldr	r1, [r7, #8]
 8001dc4:	430b      	orrs	r3, r1
 8001dc6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001dd0:	d003      	beq.n	8001dda <HAL_ADC_Init+0x126>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d104      	bne.n	8001de4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	691b      	ldr	r3, [r3, #16]
 8001dde:	3b01      	subs	r3, #1
 8001de0:	051b      	lsls	r3, r3, #20
 8001de2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dea:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	68fa      	ldr	r2, [r7, #12]
 8001df4:	430a      	orrs	r2, r1
 8001df6:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	689a      	ldr	r2, [r3, #8]
 8001dfe:	4b18      	ldr	r3, [pc, #96]	@ (8001e60 <HAL_ADC_Init+0x1ac>)
 8001e00:	4013      	ands	r3, r2
 8001e02:	68ba      	ldr	r2, [r7, #8]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d10b      	bne.n	8001e20 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e12:	f023 0303 	bic.w	r3, r3, #3
 8001e16:	f043 0201 	orr.w	r2, r3, #1
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e1e:	e018      	b.n	8001e52 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e24:	f023 0312 	bic.w	r3, r3, #18
 8001e28:	f043 0210 	orr.w	r2, r3, #16
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e34:	f043 0201 	orr.w	r2, r3, #1
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e40:	e007      	b.n	8001e52 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e46:	f043 0210 	orr.w	r2, r3, #16
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001e52:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3718      	adds	r7, #24
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	ffe1f7fd 	.word	0xffe1f7fd
 8001e60:	ff1f0efe 	.word	0xff1f0efe

08001e64 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d101      	bne.n	8001e7e <HAL_ADC_Start+0x1a>
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	e098      	b.n	8001fb0 <HAL_ADC_Start+0x14c>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2201      	movs	r2, #1
 8001e82:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 fad0 	bl	800242c <ADC_Enable>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001e90:	7bfb      	ldrb	r3, [r7, #15]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	f040 8087 	bne.w	8001fa6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ea0:	f023 0301 	bic.w	r3, r3, #1
 8001ea4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a41      	ldr	r2, [pc, #260]	@ (8001fb8 <HAL_ADC_Start+0x154>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d105      	bne.n	8001ec2 <HAL_ADC_Start+0x5e>
 8001eb6:	4b41      	ldr	r3, [pc, #260]	@ (8001fbc <HAL_ADC_Start+0x158>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d115      	bne.n	8001eee <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ec6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d026      	beq.n	8001f2a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ee0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001ee4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001eec:	e01d      	b.n	8001f2a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ef2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a2f      	ldr	r2, [pc, #188]	@ (8001fbc <HAL_ADC_Start+0x158>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d004      	beq.n	8001f0e <HAL_ADC_Start+0xaa>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a2b      	ldr	r2, [pc, #172]	@ (8001fb8 <HAL_ADC_Start+0x154>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d10d      	bne.n	8001f2a <HAL_ADC_Start+0xc6>
 8001f0e:	4b2b      	ldr	r3, [pc, #172]	@ (8001fbc <HAL_ADC_Start+0x158>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d007      	beq.n	8001f2a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f1e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001f22:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f2e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d006      	beq.n	8001f44 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f3a:	f023 0206 	bic.w	r2, r3, #6
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001f42:	e002      	b.n	8001f4a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f06f 0202 	mvn.w	r2, #2
 8001f5a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001f66:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001f6a:	d113      	bne.n	8001f94 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001f70:	4a11      	ldr	r2, [pc, #68]	@ (8001fb8 <HAL_ADC_Start+0x154>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d105      	bne.n	8001f82 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001f76:	4b11      	ldr	r3, [pc, #68]	@ (8001fbc <HAL_ADC_Start+0x158>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d108      	bne.n	8001f94 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	689a      	ldr	r2, [r3, #8]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001f90:	609a      	str	r2, [r3, #8]
 8001f92:	e00c      	b.n	8001fae <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	689a      	ldr	r2, [r3, #8]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001fa2:	609a      	str	r2, [r3, #8]
 8001fa4:	e003      	b.n	8001fae <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3710      	adds	r7, #16
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40012800 	.word	0x40012800
 8001fbc:	40012400 	.word	0x40012400

08001fc0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d101      	bne.n	8001fda <HAL_ADC_Stop+0x1a>
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	e01a      	b.n	8002010 <HAL_ADC_Stop+0x50>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 fa7c 	bl	80024e0 <ADC_ConversionStop_Disable>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001fec:	7bfb      	ldrb	r3, [r7, #15]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d109      	bne.n	8002006 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ff6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001ffa:	f023 0301 	bic.w	r3, r3, #1
 8001ffe:	f043 0201 	orr.w	r2, r3, #1
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800200e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002010:	4618      	mov	r0, r3
 8002012:	3710      	adds	r7, #16
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002018:	b590      	push	{r4, r7, lr}
 800201a:	b087      	sub	sp, #28
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002022:	2300      	movs	r3, #0
 8002024:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002026:	2300      	movs	r3, #0
 8002028:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800202a:	2300      	movs	r3, #0
 800202c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800202e:	f7ff fe13 	bl	8001c58 <HAL_GetTick>
 8002032:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800203e:	2b00      	cmp	r3, #0
 8002040:	d00b      	beq.n	800205a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002046:	f043 0220 	orr.w	r2, r3, #32
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e0d3      	b.n	8002202 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002064:	2b00      	cmp	r3, #0
 8002066:	d131      	bne.n	80020cc <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800206e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002072:	2b00      	cmp	r3, #0
 8002074:	d12a      	bne.n	80020cc <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002076:	e021      	b.n	80020bc <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800207e:	d01d      	beq.n	80020bc <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d007      	beq.n	8002096 <HAL_ADC_PollForConversion+0x7e>
 8002086:	f7ff fde7 	bl	8001c58 <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	683a      	ldr	r2, [r7, #0]
 8002092:	429a      	cmp	r2, r3
 8002094:	d212      	bcs.n	80020bc <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0302 	and.w	r3, r3, #2
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d10b      	bne.n	80020bc <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020a8:	f043 0204 	orr.w	r2, r3, #4
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e0a2      	b.n	8002202 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d0d6      	beq.n	8002078 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80020ca:	e070      	b.n	80021ae <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80020cc:	4b4f      	ldr	r3, [pc, #316]	@ (800220c <HAL_ADC_PollForConversion+0x1f4>)
 80020ce:	681c      	ldr	r4, [r3, #0]
 80020d0:	2002      	movs	r0, #2
 80020d2:	f001 fe11 	bl	8003cf8 <HAL_RCCEx_GetPeriphCLKFreq>
 80020d6:	4603      	mov	r3, r0
 80020d8:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	6919      	ldr	r1, [r3, #16]
 80020e2:	4b4b      	ldr	r3, [pc, #300]	@ (8002210 <HAL_ADC_PollForConversion+0x1f8>)
 80020e4:	400b      	ands	r3, r1
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d118      	bne.n	800211c <HAL_ADC_PollForConversion+0x104>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	68d9      	ldr	r1, [r3, #12]
 80020f0:	4b48      	ldr	r3, [pc, #288]	@ (8002214 <HAL_ADC_PollForConversion+0x1fc>)
 80020f2:	400b      	ands	r3, r1
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d111      	bne.n	800211c <HAL_ADC_PollForConversion+0x104>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	6919      	ldr	r1, [r3, #16]
 80020fe:	4b46      	ldr	r3, [pc, #280]	@ (8002218 <HAL_ADC_PollForConversion+0x200>)
 8002100:	400b      	ands	r3, r1
 8002102:	2b00      	cmp	r3, #0
 8002104:	d108      	bne.n	8002118 <HAL_ADC_PollForConversion+0x100>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68d9      	ldr	r1, [r3, #12]
 800210c:	4b43      	ldr	r3, [pc, #268]	@ (800221c <HAL_ADC_PollForConversion+0x204>)
 800210e:	400b      	ands	r3, r1
 8002110:	2b00      	cmp	r3, #0
 8002112:	d101      	bne.n	8002118 <HAL_ADC_PollForConversion+0x100>
 8002114:	2314      	movs	r3, #20
 8002116:	e020      	b.n	800215a <HAL_ADC_PollForConversion+0x142>
 8002118:	2329      	movs	r3, #41	@ 0x29
 800211a:	e01e      	b.n	800215a <HAL_ADC_PollForConversion+0x142>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	6919      	ldr	r1, [r3, #16]
 8002122:	4b3d      	ldr	r3, [pc, #244]	@ (8002218 <HAL_ADC_PollForConversion+0x200>)
 8002124:	400b      	ands	r3, r1
 8002126:	2b00      	cmp	r3, #0
 8002128:	d106      	bne.n	8002138 <HAL_ADC_PollForConversion+0x120>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	68d9      	ldr	r1, [r3, #12]
 8002130:	4b3a      	ldr	r3, [pc, #232]	@ (800221c <HAL_ADC_PollForConversion+0x204>)
 8002132:	400b      	ands	r3, r1
 8002134:	2b00      	cmp	r3, #0
 8002136:	d00d      	beq.n	8002154 <HAL_ADC_PollForConversion+0x13c>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6919      	ldr	r1, [r3, #16]
 800213e:	4b38      	ldr	r3, [pc, #224]	@ (8002220 <HAL_ADC_PollForConversion+0x208>)
 8002140:	400b      	ands	r3, r1
 8002142:	2b00      	cmp	r3, #0
 8002144:	d108      	bne.n	8002158 <HAL_ADC_PollForConversion+0x140>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68d9      	ldr	r1, [r3, #12]
 800214c:	4b34      	ldr	r3, [pc, #208]	@ (8002220 <HAL_ADC_PollForConversion+0x208>)
 800214e:	400b      	ands	r3, r1
 8002150:	2b00      	cmp	r3, #0
 8002152:	d101      	bne.n	8002158 <HAL_ADC_PollForConversion+0x140>
 8002154:	2354      	movs	r3, #84	@ 0x54
 8002156:	e000      	b.n	800215a <HAL_ADC_PollForConversion+0x142>
 8002158:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800215a:	fb02 f303 	mul.w	r3, r2, r3
 800215e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002160:	e021      	b.n	80021a6 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002168:	d01a      	beq.n	80021a0 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d007      	beq.n	8002180 <HAL_ADC_PollForConversion+0x168>
 8002170:	f7ff fd72 	bl	8001c58 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	683a      	ldr	r2, [r7, #0]
 800217c:	429a      	cmp	r2, r3
 800217e:	d20f      	bcs.n	80021a0 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	429a      	cmp	r2, r3
 8002186:	d90b      	bls.n	80021a0 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800218c:	f043 0204 	orr.w	r2, r3, #4
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e030      	b.n	8002202 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	3301      	adds	r3, #1
 80021a4:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	693a      	ldr	r2, [r7, #16]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d8d9      	bhi.n	8002162 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f06f 0212 	mvn.w	r2, #18
 80021b6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021bc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80021ce:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80021d2:	d115      	bne.n	8002200 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d111      	bne.n	8002200 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d105      	bne.n	8002200 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021f8:	f043 0201 	orr.w	r2, r3, #1
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	371c      	adds	r7, #28
 8002206:	46bd      	mov	sp, r7
 8002208:	bd90      	pop	{r4, r7, pc}
 800220a:	bf00      	nop
 800220c:	20000014 	.word	0x20000014
 8002210:	24924924 	.word	0x24924924
 8002214:	00924924 	.word	0x00924924
 8002218:	12492492 	.word	0x12492492
 800221c:	00492492 	.word	0x00492492
 8002220:	00249249 	.word	0x00249249

08002224 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002232:	4618      	mov	r0, r3
 8002234:	370c      	adds	r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	bc80      	pop	{r7}
 800223a:	4770      	bx	lr

0800223c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002246:	2300      	movs	r3, #0
 8002248:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800224a:	2300      	movs	r3, #0
 800224c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002254:	2b01      	cmp	r3, #1
 8002256:	d101      	bne.n	800225c <HAL_ADC_ConfigChannel+0x20>
 8002258:	2302      	movs	r3, #2
 800225a:	e0dc      	b.n	8002416 <HAL_ADC_ConfigChannel+0x1da>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2201      	movs	r2, #1
 8002260:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	2b06      	cmp	r3, #6
 800226a:	d81c      	bhi.n	80022a6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685a      	ldr	r2, [r3, #4]
 8002276:	4613      	mov	r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	4413      	add	r3, r2
 800227c:	3b05      	subs	r3, #5
 800227e:	221f      	movs	r2, #31
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	43db      	mvns	r3, r3
 8002286:	4019      	ands	r1, r3
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	6818      	ldr	r0, [r3, #0]
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685a      	ldr	r2, [r3, #4]
 8002290:	4613      	mov	r3, r2
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	4413      	add	r3, r2
 8002296:	3b05      	subs	r3, #5
 8002298:	fa00 f203 	lsl.w	r2, r0, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	430a      	orrs	r2, r1
 80022a2:	635a      	str	r2, [r3, #52]	@ 0x34
 80022a4:	e03c      	b.n	8002320 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	2b0c      	cmp	r3, #12
 80022ac:	d81c      	bhi.n	80022e8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685a      	ldr	r2, [r3, #4]
 80022b8:	4613      	mov	r3, r2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	4413      	add	r3, r2
 80022be:	3b23      	subs	r3, #35	@ 0x23
 80022c0:	221f      	movs	r2, #31
 80022c2:	fa02 f303 	lsl.w	r3, r2, r3
 80022c6:	43db      	mvns	r3, r3
 80022c8:	4019      	ands	r1, r3
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	6818      	ldr	r0, [r3, #0]
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685a      	ldr	r2, [r3, #4]
 80022d2:	4613      	mov	r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	4413      	add	r3, r2
 80022d8:	3b23      	subs	r3, #35	@ 0x23
 80022da:	fa00 f203 	lsl.w	r2, r0, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	430a      	orrs	r2, r1
 80022e4:	631a      	str	r2, [r3, #48]	@ 0x30
 80022e6:	e01b      	b.n	8002320 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685a      	ldr	r2, [r3, #4]
 80022f2:	4613      	mov	r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	4413      	add	r3, r2
 80022f8:	3b41      	subs	r3, #65	@ 0x41
 80022fa:	221f      	movs	r2, #31
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	43db      	mvns	r3, r3
 8002302:	4019      	ands	r1, r3
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	6818      	ldr	r0, [r3, #0]
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685a      	ldr	r2, [r3, #4]
 800230c:	4613      	mov	r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	4413      	add	r3, r2
 8002312:	3b41      	subs	r3, #65	@ 0x41
 8002314:	fa00 f203 	lsl.w	r2, r0, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	430a      	orrs	r2, r1
 800231e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2b09      	cmp	r3, #9
 8002326:	d91c      	bls.n	8002362 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	68d9      	ldr	r1, [r3, #12]
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	4613      	mov	r3, r2
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	4413      	add	r3, r2
 8002338:	3b1e      	subs	r3, #30
 800233a:	2207      	movs	r2, #7
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	43db      	mvns	r3, r3
 8002342:	4019      	ands	r1, r3
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	6898      	ldr	r0, [r3, #8]
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	4613      	mov	r3, r2
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	4413      	add	r3, r2
 8002352:	3b1e      	subs	r3, #30
 8002354:	fa00 f203 	lsl.w	r2, r0, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	430a      	orrs	r2, r1
 800235e:	60da      	str	r2, [r3, #12]
 8002360:	e019      	b.n	8002396 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	6919      	ldr	r1, [r3, #16]
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	4613      	mov	r3, r2
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	4413      	add	r3, r2
 8002372:	2207      	movs	r2, #7
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	43db      	mvns	r3, r3
 800237a:	4019      	ands	r1, r3
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	6898      	ldr	r0, [r3, #8]
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	4613      	mov	r3, r2
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	4413      	add	r3, r2
 800238a:	fa00 f203 	lsl.w	r2, r0, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	430a      	orrs	r2, r1
 8002394:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2b10      	cmp	r3, #16
 800239c:	d003      	beq.n	80023a6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80023a2:	2b11      	cmp	r3, #17
 80023a4:	d132      	bne.n	800240c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a1d      	ldr	r2, [pc, #116]	@ (8002420 <HAL_ADC_ConfigChannel+0x1e4>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d125      	bne.n	80023fc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d126      	bne.n	800240c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	689a      	ldr	r2, [r3, #8]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80023cc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2b10      	cmp	r3, #16
 80023d4:	d11a      	bne.n	800240c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80023d6:	4b13      	ldr	r3, [pc, #76]	@ (8002424 <HAL_ADC_ConfigChannel+0x1e8>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a13      	ldr	r2, [pc, #76]	@ (8002428 <HAL_ADC_ConfigChannel+0x1ec>)
 80023dc:	fba2 2303 	umull	r2, r3, r2, r3
 80023e0:	0c9a      	lsrs	r2, r3, #18
 80023e2:	4613      	mov	r3, r2
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	4413      	add	r3, r2
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80023ec:	e002      	b.n	80023f4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	3b01      	subs	r3, #1
 80023f2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1f9      	bne.n	80023ee <HAL_ADC_ConfigChannel+0x1b2>
 80023fa:	e007      	b.n	800240c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002400:	f043 0220 	orr.w	r2, r3, #32
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002414:	7bfb      	ldrb	r3, [r7, #15]
}
 8002416:	4618      	mov	r0, r3
 8002418:	3714      	adds	r7, #20
 800241a:	46bd      	mov	sp, r7
 800241c:	bc80      	pop	{r7}
 800241e:	4770      	bx	lr
 8002420:	40012400 	.word	0x40012400
 8002424:	20000014 	.word	0x20000014
 8002428:	431bde83 	.word	0x431bde83

0800242c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002434:	2300      	movs	r3, #0
 8002436:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002438:	2300      	movs	r3, #0
 800243a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	2b01      	cmp	r3, #1
 8002448:	d040      	beq.n	80024cc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	689a      	ldr	r2, [r3, #8]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f042 0201 	orr.w	r2, r2, #1
 8002458:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800245a:	4b1f      	ldr	r3, [pc, #124]	@ (80024d8 <ADC_Enable+0xac>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a1f      	ldr	r2, [pc, #124]	@ (80024dc <ADC_Enable+0xb0>)
 8002460:	fba2 2303 	umull	r2, r3, r2, r3
 8002464:	0c9b      	lsrs	r3, r3, #18
 8002466:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002468:	e002      	b.n	8002470 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	3b01      	subs	r3, #1
 800246e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1f9      	bne.n	800246a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002476:	f7ff fbef 	bl	8001c58 <HAL_GetTick>
 800247a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800247c:	e01f      	b.n	80024be <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800247e:	f7ff fbeb 	bl	8001c58 <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	2b02      	cmp	r3, #2
 800248a:	d918      	bls.n	80024be <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	2b01      	cmp	r3, #1
 8002498:	d011      	beq.n	80024be <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800249e:	f043 0210 	orr.w	r2, r3, #16
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024aa:	f043 0201 	orr.w	r2, r3, #1
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e007      	b.n	80024ce <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f003 0301 	and.w	r3, r3, #1
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d1d8      	bne.n	800247e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	20000014 	.word	0x20000014
 80024dc:	431bde83 	.word	0x431bde83

080024e0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024e8:	2300      	movs	r3, #0
 80024ea:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d12e      	bne.n	8002558 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	689a      	ldr	r2, [r3, #8]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f022 0201 	bic.w	r2, r2, #1
 8002508:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800250a:	f7ff fba5 	bl	8001c58 <HAL_GetTick>
 800250e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002510:	e01b      	b.n	800254a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002512:	f7ff fba1 	bl	8001c58 <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d914      	bls.n	800254a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	2b01      	cmp	r3, #1
 800252c:	d10d      	bne.n	800254a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002532:	f043 0210 	orr.w	r2, r3, #16
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800253e:	f043 0201 	orr.w	r2, r3, #1
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e007      	b.n	800255a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f003 0301 	and.w	r3, r3, #1
 8002554:	2b01      	cmp	r3, #1
 8002556:	d0dc      	beq.n	8002512 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
	...

08002564 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002564:	b480      	push	{r7}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f003 0307 	and.w	r3, r3, #7
 8002572:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002574:	4b0c      	ldr	r3, [pc, #48]	@ (80025a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800257a:	68ba      	ldr	r2, [r7, #8]
 800257c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002580:	4013      	ands	r3, r2
 8002582:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800258c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002590:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002594:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002596:	4a04      	ldr	r2, [pc, #16]	@ (80025a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	60d3      	str	r3, [r2, #12]
}
 800259c:	bf00      	nop
 800259e:	3714      	adds	r7, #20
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bc80      	pop	{r7}
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	e000ed00 	.word	0xe000ed00

080025ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025b0:	4b04      	ldr	r3, [pc, #16]	@ (80025c4 <__NVIC_GetPriorityGrouping+0x18>)
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	0a1b      	lsrs	r3, r3, #8
 80025b6:	f003 0307 	and.w	r3, r3, #7
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	46bd      	mov	sp, r7
 80025be:	bc80      	pop	{r7}
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	e000ed00 	.word	0xe000ed00

080025c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	4603      	mov	r3, r0
 80025d0:	6039      	str	r1, [r7, #0]
 80025d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	db0a      	blt.n	80025f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	b2da      	uxtb	r2, r3
 80025e0:	490c      	ldr	r1, [pc, #48]	@ (8002614 <__NVIC_SetPriority+0x4c>)
 80025e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e6:	0112      	lsls	r2, r2, #4
 80025e8:	b2d2      	uxtb	r2, r2
 80025ea:	440b      	add	r3, r1
 80025ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025f0:	e00a      	b.n	8002608 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	b2da      	uxtb	r2, r3
 80025f6:	4908      	ldr	r1, [pc, #32]	@ (8002618 <__NVIC_SetPriority+0x50>)
 80025f8:	79fb      	ldrb	r3, [r7, #7]
 80025fa:	f003 030f 	and.w	r3, r3, #15
 80025fe:	3b04      	subs	r3, #4
 8002600:	0112      	lsls	r2, r2, #4
 8002602:	b2d2      	uxtb	r2, r2
 8002604:	440b      	add	r3, r1
 8002606:	761a      	strb	r2, [r3, #24]
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	bc80      	pop	{r7}
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	e000e100 	.word	0xe000e100
 8002618:	e000ed00 	.word	0xe000ed00

0800261c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800261c:	b480      	push	{r7}
 800261e:	b089      	sub	sp, #36	@ 0x24
 8002620:	af00      	add	r7, sp, #0
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f003 0307 	and.w	r3, r3, #7
 800262e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	f1c3 0307 	rsb	r3, r3, #7
 8002636:	2b04      	cmp	r3, #4
 8002638:	bf28      	it	cs
 800263a:	2304      	movcs	r3, #4
 800263c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	3304      	adds	r3, #4
 8002642:	2b06      	cmp	r3, #6
 8002644:	d902      	bls.n	800264c <NVIC_EncodePriority+0x30>
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	3b03      	subs	r3, #3
 800264a:	e000      	b.n	800264e <NVIC_EncodePriority+0x32>
 800264c:	2300      	movs	r3, #0
 800264e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002650:	f04f 32ff 	mov.w	r2, #4294967295
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	43da      	mvns	r2, r3
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	401a      	ands	r2, r3
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002664:	f04f 31ff 	mov.w	r1, #4294967295
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	fa01 f303 	lsl.w	r3, r1, r3
 800266e:	43d9      	mvns	r1, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002674:	4313      	orrs	r3, r2
         );
}
 8002676:	4618      	mov	r0, r3
 8002678:	3724      	adds	r7, #36	@ 0x24
 800267a:	46bd      	mov	sp, r7
 800267c:	bc80      	pop	{r7}
 800267e:	4770      	bx	lr

08002680 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	3b01      	subs	r3, #1
 800268c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002690:	d301      	bcc.n	8002696 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002692:	2301      	movs	r3, #1
 8002694:	e00f      	b.n	80026b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002696:	4a0a      	ldr	r2, [pc, #40]	@ (80026c0 <SysTick_Config+0x40>)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	3b01      	subs	r3, #1
 800269c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800269e:	210f      	movs	r1, #15
 80026a0:	f04f 30ff 	mov.w	r0, #4294967295
 80026a4:	f7ff ff90 	bl	80025c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026a8:	4b05      	ldr	r3, [pc, #20]	@ (80026c0 <SysTick_Config+0x40>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026ae:	4b04      	ldr	r3, [pc, #16]	@ (80026c0 <SysTick_Config+0x40>)
 80026b0:	2207      	movs	r2, #7
 80026b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	e000e010 	.word	0xe000e010

080026c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f7ff ff49 	bl	8002564 <__NVIC_SetPriorityGrouping>
}
 80026d2:	bf00      	nop
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026da:	b580      	push	{r7, lr}
 80026dc:	b086      	sub	sp, #24
 80026de:	af00      	add	r7, sp, #0
 80026e0:	4603      	mov	r3, r0
 80026e2:	60b9      	str	r1, [r7, #8]
 80026e4:	607a      	str	r2, [r7, #4]
 80026e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026e8:	2300      	movs	r3, #0
 80026ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026ec:	f7ff ff5e 	bl	80025ac <__NVIC_GetPriorityGrouping>
 80026f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	68b9      	ldr	r1, [r7, #8]
 80026f6:	6978      	ldr	r0, [r7, #20]
 80026f8:	f7ff ff90 	bl	800261c <NVIC_EncodePriority>
 80026fc:	4602      	mov	r2, r0
 80026fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002702:	4611      	mov	r1, r2
 8002704:	4618      	mov	r0, r3
 8002706:	f7ff ff5f 	bl	80025c8 <__NVIC_SetPriority>
}
 800270a:	bf00      	nop
 800270c:	3718      	adds	r7, #24
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b082      	sub	sp, #8
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f7ff ffb0 	bl	8002680 <SysTick_Config>
 8002720:	4603      	mov	r3, r0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
	...

0800272c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800272c:	b480      	push	{r7}
 800272e:	b08b      	sub	sp, #44	@ 0x2c
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002736:	2300      	movs	r3, #0
 8002738:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800273a:	2300      	movs	r3, #0
 800273c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800273e:	e169      	b.n	8002a14 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002740:	2201      	movs	r2, #1
 8002742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	69fa      	ldr	r2, [r7, #28]
 8002750:	4013      	ands	r3, r2
 8002752:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	429a      	cmp	r2, r3
 800275a:	f040 8158 	bne.w	8002a0e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	4a9a      	ldr	r2, [pc, #616]	@ (80029cc <HAL_GPIO_Init+0x2a0>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d05e      	beq.n	8002826 <HAL_GPIO_Init+0xfa>
 8002768:	4a98      	ldr	r2, [pc, #608]	@ (80029cc <HAL_GPIO_Init+0x2a0>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d875      	bhi.n	800285a <HAL_GPIO_Init+0x12e>
 800276e:	4a98      	ldr	r2, [pc, #608]	@ (80029d0 <HAL_GPIO_Init+0x2a4>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d058      	beq.n	8002826 <HAL_GPIO_Init+0xfa>
 8002774:	4a96      	ldr	r2, [pc, #600]	@ (80029d0 <HAL_GPIO_Init+0x2a4>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d86f      	bhi.n	800285a <HAL_GPIO_Init+0x12e>
 800277a:	4a96      	ldr	r2, [pc, #600]	@ (80029d4 <HAL_GPIO_Init+0x2a8>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d052      	beq.n	8002826 <HAL_GPIO_Init+0xfa>
 8002780:	4a94      	ldr	r2, [pc, #592]	@ (80029d4 <HAL_GPIO_Init+0x2a8>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d869      	bhi.n	800285a <HAL_GPIO_Init+0x12e>
 8002786:	4a94      	ldr	r2, [pc, #592]	@ (80029d8 <HAL_GPIO_Init+0x2ac>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d04c      	beq.n	8002826 <HAL_GPIO_Init+0xfa>
 800278c:	4a92      	ldr	r2, [pc, #584]	@ (80029d8 <HAL_GPIO_Init+0x2ac>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d863      	bhi.n	800285a <HAL_GPIO_Init+0x12e>
 8002792:	4a92      	ldr	r2, [pc, #584]	@ (80029dc <HAL_GPIO_Init+0x2b0>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d046      	beq.n	8002826 <HAL_GPIO_Init+0xfa>
 8002798:	4a90      	ldr	r2, [pc, #576]	@ (80029dc <HAL_GPIO_Init+0x2b0>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d85d      	bhi.n	800285a <HAL_GPIO_Init+0x12e>
 800279e:	2b12      	cmp	r3, #18
 80027a0:	d82a      	bhi.n	80027f8 <HAL_GPIO_Init+0xcc>
 80027a2:	2b12      	cmp	r3, #18
 80027a4:	d859      	bhi.n	800285a <HAL_GPIO_Init+0x12e>
 80027a6:	a201      	add	r2, pc, #4	@ (adr r2, 80027ac <HAL_GPIO_Init+0x80>)
 80027a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ac:	08002827 	.word	0x08002827
 80027b0:	08002801 	.word	0x08002801
 80027b4:	08002813 	.word	0x08002813
 80027b8:	08002855 	.word	0x08002855
 80027bc:	0800285b 	.word	0x0800285b
 80027c0:	0800285b 	.word	0x0800285b
 80027c4:	0800285b 	.word	0x0800285b
 80027c8:	0800285b 	.word	0x0800285b
 80027cc:	0800285b 	.word	0x0800285b
 80027d0:	0800285b 	.word	0x0800285b
 80027d4:	0800285b 	.word	0x0800285b
 80027d8:	0800285b 	.word	0x0800285b
 80027dc:	0800285b 	.word	0x0800285b
 80027e0:	0800285b 	.word	0x0800285b
 80027e4:	0800285b 	.word	0x0800285b
 80027e8:	0800285b 	.word	0x0800285b
 80027ec:	0800285b 	.word	0x0800285b
 80027f0:	08002809 	.word	0x08002809
 80027f4:	0800281d 	.word	0x0800281d
 80027f8:	4a79      	ldr	r2, [pc, #484]	@ (80029e0 <HAL_GPIO_Init+0x2b4>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d013      	beq.n	8002826 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80027fe:	e02c      	b.n	800285a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	623b      	str	r3, [r7, #32]
          break;
 8002806:	e029      	b.n	800285c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	3304      	adds	r3, #4
 800280e:	623b      	str	r3, [r7, #32]
          break;
 8002810:	e024      	b.n	800285c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	3308      	adds	r3, #8
 8002818:	623b      	str	r3, [r7, #32]
          break;
 800281a:	e01f      	b.n	800285c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	330c      	adds	r3, #12
 8002822:	623b      	str	r3, [r7, #32]
          break;
 8002824:	e01a      	b.n	800285c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d102      	bne.n	8002834 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800282e:	2304      	movs	r3, #4
 8002830:	623b      	str	r3, [r7, #32]
          break;
 8002832:	e013      	b.n	800285c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d105      	bne.n	8002848 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800283c:	2308      	movs	r3, #8
 800283e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	69fa      	ldr	r2, [r7, #28]
 8002844:	611a      	str	r2, [r3, #16]
          break;
 8002846:	e009      	b.n	800285c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002848:	2308      	movs	r3, #8
 800284a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	69fa      	ldr	r2, [r7, #28]
 8002850:	615a      	str	r2, [r3, #20]
          break;
 8002852:	e003      	b.n	800285c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002854:	2300      	movs	r3, #0
 8002856:	623b      	str	r3, [r7, #32]
          break;
 8002858:	e000      	b.n	800285c <HAL_GPIO_Init+0x130>
          break;
 800285a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	2bff      	cmp	r3, #255	@ 0xff
 8002860:	d801      	bhi.n	8002866 <HAL_GPIO_Init+0x13a>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	e001      	b.n	800286a <HAL_GPIO_Init+0x13e>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	3304      	adds	r3, #4
 800286a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	2bff      	cmp	r3, #255	@ 0xff
 8002870:	d802      	bhi.n	8002878 <HAL_GPIO_Init+0x14c>
 8002872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	e002      	b.n	800287e <HAL_GPIO_Init+0x152>
 8002878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800287a:	3b08      	subs	r3, #8
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	210f      	movs	r1, #15
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	fa01 f303 	lsl.w	r3, r1, r3
 800288c:	43db      	mvns	r3, r3
 800288e:	401a      	ands	r2, r3
 8002890:	6a39      	ldr	r1, [r7, #32]
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	fa01 f303 	lsl.w	r3, r1, r3
 8002898:	431a      	orrs	r2, r3
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	f000 80b1 	beq.w	8002a0e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80028ac:	4b4d      	ldr	r3, [pc, #308]	@ (80029e4 <HAL_GPIO_Init+0x2b8>)
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	4a4c      	ldr	r2, [pc, #304]	@ (80029e4 <HAL_GPIO_Init+0x2b8>)
 80028b2:	f043 0301 	orr.w	r3, r3, #1
 80028b6:	6193      	str	r3, [r2, #24]
 80028b8:	4b4a      	ldr	r3, [pc, #296]	@ (80029e4 <HAL_GPIO_Init+0x2b8>)
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	f003 0301 	and.w	r3, r3, #1
 80028c0:	60bb      	str	r3, [r7, #8]
 80028c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80028c4:	4a48      	ldr	r2, [pc, #288]	@ (80029e8 <HAL_GPIO_Init+0x2bc>)
 80028c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c8:	089b      	lsrs	r3, r3, #2
 80028ca:	3302      	adds	r3, #2
 80028cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80028d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d4:	f003 0303 	and.w	r3, r3, #3
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	220f      	movs	r2, #15
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	43db      	mvns	r3, r3
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	4013      	ands	r3, r2
 80028e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a40      	ldr	r2, [pc, #256]	@ (80029ec <HAL_GPIO_Init+0x2c0>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d013      	beq.n	8002918 <HAL_GPIO_Init+0x1ec>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4a3f      	ldr	r2, [pc, #252]	@ (80029f0 <HAL_GPIO_Init+0x2c4>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d00d      	beq.n	8002914 <HAL_GPIO_Init+0x1e8>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4a3e      	ldr	r2, [pc, #248]	@ (80029f4 <HAL_GPIO_Init+0x2c8>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d007      	beq.n	8002910 <HAL_GPIO_Init+0x1e4>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a3d      	ldr	r2, [pc, #244]	@ (80029f8 <HAL_GPIO_Init+0x2cc>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d101      	bne.n	800290c <HAL_GPIO_Init+0x1e0>
 8002908:	2303      	movs	r3, #3
 800290a:	e006      	b.n	800291a <HAL_GPIO_Init+0x1ee>
 800290c:	2304      	movs	r3, #4
 800290e:	e004      	b.n	800291a <HAL_GPIO_Init+0x1ee>
 8002910:	2302      	movs	r3, #2
 8002912:	e002      	b.n	800291a <HAL_GPIO_Init+0x1ee>
 8002914:	2301      	movs	r3, #1
 8002916:	e000      	b.n	800291a <HAL_GPIO_Init+0x1ee>
 8002918:	2300      	movs	r3, #0
 800291a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800291c:	f002 0203 	and.w	r2, r2, #3
 8002920:	0092      	lsls	r2, r2, #2
 8002922:	4093      	lsls	r3, r2
 8002924:	68fa      	ldr	r2, [r7, #12]
 8002926:	4313      	orrs	r3, r2
 8002928:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800292a:	492f      	ldr	r1, [pc, #188]	@ (80029e8 <HAL_GPIO_Init+0x2bc>)
 800292c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800292e:	089b      	lsrs	r3, r3, #2
 8002930:	3302      	adds	r3, #2
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d006      	beq.n	8002952 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002944:	4b2d      	ldr	r3, [pc, #180]	@ (80029fc <HAL_GPIO_Init+0x2d0>)
 8002946:	689a      	ldr	r2, [r3, #8]
 8002948:	492c      	ldr	r1, [pc, #176]	@ (80029fc <HAL_GPIO_Init+0x2d0>)
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	4313      	orrs	r3, r2
 800294e:	608b      	str	r3, [r1, #8]
 8002950:	e006      	b.n	8002960 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002952:	4b2a      	ldr	r3, [pc, #168]	@ (80029fc <HAL_GPIO_Init+0x2d0>)
 8002954:	689a      	ldr	r2, [r3, #8]
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	43db      	mvns	r3, r3
 800295a:	4928      	ldr	r1, [pc, #160]	@ (80029fc <HAL_GPIO_Init+0x2d0>)
 800295c:	4013      	ands	r3, r2
 800295e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d006      	beq.n	800297a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800296c:	4b23      	ldr	r3, [pc, #140]	@ (80029fc <HAL_GPIO_Init+0x2d0>)
 800296e:	68da      	ldr	r2, [r3, #12]
 8002970:	4922      	ldr	r1, [pc, #136]	@ (80029fc <HAL_GPIO_Init+0x2d0>)
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	4313      	orrs	r3, r2
 8002976:	60cb      	str	r3, [r1, #12]
 8002978:	e006      	b.n	8002988 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800297a:	4b20      	ldr	r3, [pc, #128]	@ (80029fc <HAL_GPIO_Init+0x2d0>)
 800297c:	68da      	ldr	r2, [r3, #12]
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	43db      	mvns	r3, r3
 8002982:	491e      	ldr	r1, [pc, #120]	@ (80029fc <HAL_GPIO_Init+0x2d0>)
 8002984:	4013      	ands	r3, r2
 8002986:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d006      	beq.n	80029a2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002994:	4b19      	ldr	r3, [pc, #100]	@ (80029fc <HAL_GPIO_Init+0x2d0>)
 8002996:	685a      	ldr	r2, [r3, #4]
 8002998:	4918      	ldr	r1, [pc, #96]	@ (80029fc <HAL_GPIO_Init+0x2d0>)
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	4313      	orrs	r3, r2
 800299e:	604b      	str	r3, [r1, #4]
 80029a0:	e006      	b.n	80029b0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80029a2:	4b16      	ldr	r3, [pc, #88]	@ (80029fc <HAL_GPIO_Init+0x2d0>)
 80029a4:	685a      	ldr	r2, [r3, #4]
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	43db      	mvns	r3, r3
 80029aa:	4914      	ldr	r1, [pc, #80]	@ (80029fc <HAL_GPIO_Init+0x2d0>)
 80029ac:	4013      	ands	r3, r2
 80029ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d021      	beq.n	8002a00 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80029bc:	4b0f      	ldr	r3, [pc, #60]	@ (80029fc <HAL_GPIO_Init+0x2d0>)
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	490e      	ldr	r1, [pc, #56]	@ (80029fc <HAL_GPIO_Init+0x2d0>)
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	600b      	str	r3, [r1, #0]
 80029c8:	e021      	b.n	8002a0e <HAL_GPIO_Init+0x2e2>
 80029ca:	bf00      	nop
 80029cc:	10320000 	.word	0x10320000
 80029d0:	10310000 	.word	0x10310000
 80029d4:	10220000 	.word	0x10220000
 80029d8:	10210000 	.word	0x10210000
 80029dc:	10120000 	.word	0x10120000
 80029e0:	10110000 	.word	0x10110000
 80029e4:	40021000 	.word	0x40021000
 80029e8:	40010000 	.word	0x40010000
 80029ec:	40010800 	.word	0x40010800
 80029f0:	40010c00 	.word	0x40010c00
 80029f4:	40011000 	.word	0x40011000
 80029f8:	40011400 	.word	0x40011400
 80029fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a00:	4b0b      	ldr	r3, [pc, #44]	@ (8002a30 <HAL_GPIO_Init+0x304>)
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	43db      	mvns	r3, r3
 8002a08:	4909      	ldr	r1, [pc, #36]	@ (8002a30 <HAL_GPIO_Init+0x304>)
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a10:	3301      	adds	r3, #1
 8002a12:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f47f ae8e 	bne.w	8002740 <HAL_GPIO_Init+0x14>
  }
}
 8002a24:	bf00      	nop
 8002a26:	bf00      	nop
 8002a28:	372c      	adds	r7, #44	@ 0x2c
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bc80      	pop	{r7}
 8002a2e:	4770      	bx	lr
 8002a30:	40010400 	.word	0x40010400

08002a34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e12b      	b.n	8002c9e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d106      	bne.n	8002a60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f7fe feb4 	bl	80017c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2224      	movs	r2, #36	@ 0x24
 8002a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f022 0201 	bic.w	r2, r2, #1
 8002a76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a98:	f001 f832 	bl	8003b00 <HAL_RCC_GetPCLK1Freq>
 8002a9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	4a81      	ldr	r2, [pc, #516]	@ (8002ca8 <HAL_I2C_Init+0x274>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d807      	bhi.n	8002ab8 <HAL_I2C_Init+0x84>
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	4a80      	ldr	r2, [pc, #512]	@ (8002cac <HAL_I2C_Init+0x278>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	bf94      	ite	ls
 8002ab0:	2301      	movls	r3, #1
 8002ab2:	2300      	movhi	r3, #0
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	e006      	b.n	8002ac6 <HAL_I2C_Init+0x92>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	4a7d      	ldr	r2, [pc, #500]	@ (8002cb0 <HAL_I2C_Init+0x27c>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	bf94      	ite	ls
 8002ac0:	2301      	movls	r3, #1
 8002ac2:	2300      	movhi	r3, #0
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e0e7      	b.n	8002c9e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	4a78      	ldr	r2, [pc, #480]	@ (8002cb4 <HAL_I2C_Init+0x280>)
 8002ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad6:	0c9b      	lsrs	r3, r3, #18
 8002ad8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	68ba      	ldr	r2, [r7, #8]
 8002aea:	430a      	orrs	r2, r1
 8002aec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	6a1b      	ldr	r3, [r3, #32]
 8002af4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	4a6a      	ldr	r2, [pc, #424]	@ (8002ca8 <HAL_I2C_Init+0x274>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d802      	bhi.n	8002b08 <HAL_I2C_Init+0xd4>
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	3301      	adds	r3, #1
 8002b06:	e009      	b.n	8002b1c <HAL_I2C_Init+0xe8>
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002b0e:	fb02 f303 	mul.w	r3, r2, r3
 8002b12:	4a69      	ldr	r2, [pc, #420]	@ (8002cb8 <HAL_I2C_Init+0x284>)
 8002b14:	fba2 2303 	umull	r2, r3, r2, r3
 8002b18:	099b      	lsrs	r3, r3, #6
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	6812      	ldr	r2, [r2, #0]
 8002b20:	430b      	orrs	r3, r1
 8002b22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	69db      	ldr	r3, [r3, #28]
 8002b2a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002b2e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	495c      	ldr	r1, [pc, #368]	@ (8002ca8 <HAL_I2C_Init+0x274>)
 8002b38:	428b      	cmp	r3, r1
 8002b3a:	d819      	bhi.n	8002b70 <HAL_I2C_Init+0x13c>
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	1e59      	subs	r1, r3, #1
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b4a:	1c59      	adds	r1, r3, #1
 8002b4c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002b50:	400b      	ands	r3, r1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00a      	beq.n	8002b6c <HAL_I2C_Init+0x138>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	1e59      	subs	r1, r3, #1
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b64:	3301      	adds	r3, #1
 8002b66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b6a:	e051      	b.n	8002c10 <HAL_I2C_Init+0x1dc>
 8002b6c:	2304      	movs	r3, #4
 8002b6e:	e04f      	b.n	8002c10 <HAL_I2C_Init+0x1dc>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d111      	bne.n	8002b9c <HAL_I2C_Init+0x168>
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	1e58      	subs	r0, r3, #1
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6859      	ldr	r1, [r3, #4]
 8002b80:	460b      	mov	r3, r1
 8002b82:	005b      	lsls	r3, r3, #1
 8002b84:	440b      	add	r3, r1
 8002b86:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	bf0c      	ite	eq
 8002b94:	2301      	moveq	r3, #1
 8002b96:	2300      	movne	r3, #0
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	e012      	b.n	8002bc2 <HAL_I2C_Init+0x18e>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	1e58      	subs	r0, r3, #1
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6859      	ldr	r1, [r3, #4]
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	440b      	add	r3, r1
 8002baa:	0099      	lsls	r1, r3, #2
 8002bac:	440b      	add	r3, r1
 8002bae:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	bf0c      	ite	eq
 8002bbc:	2301      	moveq	r3, #1
 8002bbe:	2300      	movne	r3, #0
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d001      	beq.n	8002bca <HAL_I2C_Init+0x196>
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e022      	b.n	8002c10 <HAL_I2C_Init+0x1dc>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d10e      	bne.n	8002bf0 <HAL_I2C_Init+0x1bc>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	1e58      	subs	r0, r3, #1
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6859      	ldr	r1, [r3, #4]
 8002bda:	460b      	mov	r3, r1
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	440b      	add	r3, r1
 8002be0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002be4:	3301      	adds	r3, #1
 8002be6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002bee:	e00f      	b.n	8002c10 <HAL_I2C_Init+0x1dc>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	1e58      	subs	r0, r3, #1
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6859      	ldr	r1, [r3, #4]
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	440b      	add	r3, r1
 8002bfe:	0099      	lsls	r1, r3, #2
 8002c00:	440b      	add	r3, r1
 8002c02:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c06:	3301      	adds	r3, #1
 8002c08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c0c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002c10:	6879      	ldr	r1, [r7, #4]
 8002c12:	6809      	ldr	r1, [r1, #0]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	69da      	ldr	r2, [r3, #28]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a1b      	ldr	r3, [r3, #32]
 8002c2a:	431a      	orrs	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	430a      	orrs	r2, r1
 8002c32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002c3e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	6911      	ldr	r1, [r2, #16]
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	68d2      	ldr	r2, [r2, #12]
 8002c4a:	4311      	orrs	r1, r2
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	6812      	ldr	r2, [r2, #0]
 8002c50:	430b      	orrs	r3, r1
 8002c52:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	695a      	ldr	r2, [r3, #20]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	431a      	orrs	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f042 0201 	orr.w	r2, r2, #1
 8002c7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2220      	movs	r2, #32
 8002c8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	000186a0 	.word	0x000186a0
 8002cac:	001e847f 	.word	0x001e847f
 8002cb0:	003d08ff 	.word	0x003d08ff
 8002cb4:	431bde83 	.word	0x431bde83
 8002cb8:	10624dd3 	.word	0x10624dd3

08002cbc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b088      	sub	sp, #32
 8002cc0:	af02      	add	r7, sp, #8
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	607a      	str	r2, [r7, #4]
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	460b      	mov	r3, r1
 8002cca:	817b      	strh	r3, [r7, #10]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002cd0:	f7fe ffc2 	bl	8001c58 <HAL_GetTick>
 8002cd4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	2b20      	cmp	r3, #32
 8002ce0:	f040 80e0 	bne.w	8002ea4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	9300      	str	r3, [sp, #0]
 8002ce8:	2319      	movs	r3, #25
 8002cea:	2201      	movs	r2, #1
 8002cec:	4970      	ldr	r1, [pc, #448]	@ (8002eb0 <HAL_I2C_Master_Transmit+0x1f4>)
 8002cee:	68f8      	ldr	r0, [r7, #12]
 8002cf0:	f000 f964 	bl	8002fbc <I2C_WaitOnFlagUntilTimeout>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	e0d3      	b.n	8002ea6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d101      	bne.n	8002d0c <HAL_I2C_Master_Transmit+0x50>
 8002d08:	2302      	movs	r3, #2
 8002d0a:	e0cc      	b.n	8002ea6 <HAL_I2C_Master_Transmit+0x1ea>
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d007      	beq.n	8002d32 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f042 0201 	orr.w	r2, r2, #1
 8002d30:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d40:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2221      	movs	r2, #33	@ 0x21
 8002d46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2210      	movs	r2, #16
 8002d4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2200      	movs	r2, #0
 8002d56:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	893a      	ldrh	r2, [r7, #8]
 8002d62:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d68:	b29a      	uxth	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	4a50      	ldr	r2, [pc, #320]	@ (8002eb4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002d72:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002d74:	8979      	ldrh	r1, [r7, #10]
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	6a3a      	ldr	r2, [r7, #32]
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f000 f89c 	bl	8002eb8 <I2C_MasterRequestWrite>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e08d      	b.n	8002ea6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	613b      	str	r3, [r7, #16]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	695b      	ldr	r3, [r3, #20]
 8002d94:	613b      	str	r3, [r7, #16]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	699b      	ldr	r3, [r3, #24]
 8002d9c:	613b      	str	r3, [r7, #16]
 8002d9e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002da0:	e066      	b.n	8002e70 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	6a39      	ldr	r1, [r7, #32]
 8002da6:	68f8      	ldr	r0, [r7, #12]
 8002da8:	f000 fa22 	bl	80031f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00d      	beq.n	8002dce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db6:	2b04      	cmp	r3, #4
 8002db8:	d107      	bne.n	8002dca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dc8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e06b      	b.n	8002ea6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd2:	781a      	ldrb	r2, [r3, #0]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dde:	1c5a      	adds	r2, r3, #1
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	3b01      	subs	r3, #1
 8002dec:	b29a      	uxth	r2, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002df6:	3b01      	subs	r3, #1
 8002df8:	b29a      	uxth	r2, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	695b      	ldr	r3, [r3, #20]
 8002e04:	f003 0304 	and.w	r3, r3, #4
 8002e08:	2b04      	cmp	r3, #4
 8002e0a:	d11b      	bne.n	8002e44 <HAL_I2C_Master_Transmit+0x188>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d017      	beq.n	8002e44 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e18:	781a      	ldrb	r2, [r3, #0]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e24:	1c5a      	adds	r2, r3, #1
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	3b01      	subs	r3, #1
 8002e32:	b29a      	uxth	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	b29a      	uxth	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e44:	697a      	ldr	r2, [r7, #20]
 8002e46:	6a39      	ldr	r1, [r7, #32]
 8002e48:	68f8      	ldr	r0, [r7, #12]
 8002e4a:	f000 fa19 	bl	8003280 <I2C_WaitOnBTFFlagUntilTimeout>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d00d      	beq.n	8002e70 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e58:	2b04      	cmp	r3, #4
 8002e5a:	d107      	bne.n	8002e6c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e6a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e01a      	b.n	8002ea6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d194      	bne.n	8002da2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2220      	movs	r2, #32
 8002e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	e000      	b.n	8002ea6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002ea4:	2302      	movs	r3, #2
  }
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3718      	adds	r7, #24
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	00100002 	.word	0x00100002
 8002eb4:	ffff0000 	.word	0xffff0000

08002eb8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b088      	sub	sp, #32
 8002ebc:	af02      	add	r7, sp, #8
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	607a      	str	r2, [r7, #4]
 8002ec2:	603b      	str	r3, [r7, #0]
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ecc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	2b08      	cmp	r3, #8
 8002ed2:	d006      	beq.n	8002ee2 <I2C_MasterRequestWrite+0x2a>
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d003      	beq.n	8002ee2 <I2C_MasterRequestWrite+0x2a>
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002ee0:	d108      	bne.n	8002ef4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ef0:	601a      	str	r2, [r3, #0]
 8002ef2:	e00b      	b.n	8002f0c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef8:	2b12      	cmp	r3, #18
 8002efa:	d107      	bne.n	8002f0c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f0a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	9300      	str	r3, [sp, #0]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002f18:	68f8      	ldr	r0, [r7, #12]
 8002f1a:	f000 f84f 	bl	8002fbc <I2C_WaitOnFlagUntilTimeout>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d00d      	beq.n	8002f40 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f32:	d103      	bne.n	8002f3c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f3a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e035      	b.n	8002fac <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	691b      	ldr	r3, [r3, #16]
 8002f44:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f48:	d108      	bne.n	8002f5c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f4a:	897b      	ldrh	r3, [r7, #10]
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	461a      	mov	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002f58:	611a      	str	r2, [r3, #16]
 8002f5a:	e01b      	b.n	8002f94 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002f5c:	897b      	ldrh	r3, [r7, #10]
 8002f5e:	11db      	asrs	r3, r3, #7
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	f003 0306 	and.w	r3, r3, #6
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	f063 030f 	orn	r3, r3, #15
 8002f6c:	b2da      	uxtb	r2, r3
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	490e      	ldr	r1, [pc, #56]	@ (8002fb4 <I2C_MasterRequestWrite+0xfc>)
 8002f7a:	68f8      	ldr	r0, [r7, #12]
 8002f7c:	f000 f898 	bl	80030b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e010      	b.n	8002fac <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002f8a:	897b      	ldrh	r3, [r7, #10]
 8002f8c:	b2da      	uxtb	r2, r3
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	4907      	ldr	r1, [pc, #28]	@ (8002fb8 <I2C_MasterRequestWrite+0x100>)
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f000 f888 	bl	80030b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e000      	b.n	8002fac <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3718      	adds	r7, #24
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	00010008 	.word	0x00010008
 8002fb8:	00010002 	.word	0x00010002

08002fbc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	603b      	str	r3, [r7, #0]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fcc:	e048      	b.n	8003060 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd4:	d044      	beq.n	8003060 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fd6:	f7fe fe3f 	bl	8001c58 <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d302      	bcc.n	8002fec <I2C_WaitOnFlagUntilTimeout+0x30>
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d139      	bne.n	8003060 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	0c1b      	lsrs	r3, r3, #16
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d10d      	bne.n	8003012 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	695b      	ldr	r3, [r3, #20]
 8002ffc:	43da      	mvns	r2, r3
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	4013      	ands	r3, r2
 8003002:	b29b      	uxth	r3, r3
 8003004:	2b00      	cmp	r3, #0
 8003006:	bf0c      	ite	eq
 8003008:	2301      	moveq	r3, #1
 800300a:	2300      	movne	r3, #0
 800300c:	b2db      	uxtb	r3, r3
 800300e:	461a      	mov	r2, r3
 8003010:	e00c      	b.n	800302c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	43da      	mvns	r2, r3
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	4013      	ands	r3, r2
 800301e:	b29b      	uxth	r3, r3
 8003020:	2b00      	cmp	r3, #0
 8003022:	bf0c      	ite	eq
 8003024:	2301      	moveq	r3, #1
 8003026:	2300      	movne	r3, #0
 8003028:	b2db      	uxtb	r3, r3
 800302a:	461a      	mov	r2, r3
 800302c:	79fb      	ldrb	r3, [r7, #7]
 800302e:	429a      	cmp	r2, r3
 8003030:	d116      	bne.n	8003060 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2220      	movs	r2, #32
 800303c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800304c:	f043 0220 	orr.w	r2, r3, #32
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e023      	b.n	80030a8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	0c1b      	lsrs	r3, r3, #16
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b01      	cmp	r3, #1
 8003068:	d10d      	bne.n	8003086 <I2C_WaitOnFlagUntilTimeout+0xca>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	695b      	ldr	r3, [r3, #20]
 8003070:	43da      	mvns	r2, r3
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	4013      	ands	r3, r2
 8003076:	b29b      	uxth	r3, r3
 8003078:	2b00      	cmp	r3, #0
 800307a:	bf0c      	ite	eq
 800307c:	2301      	moveq	r3, #1
 800307e:	2300      	movne	r3, #0
 8003080:	b2db      	uxtb	r3, r3
 8003082:	461a      	mov	r2, r3
 8003084:	e00c      	b.n	80030a0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	43da      	mvns	r2, r3
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	4013      	ands	r3, r2
 8003092:	b29b      	uxth	r3, r3
 8003094:	2b00      	cmp	r3, #0
 8003096:	bf0c      	ite	eq
 8003098:	2301      	moveq	r3, #1
 800309a:	2300      	movne	r3, #0
 800309c:	b2db      	uxtb	r3, r3
 800309e:	461a      	mov	r2, r3
 80030a0:	79fb      	ldrb	r3, [r7, #7]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d093      	beq.n	8002fce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80030a6:	2300      	movs	r3, #0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3710      	adds	r7, #16
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	607a      	str	r2, [r7, #4]
 80030bc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030be:	e071      	b.n	80031a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030ce:	d123      	bne.n	8003118 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030de:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80030e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2220      	movs	r2, #32
 80030f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003104:	f043 0204 	orr.w	r2, r3, #4
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e067      	b.n	80031e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800311e:	d041      	beq.n	80031a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003120:	f7fe fd9a 	bl	8001c58 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	429a      	cmp	r2, r3
 800312e:	d302      	bcc.n	8003136 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d136      	bne.n	80031a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	0c1b      	lsrs	r3, r3, #16
 800313a:	b2db      	uxtb	r3, r3
 800313c:	2b01      	cmp	r3, #1
 800313e:	d10c      	bne.n	800315a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	43da      	mvns	r2, r3
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	4013      	ands	r3, r2
 800314c:	b29b      	uxth	r3, r3
 800314e:	2b00      	cmp	r3, #0
 8003150:	bf14      	ite	ne
 8003152:	2301      	movne	r3, #1
 8003154:	2300      	moveq	r3, #0
 8003156:	b2db      	uxtb	r3, r3
 8003158:	e00b      	b.n	8003172 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	43da      	mvns	r2, r3
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	4013      	ands	r3, r2
 8003166:	b29b      	uxth	r3, r3
 8003168:	2b00      	cmp	r3, #0
 800316a:	bf14      	ite	ne
 800316c:	2301      	movne	r3, #1
 800316e:	2300      	moveq	r3, #0
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b00      	cmp	r3, #0
 8003174:	d016      	beq.n	80031a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2220      	movs	r2, #32
 8003180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003190:	f043 0220 	orr.w	r2, r3, #32
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e021      	b.n	80031e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	0c1b      	lsrs	r3, r3, #16
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d10c      	bne.n	80031c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	695b      	ldr	r3, [r3, #20]
 80031b4:	43da      	mvns	r2, r3
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	4013      	ands	r3, r2
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	2b00      	cmp	r3, #0
 80031be:	bf14      	ite	ne
 80031c0:	2301      	movne	r3, #1
 80031c2:	2300      	moveq	r3, #0
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	e00b      	b.n	80031e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	43da      	mvns	r2, r3
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	4013      	ands	r3, r2
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	bf14      	ite	ne
 80031da:	2301      	movne	r3, #1
 80031dc:	2300      	moveq	r3, #0
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	f47f af6d 	bne.w	80030c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80031e6:	2300      	movs	r3, #0
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3710      	adds	r7, #16
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031fc:	e034      	b.n	8003268 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031fe:	68f8      	ldr	r0, [r7, #12]
 8003200:	f000 f886 	bl	8003310 <I2C_IsAcknowledgeFailed>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d001      	beq.n	800320e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e034      	b.n	8003278 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003214:	d028      	beq.n	8003268 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003216:	f7fe fd1f 	bl	8001c58 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	68ba      	ldr	r2, [r7, #8]
 8003222:	429a      	cmp	r2, r3
 8003224:	d302      	bcc.n	800322c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d11d      	bne.n	8003268 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	695b      	ldr	r3, [r3, #20]
 8003232:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003236:	2b80      	cmp	r3, #128	@ 0x80
 8003238:	d016      	beq.n	8003268 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2220      	movs	r2, #32
 8003244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003254:	f043 0220 	orr.w	r2, r3, #32
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e007      	b.n	8003278 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003272:	2b80      	cmp	r3, #128	@ 0x80
 8003274:	d1c3      	bne.n	80031fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	3710      	adds	r7, #16
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800328c:	e034      	b.n	80032f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f000 f83e 	bl	8003310 <I2C_IsAcknowledgeFailed>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e034      	b.n	8003308 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a4:	d028      	beq.n	80032f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032a6:	f7fe fcd7 	bl	8001c58 <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	68ba      	ldr	r2, [r7, #8]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d302      	bcc.n	80032bc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d11d      	bne.n	80032f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	f003 0304 	and.w	r3, r3, #4
 80032c6:	2b04      	cmp	r3, #4
 80032c8:	d016      	beq.n	80032f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2220      	movs	r2, #32
 80032d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e4:	f043 0220 	orr.w	r2, r3, #32
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e007      	b.n	8003308 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	f003 0304 	and.w	r3, r3, #4
 8003302:	2b04      	cmp	r3, #4
 8003304:	d1c3      	bne.n	800328e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003306:	2300      	movs	r3, #0
}
 8003308:	4618      	mov	r0, r3
 800330a:	3710      	adds	r7, #16
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003322:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003326:	d11b      	bne.n	8003360 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003330:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2220      	movs	r2, #32
 800333c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334c:	f043 0204 	orr.w	r2, r3, #4
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e000      	b.n	8003362 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	370c      	adds	r7, #12
 8003366:	46bd      	mov	sp, r7
 8003368:	bc80      	pop	{r7}
 800336a:	4770      	bx	lr

0800336c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b086      	sub	sp, #24
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d101      	bne.n	800337e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e272      	b.n	8003864 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b00      	cmp	r3, #0
 8003388:	f000 8087 	beq.w	800349a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800338c:	4b92      	ldr	r3, [pc, #584]	@ (80035d8 <HAL_RCC_OscConfig+0x26c>)
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f003 030c 	and.w	r3, r3, #12
 8003394:	2b04      	cmp	r3, #4
 8003396:	d00c      	beq.n	80033b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003398:	4b8f      	ldr	r3, [pc, #572]	@ (80035d8 <HAL_RCC_OscConfig+0x26c>)
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f003 030c 	and.w	r3, r3, #12
 80033a0:	2b08      	cmp	r3, #8
 80033a2:	d112      	bne.n	80033ca <HAL_RCC_OscConfig+0x5e>
 80033a4:	4b8c      	ldr	r3, [pc, #560]	@ (80035d8 <HAL_RCC_OscConfig+0x26c>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033b0:	d10b      	bne.n	80033ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033b2:	4b89      	ldr	r3, [pc, #548]	@ (80035d8 <HAL_RCC_OscConfig+0x26c>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d06c      	beq.n	8003498 <HAL_RCC_OscConfig+0x12c>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d168      	bne.n	8003498 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e24c      	b.n	8003864 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033d2:	d106      	bne.n	80033e2 <HAL_RCC_OscConfig+0x76>
 80033d4:	4b80      	ldr	r3, [pc, #512]	@ (80035d8 <HAL_RCC_OscConfig+0x26c>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a7f      	ldr	r2, [pc, #508]	@ (80035d8 <HAL_RCC_OscConfig+0x26c>)
 80033da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033de:	6013      	str	r3, [r2, #0]
 80033e0:	e02e      	b.n	8003440 <HAL_RCC_OscConfig+0xd4>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d10c      	bne.n	8003404 <HAL_RCC_OscConfig+0x98>
 80033ea:	4b7b      	ldr	r3, [pc, #492]	@ (80035d8 <HAL_RCC_OscConfig+0x26c>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a7a      	ldr	r2, [pc, #488]	@ (80035d8 <HAL_RCC_OscConfig+0x26c>)
 80033f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033f4:	6013      	str	r3, [r2, #0]
 80033f6:	4b78      	ldr	r3, [pc, #480]	@ (80035d8 <HAL_RCC_OscConfig+0x26c>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a77      	ldr	r2, [pc, #476]	@ (80035d8 <HAL_RCC_OscConfig+0x26c>)
 80033fc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003400:	6013      	str	r3, [r2, #0]
 8003402:	e01d      	b.n	8003440 <HAL_RCC_OscConfig+0xd4>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800340c:	d10c      	bne.n	8003428 <HAL_RCC_OscConfig+0xbc>
 800340e:	4b72      	ldr	r3, [pc, #456]	@ (80035d8 <HAL_RCC_OscConfig+0x26c>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a71      	ldr	r2, [pc, #452]	@ (80035d8 <HAL_RCC_OscConfig+0x26c>)
 8003414:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003418:	6013      	str	r3, [r2, #0]
 800341a:	4b6f      	ldr	r3, [pc, #444]	@ (80035d8 <HAL_RCC_OscConfig+0x26c>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a6e      	ldr	r2, [pc, #440]	@ (80035d8 <HAL_RCC_OscConfig+0x26c>)
 8003420:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003424:	6013      	str	r3, [r2, #0]
 8003426:	e00b      	b.n	8003440 <HAL_RCC_OscConfig+0xd4>
 8003428:	4b6b      	ldr	r3, [pc, #428]	@ (80035d8 <HAL_RCC_OscConfig+0x26c>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a6a      	ldr	r2, [pc, #424]	@ (80035d8 <HAL_RCC_OscConfig+0x26c>)
 800342e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003432:	6013      	str	r3, [r2, #0]
 8003434:	4b68      	ldr	r3, [pc, #416]	@ (80035d8 <HAL_RCC_OscConfig+0x26c>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a67      	ldr	r2, [pc, #412]	@ (80035d8 <HAL_RCC_OscConfig+0x26c>)
 800343a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800343e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d013      	beq.n	8003470 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003448:	f7fe fc06 	bl	8001c58 <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800344e:	e008      	b.n	8003462 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003450:	f7fe fc02 	bl	8001c58 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b64      	cmp	r3, #100	@ 0x64
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e200      	b.n	8003864 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003462:	4b5d      	ldr	r3, [pc, #372]	@ (80035d8 <HAL_RCC_OscConfig+0x26c>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d0f0      	beq.n	8003450 <HAL_RCC_OscConfig+0xe4>
 800346e:	e014      	b.n	800349a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003470:	f7fe fbf2 	bl	8001c58 <HAL_GetTick>
 8003474:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003476:	e008      	b.n	800348a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003478:	f7fe fbee 	bl	8001c58 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	2b64      	cmp	r3, #100	@ 0x64
 8003484:	d901      	bls.n	800348a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e1ec      	b.n	8003864 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800348a:	4b53      	ldr	r3, [pc, #332]	@ (80035d8 <HAL_RCC_OscConfig+0x26c>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1f0      	bne.n	8003478 <HAL_RCC_OscConfig+0x10c>
 8003496:	e000      	b.n	800349a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003498:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d063      	beq.n	800356e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034a6:	4b4c      	ldr	r3, [pc, #304]	@ (80035d8 <HAL_RCC_OscConfig+0x26c>)
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f003 030c 	and.w	r3, r3, #12
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00b      	beq.n	80034ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80034b2:	4b49      	ldr	r3, [pc, #292]	@ (80035d8 <HAL_RCC_OscConfig+0x26c>)
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f003 030c 	and.w	r3, r3, #12
 80034ba:	2b08      	cmp	r3, #8
 80034bc:	d11c      	bne.n	80034f8 <HAL_RCC_OscConfig+0x18c>
 80034be:	4b46      	ldr	r3, [pc, #280]	@ (80035d8 <HAL_RCC_OscConfig+0x26c>)
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d116      	bne.n	80034f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ca:	4b43      	ldr	r3, [pc, #268]	@ (80035d8 <HAL_RCC_OscConfig+0x26c>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0302 	and.w	r3, r3, #2
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d005      	beq.n	80034e2 <HAL_RCC_OscConfig+0x176>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d001      	beq.n	80034e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e1c0      	b.n	8003864 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034e2:	4b3d      	ldr	r3, [pc, #244]	@ (80035d8 <HAL_RCC_OscConfig+0x26c>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	00db      	lsls	r3, r3, #3
 80034f0:	4939      	ldr	r1, [pc, #228]	@ (80035d8 <HAL_RCC_OscConfig+0x26c>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034f6:	e03a      	b.n	800356e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d020      	beq.n	8003542 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003500:	4b36      	ldr	r3, [pc, #216]	@ (80035dc <HAL_RCC_OscConfig+0x270>)
 8003502:	2201      	movs	r2, #1
 8003504:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003506:	f7fe fba7 	bl	8001c58 <HAL_GetTick>
 800350a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800350c:	e008      	b.n	8003520 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800350e:	f7fe fba3 	bl	8001c58 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	2b02      	cmp	r3, #2
 800351a:	d901      	bls.n	8003520 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e1a1      	b.n	8003864 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003520:	4b2d      	ldr	r3, [pc, #180]	@ (80035d8 <HAL_RCC_OscConfig+0x26c>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0302 	and.w	r3, r3, #2
 8003528:	2b00      	cmp	r3, #0
 800352a:	d0f0      	beq.n	800350e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800352c:	4b2a      	ldr	r3, [pc, #168]	@ (80035d8 <HAL_RCC_OscConfig+0x26c>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	695b      	ldr	r3, [r3, #20]
 8003538:	00db      	lsls	r3, r3, #3
 800353a:	4927      	ldr	r1, [pc, #156]	@ (80035d8 <HAL_RCC_OscConfig+0x26c>)
 800353c:	4313      	orrs	r3, r2
 800353e:	600b      	str	r3, [r1, #0]
 8003540:	e015      	b.n	800356e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003542:	4b26      	ldr	r3, [pc, #152]	@ (80035dc <HAL_RCC_OscConfig+0x270>)
 8003544:	2200      	movs	r2, #0
 8003546:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003548:	f7fe fb86 	bl	8001c58 <HAL_GetTick>
 800354c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800354e:	e008      	b.n	8003562 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003550:	f7fe fb82 	bl	8001c58 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	2b02      	cmp	r3, #2
 800355c:	d901      	bls.n	8003562 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e180      	b.n	8003864 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003562:	4b1d      	ldr	r3, [pc, #116]	@ (80035d8 <HAL_RCC_OscConfig+0x26c>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1f0      	bne.n	8003550 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0308 	and.w	r3, r3, #8
 8003576:	2b00      	cmp	r3, #0
 8003578:	d03a      	beq.n	80035f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d019      	beq.n	80035b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003582:	4b17      	ldr	r3, [pc, #92]	@ (80035e0 <HAL_RCC_OscConfig+0x274>)
 8003584:	2201      	movs	r2, #1
 8003586:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003588:	f7fe fb66 	bl	8001c58 <HAL_GetTick>
 800358c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800358e:	e008      	b.n	80035a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003590:	f7fe fb62 	bl	8001c58 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b02      	cmp	r3, #2
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e160      	b.n	8003864 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035a2:	4b0d      	ldr	r3, [pc, #52]	@ (80035d8 <HAL_RCC_OscConfig+0x26c>)
 80035a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d0f0      	beq.n	8003590 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80035ae:	2001      	movs	r0, #1
 80035b0:	f000 face 	bl	8003b50 <RCC_Delay>
 80035b4:	e01c      	b.n	80035f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035b6:	4b0a      	ldr	r3, [pc, #40]	@ (80035e0 <HAL_RCC_OscConfig+0x274>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035bc:	f7fe fb4c 	bl	8001c58 <HAL_GetTick>
 80035c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035c2:	e00f      	b.n	80035e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035c4:	f7fe fb48 	bl	8001c58 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d908      	bls.n	80035e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e146      	b.n	8003864 <HAL_RCC_OscConfig+0x4f8>
 80035d6:	bf00      	nop
 80035d8:	40021000 	.word	0x40021000
 80035dc:	42420000 	.word	0x42420000
 80035e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035e4:	4b92      	ldr	r3, [pc, #584]	@ (8003830 <HAL_RCC_OscConfig+0x4c4>)
 80035e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d1e9      	bne.n	80035c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0304 	and.w	r3, r3, #4
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	f000 80a6 	beq.w	800374a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035fe:	2300      	movs	r3, #0
 8003600:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003602:	4b8b      	ldr	r3, [pc, #556]	@ (8003830 <HAL_RCC_OscConfig+0x4c4>)
 8003604:	69db      	ldr	r3, [r3, #28]
 8003606:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d10d      	bne.n	800362a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800360e:	4b88      	ldr	r3, [pc, #544]	@ (8003830 <HAL_RCC_OscConfig+0x4c4>)
 8003610:	69db      	ldr	r3, [r3, #28]
 8003612:	4a87      	ldr	r2, [pc, #540]	@ (8003830 <HAL_RCC_OscConfig+0x4c4>)
 8003614:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003618:	61d3      	str	r3, [r2, #28]
 800361a:	4b85      	ldr	r3, [pc, #532]	@ (8003830 <HAL_RCC_OscConfig+0x4c4>)
 800361c:	69db      	ldr	r3, [r3, #28]
 800361e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003622:	60bb      	str	r3, [r7, #8]
 8003624:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003626:	2301      	movs	r3, #1
 8003628:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800362a:	4b82      	ldr	r3, [pc, #520]	@ (8003834 <HAL_RCC_OscConfig+0x4c8>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003632:	2b00      	cmp	r3, #0
 8003634:	d118      	bne.n	8003668 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003636:	4b7f      	ldr	r3, [pc, #508]	@ (8003834 <HAL_RCC_OscConfig+0x4c8>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a7e      	ldr	r2, [pc, #504]	@ (8003834 <HAL_RCC_OscConfig+0x4c8>)
 800363c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003640:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003642:	f7fe fb09 	bl	8001c58 <HAL_GetTick>
 8003646:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003648:	e008      	b.n	800365c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800364a:	f7fe fb05 	bl	8001c58 <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	2b64      	cmp	r3, #100	@ 0x64
 8003656:	d901      	bls.n	800365c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e103      	b.n	8003864 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800365c:	4b75      	ldr	r3, [pc, #468]	@ (8003834 <HAL_RCC_OscConfig+0x4c8>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003664:	2b00      	cmp	r3, #0
 8003666:	d0f0      	beq.n	800364a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	2b01      	cmp	r3, #1
 800366e:	d106      	bne.n	800367e <HAL_RCC_OscConfig+0x312>
 8003670:	4b6f      	ldr	r3, [pc, #444]	@ (8003830 <HAL_RCC_OscConfig+0x4c4>)
 8003672:	6a1b      	ldr	r3, [r3, #32]
 8003674:	4a6e      	ldr	r2, [pc, #440]	@ (8003830 <HAL_RCC_OscConfig+0x4c4>)
 8003676:	f043 0301 	orr.w	r3, r3, #1
 800367a:	6213      	str	r3, [r2, #32]
 800367c:	e02d      	b.n	80036da <HAL_RCC_OscConfig+0x36e>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d10c      	bne.n	80036a0 <HAL_RCC_OscConfig+0x334>
 8003686:	4b6a      	ldr	r3, [pc, #424]	@ (8003830 <HAL_RCC_OscConfig+0x4c4>)
 8003688:	6a1b      	ldr	r3, [r3, #32]
 800368a:	4a69      	ldr	r2, [pc, #420]	@ (8003830 <HAL_RCC_OscConfig+0x4c4>)
 800368c:	f023 0301 	bic.w	r3, r3, #1
 8003690:	6213      	str	r3, [r2, #32]
 8003692:	4b67      	ldr	r3, [pc, #412]	@ (8003830 <HAL_RCC_OscConfig+0x4c4>)
 8003694:	6a1b      	ldr	r3, [r3, #32]
 8003696:	4a66      	ldr	r2, [pc, #408]	@ (8003830 <HAL_RCC_OscConfig+0x4c4>)
 8003698:	f023 0304 	bic.w	r3, r3, #4
 800369c:	6213      	str	r3, [r2, #32]
 800369e:	e01c      	b.n	80036da <HAL_RCC_OscConfig+0x36e>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	2b05      	cmp	r3, #5
 80036a6:	d10c      	bne.n	80036c2 <HAL_RCC_OscConfig+0x356>
 80036a8:	4b61      	ldr	r3, [pc, #388]	@ (8003830 <HAL_RCC_OscConfig+0x4c4>)
 80036aa:	6a1b      	ldr	r3, [r3, #32]
 80036ac:	4a60      	ldr	r2, [pc, #384]	@ (8003830 <HAL_RCC_OscConfig+0x4c4>)
 80036ae:	f043 0304 	orr.w	r3, r3, #4
 80036b2:	6213      	str	r3, [r2, #32]
 80036b4:	4b5e      	ldr	r3, [pc, #376]	@ (8003830 <HAL_RCC_OscConfig+0x4c4>)
 80036b6:	6a1b      	ldr	r3, [r3, #32]
 80036b8:	4a5d      	ldr	r2, [pc, #372]	@ (8003830 <HAL_RCC_OscConfig+0x4c4>)
 80036ba:	f043 0301 	orr.w	r3, r3, #1
 80036be:	6213      	str	r3, [r2, #32]
 80036c0:	e00b      	b.n	80036da <HAL_RCC_OscConfig+0x36e>
 80036c2:	4b5b      	ldr	r3, [pc, #364]	@ (8003830 <HAL_RCC_OscConfig+0x4c4>)
 80036c4:	6a1b      	ldr	r3, [r3, #32]
 80036c6:	4a5a      	ldr	r2, [pc, #360]	@ (8003830 <HAL_RCC_OscConfig+0x4c4>)
 80036c8:	f023 0301 	bic.w	r3, r3, #1
 80036cc:	6213      	str	r3, [r2, #32]
 80036ce:	4b58      	ldr	r3, [pc, #352]	@ (8003830 <HAL_RCC_OscConfig+0x4c4>)
 80036d0:	6a1b      	ldr	r3, [r3, #32]
 80036d2:	4a57      	ldr	r2, [pc, #348]	@ (8003830 <HAL_RCC_OscConfig+0x4c4>)
 80036d4:	f023 0304 	bic.w	r3, r3, #4
 80036d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d015      	beq.n	800370e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036e2:	f7fe fab9 	bl	8001c58 <HAL_GetTick>
 80036e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036e8:	e00a      	b.n	8003700 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ea:	f7fe fab5 	bl	8001c58 <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d901      	bls.n	8003700 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e0b1      	b.n	8003864 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003700:	4b4b      	ldr	r3, [pc, #300]	@ (8003830 <HAL_RCC_OscConfig+0x4c4>)
 8003702:	6a1b      	ldr	r3, [r3, #32]
 8003704:	f003 0302 	and.w	r3, r3, #2
 8003708:	2b00      	cmp	r3, #0
 800370a:	d0ee      	beq.n	80036ea <HAL_RCC_OscConfig+0x37e>
 800370c:	e014      	b.n	8003738 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800370e:	f7fe faa3 	bl	8001c58 <HAL_GetTick>
 8003712:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003714:	e00a      	b.n	800372c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003716:	f7fe fa9f 	bl	8001c58 <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003724:	4293      	cmp	r3, r2
 8003726:	d901      	bls.n	800372c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e09b      	b.n	8003864 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800372c:	4b40      	ldr	r3, [pc, #256]	@ (8003830 <HAL_RCC_OscConfig+0x4c4>)
 800372e:	6a1b      	ldr	r3, [r3, #32]
 8003730:	f003 0302 	and.w	r3, r3, #2
 8003734:	2b00      	cmp	r3, #0
 8003736:	d1ee      	bne.n	8003716 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003738:	7dfb      	ldrb	r3, [r7, #23]
 800373a:	2b01      	cmp	r3, #1
 800373c:	d105      	bne.n	800374a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800373e:	4b3c      	ldr	r3, [pc, #240]	@ (8003830 <HAL_RCC_OscConfig+0x4c4>)
 8003740:	69db      	ldr	r3, [r3, #28]
 8003742:	4a3b      	ldr	r2, [pc, #236]	@ (8003830 <HAL_RCC_OscConfig+0x4c4>)
 8003744:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003748:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	69db      	ldr	r3, [r3, #28]
 800374e:	2b00      	cmp	r3, #0
 8003750:	f000 8087 	beq.w	8003862 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003754:	4b36      	ldr	r3, [pc, #216]	@ (8003830 <HAL_RCC_OscConfig+0x4c4>)
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f003 030c 	and.w	r3, r3, #12
 800375c:	2b08      	cmp	r3, #8
 800375e:	d061      	beq.n	8003824 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	69db      	ldr	r3, [r3, #28]
 8003764:	2b02      	cmp	r3, #2
 8003766:	d146      	bne.n	80037f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003768:	4b33      	ldr	r3, [pc, #204]	@ (8003838 <HAL_RCC_OscConfig+0x4cc>)
 800376a:	2200      	movs	r2, #0
 800376c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800376e:	f7fe fa73 	bl	8001c58 <HAL_GetTick>
 8003772:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003774:	e008      	b.n	8003788 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003776:	f7fe fa6f 	bl	8001c58 <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	2b02      	cmp	r3, #2
 8003782:	d901      	bls.n	8003788 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e06d      	b.n	8003864 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003788:	4b29      	ldr	r3, [pc, #164]	@ (8003830 <HAL_RCC_OscConfig+0x4c4>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d1f0      	bne.n	8003776 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a1b      	ldr	r3, [r3, #32]
 8003798:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800379c:	d108      	bne.n	80037b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800379e:	4b24      	ldr	r3, [pc, #144]	@ (8003830 <HAL_RCC_OscConfig+0x4c4>)
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	4921      	ldr	r1, [pc, #132]	@ (8003830 <HAL_RCC_OscConfig+0x4c4>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037b0:	4b1f      	ldr	r3, [pc, #124]	@ (8003830 <HAL_RCC_OscConfig+0x4c4>)
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a19      	ldr	r1, [r3, #32]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c0:	430b      	orrs	r3, r1
 80037c2:	491b      	ldr	r1, [pc, #108]	@ (8003830 <HAL_RCC_OscConfig+0x4c4>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037c8:	4b1b      	ldr	r3, [pc, #108]	@ (8003838 <HAL_RCC_OscConfig+0x4cc>)
 80037ca:	2201      	movs	r2, #1
 80037cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ce:	f7fe fa43 	bl	8001c58 <HAL_GetTick>
 80037d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037d4:	e008      	b.n	80037e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037d6:	f7fe fa3f 	bl	8001c58 <HAL_GetTick>
 80037da:	4602      	mov	r2, r0
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	d901      	bls.n	80037e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e03d      	b.n	8003864 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037e8:	4b11      	ldr	r3, [pc, #68]	@ (8003830 <HAL_RCC_OscConfig+0x4c4>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d0f0      	beq.n	80037d6 <HAL_RCC_OscConfig+0x46a>
 80037f4:	e035      	b.n	8003862 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037f6:	4b10      	ldr	r3, [pc, #64]	@ (8003838 <HAL_RCC_OscConfig+0x4cc>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037fc:	f7fe fa2c 	bl	8001c58 <HAL_GetTick>
 8003800:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003802:	e008      	b.n	8003816 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003804:	f7fe fa28 	bl	8001c58 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	2b02      	cmp	r3, #2
 8003810:	d901      	bls.n	8003816 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e026      	b.n	8003864 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003816:	4b06      	ldr	r3, [pc, #24]	@ (8003830 <HAL_RCC_OscConfig+0x4c4>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1f0      	bne.n	8003804 <HAL_RCC_OscConfig+0x498>
 8003822:	e01e      	b.n	8003862 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	69db      	ldr	r3, [r3, #28]
 8003828:	2b01      	cmp	r3, #1
 800382a:	d107      	bne.n	800383c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e019      	b.n	8003864 <HAL_RCC_OscConfig+0x4f8>
 8003830:	40021000 	.word	0x40021000
 8003834:	40007000 	.word	0x40007000
 8003838:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800383c:	4b0b      	ldr	r3, [pc, #44]	@ (800386c <HAL_RCC_OscConfig+0x500>)
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a1b      	ldr	r3, [r3, #32]
 800384c:	429a      	cmp	r2, r3
 800384e:	d106      	bne.n	800385e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800385a:	429a      	cmp	r2, r3
 800385c:	d001      	beq.n	8003862 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e000      	b.n	8003864 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3718      	adds	r7, #24
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}
 800386c:	40021000 	.word	0x40021000

08003870 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d101      	bne.n	8003884 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e0d0      	b.n	8003a26 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003884:	4b6a      	ldr	r3, [pc, #424]	@ (8003a30 <HAL_RCC_ClockConfig+0x1c0>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0307 	and.w	r3, r3, #7
 800388c:	683a      	ldr	r2, [r7, #0]
 800388e:	429a      	cmp	r2, r3
 8003890:	d910      	bls.n	80038b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003892:	4b67      	ldr	r3, [pc, #412]	@ (8003a30 <HAL_RCC_ClockConfig+0x1c0>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f023 0207 	bic.w	r2, r3, #7
 800389a:	4965      	ldr	r1, [pc, #404]	@ (8003a30 <HAL_RCC_ClockConfig+0x1c0>)
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	4313      	orrs	r3, r2
 80038a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038a2:	4b63      	ldr	r3, [pc, #396]	@ (8003a30 <HAL_RCC_ClockConfig+0x1c0>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0307 	and.w	r3, r3, #7
 80038aa:	683a      	ldr	r2, [r7, #0]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d001      	beq.n	80038b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e0b8      	b.n	8003a26 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0302 	and.w	r3, r3, #2
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d020      	beq.n	8003902 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0304 	and.w	r3, r3, #4
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d005      	beq.n	80038d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038cc:	4b59      	ldr	r3, [pc, #356]	@ (8003a34 <HAL_RCC_ClockConfig+0x1c4>)
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	4a58      	ldr	r2, [pc, #352]	@ (8003a34 <HAL_RCC_ClockConfig+0x1c4>)
 80038d2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80038d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0308 	and.w	r3, r3, #8
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d005      	beq.n	80038f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038e4:	4b53      	ldr	r3, [pc, #332]	@ (8003a34 <HAL_RCC_ClockConfig+0x1c4>)
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	4a52      	ldr	r2, [pc, #328]	@ (8003a34 <HAL_RCC_ClockConfig+0x1c4>)
 80038ea:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80038ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038f0:	4b50      	ldr	r3, [pc, #320]	@ (8003a34 <HAL_RCC_ClockConfig+0x1c4>)
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	494d      	ldr	r1, [pc, #308]	@ (8003a34 <HAL_RCC_ClockConfig+0x1c4>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0301 	and.w	r3, r3, #1
 800390a:	2b00      	cmp	r3, #0
 800390c:	d040      	beq.n	8003990 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	2b01      	cmp	r3, #1
 8003914:	d107      	bne.n	8003926 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003916:	4b47      	ldr	r3, [pc, #284]	@ (8003a34 <HAL_RCC_ClockConfig+0x1c4>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d115      	bne.n	800394e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e07f      	b.n	8003a26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	2b02      	cmp	r3, #2
 800392c:	d107      	bne.n	800393e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800392e:	4b41      	ldr	r3, [pc, #260]	@ (8003a34 <HAL_RCC_ClockConfig+0x1c4>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d109      	bne.n	800394e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e073      	b.n	8003a26 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800393e:	4b3d      	ldr	r3, [pc, #244]	@ (8003a34 <HAL_RCC_ClockConfig+0x1c4>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0302 	and.w	r3, r3, #2
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e06b      	b.n	8003a26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800394e:	4b39      	ldr	r3, [pc, #228]	@ (8003a34 <HAL_RCC_ClockConfig+0x1c4>)
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f023 0203 	bic.w	r2, r3, #3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	4936      	ldr	r1, [pc, #216]	@ (8003a34 <HAL_RCC_ClockConfig+0x1c4>)
 800395c:	4313      	orrs	r3, r2
 800395e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003960:	f7fe f97a 	bl	8001c58 <HAL_GetTick>
 8003964:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003966:	e00a      	b.n	800397e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003968:	f7fe f976 	bl	8001c58 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003976:	4293      	cmp	r3, r2
 8003978:	d901      	bls.n	800397e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e053      	b.n	8003a26 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800397e:	4b2d      	ldr	r3, [pc, #180]	@ (8003a34 <HAL_RCC_ClockConfig+0x1c4>)
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f003 020c 	and.w	r2, r3, #12
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	429a      	cmp	r2, r3
 800398e:	d1eb      	bne.n	8003968 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003990:	4b27      	ldr	r3, [pc, #156]	@ (8003a30 <HAL_RCC_ClockConfig+0x1c0>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0307 	and.w	r3, r3, #7
 8003998:	683a      	ldr	r2, [r7, #0]
 800399a:	429a      	cmp	r2, r3
 800399c:	d210      	bcs.n	80039c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800399e:	4b24      	ldr	r3, [pc, #144]	@ (8003a30 <HAL_RCC_ClockConfig+0x1c0>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f023 0207 	bic.w	r2, r3, #7
 80039a6:	4922      	ldr	r1, [pc, #136]	@ (8003a30 <HAL_RCC_ClockConfig+0x1c0>)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ae:	4b20      	ldr	r3, [pc, #128]	@ (8003a30 <HAL_RCC_ClockConfig+0x1c0>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0307 	and.w	r3, r3, #7
 80039b6:	683a      	ldr	r2, [r7, #0]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d001      	beq.n	80039c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e032      	b.n	8003a26 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0304 	and.w	r3, r3, #4
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d008      	beq.n	80039de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039cc:	4b19      	ldr	r3, [pc, #100]	@ (8003a34 <HAL_RCC_ClockConfig+0x1c4>)
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	4916      	ldr	r1, [pc, #88]	@ (8003a34 <HAL_RCC_ClockConfig+0x1c4>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0308 	and.w	r3, r3, #8
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d009      	beq.n	80039fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039ea:	4b12      	ldr	r3, [pc, #72]	@ (8003a34 <HAL_RCC_ClockConfig+0x1c4>)
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	00db      	lsls	r3, r3, #3
 80039f8:	490e      	ldr	r1, [pc, #56]	@ (8003a34 <HAL_RCC_ClockConfig+0x1c4>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039fe:	f000 f821 	bl	8003a44 <HAL_RCC_GetSysClockFreq>
 8003a02:	4602      	mov	r2, r0
 8003a04:	4b0b      	ldr	r3, [pc, #44]	@ (8003a34 <HAL_RCC_ClockConfig+0x1c4>)
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	091b      	lsrs	r3, r3, #4
 8003a0a:	f003 030f 	and.w	r3, r3, #15
 8003a0e:	490a      	ldr	r1, [pc, #40]	@ (8003a38 <HAL_RCC_ClockConfig+0x1c8>)
 8003a10:	5ccb      	ldrb	r3, [r1, r3]
 8003a12:	fa22 f303 	lsr.w	r3, r2, r3
 8003a16:	4a09      	ldr	r2, [pc, #36]	@ (8003a3c <HAL_RCC_ClockConfig+0x1cc>)
 8003a18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a1a:	4b09      	ldr	r3, [pc, #36]	@ (8003a40 <HAL_RCC_ClockConfig+0x1d0>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7fe f8d8 	bl	8001bd4 <HAL_InitTick>

  return HAL_OK;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3710      	adds	r7, #16
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	40022000 	.word	0x40022000
 8003a34:	40021000 	.word	0x40021000
 8003a38:	0800863c 	.word	0x0800863c
 8003a3c:	20000014 	.word	0x20000014
 8003a40:	20000018 	.word	0x20000018

08003a44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b087      	sub	sp, #28
 8003a48:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	60fb      	str	r3, [r7, #12]
 8003a4e:	2300      	movs	r3, #0
 8003a50:	60bb      	str	r3, [r7, #8]
 8003a52:	2300      	movs	r3, #0
 8003a54:	617b      	str	r3, [r7, #20]
 8003a56:	2300      	movs	r3, #0
 8003a58:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003a5e:	4b1e      	ldr	r3, [pc, #120]	@ (8003ad8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f003 030c 	and.w	r3, r3, #12
 8003a6a:	2b04      	cmp	r3, #4
 8003a6c:	d002      	beq.n	8003a74 <HAL_RCC_GetSysClockFreq+0x30>
 8003a6e:	2b08      	cmp	r3, #8
 8003a70:	d003      	beq.n	8003a7a <HAL_RCC_GetSysClockFreq+0x36>
 8003a72:	e027      	b.n	8003ac4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a74:	4b19      	ldr	r3, [pc, #100]	@ (8003adc <HAL_RCC_GetSysClockFreq+0x98>)
 8003a76:	613b      	str	r3, [r7, #16]
      break;
 8003a78:	e027      	b.n	8003aca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	0c9b      	lsrs	r3, r3, #18
 8003a7e:	f003 030f 	and.w	r3, r3, #15
 8003a82:	4a17      	ldr	r2, [pc, #92]	@ (8003ae0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003a84:	5cd3      	ldrb	r3, [r2, r3]
 8003a86:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d010      	beq.n	8003ab4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a92:	4b11      	ldr	r3, [pc, #68]	@ (8003ad8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	0c5b      	lsrs	r3, r3, #17
 8003a98:	f003 0301 	and.w	r3, r3, #1
 8003a9c:	4a11      	ldr	r2, [pc, #68]	@ (8003ae4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003a9e:	5cd3      	ldrb	r3, [r2, r3]
 8003aa0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a0d      	ldr	r2, [pc, #52]	@ (8003adc <HAL_RCC_GetSysClockFreq+0x98>)
 8003aa6:	fb03 f202 	mul.w	r2, r3, r2
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab0:	617b      	str	r3, [r7, #20]
 8003ab2:	e004      	b.n	8003abe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4a0c      	ldr	r2, [pc, #48]	@ (8003ae8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003ab8:	fb02 f303 	mul.w	r3, r2, r3
 8003abc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	613b      	str	r3, [r7, #16]
      break;
 8003ac2:	e002      	b.n	8003aca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ac4:	4b05      	ldr	r3, [pc, #20]	@ (8003adc <HAL_RCC_GetSysClockFreq+0x98>)
 8003ac6:	613b      	str	r3, [r7, #16]
      break;
 8003ac8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003aca:	693b      	ldr	r3, [r7, #16]
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	371c      	adds	r7, #28
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bc80      	pop	{r7}
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	40021000 	.word	0x40021000
 8003adc:	007a1200 	.word	0x007a1200
 8003ae0:	08008654 	.word	0x08008654
 8003ae4:	08008664 	.word	0x08008664
 8003ae8:	003d0900 	.word	0x003d0900

08003aec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003aec:	b480      	push	{r7}
 8003aee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003af0:	4b02      	ldr	r3, [pc, #8]	@ (8003afc <HAL_RCC_GetHCLKFreq+0x10>)
 8003af2:	681b      	ldr	r3, [r3, #0]
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bc80      	pop	{r7}
 8003afa:	4770      	bx	lr
 8003afc:	20000014 	.word	0x20000014

08003b00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b04:	f7ff fff2 	bl	8003aec <HAL_RCC_GetHCLKFreq>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	4b05      	ldr	r3, [pc, #20]	@ (8003b20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	0a1b      	lsrs	r3, r3, #8
 8003b10:	f003 0307 	and.w	r3, r3, #7
 8003b14:	4903      	ldr	r1, [pc, #12]	@ (8003b24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b16:	5ccb      	ldrb	r3, [r1, r3]
 8003b18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	40021000 	.word	0x40021000
 8003b24:	0800864c 	.word	0x0800864c

08003b28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b2c:	f7ff ffde 	bl	8003aec <HAL_RCC_GetHCLKFreq>
 8003b30:	4602      	mov	r2, r0
 8003b32:	4b05      	ldr	r3, [pc, #20]	@ (8003b48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	0adb      	lsrs	r3, r3, #11
 8003b38:	f003 0307 	and.w	r3, r3, #7
 8003b3c:	4903      	ldr	r1, [pc, #12]	@ (8003b4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b3e:	5ccb      	ldrb	r3, [r1, r3]
 8003b40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	40021000 	.word	0x40021000
 8003b4c:	0800864c 	.word	0x0800864c

08003b50 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b085      	sub	sp, #20
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003b58:	4b0a      	ldr	r3, [pc, #40]	@ (8003b84 <RCC_Delay+0x34>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a0a      	ldr	r2, [pc, #40]	@ (8003b88 <RCC_Delay+0x38>)
 8003b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b62:	0a5b      	lsrs	r3, r3, #9
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	fb02 f303 	mul.w	r3, r2, r3
 8003b6a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003b6c:	bf00      	nop
  }
  while (Delay --);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	1e5a      	subs	r2, r3, #1
 8003b72:	60fa      	str	r2, [r7, #12]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d1f9      	bne.n	8003b6c <RCC_Delay+0x1c>
}
 8003b78:	bf00      	nop
 8003b7a:	bf00      	nop
 8003b7c:	3714      	adds	r7, #20
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bc80      	pop	{r7}
 8003b82:	4770      	bx	lr
 8003b84:	20000014 	.word	0x20000014
 8003b88:	10624dd3 	.word	0x10624dd3

08003b8c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b086      	sub	sp, #24
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003b94:	2300      	movs	r3, #0
 8003b96:	613b      	str	r3, [r7, #16]
 8003b98:	2300      	movs	r3, #0
 8003b9a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0301 	and.w	r3, r3, #1
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d07d      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bac:	4b4f      	ldr	r3, [pc, #316]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bae:	69db      	ldr	r3, [r3, #28]
 8003bb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d10d      	bne.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bb8:	4b4c      	ldr	r3, [pc, #304]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bba:	69db      	ldr	r3, [r3, #28]
 8003bbc:	4a4b      	ldr	r2, [pc, #300]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bc2:	61d3      	str	r3, [r2, #28]
 8003bc4:	4b49      	ldr	r3, [pc, #292]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bc6:	69db      	ldr	r3, [r3, #28]
 8003bc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bcc:	60bb      	str	r3, [r7, #8]
 8003bce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bd4:	4b46      	ldr	r3, [pc, #280]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d118      	bne.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003be0:	4b43      	ldr	r3, [pc, #268]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a42      	ldr	r2, [pc, #264]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003be6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bec:	f7fe f834 	bl	8001c58 <HAL_GetTick>
 8003bf0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bf2:	e008      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bf4:	f7fe f830 	bl	8001c58 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b64      	cmp	r3, #100	@ 0x64
 8003c00:	d901      	bls.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e06d      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c06:	4b3a      	ldr	r3, [pc, #232]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d0f0      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c12:	4b36      	ldr	r3, [pc, #216]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c14:	6a1b      	ldr	r3, [r3, #32]
 8003c16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c1a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d02e      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d027      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c30:	4b2e      	ldr	r3, [pc, #184]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c32:	6a1b      	ldr	r3, [r3, #32]
 8003c34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c38:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c3a:	4b2e      	ldr	r3, [pc, #184]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c40:	4b2c      	ldr	r3, [pc, #176]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c42:	2200      	movs	r2, #0
 8003c44:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c46:	4a29      	ldr	r2, [pc, #164]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d014      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c56:	f7fd ffff 	bl	8001c58 <HAL_GetTick>
 8003c5a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c5c:	e00a      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c5e:	f7fd fffb 	bl	8001c58 <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d901      	bls.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e036      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c74:	4b1d      	ldr	r3, [pc, #116]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c76:	6a1b      	ldr	r3, [r3, #32]
 8003c78:	f003 0302 	and.w	r3, r3, #2
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d0ee      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c80:	4b1a      	ldr	r3, [pc, #104]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c82:	6a1b      	ldr	r3, [r3, #32]
 8003c84:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	4917      	ldr	r1, [pc, #92]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c92:	7dfb      	ldrb	r3, [r7, #23]
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d105      	bne.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c98:	4b14      	ldr	r3, [pc, #80]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c9a:	69db      	ldr	r3, [r3, #28]
 8003c9c:	4a13      	ldr	r2, [pc, #76]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ca2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0302 	and.w	r3, r3, #2
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d008      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003cb0:	4b0e      	ldr	r3, [pc, #56]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	490b      	ldr	r1, [pc, #44]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0310 	and.w	r3, r3, #16
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d008      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003cce:	4b07      	ldr	r3, [pc, #28]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	4904      	ldr	r1, [pc, #16]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3718      	adds	r7, #24
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	40021000 	.word	0x40021000
 8003cf0:	40007000 	.word	0x40007000
 8003cf4:	42420440 	.word	0x42420440

08003cf8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b088      	sub	sp, #32
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003d00:	2300      	movs	r3, #0
 8003d02:	617b      	str	r3, [r7, #20]
 8003d04:	2300      	movs	r3, #0
 8003d06:	61fb      	str	r3, [r7, #28]
 8003d08:	2300      	movs	r3, #0
 8003d0a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	60fb      	str	r3, [r7, #12]
 8003d10:	2300      	movs	r3, #0
 8003d12:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2b10      	cmp	r3, #16
 8003d18:	d00a      	beq.n	8003d30 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2b10      	cmp	r3, #16
 8003d1e:	f200 808a 	bhi.w	8003e36 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d045      	beq.n	8003db4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d075      	beq.n	8003e1a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003d2e:	e082      	b.n	8003e36 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003d30:	4b46      	ldr	r3, [pc, #280]	@ (8003e4c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003d36:	4b45      	ldr	r3, [pc, #276]	@ (8003e4c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d07b      	beq.n	8003e3a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	0c9b      	lsrs	r3, r3, #18
 8003d46:	f003 030f 	and.w	r3, r3, #15
 8003d4a:	4a41      	ldr	r2, [pc, #260]	@ (8003e50 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003d4c:	5cd3      	ldrb	r3, [r2, r3]
 8003d4e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d015      	beq.n	8003d86 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003d5a:	4b3c      	ldr	r3, [pc, #240]	@ (8003e4c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	0c5b      	lsrs	r3, r3, #17
 8003d60:	f003 0301 	and.w	r3, r3, #1
 8003d64:	4a3b      	ldr	r2, [pc, #236]	@ (8003e54 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003d66:	5cd3      	ldrb	r3, [r2, r3]
 8003d68:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00d      	beq.n	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003d74:	4a38      	ldr	r2, [pc, #224]	@ (8003e58 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	fb02 f303 	mul.w	r3, r2, r3
 8003d82:	61fb      	str	r3, [r7, #28]
 8003d84:	e004      	b.n	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	4a34      	ldr	r2, [pc, #208]	@ (8003e5c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003d8a:	fb02 f303 	mul.w	r3, r2, r3
 8003d8e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003d90:	4b2e      	ldr	r3, [pc, #184]	@ (8003e4c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d98:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d9c:	d102      	bne.n	8003da4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	61bb      	str	r3, [r7, #24]
      break;
 8003da2:	e04a      	b.n	8003e3a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	005b      	lsls	r3, r3, #1
 8003da8:	4a2d      	ldr	r2, [pc, #180]	@ (8003e60 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003daa:	fba2 2303 	umull	r2, r3, r2, r3
 8003dae:	085b      	lsrs	r3, r3, #1
 8003db0:	61bb      	str	r3, [r7, #24]
      break;
 8003db2:	e042      	b.n	8003e3a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003db4:	4b25      	ldr	r3, [pc, #148]	@ (8003e4c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003db6:	6a1b      	ldr	r3, [r3, #32]
 8003db8:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003dc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003dc4:	d108      	bne.n	8003dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f003 0302 	and.w	r3, r3, #2
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d003      	beq.n	8003dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003dd0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003dd4:	61bb      	str	r3, [r7, #24]
 8003dd6:	e01f      	b.n	8003e18 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003dde:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003de2:	d109      	bne.n	8003df8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003de4:	4b19      	ldr	r3, [pc, #100]	@ (8003e4c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de8:	f003 0302 	and.w	r3, r3, #2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d003      	beq.n	8003df8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003df0:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003df4:	61bb      	str	r3, [r7, #24]
 8003df6:	e00f      	b.n	8003e18 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003dfe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e02:	d11c      	bne.n	8003e3e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003e04:	4b11      	ldr	r3, [pc, #68]	@ (8003e4c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d016      	beq.n	8003e3e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003e10:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003e14:	61bb      	str	r3, [r7, #24]
      break;
 8003e16:	e012      	b.n	8003e3e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003e18:	e011      	b.n	8003e3e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003e1a:	f7ff fe85 	bl	8003b28 <HAL_RCC_GetPCLK2Freq>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	4b0a      	ldr	r3, [pc, #40]	@ (8003e4c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	0b9b      	lsrs	r3, r3, #14
 8003e26:	f003 0303 	and.w	r3, r3, #3
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	005b      	lsls	r3, r3, #1
 8003e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e32:	61bb      	str	r3, [r7, #24]
      break;
 8003e34:	e004      	b.n	8003e40 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003e36:	bf00      	nop
 8003e38:	e002      	b.n	8003e40 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003e3a:	bf00      	nop
 8003e3c:	e000      	b.n	8003e40 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003e3e:	bf00      	nop
    }
  }
  return (frequency);
 8003e40:	69bb      	ldr	r3, [r7, #24]
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3720      	adds	r7, #32
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	40021000 	.word	0x40021000
 8003e50:	08008668 	.word	0x08008668
 8003e54:	08008678 	.word	0x08008678
 8003e58:	007a1200 	.word	0x007a1200
 8003e5c:	003d0900 	.word	0x003d0900
 8003e60:	aaaaaaab 	.word	0xaaaaaaab

08003e64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d101      	bne.n	8003e76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e041      	b.n	8003efa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d106      	bne.n	8003e90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f7fd fcda 	bl	8001844 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2202      	movs	r2, #2
 8003e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	3304      	adds	r3, #4
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	4610      	mov	r0, r2
 8003ea4:	f000 fab2 	bl	800440c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3708      	adds	r7, #8
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}

08003f02 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f02:	b580      	push	{r7, lr}
 8003f04:	b082      	sub	sp, #8
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d101      	bne.n	8003f14 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e041      	b.n	8003f98 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d106      	bne.n	8003f2e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f000 f839 	bl	8003fa0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2202      	movs	r2, #2
 8003f32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	3304      	adds	r3, #4
 8003f3e:	4619      	mov	r1, r3
 8003f40:	4610      	mov	r0, r2
 8003f42:	f000 fa63 	bl	800440c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2201      	movs	r2, #1
 8003f52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2201      	movs	r2, #1
 8003f62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2201      	movs	r2, #1
 8003f72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2201      	movs	r2, #1
 8003f82:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2201      	movs	r2, #1
 8003f92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3708      	adds	r7, #8
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bc80      	pop	{r7}
 8003fb0:	4770      	bx	lr
	...

08003fb4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d109      	bne.n	8003fd8 <HAL_TIM_PWM_Start+0x24>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	bf14      	ite	ne
 8003fd0:	2301      	movne	r3, #1
 8003fd2:	2300      	moveq	r3, #0
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	e022      	b.n	800401e <HAL_TIM_PWM_Start+0x6a>
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	2b04      	cmp	r3, #4
 8003fdc:	d109      	bne.n	8003ff2 <HAL_TIM_PWM_Start+0x3e>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	bf14      	ite	ne
 8003fea:	2301      	movne	r3, #1
 8003fec:	2300      	moveq	r3, #0
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	e015      	b.n	800401e <HAL_TIM_PWM_Start+0x6a>
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	2b08      	cmp	r3, #8
 8003ff6:	d109      	bne.n	800400c <HAL_TIM_PWM_Start+0x58>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	2b01      	cmp	r3, #1
 8004002:	bf14      	ite	ne
 8004004:	2301      	movne	r3, #1
 8004006:	2300      	moveq	r3, #0
 8004008:	b2db      	uxtb	r3, r3
 800400a:	e008      	b.n	800401e <HAL_TIM_PWM_Start+0x6a>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004012:	b2db      	uxtb	r3, r3
 8004014:	2b01      	cmp	r3, #1
 8004016:	bf14      	ite	ne
 8004018:	2301      	movne	r3, #1
 800401a:	2300      	moveq	r3, #0
 800401c:	b2db      	uxtb	r3, r3
 800401e:	2b00      	cmp	r3, #0
 8004020:	d001      	beq.n	8004026 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e05e      	b.n	80040e4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d104      	bne.n	8004036 <HAL_TIM_PWM_Start+0x82>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2202      	movs	r2, #2
 8004030:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004034:	e013      	b.n	800405e <HAL_TIM_PWM_Start+0xaa>
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	2b04      	cmp	r3, #4
 800403a:	d104      	bne.n	8004046 <HAL_TIM_PWM_Start+0x92>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2202      	movs	r2, #2
 8004040:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004044:	e00b      	b.n	800405e <HAL_TIM_PWM_Start+0xaa>
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	2b08      	cmp	r3, #8
 800404a:	d104      	bne.n	8004056 <HAL_TIM_PWM_Start+0xa2>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2202      	movs	r2, #2
 8004050:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004054:	e003      	b.n	800405e <HAL_TIM_PWM_Start+0xaa>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2202      	movs	r2, #2
 800405a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2201      	movs	r2, #1
 8004064:	6839      	ldr	r1, [r7, #0]
 8004066:	4618      	mov	r0, r3
 8004068:	f000 fc5c 	bl	8004924 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a1e      	ldr	r2, [pc, #120]	@ (80040ec <HAL_TIM_PWM_Start+0x138>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d107      	bne.n	8004086 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004084:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a18      	ldr	r2, [pc, #96]	@ (80040ec <HAL_TIM_PWM_Start+0x138>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d00e      	beq.n	80040ae <HAL_TIM_PWM_Start+0xfa>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004098:	d009      	beq.n	80040ae <HAL_TIM_PWM_Start+0xfa>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a14      	ldr	r2, [pc, #80]	@ (80040f0 <HAL_TIM_PWM_Start+0x13c>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d004      	beq.n	80040ae <HAL_TIM_PWM_Start+0xfa>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a12      	ldr	r2, [pc, #72]	@ (80040f4 <HAL_TIM_PWM_Start+0x140>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d111      	bne.n	80040d2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	f003 0307 	and.w	r3, r3, #7
 80040b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2b06      	cmp	r3, #6
 80040be:	d010      	beq.n	80040e2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f042 0201 	orr.w	r2, r2, #1
 80040ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040d0:	e007      	b.n	80040e2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f042 0201 	orr.w	r2, r2, #1
 80040e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3710      	adds	r7, #16
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	40012c00 	.word	0x40012c00
 80040f0:	40000400 	.word	0x40000400
 80040f4:	40000800 	.word	0x40000800

080040f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b086      	sub	sp, #24
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004104:	2300      	movs	r3, #0
 8004106:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800410e:	2b01      	cmp	r3, #1
 8004110:	d101      	bne.n	8004116 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004112:	2302      	movs	r3, #2
 8004114:	e0ae      	b.n	8004274 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2201      	movs	r2, #1
 800411a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2b0c      	cmp	r3, #12
 8004122:	f200 809f 	bhi.w	8004264 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004126:	a201      	add	r2, pc, #4	@ (adr r2, 800412c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800412c:	08004161 	.word	0x08004161
 8004130:	08004265 	.word	0x08004265
 8004134:	08004265 	.word	0x08004265
 8004138:	08004265 	.word	0x08004265
 800413c:	080041a1 	.word	0x080041a1
 8004140:	08004265 	.word	0x08004265
 8004144:	08004265 	.word	0x08004265
 8004148:	08004265 	.word	0x08004265
 800414c:	080041e3 	.word	0x080041e3
 8004150:	08004265 	.word	0x08004265
 8004154:	08004265 	.word	0x08004265
 8004158:	08004265 	.word	0x08004265
 800415c:	08004223 	.word	0x08004223
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68b9      	ldr	r1, [r7, #8]
 8004166:	4618      	mov	r0, r3
 8004168:	f000 f9be 	bl	80044e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	699a      	ldr	r2, [r3, #24]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f042 0208 	orr.w	r2, r2, #8
 800417a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	699a      	ldr	r2, [r3, #24]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f022 0204 	bic.w	r2, r2, #4
 800418a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	6999      	ldr	r1, [r3, #24]
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	691a      	ldr	r2, [r3, #16]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	430a      	orrs	r2, r1
 800419c:	619a      	str	r2, [r3, #24]
      break;
 800419e:	e064      	b.n	800426a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	68b9      	ldr	r1, [r7, #8]
 80041a6:	4618      	mov	r0, r3
 80041a8:	f000 fa04 	bl	80045b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	699a      	ldr	r2, [r3, #24]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	699a      	ldr	r2, [r3, #24]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	6999      	ldr	r1, [r3, #24]
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	021a      	lsls	r2, r3, #8
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	430a      	orrs	r2, r1
 80041de:	619a      	str	r2, [r3, #24]
      break;
 80041e0:	e043      	b.n	800426a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68b9      	ldr	r1, [r7, #8]
 80041e8:	4618      	mov	r0, r3
 80041ea:	f000 fa4d 	bl	8004688 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	69da      	ldr	r2, [r3, #28]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f042 0208 	orr.w	r2, r2, #8
 80041fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	69da      	ldr	r2, [r3, #28]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f022 0204 	bic.w	r2, r2, #4
 800420c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	69d9      	ldr	r1, [r3, #28]
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	691a      	ldr	r2, [r3, #16]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	430a      	orrs	r2, r1
 800421e:	61da      	str	r2, [r3, #28]
      break;
 8004220:	e023      	b.n	800426a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68b9      	ldr	r1, [r7, #8]
 8004228:	4618      	mov	r0, r3
 800422a:	f000 fa97 	bl	800475c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	69da      	ldr	r2, [r3, #28]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800423c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	69da      	ldr	r2, [r3, #28]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800424c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	69d9      	ldr	r1, [r3, #28]
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	021a      	lsls	r2, r3, #8
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	430a      	orrs	r2, r1
 8004260:	61da      	str	r2, [r3, #28]
      break;
 8004262:	e002      	b.n	800426a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	75fb      	strb	r3, [r7, #23]
      break;
 8004268:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004272:	7dfb      	ldrb	r3, [r7, #23]
}
 8004274:	4618      	mov	r0, r3
 8004276:	3718      	adds	r7, #24
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004286:	2300      	movs	r3, #0
 8004288:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004290:	2b01      	cmp	r3, #1
 8004292:	d101      	bne.n	8004298 <HAL_TIM_ConfigClockSource+0x1c>
 8004294:	2302      	movs	r3, #2
 8004296:	e0b4      	b.n	8004402 <HAL_TIM_ConfigClockSource+0x186>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2202      	movs	r2, #2
 80042a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80042b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80042be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68ba      	ldr	r2, [r7, #8]
 80042c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042d0:	d03e      	beq.n	8004350 <HAL_TIM_ConfigClockSource+0xd4>
 80042d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042d6:	f200 8087 	bhi.w	80043e8 <HAL_TIM_ConfigClockSource+0x16c>
 80042da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042de:	f000 8086 	beq.w	80043ee <HAL_TIM_ConfigClockSource+0x172>
 80042e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042e6:	d87f      	bhi.n	80043e8 <HAL_TIM_ConfigClockSource+0x16c>
 80042e8:	2b70      	cmp	r3, #112	@ 0x70
 80042ea:	d01a      	beq.n	8004322 <HAL_TIM_ConfigClockSource+0xa6>
 80042ec:	2b70      	cmp	r3, #112	@ 0x70
 80042ee:	d87b      	bhi.n	80043e8 <HAL_TIM_ConfigClockSource+0x16c>
 80042f0:	2b60      	cmp	r3, #96	@ 0x60
 80042f2:	d050      	beq.n	8004396 <HAL_TIM_ConfigClockSource+0x11a>
 80042f4:	2b60      	cmp	r3, #96	@ 0x60
 80042f6:	d877      	bhi.n	80043e8 <HAL_TIM_ConfigClockSource+0x16c>
 80042f8:	2b50      	cmp	r3, #80	@ 0x50
 80042fa:	d03c      	beq.n	8004376 <HAL_TIM_ConfigClockSource+0xfa>
 80042fc:	2b50      	cmp	r3, #80	@ 0x50
 80042fe:	d873      	bhi.n	80043e8 <HAL_TIM_ConfigClockSource+0x16c>
 8004300:	2b40      	cmp	r3, #64	@ 0x40
 8004302:	d058      	beq.n	80043b6 <HAL_TIM_ConfigClockSource+0x13a>
 8004304:	2b40      	cmp	r3, #64	@ 0x40
 8004306:	d86f      	bhi.n	80043e8 <HAL_TIM_ConfigClockSource+0x16c>
 8004308:	2b30      	cmp	r3, #48	@ 0x30
 800430a:	d064      	beq.n	80043d6 <HAL_TIM_ConfigClockSource+0x15a>
 800430c:	2b30      	cmp	r3, #48	@ 0x30
 800430e:	d86b      	bhi.n	80043e8 <HAL_TIM_ConfigClockSource+0x16c>
 8004310:	2b20      	cmp	r3, #32
 8004312:	d060      	beq.n	80043d6 <HAL_TIM_ConfigClockSource+0x15a>
 8004314:	2b20      	cmp	r3, #32
 8004316:	d867      	bhi.n	80043e8 <HAL_TIM_ConfigClockSource+0x16c>
 8004318:	2b00      	cmp	r3, #0
 800431a:	d05c      	beq.n	80043d6 <HAL_TIM_ConfigClockSource+0x15a>
 800431c:	2b10      	cmp	r3, #16
 800431e:	d05a      	beq.n	80043d6 <HAL_TIM_ConfigClockSource+0x15a>
 8004320:	e062      	b.n	80043e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004332:	f000 fad8 	bl	80048e6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004344:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68ba      	ldr	r2, [r7, #8]
 800434c:	609a      	str	r2, [r3, #8]
      break;
 800434e:	e04f      	b.n	80043f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004360:	f000 fac1 	bl	80048e6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	689a      	ldr	r2, [r3, #8]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004372:	609a      	str	r2, [r3, #8]
      break;
 8004374:	e03c      	b.n	80043f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004382:	461a      	mov	r2, r3
 8004384:	f000 fa38 	bl	80047f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2150      	movs	r1, #80	@ 0x50
 800438e:	4618      	mov	r0, r3
 8004390:	f000 fa8f 	bl	80048b2 <TIM_ITRx_SetConfig>
      break;
 8004394:	e02c      	b.n	80043f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043a2:	461a      	mov	r2, r3
 80043a4:	f000 fa56 	bl	8004854 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2160      	movs	r1, #96	@ 0x60
 80043ae:	4618      	mov	r0, r3
 80043b0:	f000 fa7f 	bl	80048b2 <TIM_ITRx_SetConfig>
      break;
 80043b4:	e01c      	b.n	80043f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043c2:	461a      	mov	r2, r3
 80043c4:	f000 fa18 	bl	80047f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2140      	movs	r1, #64	@ 0x40
 80043ce:	4618      	mov	r0, r3
 80043d0:	f000 fa6f 	bl	80048b2 <TIM_ITRx_SetConfig>
      break;
 80043d4:	e00c      	b.n	80043f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4619      	mov	r1, r3
 80043e0:	4610      	mov	r0, r2
 80043e2:	f000 fa66 	bl	80048b2 <TIM_ITRx_SetConfig>
      break;
 80043e6:	e003      	b.n	80043f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	73fb      	strb	r3, [r7, #15]
      break;
 80043ec:	e000      	b.n	80043f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80043ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004400:	7bfb      	ldrb	r3, [r7, #15]
}
 8004402:	4618      	mov	r0, r3
 8004404:	3710      	adds	r7, #16
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
	...

0800440c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800440c:	b480      	push	{r7}
 800440e:	b085      	sub	sp, #20
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4a2f      	ldr	r2, [pc, #188]	@ (80044dc <TIM_Base_SetConfig+0xd0>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d00b      	beq.n	800443c <TIM_Base_SetConfig+0x30>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800442a:	d007      	beq.n	800443c <TIM_Base_SetConfig+0x30>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	4a2c      	ldr	r2, [pc, #176]	@ (80044e0 <TIM_Base_SetConfig+0xd4>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d003      	beq.n	800443c <TIM_Base_SetConfig+0x30>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	4a2b      	ldr	r2, [pc, #172]	@ (80044e4 <TIM_Base_SetConfig+0xd8>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d108      	bne.n	800444e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004442:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	68fa      	ldr	r2, [r7, #12]
 800444a:	4313      	orrs	r3, r2
 800444c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a22      	ldr	r2, [pc, #136]	@ (80044dc <TIM_Base_SetConfig+0xd0>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d00b      	beq.n	800446e <TIM_Base_SetConfig+0x62>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800445c:	d007      	beq.n	800446e <TIM_Base_SetConfig+0x62>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a1f      	ldr	r2, [pc, #124]	@ (80044e0 <TIM_Base_SetConfig+0xd4>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d003      	beq.n	800446e <TIM_Base_SetConfig+0x62>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a1e      	ldr	r2, [pc, #120]	@ (80044e4 <TIM_Base_SetConfig+0xd8>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d108      	bne.n	8004480 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004474:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	4313      	orrs	r3, r2
 800447e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	695b      	ldr	r3, [r3, #20]
 800448a:	4313      	orrs	r3, r2
 800448c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	68fa      	ldr	r2, [r7, #12]
 8004492:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	689a      	ldr	r2, [r3, #8]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a0d      	ldr	r2, [pc, #52]	@ (80044dc <TIM_Base_SetConfig+0xd0>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d103      	bne.n	80044b4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	691a      	ldr	r2, [r3, #16]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	f003 0301 	and.w	r3, r3, #1
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d005      	beq.n	80044d2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	f023 0201 	bic.w	r2, r3, #1
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	611a      	str	r2, [r3, #16]
  }
}
 80044d2:	bf00      	nop
 80044d4:	3714      	adds	r7, #20
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bc80      	pop	{r7}
 80044da:	4770      	bx	lr
 80044dc:	40012c00 	.word	0x40012c00
 80044e0:	40000400 	.word	0x40000400
 80044e4:	40000800 	.word	0x40000800

080044e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b087      	sub	sp, #28
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a1b      	ldr	r3, [r3, #32]
 80044f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a1b      	ldr	r3, [r3, #32]
 80044fc:	f023 0201 	bic.w	r2, r3, #1
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	699b      	ldr	r3, [r3, #24]
 800450e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004516:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f023 0303 	bic.w	r3, r3, #3
 800451e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68fa      	ldr	r2, [r7, #12]
 8004526:	4313      	orrs	r3, r2
 8004528:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	f023 0302 	bic.w	r3, r3, #2
 8004530:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	697a      	ldr	r2, [r7, #20]
 8004538:	4313      	orrs	r3, r2
 800453a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a1c      	ldr	r2, [pc, #112]	@ (80045b0 <TIM_OC1_SetConfig+0xc8>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d10c      	bne.n	800455e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	f023 0308 	bic.w	r3, r3, #8
 800454a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	697a      	ldr	r2, [r7, #20]
 8004552:	4313      	orrs	r3, r2
 8004554:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	f023 0304 	bic.w	r3, r3, #4
 800455c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a13      	ldr	r2, [pc, #76]	@ (80045b0 <TIM_OC1_SetConfig+0xc8>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d111      	bne.n	800458a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800456c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004574:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	695b      	ldr	r3, [r3, #20]
 800457a:	693a      	ldr	r2, [r7, #16]
 800457c:	4313      	orrs	r3, r2
 800457e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	693a      	ldr	r2, [r7, #16]
 8004586:	4313      	orrs	r3, r2
 8004588:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	693a      	ldr	r2, [r7, #16]
 800458e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	68fa      	ldr	r2, [r7, #12]
 8004594:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	685a      	ldr	r2, [r3, #4]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	697a      	ldr	r2, [r7, #20]
 80045a2:	621a      	str	r2, [r3, #32]
}
 80045a4:	bf00      	nop
 80045a6:	371c      	adds	r7, #28
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bc80      	pop	{r7}
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	40012c00 	.word	0x40012c00

080045b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b087      	sub	sp, #28
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a1b      	ldr	r3, [r3, #32]
 80045c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a1b      	ldr	r3, [r3, #32]
 80045c8:	f023 0210 	bic.w	r2, r3, #16
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	021b      	lsls	r3, r3, #8
 80045f2:	68fa      	ldr	r2, [r7, #12]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	f023 0320 	bic.w	r3, r3, #32
 80045fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	011b      	lsls	r3, r3, #4
 8004606:	697a      	ldr	r2, [r7, #20]
 8004608:	4313      	orrs	r3, r2
 800460a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4a1d      	ldr	r2, [pc, #116]	@ (8004684 <TIM_OC2_SetConfig+0xd0>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d10d      	bne.n	8004630 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800461a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	011b      	lsls	r3, r3, #4
 8004622:	697a      	ldr	r2, [r7, #20]
 8004624:	4313      	orrs	r3, r2
 8004626:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800462e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a14      	ldr	r2, [pc, #80]	@ (8004684 <TIM_OC2_SetConfig+0xd0>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d113      	bne.n	8004660 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800463e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004646:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	695b      	ldr	r3, [r3, #20]
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	693a      	ldr	r2, [r7, #16]
 8004650:	4313      	orrs	r3, r2
 8004652:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	699b      	ldr	r3, [r3, #24]
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	693a      	ldr	r2, [r7, #16]
 800465c:	4313      	orrs	r3, r2
 800465e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	693a      	ldr	r2, [r7, #16]
 8004664:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	685a      	ldr	r2, [r3, #4]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	697a      	ldr	r2, [r7, #20]
 8004678:	621a      	str	r2, [r3, #32]
}
 800467a:	bf00      	nop
 800467c:	371c      	adds	r7, #28
 800467e:	46bd      	mov	sp, r7
 8004680:	bc80      	pop	{r7}
 8004682:	4770      	bx	lr
 8004684:	40012c00 	.word	0x40012c00

08004688 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004688:	b480      	push	{r7}
 800468a:	b087      	sub	sp, #28
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a1b      	ldr	r3, [r3, #32]
 8004696:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a1b      	ldr	r3, [r3, #32]
 800469c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	69db      	ldr	r3, [r3, #28]
 80046ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f023 0303 	bic.w	r3, r3, #3
 80046be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68fa      	ldr	r2, [r7, #12]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80046d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	021b      	lsls	r3, r3, #8
 80046d8:	697a      	ldr	r2, [r7, #20]
 80046da:	4313      	orrs	r3, r2
 80046dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a1d      	ldr	r2, [pc, #116]	@ (8004758 <TIM_OC3_SetConfig+0xd0>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d10d      	bne.n	8004702 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80046ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	021b      	lsls	r3, r3, #8
 80046f4:	697a      	ldr	r2, [r7, #20]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004700:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a14      	ldr	r2, [pc, #80]	@ (8004758 <TIM_OC3_SetConfig+0xd0>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d113      	bne.n	8004732 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004710:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004718:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	011b      	lsls	r3, r3, #4
 8004720:	693a      	ldr	r2, [r7, #16]
 8004722:	4313      	orrs	r3, r2
 8004724:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	699b      	ldr	r3, [r3, #24]
 800472a:	011b      	lsls	r3, r3, #4
 800472c:	693a      	ldr	r2, [r7, #16]
 800472e:	4313      	orrs	r3, r2
 8004730:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	693a      	ldr	r2, [r7, #16]
 8004736:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	68fa      	ldr	r2, [r7, #12]
 800473c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	685a      	ldr	r2, [r3, #4]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	697a      	ldr	r2, [r7, #20]
 800474a:	621a      	str	r2, [r3, #32]
}
 800474c:	bf00      	nop
 800474e:	371c      	adds	r7, #28
 8004750:	46bd      	mov	sp, r7
 8004752:	bc80      	pop	{r7}
 8004754:	4770      	bx	lr
 8004756:	bf00      	nop
 8004758:	40012c00 	.word	0x40012c00

0800475c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800475c:	b480      	push	{r7}
 800475e:	b087      	sub	sp, #28
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a1b      	ldr	r3, [r3, #32]
 800476a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a1b      	ldr	r3, [r3, #32]
 8004770:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	69db      	ldr	r3, [r3, #28]
 8004782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800478a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004792:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	021b      	lsls	r3, r3, #8
 800479a:	68fa      	ldr	r2, [r7, #12]
 800479c:	4313      	orrs	r3, r2
 800479e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80047a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	031b      	lsls	r3, r3, #12
 80047ae:	693a      	ldr	r2, [r7, #16]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a0f      	ldr	r2, [pc, #60]	@ (80047f4 <TIM_OC4_SetConfig+0x98>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d109      	bne.n	80047d0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80047c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	695b      	ldr	r3, [r3, #20]
 80047c8:	019b      	lsls	r3, r3, #6
 80047ca:	697a      	ldr	r2, [r7, #20]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	697a      	ldr	r2, [r7, #20]
 80047d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	685a      	ldr	r2, [r3, #4]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	693a      	ldr	r2, [r7, #16]
 80047e8:	621a      	str	r2, [r3, #32]
}
 80047ea:	bf00      	nop
 80047ec:	371c      	adds	r7, #28
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bc80      	pop	{r7}
 80047f2:	4770      	bx	lr
 80047f4:	40012c00 	.word	0x40012c00

080047f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b087      	sub	sp, #28
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6a1b      	ldr	r3, [r3, #32]
 8004808:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6a1b      	ldr	r3, [r3, #32]
 800480e:	f023 0201 	bic.w	r2, r3, #1
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004822:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	011b      	lsls	r3, r3, #4
 8004828:	693a      	ldr	r2, [r7, #16]
 800482a:	4313      	orrs	r3, r2
 800482c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	f023 030a 	bic.w	r3, r3, #10
 8004834:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004836:	697a      	ldr	r2, [r7, #20]
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	4313      	orrs	r3, r2
 800483c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	693a      	ldr	r2, [r7, #16]
 8004842:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	697a      	ldr	r2, [r7, #20]
 8004848:	621a      	str	r2, [r3, #32]
}
 800484a:	bf00      	nop
 800484c:	371c      	adds	r7, #28
 800484e:	46bd      	mov	sp, r7
 8004850:	bc80      	pop	{r7}
 8004852:	4770      	bx	lr

08004854 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004854:	b480      	push	{r7}
 8004856:	b087      	sub	sp, #28
 8004858:	af00      	add	r7, sp, #0
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6a1b      	ldr	r3, [r3, #32]
 8004864:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6a1b      	ldr	r3, [r3, #32]
 800486a:	f023 0210 	bic.w	r2, r3, #16
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800487e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	031b      	lsls	r3, r3, #12
 8004884:	693a      	ldr	r2, [r7, #16]
 8004886:	4313      	orrs	r3, r2
 8004888:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004890:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	011b      	lsls	r3, r3, #4
 8004896:	697a      	ldr	r2, [r7, #20]
 8004898:	4313      	orrs	r3, r2
 800489a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	693a      	ldr	r2, [r7, #16]
 80048a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	697a      	ldr	r2, [r7, #20]
 80048a6:	621a      	str	r2, [r3, #32]
}
 80048a8:	bf00      	nop
 80048aa:	371c      	adds	r7, #28
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bc80      	pop	{r7}
 80048b0:	4770      	bx	lr

080048b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048b2:	b480      	push	{r7}
 80048b4:	b085      	sub	sp, #20
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]
 80048ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048ca:	683a      	ldr	r2, [r7, #0]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	f043 0307 	orr.w	r3, r3, #7
 80048d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	68fa      	ldr	r2, [r7, #12]
 80048da:	609a      	str	r2, [r3, #8]
}
 80048dc:	bf00      	nop
 80048de:	3714      	adds	r7, #20
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bc80      	pop	{r7}
 80048e4:	4770      	bx	lr

080048e6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048e6:	b480      	push	{r7}
 80048e8:	b087      	sub	sp, #28
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	60f8      	str	r0, [r7, #12]
 80048ee:	60b9      	str	r1, [r7, #8]
 80048f0:	607a      	str	r2, [r7, #4]
 80048f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004900:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	021a      	lsls	r2, r3, #8
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	431a      	orrs	r2, r3
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	4313      	orrs	r3, r2
 800490e:	697a      	ldr	r2, [r7, #20]
 8004910:	4313      	orrs	r3, r2
 8004912:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	697a      	ldr	r2, [r7, #20]
 8004918:	609a      	str	r2, [r3, #8]
}
 800491a:	bf00      	nop
 800491c:	371c      	adds	r7, #28
 800491e:	46bd      	mov	sp, r7
 8004920:	bc80      	pop	{r7}
 8004922:	4770      	bx	lr

08004924 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004924:	b480      	push	{r7}
 8004926:	b087      	sub	sp, #28
 8004928:	af00      	add	r7, sp, #0
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	f003 031f 	and.w	r3, r3, #31
 8004936:	2201      	movs	r2, #1
 8004938:	fa02 f303 	lsl.w	r3, r2, r3
 800493c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6a1a      	ldr	r2, [r3, #32]
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	43db      	mvns	r3, r3
 8004946:	401a      	ands	r2, r3
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6a1a      	ldr	r2, [r3, #32]
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	f003 031f 	and.w	r3, r3, #31
 8004956:	6879      	ldr	r1, [r7, #4]
 8004958:	fa01 f303 	lsl.w	r3, r1, r3
 800495c:	431a      	orrs	r2, r3
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	621a      	str	r2, [r3, #32]
}
 8004962:	bf00      	nop
 8004964:	371c      	adds	r7, #28
 8004966:	46bd      	mov	sp, r7
 8004968:	bc80      	pop	{r7}
 800496a:	4770      	bx	lr

0800496c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800496c:	b480      	push	{r7}
 800496e:	b085      	sub	sp, #20
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800497c:	2b01      	cmp	r3, #1
 800497e:	d101      	bne.n	8004984 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004980:	2302      	movs	r3, #2
 8004982:	e046      	b.n	8004a12 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2202      	movs	r2, #2
 8004990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a16      	ldr	r2, [pc, #88]	@ (8004a1c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d00e      	beq.n	80049e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049d0:	d009      	beq.n	80049e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a12      	ldr	r2, [pc, #72]	@ (8004a20 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d004      	beq.n	80049e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a10      	ldr	r2, [pc, #64]	@ (8004a24 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d10c      	bne.n	8004a00 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	68ba      	ldr	r2, [r7, #8]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68ba      	ldr	r2, [r7, #8]
 80049fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3714      	adds	r7, #20
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bc80      	pop	{r7}
 8004a1a:	4770      	bx	lr
 8004a1c:	40012c00 	.word	0x40012c00
 8004a20:	40000400 	.word	0x40000400
 8004a24:	40000800 	.word	0x40000800

08004a28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d101      	bne.n	8004a3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e042      	b.n	8004ac0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d106      	bne.n	8004a54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f7fc ff44 	bl	80018dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2224      	movs	r2, #36	@ 0x24
 8004a58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68da      	ldr	r2, [r3, #12]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004a6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f000 fa09 	bl	8004e84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	691a      	ldr	r2, [r3, #16]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004a80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	695a      	ldr	r2, [r3, #20]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004a90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68da      	ldr	r2, [r3, #12]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004aa0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2220      	movs	r2, #32
 8004aac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2220      	movs	r2, #32
 8004ab4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3708      	adds	r7, #8
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b08a      	sub	sp, #40	@ 0x28
 8004acc:	af02      	add	r7, sp, #8
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	603b      	str	r3, [r7, #0]
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	2b20      	cmp	r3, #32
 8004ae6:	d175      	bne.n	8004bd4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d002      	beq.n	8004af4 <HAL_UART_Transmit+0x2c>
 8004aee:	88fb      	ldrh	r3, [r7, #6]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d101      	bne.n	8004af8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e06e      	b.n	8004bd6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2200      	movs	r2, #0
 8004afc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2221      	movs	r2, #33	@ 0x21
 8004b02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b06:	f7fd f8a7 	bl	8001c58 <HAL_GetTick>
 8004b0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	88fa      	ldrh	r2, [r7, #6]
 8004b10:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	88fa      	ldrh	r2, [r7, #6]
 8004b16:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b20:	d108      	bne.n	8004b34 <HAL_UART_Transmit+0x6c>
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d104      	bne.n	8004b34 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	61bb      	str	r3, [r7, #24]
 8004b32:	e003      	b.n	8004b3c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b3c:	e02e      	b.n	8004b9c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	9300      	str	r3, [sp, #0]
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	2200      	movs	r2, #0
 8004b46:	2180      	movs	r1, #128	@ 0x80
 8004b48:	68f8      	ldr	r0, [r7, #12]
 8004b4a:	f000 f8df 	bl	8004d0c <UART_WaitOnFlagUntilTimeout>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d005      	beq.n	8004b60 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2220      	movs	r2, #32
 8004b58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	e03a      	b.n	8004bd6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d10b      	bne.n	8004b7e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	881b      	ldrh	r3, [r3, #0]
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b74:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	3302      	adds	r3, #2
 8004b7a:	61bb      	str	r3, [r7, #24]
 8004b7c:	e007      	b.n	8004b8e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	781a      	ldrb	r2, [r3, #0]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	3b01      	subs	r3, #1
 8004b96:	b29a      	uxth	r2, r3
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d1cb      	bne.n	8004b3e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	9300      	str	r3, [sp, #0]
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	2200      	movs	r2, #0
 8004bae:	2140      	movs	r1, #64	@ 0x40
 8004bb0:	68f8      	ldr	r0, [r7, #12]
 8004bb2:	f000 f8ab 	bl	8004d0c <UART_WaitOnFlagUntilTimeout>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d005      	beq.n	8004bc8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2220      	movs	r2, #32
 8004bc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e006      	b.n	8004bd6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2220      	movs	r2, #32
 8004bcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	e000      	b.n	8004bd6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004bd4:	2302      	movs	r3, #2
  }
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3720      	adds	r7, #32
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}

08004bde <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bde:	b580      	push	{r7, lr}
 8004be0:	b08a      	sub	sp, #40	@ 0x28
 8004be2:	af02      	add	r7, sp, #8
 8004be4:	60f8      	str	r0, [r7, #12]
 8004be6:	60b9      	str	r1, [r7, #8]
 8004be8:	603b      	str	r3, [r7, #0]
 8004bea:	4613      	mov	r3, r2
 8004bec:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	2b20      	cmp	r3, #32
 8004bfc:	f040 8081 	bne.w	8004d02 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d002      	beq.n	8004c0c <HAL_UART_Receive+0x2e>
 8004c06:	88fb      	ldrh	r3, [r7, #6]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d101      	bne.n	8004c10 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e079      	b.n	8004d04 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2200      	movs	r2, #0
 8004c14:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2222      	movs	r2, #34	@ 0x22
 8004c1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c24:	f7fd f818 	bl	8001c58 <HAL_GetTick>
 8004c28:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	88fa      	ldrh	r2, [r7, #6]
 8004c2e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	88fa      	ldrh	r2, [r7, #6]
 8004c34:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c3e:	d108      	bne.n	8004c52 <HAL_UART_Receive+0x74>
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d104      	bne.n	8004c52 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	61bb      	str	r3, [r7, #24]
 8004c50:	e003      	b.n	8004c5a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c56:	2300      	movs	r3, #0
 8004c58:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004c5a:	e047      	b.n	8004cec <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	9300      	str	r3, [sp, #0]
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	2200      	movs	r2, #0
 8004c64:	2120      	movs	r1, #32
 8004c66:	68f8      	ldr	r0, [r7, #12]
 8004c68:	f000 f850 	bl	8004d0c <UART_WaitOnFlagUntilTimeout>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d005      	beq.n	8004c7e <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2220      	movs	r2, #32
 8004c76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e042      	b.n	8004d04 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d10c      	bne.n	8004c9e <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c90:	b29a      	uxth	r2, r3
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	3302      	adds	r3, #2
 8004c9a:	61bb      	str	r3, [r7, #24]
 8004c9c:	e01f      	b.n	8004cde <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ca6:	d007      	beq.n	8004cb8 <HAL_UART_Receive+0xda>
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d10a      	bne.n	8004cc6 <HAL_UART_Receive+0xe8>
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d106      	bne.n	8004cc6 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	b2da      	uxtb	r2, r3
 8004cc0:	69fb      	ldr	r3, [r7, #28]
 8004cc2:	701a      	strb	r2, [r3, #0]
 8004cc4:	e008      	b.n	8004cd8 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cd2:	b2da      	uxtb	r2, r3
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	3301      	adds	r3, #1
 8004cdc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	3b01      	subs	r3, #1
 8004ce6:	b29a      	uxth	r2, r3
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d1b2      	bne.n	8004c5c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2220      	movs	r2, #32
 8004cfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	e000      	b.n	8004d04 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004d02:	2302      	movs	r3, #2
  }
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3720      	adds	r7, #32
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b086      	sub	sp, #24
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	603b      	str	r3, [r7, #0]
 8004d18:	4613      	mov	r3, r2
 8004d1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d1c:	e03b      	b.n	8004d96 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d1e:	6a3b      	ldr	r3, [r7, #32]
 8004d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d24:	d037      	beq.n	8004d96 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d26:	f7fc ff97 	bl	8001c58 <HAL_GetTick>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	1ad3      	subs	r3, r2, r3
 8004d30:	6a3a      	ldr	r2, [r7, #32]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d302      	bcc.n	8004d3c <UART_WaitOnFlagUntilTimeout+0x30>
 8004d36:	6a3b      	ldr	r3, [r7, #32]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d101      	bne.n	8004d40 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e03a      	b.n	8004db6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	f003 0304 	and.w	r3, r3, #4
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d023      	beq.n	8004d96 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	2b80      	cmp	r3, #128	@ 0x80
 8004d52:	d020      	beq.n	8004d96 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	2b40      	cmp	r3, #64	@ 0x40
 8004d58:	d01d      	beq.n	8004d96 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0308 	and.w	r3, r3, #8
 8004d64:	2b08      	cmp	r3, #8
 8004d66:	d116      	bne.n	8004d96 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004d68:	2300      	movs	r3, #0
 8004d6a:	617b      	str	r3, [r7, #20]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	617b      	str	r3, [r7, #20]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	617b      	str	r3, [r7, #20]
 8004d7c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d7e:	68f8      	ldr	r0, [r7, #12]
 8004d80:	f000 f81d 	bl	8004dbe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2208      	movs	r2, #8
 8004d88:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e00f      	b.n	8004db6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	4013      	ands	r3, r2
 8004da0:	68ba      	ldr	r2, [r7, #8]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	bf0c      	ite	eq
 8004da6:	2301      	moveq	r3, #1
 8004da8:	2300      	movne	r3, #0
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	461a      	mov	r2, r3
 8004dae:	79fb      	ldrb	r3, [r7, #7]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d0b4      	beq.n	8004d1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3718      	adds	r7, #24
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}

08004dbe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004dbe:	b480      	push	{r7}
 8004dc0:	b095      	sub	sp, #84	@ 0x54
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	330c      	adds	r3, #12
 8004dcc:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dd0:	e853 3f00 	ldrex	r3, [r3]
 8004dd4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dd8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ddc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	330c      	adds	r3, #12
 8004de4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004de6:	643a      	str	r2, [r7, #64]	@ 0x40
 8004de8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004dec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004dee:	e841 2300 	strex	r3, r2, [r1]
 8004df2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d1e5      	bne.n	8004dc6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	3314      	adds	r3, #20
 8004e00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e02:	6a3b      	ldr	r3, [r7, #32]
 8004e04:	e853 3f00 	ldrex	r3, [r3]
 8004e08:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	f023 0301 	bic.w	r3, r3, #1
 8004e10:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	3314      	adds	r3, #20
 8004e18:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e1e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e22:	e841 2300 	strex	r3, r2, [r1]
 8004e26:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d1e5      	bne.n	8004dfa <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d119      	bne.n	8004e6a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	330c      	adds	r3, #12
 8004e3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	e853 3f00 	ldrex	r3, [r3]
 8004e44:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	f023 0310 	bic.w	r3, r3, #16
 8004e4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	330c      	adds	r3, #12
 8004e54:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e56:	61ba      	str	r2, [r7, #24]
 8004e58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e5a:	6979      	ldr	r1, [r7, #20]
 8004e5c:	69ba      	ldr	r2, [r7, #24]
 8004e5e:	e841 2300 	strex	r3, r2, [r1]
 8004e62:	613b      	str	r3, [r7, #16]
   return(result);
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d1e5      	bne.n	8004e36 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2220      	movs	r2, #32
 8004e6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004e78:	bf00      	nop
 8004e7a:	3754      	adds	r7, #84	@ 0x54
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bc80      	pop	{r7}
 8004e80:	4770      	bx	lr
	...

08004e84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	68da      	ldr	r2, [r3, #12]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	430a      	orrs	r2, r1
 8004ea0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	689a      	ldr	r2, [r3, #8]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	431a      	orrs	r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	695b      	ldr	r3, [r3, #20]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004ebe:	f023 030c 	bic.w	r3, r3, #12
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	6812      	ldr	r2, [r2, #0]
 8004ec6:	68b9      	ldr	r1, [r7, #8]
 8004ec8:	430b      	orrs	r3, r1
 8004eca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	695b      	ldr	r3, [r3, #20]
 8004ed2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	699a      	ldr	r2, [r3, #24]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	430a      	orrs	r2, r1
 8004ee0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a2c      	ldr	r2, [pc, #176]	@ (8004f98 <UART_SetConfig+0x114>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d103      	bne.n	8004ef4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004eec:	f7fe fe1c 	bl	8003b28 <HAL_RCC_GetPCLK2Freq>
 8004ef0:	60f8      	str	r0, [r7, #12]
 8004ef2:	e002      	b.n	8004efa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004ef4:	f7fe fe04 	bl	8003b00 <HAL_RCC_GetPCLK1Freq>
 8004ef8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004efa:	68fa      	ldr	r2, [r7, #12]
 8004efc:	4613      	mov	r3, r2
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	4413      	add	r3, r2
 8004f02:	009a      	lsls	r2, r3, #2
 8004f04:	441a      	add	r2, r3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f10:	4a22      	ldr	r2, [pc, #136]	@ (8004f9c <UART_SetConfig+0x118>)
 8004f12:	fba2 2303 	umull	r2, r3, r2, r3
 8004f16:	095b      	lsrs	r3, r3, #5
 8004f18:	0119      	lsls	r1, r3, #4
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	4413      	add	r3, r2
 8004f22:	009a      	lsls	r2, r3, #2
 8004f24:	441a      	add	r2, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f30:	4b1a      	ldr	r3, [pc, #104]	@ (8004f9c <UART_SetConfig+0x118>)
 8004f32:	fba3 0302 	umull	r0, r3, r3, r2
 8004f36:	095b      	lsrs	r3, r3, #5
 8004f38:	2064      	movs	r0, #100	@ 0x64
 8004f3a:	fb00 f303 	mul.w	r3, r0, r3
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	011b      	lsls	r3, r3, #4
 8004f42:	3332      	adds	r3, #50	@ 0x32
 8004f44:	4a15      	ldr	r2, [pc, #84]	@ (8004f9c <UART_SetConfig+0x118>)
 8004f46:	fba2 2303 	umull	r2, r3, r2, r3
 8004f4a:	095b      	lsrs	r3, r3, #5
 8004f4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f50:	4419      	add	r1, r3
 8004f52:	68fa      	ldr	r2, [r7, #12]
 8004f54:	4613      	mov	r3, r2
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	4413      	add	r3, r2
 8004f5a:	009a      	lsls	r2, r3, #2
 8004f5c:	441a      	add	r2, r3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f68:	4b0c      	ldr	r3, [pc, #48]	@ (8004f9c <UART_SetConfig+0x118>)
 8004f6a:	fba3 0302 	umull	r0, r3, r3, r2
 8004f6e:	095b      	lsrs	r3, r3, #5
 8004f70:	2064      	movs	r0, #100	@ 0x64
 8004f72:	fb00 f303 	mul.w	r3, r0, r3
 8004f76:	1ad3      	subs	r3, r2, r3
 8004f78:	011b      	lsls	r3, r3, #4
 8004f7a:	3332      	adds	r3, #50	@ 0x32
 8004f7c:	4a07      	ldr	r2, [pc, #28]	@ (8004f9c <UART_SetConfig+0x118>)
 8004f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f82:	095b      	lsrs	r3, r3, #5
 8004f84:	f003 020f 	and.w	r2, r3, #15
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	440a      	add	r2, r1
 8004f8e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004f90:	bf00      	nop
 8004f92:	3710      	adds	r7, #16
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	40013800 	.word	0x40013800
 8004f9c:	51eb851f 	.word	0x51eb851f

08004fa0 <__cvt>:
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fa6:	461d      	mov	r5, r3
 8004fa8:	bfbb      	ittet	lt
 8004faa:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8004fae:	461d      	movlt	r5, r3
 8004fb0:	2300      	movge	r3, #0
 8004fb2:	232d      	movlt	r3, #45	@ 0x2d
 8004fb4:	b088      	sub	sp, #32
 8004fb6:	4614      	mov	r4, r2
 8004fb8:	bfb8      	it	lt
 8004fba:	4614      	movlt	r4, r2
 8004fbc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004fbe:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8004fc0:	7013      	strb	r3, [r2, #0]
 8004fc2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004fc4:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8004fc8:	f023 0820 	bic.w	r8, r3, #32
 8004fcc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004fd0:	d005      	beq.n	8004fde <__cvt+0x3e>
 8004fd2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004fd6:	d100      	bne.n	8004fda <__cvt+0x3a>
 8004fd8:	3601      	adds	r6, #1
 8004fda:	2302      	movs	r3, #2
 8004fdc:	e000      	b.n	8004fe0 <__cvt+0x40>
 8004fde:	2303      	movs	r3, #3
 8004fe0:	aa07      	add	r2, sp, #28
 8004fe2:	9204      	str	r2, [sp, #16]
 8004fe4:	aa06      	add	r2, sp, #24
 8004fe6:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004fea:	e9cd 3600 	strd	r3, r6, [sp]
 8004fee:	4622      	mov	r2, r4
 8004ff0:	462b      	mov	r3, r5
 8004ff2:	f000 fe9d 	bl	8005d30 <_dtoa_r>
 8004ff6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004ffa:	4607      	mov	r7, r0
 8004ffc:	d119      	bne.n	8005032 <__cvt+0x92>
 8004ffe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005000:	07db      	lsls	r3, r3, #31
 8005002:	d50e      	bpl.n	8005022 <__cvt+0x82>
 8005004:	eb00 0906 	add.w	r9, r0, r6
 8005008:	2200      	movs	r2, #0
 800500a:	2300      	movs	r3, #0
 800500c:	4620      	mov	r0, r4
 800500e:	4629      	mov	r1, r5
 8005010:	f7fb fcca 	bl	80009a8 <__aeabi_dcmpeq>
 8005014:	b108      	cbz	r0, 800501a <__cvt+0x7a>
 8005016:	f8cd 901c 	str.w	r9, [sp, #28]
 800501a:	2230      	movs	r2, #48	@ 0x30
 800501c:	9b07      	ldr	r3, [sp, #28]
 800501e:	454b      	cmp	r3, r9
 8005020:	d31e      	bcc.n	8005060 <__cvt+0xc0>
 8005022:	4638      	mov	r0, r7
 8005024:	9b07      	ldr	r3, [sp, #28]
 8005026:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005028:	1bdb      	subs	r3, r3, r7
 800502a:	6013      	str	r3, [r2, #0]
 800502c:	b008      	add	sp, #32
 800502e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005032:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005036:	eb00 0906 	add.w	r9, r0, r6
 800503a:	d1e5      	bne.n	8005008 <__cvt+0x68>
 800503c:	7803      	ldrb	r3, [r0, #0]
 800503e:	2b30      	cmp	r3, #48	@ 0x30
 8005040:	d10a      	bne.n	8005058 <__cvt+0xb8>
 8005042:	2200      	movs	r2, #0
 8005044:	2300      	movs	r3, #0
 8005046:	4620      	mov	r0, r4
 8005048:	4629      	mov	r1, r5
 800504a:	f7fb fcad 	bl	80009a8 <__aeabi_dcmpeq>
 800504e:	b918      	cbnz	r0, 8005058 <__cvt+0xb8>
 8005050:	f1c6 0601 	rsb	r6, r6, #1
 8005054:	f8ca 6000 	str.w	r6, [sl]
 8005058:	f8da 3000 	ldr.w	r3, [sl]
 800505c:	4499      	add	r9, r3
 800505e:	e7d3      	b.n	8005008 <__cvt+0x68>
 8005060:	1c59      	adds	r1, r3, #1
 8005062:	9107      	str	r1, [sp, #28]
 8005064:	701a      	strb	r2, [r3, #0]
 8005066:	e7d9      	b.n	800501c <__cvt+0x7c>

08005068 <__exponent>:
 8005068:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800506a:	2900      	cmp	r1, #0
 800506c:	bfb6      	itet	lt
 800506e:	232d      	movlt	r3, #45	@ 0x2d
 8005070:	232b      	movge	r3, #43	@ 0x2b
 8005072:	4249      	neglt	r1, r1
 8005074:	2909      	cmp	r1, #9
 8005076:	7002      	strb	r2, [r0, #0]
 8005078:	7043      	strb	r3, [r0, #1]
 800507a:	dd29      	ble.n	80050d0 <__exponent+0x68>
 800507c:	f10d 0307 	add.w	r3, sp, #7
 8005080:	461d      	mov	r5, r3
 8005082:	270a      	movs	r7, #10
 8005084:	fbb1 f6f7 	udiv	r6, r1, r7
 8005088:	461a      	mov	r2, r3
 800508a:	fb07 1416 	mls	r4, r7, r6, r1
 800508e:	3430      	adds	r4, #48	@ 0x30
 8005090:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005094:	460c      	mov	r4, r1
 8005096:	2c63      	cmp	r4, #99	@ 0x63
 8005098:	4631      	mov	r1, r6
 800509a:	f103 33ff 	add.w	r3, r3, #4294967295
 800509e:	dcf1      	bgt.n	8005084 <__exponent+0x1c>
 80050a0:	3130      	adds	r1, #48	@ 0x30
 80050a2:	1e94      	subs	r4, r2, #2
 80050a4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80050a8:	4623      	mov	r3, r4
 80050aa:	1c41      	adds	r1, r0, #1
 80050ac:	42ab      	cmp	r3, r5
 80050ae:	d30a      	bcc.n	80050c6 <__exponent+0x5e>
 80050b0:	f10d 0309 	add.w	r3, sp, #9
 80050b4:	1a9b      	subs	r3, r3, r2
 80050b6:	42ac      	cmp	r4, r5
 80050b8:	bf88      	it	hi
 80050ba:	2300      	movhi	r3, #0
 80050bc:	3302      	adds	r3, #2
 80050be:	4403      	add	r3, r0
 80050c0:	1a18      	subs	r0, r3, r0
 80050c2:	b003      	add	sp, #12
 80050c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050c6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80050ca:	f801 6f01 	strb.w	r6, [r1, #1]!
 80050ce:	e7ed      	b.n	80050ac <__exponent+0x44>
 80050d0:	2330      	movs	r3, #48	@ 0x30
 80050d2:	3130      	adds	r1, #48	@ 0x30
 80050d4:	7083      	strb	r3, [r0, #2]
 80050d6:	70c1      	strb	r1, [r0, #3]
 80050d8:	1d03      	adds	r3, r0, #4
 80050da:	e7f1      	b.n	80050c0 <__exponent+0x58>

080050dc <_printf_float>:
 80050dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050e0:	b091      	sub	sp, #68	@ 0x44
 80050e2:	460c      	mov	r4, r1
 80050e4:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80050e8:	4616      	mov	r6, r2
 80050ea:	461f      	mov	r7, r3
 80050ec:	4605      	mov	r5, r0
 80050ee:	f000 fd0f 	bl	8005b10 <_localeconv_r>
 80050f2:	6803      	ldr	r3, [r0, #0]
 80050f4:	4618      	mov	r0, r3
 80050f6:	9308      	str	r3, [sp, #32]
 80050f8:	f7fb f82a 	bl	8000150 <strlen>
 80050fc:	2300      	movs	r3, #0
 80050fe:	930e      	str	r3, [sp, #56]	@ 0x38
 8005100:	f8d8 3000 	ldr.w	r3, [r8]
 8005104:	9009      	str	r0, [sp, #36]	@ 0x24
 8005106:	3307      	adds	r3, #7
 8005108:	f023 0307 	bic.w	r3, r3, #7
 800510c:	f103 0208 	add.w	r2, r3, #8
 8005110:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005114:	f8d4 b000 	ldr.w	fp, [r4]
 8005118:	f8c8 2000 	str.w	r2, [r8]
 800511c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005120:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005124:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005126:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800512a:	f04f 32ff 	mov.w	r2, #4294967295
 800512e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005132:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005136:	4b9c      	ldr	r3, [pc, #624]	@ (80053a8 <_printf_float+0x2cc>)
 8005138:	f7fb fc68 	bl	8000a0c <__aeabi_dcmpun>
 800513c:	bb70      	cbnz	r0, 800519c <_printf_float+0xc0>
 800513e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005142:	f04f 32ff 	mov.w	r2, #4294967295
 8005146:	4b98      	ldr	r3, [pc, #608]	@ (80053a8 <_printf_float+0x2cc>)
 8005148:	f7fb fc42 	bl	80009d0 <__aeabi_dcmple>
 800514c:	bb30      	cbnz	r0, 800519c <_printf_float+0xc0>
 800514e:	2200      	movs	r2, #0
 8005150:	2300      	movs	r3, #0
 8005152:	4640      	mov	r0, r8
 8005154:	4649      	mov	r1, r9
 8005156:	f7fb fc31 	bl	80009bc <__aeabi_dcmplt>
 800515a:	b110      	cbz	r0, 8005162 <_printf_float+0x86>
 800515c:	232d      	movs	r3, #45	@ 0x2d
 800515e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005162:	4a92      	ldr	r2, [pc, #584]	@ (80053ac <_printf_float+0x2d0>)
 8005164:	4b92      	ldr	r3, [pc, #584]	@ (80053b0 <_printf_float+0x2d4>)
 8005166:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800516a:	bf8c      	ite	hi
 800516c:	4690      	movhi	r8, r2
 800516e:	4698      	movls	r8, r3
 8005170:	2303      	movs	r3, #3
 8005172:	f04f 0900 	mov.w	r9, #0
 8005176:	6123      	str	r3, [r4, #16]
 8005178:	f02b 0304 	bic.w	r3, fp, #4
 800517c:	6023      	str	r3, [r4, #0]
 800517e:	4633      	mov	r3, r6
 8005180:	4621      	mov	r1, r4
 8005182:	4628      	mov	r0, r5
 8005184:	9700      	str	r7, [sp, #0]
 8005186:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005188:	f000 f9d4 	bl	8005534 <_printf_common>
 800518c:	3001      	adds	r0, #1
 800518e:	f040 8090 	bne.w	80052b2 <_printf_float+0x1d6>
 8005192:	f04f 30ff 	mov.w	r0, #4294967295
 8005196:	b011      	add	sp, #68	@ 0x44
 8005198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800519c:	4642      	mov	r2, r8
 800519e:	464b      	mov	r3, r9
 80051a0:	4640      	mov	r0, r8
 80051a2:	4649      	mov	r1, r9
 80051a4:	f7fb fc32 	bl	8000a0c <__aeabi_dcmpun>
 80051a8:	b148      	cbz	r0, 80051be <_printf_float+0xe2>
 80051aa:	464b      	mov	r3, r9
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	bfb8      	it	lt
 80051b0:	232d      	movlt	r3, #45	@ 0x2d
 80051b2:	4a80      	ldr	r2, [pc, #512]	@ (80053b4 <_printf_float+0x2d8>)
 80051b4:	bfb8      	it	lt
 80051b6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80051ba:	4b7f      	ldr	r3, [pc, #508]	@ (80053b8 <_printf_float+0x2dc>)
 80051bc:	e7d3      	b.n	8005166 <_printf_float+0x8a>
 80051be:	6863      	ldr	r3, [r4, #4]
 80051c0:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80051c4:	1c5a      	adds	r2, r3, #1
 80051c6:	d13f      	bne.n	8005248 <_printf_float+0x16c>
 80051c8:	2306      	movs	r3, #6
 80051ca:	6063      	str	r3, [r4, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80051d2:	6023      	str	r3, [r4, #0]
 80051d4:	9206      	str	r2, [sp, #24]
 80051d6:	aa0e      	add	r2, sp, #56	@ 0x38
 80051d8:	e9cd a204 	strd	sl, r2, [sp, #16]
 80051dc:	aa0d      	add	r2, sp, #52	@ 0x34
 80051de:	9203      	str	r2, [sp, #12]
 80051e0:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80051e4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80051e8:	6863      	ldr	r3, [r4, #4]
 80051ea:	4642      	mov	r2, r8
 80051ec:	9300      	str	r3, [sp, #0]
 80051ee:	4628      	mov	r0, r5
 80051f0:	464b      	mov	r3, r9
 80051f2:	910a      	str	r1, [sp, #40]	@ 0x28
 80051f4:	f7ff fed4 	bl	8004fa0 <__cvt>
 80051f8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80051fa:	4680      	mov	r8, r0
 80051fc:	2947      	cmp	r1, #71	@ 0x47
 80051fe:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005200:	d128      	bne.n	8005254 <_printf_float+0x178>
 8005202:	1cc8      	adds	r0, r1, #3
 8005204:	db02      	blt.n	800520c <_printf_float+0x130>
 8005206:	6863      	ldr	r3, [r4, #4]
 8005208:	4299      	cmp	r1, r3
 800520a:	dd40      	ble.n	800528e <_printf_float+0x1b2>
 800520c:	f1aa 0a02 	sub.w	sl, sl, #2
 8005210:	fa5f fa8a 	uxtb.w	sl, sl
 8005214:	4652      	mov	r2, sl
 8005216:	3901      	subs	r1, #1
 8005218:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800521c:	910d      	str	r1, [sp, #52]	@ 0x34
 800521e:	f7ff ff23 	bl	8005068 <__exponent>
 8005222:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005224:	4681      	mov	r9, r0
 8005226:	1813      	adds	r3, r2, r0
 8005228:	2a01      	cmp	r2, #1
 800522a:	6123      	str	r3, [r4, #16]
 800522c:	dc02      	bgt.n	8005234 <_printf_float+0x158>
 800522e:	6822      	ldr	r2, [r4, #0]
 8005230:	07d2      	lsls	r2, r2, #31
 8005232:	d501      	bpl.n	8005238 <_printf_float+0x15c>
 8005234:	3301      	adds	r3, #1
 8005236:	6123      	str	r3, [r4, #16]
 8005238:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800523c:	2b00      	cmp	r3, #0
 800523e:	d09e      	beq.n	800517e <_printf_float+0xa2>
 8005240:	232d      	movs	r3, #45	@ 0x2d
 8005242:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005246:	e79a      	b.n	800517e <_printf_float+0xa2>
 8005248:	2947      	cmp	r1, #71	@ 0x47
 800524a:	d1bf      	bne.n	80051cc <_printf_float+0xf0>
 800524c:	2b00      	cmp	r3, #0
 800524e:	d1bd      	bne.n	80051cc <_printf_float+0xf0>
 8005250:	2301      	movs	r3, #1
 8005252:	e7ba      	b.n	80051ca <_printf_float+0xee>
 8005254:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005258:	d9dc      	bls.n	8005214 <_printf_float+0x138>
 800525a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800525e:	d118      	bne.n	8005292 <_printf_float+0x1b6>
 8005260:	2900      	cmp	r1, #0
 8005262:	6863      	ldr	r3, [r4, #4]
 8005264:	dd0b      	ble.n	800527e <_printf_float+0x1a2>
 8005266:	6121      	str	r1, [r4, #16]
 8005268:	b913      	cbnz	r3, 8005270 <_printf_float+0x194>
 800526a:	6822      	ldr	r2, [r4, #0]
 800526c:	07d0      	lsls	r0, r2, #31
 800526e:	d502      	bpl.n	8005276 <_printf_float+0x19a>
 8005270:	3301      	adds	r3, #1
 8005272:	440b      	add	r3, r1
 8005274:	6123      	str	r3, [r4, #16]
 8005276:	f04f 0900 	mov.w	r9, #0
 800527a:	65a1      	str	r1, [r4, #88]	@ 0x58
 800527c:	e7dc      	b.n	8005238 <_printf_float+0x15c>
 800527e:	b913      	cbnz	r3, 8005286 <_printf_float+0x1aa>
 8005280:	6822      	ldr	r2, [r4, #0]
 8005282:	07d2      	lsls	r2, r2, #31
 8005284:	d501      	bpl.n	800528a <_printf_float+0x1ae>
 8005286:	3302      	adds	r3, #2
 8005288:	e7f4      	b.n	8005274 <_printf_float+0x198>
 800528a:	2301      	movs	r3, #1
 800528c:	e7f2      	b.n	8005274 <_printf_float+0x198>
 800528e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005292:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005294:	4299      	cmp	r1, r3
 8005296:	db05      	blt.n	80052a4 <_printf_float+0x1c8>
 8005298:	6823      	ldr	r3, [r4, #0]
 800529a:	6121      	str	r1, [r4, #16]
 800529c:	07d8      	lsls	r0, r3, #31
 800529e:	d5ea      	bpl.n	8005276 <_printf_float+0x19a>
 80052a0:	1c4b      	adds	r3, r1, #1
 80052a2:	e7e7      	b.n	8005274 <_printf_float+0x198>
 80052a4:	2900      	cmp	r1, #0
 80052a6:	bfcc      	ite	gt
 80052a8:	2201      	movgt	r2, #1
 80052aa:	f1c1 0202 	rsble	r2, r1, #2
 80052ae:	4413      	add	r3, r2
 80052b0:	e7e0      	b.n	8005274 <_printf_float+0x198>
 80052b2:	6823      	ldr	r3, [r4, #0]
 80052b4:	055a      	lsls	r2, r3, #21
 80052b6:	d407      	bmi.n	80052c8 <_printf_float+0x1ec>
 80052b8:	6923      	ldr	r3, [r4, #16]
 80052ba:	4642      	mov	r2, r8
 80052bc:	4631      	mov	r1, r6
 80052be:	4628      	mov	r0, r5
 80052c0:	47b8      	blx	r7
 80052c2:	3001      	adds	r0, #1
 80052c4:	d12b      	bne.n	800531e <_printf_float+0x242>
 80052c6:	e764      	b.n	8005192 <_printf_float+0xb6>
 80052c8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80052cc:	f240 80dc 	bls.w	8005488 <_printf_float+0x3ac>
 80052d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80052d4:	2200      	movs	r2, #0
 80052d6:	2300      	movs	r3, #0
 80052d8:	f7fb fb66 	bl	80009a8 <__aeabi_dcmpeq>
 80052dc:	2800      	cmp	r0, #0
 80052de:	d033      	beq.n	8005348 <_printf_float+0x26c>
 80052e0:	2301      	movs	r3, #1
 80052e2:	4631      	mov	r1, r6
 80052e4:	4628      	mov	r0, r5
 80052e6:	4a35      	ldr	r2, [pc, #212]	@ (80053bc <_printf_float+0x2e0>)
 80052e8:	47b8      	blx	r7
 80052ea:	3001      	adds	r0, #1
 80052ec:	f43f af51 	beq.w	8005192 <_printf_float+0xb6>
 80052f0:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80052f4:	4543      	cmp	r3, r8
 80052f6:	db02      	blt.n	80052fe <_printf_float+0x222>
 80052f8:	6823      	ldr	r3, [r4, #0]
 80052fa:	07d8      	lsls	r0, r3, #31
 80052fc:	d50f      	bpl.n	800531e <_printf_float+0x242>
 80052fe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005302:	4631      	mov	r1, r6
 8005304:	4628      	mov	r0, r5
 8005306:	47b8      	blx	r7
 8005308:	3001      	adds	r0, #1
 800530a:	f43f af42 	beq.w	8005192 <_printf_float+0xb6>
 800530e:	f04f 0900 	mov.w	r9, #0
 8005312:	f108 38ff 	add.w	r8, r8, #4294967295
 8005316:	f104 0a1a 	add.w	sl, r4, #26
 800531a:	45c8      	cmp	r8, r9
 800531c:	dc09      	bgt.n	8005332 <_printf_float+0x256>
 800531e:	6823      	ldr	r3, [r4, #0]
 8005320:	079b      	lsls	r3, r3, #30
 8005322:	f100 8102 	bmi.w	800552a <_printf_float+0x44e>
 8005326:	68e0      	ldr	r0, [r4, #12]
 8005328:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800532a:	4298      	cmp	r0, r3
 800532c:	bfb8      	it	lt
 800532e:	4618      	movlt	r0, r3
 8005330:	e731      	b.n	8005196 <_printf_float+0xba>
 8005332:	2301      	movs	r3, #1
 8005334:	4652      	mov	r2, sl
 8005336:	4631      	mov	r1, r6
 8005338:	4628      	mov	r0, r5
 800533a:	47b8      	blx	r7
 800533c:	3001      	adds	r0, #1
 800533e:	f43f af28 	beq.w	8005192 <_printf_float+0xb6>
 8005342:	f109 0901 	add.w	r9, r9, #1
 8005346:	e7e8      	b.n	800531a <_printf_float+0x23e>
 8005348:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800534a:	2b00      	cmp	r3, #0
 800534c:	dc38      	bgt.n	80053c0 <_printf_float+0x2e4>
 800534e:	2301      	movs	r3, #1
 8005350:	4631      	mov	r1, r6
 8005352:	4628      	mov	r0, r5
 8005354:	4a19      	ldr	r2, [pc, #100]	@ (80053bc <_printf_float+0x2e0>)
 8005356:	47b8      	blx	r7
 8005358:	3001      	adds	r0, #1
 800535a:	f43f af1a 	beq.w	8005192 <_printf_float+0xb6>
 800535e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8005362:	ea59 0303 	orrs.w	r3, r9, r3
 8005366:	d102      	bne.n	800536e <_printf_float+0x292>
 8005368:	6823      	ldr	r3, [r4, #0]
 800536a:	07d9      	lsls	r1, r3, #31
 800536c:	d5d7      	bpl.n	800531e <_printf_float+0x242>
 800536e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005372:	4631      	mov	r1, r6
 8005374:	4628      	mov	r0, r5
 8005376:	47b8      	blx	r7
 8005378:	3001      	adds	r0, #1
 800537a:	f43f af0a 	beq.w	8005192 <_printf_float+0xb6>
 800537e:	f04f 0a00 	mov.w	sl, #0
 8005382:	f104 0b1a 	add.w	fp, r4, #26
 8005386:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005388:	425b      	negs	r3, r3
 800538a:	4553      	cmp	r3, sl
 800538c:	dc01      	bgt.n	8005392 <_printf_float+0x2b6>
 800538e:	464b      	mov	r3, r9
 8005390:	e793      	b.n	80052ba <_printf_float+0x1de>
 8005392:	2301      	movs	r3, #1
 8005394:	465a      	mov	r2, fp
 8005396:	4631      	mov	r1, r6
 8005398:	4628      	mov	r0, r5
 800539a:	47b8      	blx	r7
 800539c:	3001      	adds	r0, #1
 800539e:	f43f aef8 	beq.w	8005192 <_printf_float+0xb6>
 80053a2:	f10a 0a01 	add.w	sl, sl, #1
 80053a6:	e7ee      	b.n	8005386 <_printf_float+0x2aa>
 80053a8:	7fefffff 	.word	0x7fefffff
 80053ac:	0800867e 	.word	0x0800867e
 80053b0:	0800867a 	.word	0x0800867a
 80053b4:	08008686 	.word	0x08008686
 80053b8:	08008682 	.word	0x08008682
 80053bc:	080087b9 	.word	0x080087b9
 80053c0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80053c2:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80053c6:	4553      	cmp	r3, sl
 80053c8:	bfa8      	it	ge
 80053ca:	4653      	movge	r3, sl
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	4699      	mov	r9, r3
 80053d0:	dc36      	bgt.n	8005440 <_printf_float+0x364>
 80053d2:	f04f 0b00 	mov.w	fp, #0
 80053d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80053da:	f104 021a 	add.w	r2, r4, #26
 80053de:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80053e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80053e2:	eba3 0309 	sub.w	r3, r3, r9
 80053e6:	455b      	cmp	r3, fp
 80053e8:	dc31      	bgt.n	800544e <_printf_float+0x372>
 80053ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80053ec:	459a      	cmp	sl, r3
 80053ee:	dc3a      	bgt.n	8005466 <_printf_float+0x38a>
 80053f0:	6823      	ldr	r3, [r4, #0]
 80053f2:	07da      	lsls	r2, r3, #31
 80053f4:	d437      	bmi.n	8005466 <_printf_float+0x38a>
 80053f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80053f8:	ebaa 0903 	sub.w	r9, sl, r3
 80053fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80053fe:	ebaa 0303 	sub.w	r3, sl, r3
 8005402:	4599      	cmp	r9, r3
 8005404:	bfa8      	it	ge
 8005406:	4699      	movge	r9, r3
 8005408:	f1b9 0f00 	cmp.w	r9, #0
 800540c:	dc33      	bgt.n	8005476 <_printf_float+0x39a>
 800540e:	f04f 0800 	mov.w	r8, #0
 8005412:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005416:	f104 0b1a 	add.w	fp, r4, #26
 800541a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800541c:	ebaa 0303 	sub.w	r3, sl, r3
 8005420:	eba3 0309 	sub.w	r3, r3, r9
 8005424:	4543      	cmp	r3, r8
 8005426:	f77f af7a 	ble.w	800531e <_printf_float+0x242>
 800542a:	2301      	movs	r3, #1
 800542c:	465a      	mov	r2, fp
 800542e:	4631      	mov	r1, r6
 8005430:	4628      	mov	r0, r5
 8005432:	47b8      	blx	r7
 8005434:	3001      	adds	r0, #1
 8005436:	f43f aeac 	beq.w	8005192 <_printf_float+0xb6>
 800543a:	f108 0801 	add.w	r8, r8, #1
 800543e:	e7ec      	b.n	800541a <_printf_float+0x33e>
 8005440:	4642      	mov	r2, r8
 8005442:	4631      	mov	r1, r6
 8005444:	4628      	mov	r0, r5
 8005446:	47b8      	blx	r7
 8005448:	3001      	adds	r0, #1
 800544a:	d1c2      	bne.n	80053d2 <_printf_float+0x2f6>
 800544c:	e6a1      	b.n	8005192 <_printf_float+0xb6>
 800544e:	2301      	movs	r3, #1
 8005450:	4631      	mov	r1, r6
 8005452:	4628      	mov	r0, r5
 8005454:	920a      	str	r2, [sp, #40]	@ 0x28
 8005456:	47b8      	blx	r7
 8005458:	3001      	adds	r0, #1
 800545a:	f43f ae9a 	beq.w	8005192 <_printf_float+0xb6>
 800545e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005460:	f10b 0b01 	add.w	fp, fp, #1
 8005464:	e7bb      	b.n	80053de <_printf_float+0x302>
 8005466:	4631      	mov	r1, r6
 8005468:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800546c:	4628      	mov	r0, r5
 800546e:	47b8      	blx	r7
 8005470:	3001      	adds	r0, #1
 8005472:	d1c0      	bne.n	80053f6 <_printf_float+0x31a>
 8005474:	e68d      	b.n	8005192 <_printf_float+0xb6>
 8005476:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005478:	464b      	mov	r3, r9
 800547a:	4631      	mov	r1, r6
 800547c:	4628      	mov	r0, r5
 800547e:	4442      	add	r2, r8
 8005480:	47b8      	blx	r7
 8005482:	3001      	adds	r0, #1
 8005484:	d1c3      	bne.n	800540e <_printf_float+0x332>
 8005486:	e684      	b.n	8005192 <_printf_float+0xb6>
 8005488:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800548c:	f1ba 0f01 	cmp.w	sl, #1
 8005490:	dc01      	bgt.n	8005496 <_printf_float+0x3ba>
 8005492:	07db      	lsls	r3, r3, #31
 8005494:	d536      	bpl.n	8005504 <_printf_float+0x428>
 8005496:	2301      	movs	r3, #1
 8005498:	4642      	mov	r2, r8
 800549a:	4631      	mov	r1, r6
 800549c:	4628      	mov	r0, r5
 800549e:	47b8      	blx	r7
 80054a0:	3001      	adds	r0, #1
 80054a2:	f43f ae76 	beq.w	8005192 <_printf_float+0xb6>
 80054a6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80054aa:	4631      	mov	r1, r6
 80054ac:	4628      	mov	r0, r5
 80054ae:	47b8      	blx	r7
 80054b0:	3001      	adds	r0, #1
 80054b2:	f43f ae6e 	beq.w	8005192 <_printf_float+0xb6>
 80054b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80054ba:	2200      	movs	r2, #0
 80054bc:	2300      	movs	r3, #0
 80054be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80054c2:	f7fb fa71 	bl	80009a8 <__aeabi_dcmpeq>
 80054c6:	b9c0      	cbnz	r0, 80054fa <_printf_float+0x41e>
 80054c8:	4653      	mov	r3, sl
 80054ca:	f108 0201 	add.w	r2, r8, #1
 80054ce:	4631      	mov	r1, r6
 80054d0:	4628      	mov	r0, r5
 80054d2:	47b8      	blx	r7
 80054d4:	3001      	adds	r0, #1
 80054d6:	d10c      	bne.n	80054f2 <_printf_float+0x416>
 80054d8:	e65b      	b.n	8005192 <_printf_float+0xb6>
 80054da:	2301      	movs	r3, #1
 80054dc:	465a      	mov	r2, fp
 80054de:	4631      	mov	r1, r6
 80054e0:	4628      	mov	r0, r5
 80054e2:	47b8      	blx	r7
 80054e4:	3001      	adds	r0, #1
 80054e6:	f43f ae54 	beq.w	8005192 <_printf_float+0xb6>
 80054ea:	f108 0801 	add.w	r8, r8, #1
 80054ee:	45d0      	cmp	r8, sl
 80054f0:	dbf3      	blt.n	80054da <_printf_float+0x3fe>
 80054f2:	464b      	mov	r3, r9
 80054f4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80054f8:	e6e0      	b.n	80052bc <_printf_float+0x1e0>
 80054fa:	f04f 0800 	mov.w	r8, #0
 80054fe:	f104 0b1a 	add.w	fp, r4, #26
 8005502:	e7f4      	b.n	80054ee <_printf_float+0x412>
 8005504:	2301      	movs	r3, #1
 8005506:	4642      	mov	r2, r8
 8005508:	e7e1      	b.n	80054ce <_printf_float+0x3f2>
 800550a:	2301      	movs	r3, #1
 800550c:	464a      	mov	r2, r9
 800550e:	4631      	mov	r1, r6
 8005510:	4628      	mov	r0, r5
 8005512:	47b8      	blx	r7
 8005514:	3001      	adds	r0, #1
 8005516:	f43f ae3c 	beq.w	8005192 <_printf_float+0xb6>
 800551a:	f108 0801 	add.w	r8, r8, #1
 800551e:	68e3      	ldr	r3, [r4, #12]
 8005520:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005522:	1a5b      	subs	r3, r3, r1
 8005524:	4543      	cmp	r3, r8
 8005526:	dcf0      	bgt.n	800550a <_printf_float+0x42e>
 8005528:	e6fd      	b.n	8005326 <_printf_float+0x24a>
 800552a:	f04f 0800 	mov.w	r8, #0
 800552e:	f104 0919 	add.w	r9, r4, #25
 8005532:	e7f4      	b.n	800551e <_printf_float+0x442>

08005534 <_printf_common>:
 8005534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005538:	4616      	mov	r6, r2
 800553a:	4698      	mov	r8, r3
 800553c:	688a      	ldr	r2, [r1, #8]
 800553e:	690b      	ldr	r3, [r1, #16]
 8005540:	4607      	mov	r7, r0
 8005542:	4293      	cmp	r3, r2
 8005544:	bfb8      	it	lt
 8005546:	4613      	movlt	r3, r2
 8005548:	6033      	str	r3, [r6, #0]
 800554a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800554e:	460c      	mov	r4, r1
 8005550:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005554:	b10a      	cbz	r2, 800555a <_printf_common+0x26>
 8005556:	3301      	adds	r3, #1
 8005558:	6033      	str	r3, [r6, #0]
 800555a:	6823      	ldr	r3, [r4, #0]
 800555c:	0699      	lsls	r1, r3, #26
 800555e:	bf42      	ittt	mi
 8005560:	6833      	ldrmi	r3, [r6, #0]
 8005562:	3302      	addmi	r3, #2
 8005564:	6033      	strmi	r3, [r6, #0]
 8005566:	6825      	ldr	r5, [r4, #0]
 8005568:	f015 0506 	ands.w	r5, r5, #6
 800556c:	d106      	bne.n	800557c <_printf_common+0x48>
 800556e:	f104 0a19 	add.w	sl, r4, #25
 8005572:	68e3      	ldr	r3, [r4, #12]
 8005574:	6832      	ldr	r2, [r6, #0]
 8005576:	1a9b      	subs	r3, r3, r2
 8005578:	42ab      	cmp	r3, r5
 800557a:	dc2b      	bgt.n	80055d4 <_printf_common+0xa0>
 800557c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005580:	6822      	ldr	r2, [r4, #0]
 8005582:	3b00      	subs	r3, #0
 8005584:	bf18      	it	ne
 8005586:	2301      	movne	r3, #1
 8005588:	0692      	lsls	r2, r2, #26
 800558a:	d430      	bmi.n	80055ee <_printf_common+0xba>
 800558c:	4641      	mov	r1, r8
 800558e:	4638      	mov	r0, r7
 8005590:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005594:	47c8      	blx	r9
 8005596:	3001      	adds	r0, #1
 8005598:	d023      	beq.n	80055e2 <_printf_common+0xae>
 800559a:	6823      	ldr	r3, [r4, #0]
 800559c:	6922      	ldr	r2, [r4, #16]
 800559e:	f003 0306 	and.w	r3, r3, #6
 80055a2:	2b04      	cmp	r3, #4
 80055a4:	bf14      	ite	ne
 80055a6:	2500      	movne	r5, #0
 80055a8:	6833      	ldreq	r3, [r6, #0]
 80055aa:	f04f 0600 	mov.w	r6, #0
 80055ae:	bf08      	it	eq
 80055b0:	68e5      	ldreq	r5, [r4, #12]
 80055b2:	f104 041a 	add.w	r4, r4, #26
 80055b6:	bf08      	it	eq
 80055b8:	1aed      	subeq	r5, r5, r3
 80055ba:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80055be:	bf08      	it	eq
 80055c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055c4:	4293      	cmp	r3, r2
 80055c6:	bfc4      	itt	gt
 80055c8:	1a9b      	subgt	r3, r3, r2
 80055ca:	18ed      	addgt	r5, r5, r3
 80055cc:	42b5      	cmp	r5, r6
 80055ce:	d11a      	bne.n	8005606 <_printf_common+0xd2>
 80055d0:	2000      	movs	r0, #0
 80055d2:	e008      	b.n	80055e6 <_printf_common+0xb2>
 80055d4:	2301      	movs	r3, #1
 80055d6:	4652      	mov	r2, sl
 80055d8:	4641      	mov	r1, r8
 80055da:	4638      	mov	r0, r7
 80055dc:	47c8      	blx	r9
 80055de:	3001      	adds	r0, #1
 80055e0:	d103      	bne.n	80055ea <_printf_common+0xb6>
 80055e2:	f04f 30ff 	mov.w	r0, #4294967295
 80055e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055ea:	3501      	adds	r5, #1
 80055ec:	e7c1      	b.n	8005572 <_printf_common+0x3e>
 80055ee:	2030      	movs	r0, #48	@ 0x30
 80055f0:	18e1      	adds	r1, r4, r3
 80055f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80055f6:	1c5a      	adds	r2, r3, #1
 80055f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80055fc:	4422      	add	r2, r4
 80055fe:	3302      	adds	r3, #2
 8005600:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005604:	e7c2      	b.n	800558c <_printf_common+0x58>
 8005606:	2301      	movs	r3, #1
 8005608:	4622      	mov	r2, r4
 800560a:	4641      	mov	r1, r8
 800560c:	4638      	mov	r0, r7
 800560e:	47c8      	blx	r9
 8005610:	3001      	adds	r0, #1
 8005612:	d0e6      	beq.n	80055e2 <_printf_common+0xae>
 8005614:	3601      	adds	r6, #1
 8005616:	e7d9      	b.n	80055cc <_printf_common+0x98>

08005618 <_printf_i>:
 8005618:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800561c:	7e0f      	ldrb	r7, [r1, #24]
 800561e:	4691      	mov	r9, r2
 8005620:	2f78      	cmp	r7, #120	@ 0x78
 8005622:	4680      	mov	r8, r0
 8005624:	460c      	mov	r4, r1
 8005626:	469a      	mov	sl, r3
 8005628:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800562a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800562e:	d807      	bhi.n	8005640 <_printf_i+0x28>
 8005630:	2f62      	cmp	r7, #98	@ 0x62
 8005632:	d80a      	bhi.n	800564a <_printf_i+0x32>
 8005634:	2f00      	cmp	r7, #0
 8005636:	f000 80d1 	beq.w	80057dc <_printf_i+0x1c4>
 800563a:	2f58      	cmp	r7, #88	@ 0x58
 800563c:	f000 80b8 	beq.w	80057b0 <_printf_i+0x198>
 8005640:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005644:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005648:	e03a      	b.n	80056c0 <_printf_i+0xa8>
 800564a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800564e:	2b15      	cmp	r3, #21
 8005650:	d8f6      	bhi.n	8005640 <_printf_i+0x28>
 8005652:	a101      	add	r1, pc, #4	@ (adr r1, 8005658 <_printf_i+0x40>)
 8005654:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005658:	080056b1 	.word	0x080056b1
 800565c:	080056c5 	.word	0x080056c5
 8005660:	08005641 	.word	0x08005641
 8005664:	08005641 	.word	0x08005641
 8005668:	08005641 	.word	0x08005641
 800566c:	08005641 	.word	0x08005641
 8005670:	080056c5 	.word	0x080056c5
 8005674:	08005641 	.word	0x08005641
 8005678:	08005641 	.word	0x08005641
 800567c:	08005641 	.word	0x08005641
 8005680:	08005641 	.word	0x08005641
 8005684:	080057c3 	.word	0x080057c3
 8005688:	080056ef 	.word	0x080056ef
 800568c:	0800577d 	.word	0x0800577d
 8005690:	08005641 	.word	0x08005641
 8005694:	08005641 	.word	0x08005641
 8005698:	080057e5 	.word	0x080057e5
 800569c:	08005641 	.word	0x08005641
 80056a0:	080056ef 	.word	0x080056ef
 80056a4:	08005641 	.word	0x08005641
 80056a8:	08005641 	.word	0x08005641
 80056ac:	08005785 	.word	0x08005785
 80056b0:	6833      	ldr	r3, [r6, #0]
 80056b2:	1d1a      	adds	r2, r3, #4
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	6032      	str	r2, [r6, #0]
 80056b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80056bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80056c0:	2301      	movs	r3, #1
 80056c2:	e09c      	b.n	80057fe <_printf_i+0x1e6>
 80056c4:	6833      	ldr	r3, [r6, #0]
 80056c6:	6820      	ldr	r0, [r4, #0]
 80056c8:	1d19      	adds	r1, r3, #4
 80056ca:	6031      	str	r1, [r6, #0]
 80056cc:	0606      	lsls	r6, r0, #24
 80056ce:	d501      	bpl.n	80056d4 <_printf_i+0xbc>
 80056d0:	681d      	ldr	r5, [r3, #0]
 80056d2:	e003      	b.n	80056dc <_printf_i+0xc4>
 80056d4:	0645      	lsls	r5, r0, #25
 80056d6:	d5fb      	bpl.n	80056d0 <_printf_i+0xb8>
 80056d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80056dc:	2d00      	cmp	r5, #0
 80056de:	da03      	bge.n	80056e8 <_printf_i+0xd0>
 80056e0:	232d      	movs	r3, #45	@ 0x2d
 80056e2:	426d      	negs	r5, r5
 80056e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80056e8:	230a      	movs	r3, #10
 80056ea:	4858      	ldr	r0, [pc, #352]	@ (800584c <_printf_i+0x234>)
 80056ec:	e011      	b.n	8005712 <_printf_i+0xfa>
 80056ee:	6821      	ldr	r1, [r4, #0]
 80056f0:	6833      	ldr	r3, [r6, #0]
 80056f2:	0608      	lsls	r0, r1, #24
 80056f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80056f8:	d402      	bmi.n	8005700 <_printf_i+0xe8>
 80056fa:	0649      	lsls	r1, r1, #25
 80056fc:	bf48      	it	mi
 80056fe:	b2ad      	uxthmi	r5, r5
 8005700:	2f6f      	cmp	r7, #111	@ 0x6f
 8005702:	6033      	str	r3, [r6, #0]
 8005704:	bf14      	ite	ne
 8005706:	230a      	movne	r3, #10
 8005708:	2308      	moveq	r3, #8
 800570a:	4850      	ldr	r0, [pc, #320]	@ (800584c <_printf_i+0x234>)
 800570c:	2100      	movs	r1, #0
 800570e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005712:	6866      	ldr	r6, [r4, #4]
 8005714:	2e00      	cmp	r6, #0
 8005716:	60a6      	str	r6, [r4, #8]
 8005718:	db05      	blt.n	8005726 <_printf_i+0x10e>
 800571a:	6821      	ldr	r1, [r4, #0]
 800571c:	432e      	orrs	r6, r5
 800571e:	f021 0104 	bic.w	r1, r1, #4
 8005722:	6021      	str	r1, [r4, #0]
 8005724:	d04b      	beq.n	80057be <_printf_i+0x1a6>
 8005726:	4616      	mov	r6, r2
 8005728:	fbb5 f1f3 	udiv	r1, r5, r3
 800572c:	fb03 5711 	mls	r7, r3, r1, r5
 8005730:	5dc7      	ldrb	r7, [r0, r7]
 8005732:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005736:	462f      	mov	r7, r5
 8005738:	42bb      	cmp	r3, r7
 800573a:	460d      	mov	r5, r1
 800573c:	d9f4      	bls.n	8005728 <_printf_i+0x110>
 800573e:	2b08      	cmp	r3, #8
 8005740:	d10b      	bne.n	800575a <_printf_i+0x142>
 8005742:	6823      	ldr	r3, [r4, #0]
 8005744:	07df      	lsls	r7, r3, #31
 8005746:	d508      	bpl.n	800575a <_printf_i+0x142>
 8005748:	6923      	ldr	r3, [r4, #16]
 800574a:	6861      	ldr	r1, [r4, #4]
 800574c:	4299      	cmp	r1, r3
 800574e:	bfde      	ittt	le
 8005750:	2330      	movle	r3, #48	@ 0x30
 8005752:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005756:	f106 36ff 	addle.w	r6, r6, #4294967295
 800575a:	1b92      	subs	r2, r2, r6
 800575c:	6122      	str	r2, [r4, #16]
 800575e:	464b      	mov	r3, r9
 8005760:	4621      	mov	r1, r4
 8005762:	4640      	mov	r0, r8
 8005764:	f8cd a000 	str.w	sl, [sp]
 8005768:	aa03      	add	r2, sp, #12
 800576a:	f7ff fee3 	bl	8005534 <_printf_common>
 800576e:	3001      	adds	r0, #1
 8005770:	d14a      	bne.n	8005808 <_printf_i+0x1f0>
 8005772:	f04f 30ff 	mov.w	r0, #4294967295
 8005776:	b004      	add	sp, #16
 8005778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800577c:	6823      	ldr	r3, [r4, #0]
 800577e:	f043 0320 	orr.w	r3, r3, #32
 8005782:	6023      	str	r3, [r4, #0]
 8005784:	2778      	movs	r7, #120	@ 0x78
 8005786:	4832      	ldr	r0, [pc, #200]	@ (8005850 <_printf_i+0x238>)
 8005788:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800578c:	6823      	ldr	r3, [r4, #0]
 800578e:	6831      	ldr	r1, [r6, #0]
 8005790:	061f      	lsls	r7, r3, #24
 8005792:	f851 5b04 	ldr.w	r5, [r1], #4
 8005796:	d402      	bmi.n	800579e <_printf_i+0x186>
 8005798:	065f      	lsls	r7, r3, #25
 800579a:	bf48      	it	mi
 800579c:	b2ad      	uxthmi	r5, r5
 800579e:	6031      	str	r1, [r6, #0]
 80057a0:	07d9      	lsls	r1, r3, #31
 80057a2:	bf44      	itt	mi
 80057a4:	f043 0320 	orrmi.w	r3, r3, #32
 80057a8:	6023      	strmi	r3, [r4, #0]
 80057aa:	b11d      	cbz	r5, 80057b4 <_printf_i+0x19c>
 80057ac:	2310      	movs	r3, #16
 80057ae:	e7ad      	b.n	800570c <_printf_i+0xf4>
 80057b0:	4826      	ldr	r0, [pc, #152]	@ (800584c <_printf_i+0x234>)
 80057b2:	e7e9      	b.n	8005788 <_printf_i+0x170>
 80057b4:	6823      	ldr	r3, [r4, #0]
 80057b6:	f023 0320 	bic.w	r3, r3, #32
 80057ba:	6023      	str	r3, [r4, #0]
 80057bc:	e7f6      	b.n	80057ac <_printf_i+0x194>
 80057be:	4616      	mov	r6, r2
 80057c0:	e7bd      	b.n	800573e <_printf_i+0x126>
 80057c2:	6833      	ldr	r3, [r6, #0]
 80057c4:	6825      	ldr	r5, [r4, #0]
 80057c6:	1d18      	adds	r0, r3, #4
 80057c8:	6961      	ldr	r1, [r4, #20]
 80057ca:	6030      	str	r0, [r6, #0]
 80057cc:	062e      	lsls	r6, r5, #24
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	d501      	bpl.n	80057d6 <_printf_i+0x1be>
 80057d2:	6019      	str	r1, [r3, #0]
 80057d4:	e002      	b.n	80057dc <_printf_i+0x1c4>
 80057d6:	0668      	lsls	r0, r5, #25
 80057d8:	d5fb      	bpl.n	80057d2 <_printf_i+0x1ba>
 80057da:	8019      	strh	r1, [r3, #0]
 80057dc:	2300      	movs	r3, #0
 80057de:	4616      	mov	r6, r2
 80057e0:	6123      	str	r3, [r4, #16]
 80057e2:	e7bc      	b.n	800575e <_printf_i+0x146>
 80057e4:	6833      	ldr	r3, [r6, #0]
 80057e6:	2100      	movs	r1, #0
 80057e8:	1d1a      	adds	r2, r3, #4
 80057ea:	6032      	str	r2, [r6, #0]
 80057ec:	681e      	ldr	r6, [r3, #0]
 80057ee:	6862      	ldr	r2, [r4, #4]
 80057f0:	4630      	mov	r0, r6
 80057f2:	f000 fa04 	bl	8005bfe <memchr>
 80057f6:	b108      	cbz	r0, 80057fc <_printf_i+0x1e4>
 80057f8:	1b80      	subs	r0, r0, r6
 80057fa:	6060      	str	r0, [r4, #4]
 80057fc:	6863      	ldr	r3, [r4, #4]
 80057fe:	6123      	str	r3, [r4, #16]
 8005800:	2300      	movs	r3, #0
 8005802:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005806:	e7aa      	b.n	800575e <_printf_i+0x146>
 8005808:	4632      	mov	r2, r6
 800580a:	4649      	mov	r1, r9
 800580c:	4640      	mov	r0, r8
 800580e:	6923      	ldr	r3, [r4, #16]
 8005810:	47d0      	blx	sl
 8005812:	3001      	adds	r0, #1
 8005814:	d0ad      	beq.n	8005772 <_printf_i+0x15a>
 8005816:	6823      	ldr	r3, [r4, #0]
 8005818:	079b      	lsls	r3, r3, #30
 800581a:	d413      	bmi.n	8005844 <_printf_i+0x22c>
 800581c:	68e0      	ldr	r0, [r4, #12]
 800581e:	9b03      	ldr	r3, [sp, #12]
 8005820:	4298      	cmp	r0, r3
 8005822:	bfb8      	it	lt
 8005824:	4618      	movlt	r0, r3
 8005826:	e7a6      	b.n	8005776 <_printf_i+0x15e>
 8005828:	2301      	movs	r3, #1
 800582a:	4632      	mov	r2, r6
 800582c:	4649      	mov	r1, r9
 800582e:	4640      	mov	r0, r8
 8005830:	47d0      	blx	sl
 8005832:	3001      	adds	r0, #1
 8005834:	d09d      	beq.n	8005772 <_printf_i+0x15a>
 8005836:	3501      	adds	r5, #1
 8005838:	68e3      	ldr	r3, [r4, #12]
 800583a:	9903      	ldr	r1, [sp, #12]
 800583c:	1a5b      	subs	r3, r3, r1
 800583e:	42ab      	cmp	r3, r5
 8005840:	dcf2      	bgt.n	8005828 <_printf_i+0x210>
 8005842:	e7eb      	b.n	800581c <_printf_i+0x204>
 8005844:	2500      	movs	r5, #0
 8005846:	f104 0619 	add.w	r6, r4, #25
 800584a:	e7f5      	b.n	8005838 <_printf_i+0x220>
 800584c:	0800868a 	.word	0x0800868a
 8005850:	0800869b 	.word	0x0800869b

08005854 <std>:
 8005854:	2300      	movs	r3, #0
 8005856:	b510      	push	{r4, lr}
 8005858:	4604      	mov	r4, r0
 800585a:	e9c0 3300 	strd	r3, r3, [r0]
 800585e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005862:	6083      	str	r3, [r0, #8]
 8005864:	8181      	strh	r1, [r0, #12]
 8005866:	6643      	str	r3, [r0, #100]	@ 0x64
 8005868:	81c2      	strh	r2, [r0, #14]
 800586a:	6183      	str	r3, [r0, #24]
 800586c:	4619      	mov	r1, r3
 800586e:	2208      	movs	r2, #8
 8005870:	305c      	adds	r0, #92	@ 0x5c
 8005872:	f000 f944 	bl	8005afe <memset>
 8005876:	4b0d      	ldr	r3, [pc, #52]	@ (80058ac <std+0x58>)
 8005878:	6224      	str	r4, [r4, #32]
 800587a:	6263      	str	r3, [r4, #36]	@ 0x24
 800587c:	4b0c      	ldr	r3, [pc, #48]	@ (80058b0 <std+0x5c>)
 800587e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005880:	4b0c      	ldr	r3, [pc, #48]	@ (80058b4 <std+0x60>)
 8005882:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005884:	4b0c      	ldr	r3, [pc, #48]	@ (80058b8 <std+0x64>)
 8005886:	6323      	str	r3, [r4, #48]	@ 0x30
 8005888:	4b0c      	ldr	r3, [pc, #48]	@ (80058bc <std+0x68>)
 800588a:	429c      	cmp	r4, r3
 800588c:	d006      	beq.n	800589c <std+0x48>
 800588e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005892:	4294      	cmp	r4, r2
 8005894:	d002      	beq.n	800589c <std+0x48>
 8005896:	33d0      	adds	r3, #208	@ 0xd0
 8005898:	429c      	cmp	r4, r3
 800589a:	d105      	bne.n	80058a8 <std+0x54>
 800589c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80058a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058a4:	f000 b9a8 	b.w	8005bf8 <__retarget_lock_init_recursive>
 80058a8:	bd10      	pop	{r4, pc}
 80058aa:	bf00      	nop
 80058ac:	08005a75 	.word	0x08005a75
 80058b0:	08005a9b 	.word	0x08005a9b
 80058b4:	08005ad3 	.word	0x08005ad3
 80058b8:	08005af7 	.word	0x08005af7
 80058bc:	20000354 	.word	0x20000354

080058c0 <stdio_exit_handler>:
 80058c0:	4a02      	ldr	r2, [pc, #8]	@ (80058cc <stdio_exit_handler+0xc>)
 80058c2:	4903      	ldr	r1, [pc, #12]	@ (80058d0 <stdio_exit_handler+0x10>)
 80058c4:	4803      	ldr	r0, [pc, #12]	@ (80058d4 <stdio_exit_handler+0x14>)
 80058c6:	f000 b869 	b.w	800599c <_fwalk_sglue>
 80058ca:	bf00      	nop
 80058cc:	20000020 	.word	0x20000020
 80058d0:	08007bad 	.word	0x08007bad
 80058d4:	20000030 	.word	0x20000030

080058d8 <cleanup_stdio>:
 80058d8:	6841      	ldr	r1, [r0, #4]
 80058da:	4b0c      	ldr	r3, [pc, #48]	@ (800590c <cleanup_stdio+0x34>)
 80058dc:	b510      	push	{r4, lr}
 80058de:	4299      	cmp	r1, r3
 80058e0:	4604      	mov	r4, r0
 80058e2:	d001      	beq.n	80058e8 <cleanup_stdio+0x10>
 80058e4:	f002 f962 	bl	8007bac <_fflush_r>
 80058e8:	68a1      	ldr	r1, [r4, #8]
 80058ea:	4b09      	ldr	r3, [pc, #36]	@ (8005910 <cleanup_stdio+0x38>)
 80058ec:	4299      	cmp	r1, r3
 80058ee:	d002      	beq.n	80058f6 <cleanup_stdio+0x1e>
 80058f0:	4620      	mov	r0, r4
 80058f2:	f002 f95b 	bl	8007bac <_fflush_r>
 80058f6:	68e1      	ldr	r1, [r4, #12]
 80058f8:	4b06      	ldr	r3, [pc, #24]	@ (8005914 <cleanup_stdio+0x3c>)
 80058fa:	4299      	cmp	r1, r3
 80058fc:	d004      	beq.n	8005908 <cleanup_stdio+0x30>
 80058fe:	4620      	mov	r0, r4
 8005900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005904:	f002 b952 	b.w	8007bac <_fflush_r>
 8005908:	bd10      	pop	{r4, pc}
 800590a:	bf00      	nop
 800590c:	20000354 	.word	0x20000354
 8005910:	200003bc 	.word	0x200003bc
 8005914:	20000424 	.word	0x20000424

08005918 <global_stdio_init.part.0>:
 8005918:	b510      	push	{r4, lr}
 800591a:	4b0b      	ldr	r3, [pc, #44]	@ (8005948 <global_stdio_init.part.0+0x30>)
 800591c:	4c0b      	ldr	r4, [pc, #44]	@ (800594c <global_stdio_init.part.0+0x34>)
 800591e:	4a0c      	ldr	r2, [pc, #48]	@ (8005950 <global_stdio_init.part.0+0x38>)
 8005920:	4620      	mov	r0, r4
 8005922:	601a      	str	r2, [r3, #0]
 8005924:	2104      	movs	r1, #4
 8005926:	2200      	movs	r2, #0
 8005928:	f7ff ff94 	bl	8005854 <std>
 800592c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005930:	2201      	movs	r2, #1
 8005932:	2109      	movs	r1, #9
 8005934:	f7ff ff8e 	bl	8005854 <std>
 8005938:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800593c:	2202      	movs	r2, #2
 800593e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005942:	2112      	movs	r1, #18
 8005944:	f7ff bf86 	b.w	8005854 <std>
 8005948:	2000048c 	.word	0x2000048c
 800594c:	20000354 	.word	0x20000354
 8005950:	080058c1 	.word	0x080058c1

08005954 <__sfp_lock_acquire>:
 8005954:	4801      	ldr	r0, [pc, #4]	@ (800595c <__sfp_lock_acquire+0x8>)
 8005956:	f000 b950 	b.w	8005bfa <__retarget_lock_acquire_recursive>
 800595a:	bf00      	nop
 800595c:	20000495 	.word	0x20000495

08005960 <__sfp_lock_release>:
 8005960:	4801      	ldr	r0, [pc, #4]	@ (8005968 <__sfp_lock_release+0x8>)
 8005962:	f000 b94b 	b.w	8005bfc <__retarget_lock_release_recursive>
 8005966:	bf00      	nop
 8005968:	20000495 	.word	0x20000495

0800596c <__sinit>:
 800596c:	b510      	push	{r4, lr}
 800596e:	4604      	mov	r4, r0
 8005970:	f7ff fff0 	bl	8005954 <__sfp_lock_acquire>
 8005974:	6a23      	ldr	r3, [r4, #32]
 8005976:	b11b      	cbz	r3, 8005980 <__sinit+0x14>
 8005978:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800597c:	f7ff bff0 	b.w	8005960 <__sfp_lock_release>
 8005980:	4b04      	ldr	r3, [pc, #16]	@ (8005994 <__sinit+0x28>)
 8005982:	6223      	str	r3, [r4, #32]
 8005984:	4b04      	ldr	r3, [pc, #16]	@ (8005998 <__sinit+0x2c>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d1f5      	bne.n	8005978 <__sinit+0xc>
 800598c:	f7ff ffc4 	bl	8005918 <global_stdio_init.part.0>
 8005990:	e7f2      	b.n	8005978 <__sinit+0xc>
 8005992:	bf00      	nop
 8005994:	080058d9 	.word	0x080058d9
 8005998:	2000048c 	.word	0x2000048c

0800599c <_fwalk_sglue>:
 800599c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059a0:	4607      	mov	r7, r0
 80059a2:	4688      	mov	r8, r1
 80059a4:	4614      	mov	r4, r2
 80059a6:	2600      	movs	r6, #0
 80059a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80059ac:	f1b9 0901 	subs.w	r9, r9, #1
 80059b0:	d505      	bpl.n	80059be <_fwalk_sglue+0x22>
 80059b2:	6824      	ldr	r4, [r4, #0]
 80059b4:	2c00      	cmp	r4, #0
 80059b6:	d1f7      	bne.n	80059a8 <_fwalk_sglue+0xc>
 80059b8:	4630      	mov	r0, r6
 80059ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059be:	89ab      	ldrh	r3, [r5, #12]
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d907      	bls.n	80059d4 <_fwalk_sglue+0x38>
 80059c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80059c8:	3301      	adds	r3, #1
 80059ca:	d003      	beq.n	80059d4 <_fwalk_sglue+0x38>
 80059cc:	4629      	mov	r1, r5
 80059ce:	4638      	mov	r0, r7
 80059d0:	47c0      	blx	r8
 80059d2:	4306      	orrs	r6, r0
 80059d4:	3568      	adds	r5, #104	@ 0x68
 80059d6:	e7e9      	b.n	80059ac <_fwalk_sglue+0x10>

080059d8 <siprintf>:
 80059d8:	b40e      	push	{r1, r2, r3}
 80059da:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80059de:	b510      	push	{r4, lr}
 80059e0:	2400      	movs	r4, #0
 80059e2:	b09d      	sub	sp, #116	@ 0x74
 80059e4:	ab1f      	add	r3, sp, #124	@ 0x7c
 80059e6:	9002      	str	r0, [sp, #8]
 80059e8:	9006      	str	r0, [sp, #24]
 80059ea:	9107      	str	r1, [sp, #28]
 80059ec:	9104      	str	r1, [sp, #16]
 80059ee:	4809      	ldr	r0, [pc, #36]	@ (8005a14 <siprintf+0x3c>)
 80059f0:	4909      	ldr	r1, [pc, #36]	@ (8005a18 <siprintf+0x40>)
 80059f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80059f6:	9105      	str	r1, [sp, #20]
 80059f8:	6800      	ldr	r0, [r0, #0]
 80059fa:	a902      	add	r1, sp, #8
 80059fc:	9301      	str	r3, [sp, #4]
 80059fe:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005a00:	f001 fc3e 	bl	8007280 <_svfiprintf_r>
 8005a04:	9b02      	ldr	r3, [sp, #8]
 8005a06:	701c      	strb	r4, [r3, #0]
 8005a08:	b01d      	add	sp, #116	@ 0x74
 8005a0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a0e:	b003      	add	sp, #12
 8005a10:	4770      	bx	lr
 8005a12:	bf00      	nop
 8005a14:	2000002c 	.word	0x2000002c
 8005a18:	ffff0208 	.word	0xffff0208

08005a1c <siscanf>:
 8005a1c:	b40e      	push	{r1, r2, r3}
 8005a1e:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8005a22:	b570      	push	{r4, r5, r6, lr}
 8005a24:	2500      	movs	r5, #0
 8005a26:	b09d      	sub	sp, #116	@ 0x74
 8005a28:	ac21      	add	r4, sp, #132	@ 0x84
 8005a2a:	f854 6b04 	ldr.w	r6, [r4], #4
 8005a2e:	f8ad 2014 	strh.w	r2, [sp, #20]
 8005a32:	951b      	str	r5, [sp, #108]	@ 0x6c
 8005a34:	9002      	str	r0, [sp, #8]
 8005a36:	9006      	str	r0, [sp, #24]
 8005a38:	f7fa fb8a 	bl	8000150 <strlen>
 8005a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8005a6c <siscanf+0x50>)
 8005a3e:	9003      	str	r0, [sp, #12]
 8005a40:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005a42:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005a46:	9007      	str	r0, [sp, #28]
 8005a48:	4809      	ldr	r0, [pc, #36]	@ (8005a70 <siscanf+0x54>)
 8005a4a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005a4e:	4632      	mov	r2, r6
 8005a50:	4623      	mov	r3, r4
 8005a52:	a902      	add	r1, sp, #8
 8005a54:	6800      	ldr	r0, [r0, #0]
 8005a56:	950f      	str	r5, [sp, #60]	@ 0x3c
 8005a58:	9514      	str	r5, [sp, #80]	@ 0x50
 8005a5a:	9401      	str	r4, [sp, #4]
 8005a5c:	f001 fd66 	bl	800752c <__ssvfiscanf_r>
 8005a60:	b01d      	add	sp, #116	@ 0x74
 8005a62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005a66:	b003      	add	sp, #12
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop
 8005a6c:	08005a97 	.word	0x08005a97
 8005a70:	2000002c 	.word	0x2000002c

08005a74 <__sread>:
 8005a74:	b510      	push	{r4, lr}
 8005a76:	460c      	mov	r4, r1
 8005a78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a7c:	f000 f86e 	bl	8005b5c <_read_r>
 8005a80:	2800      	cmp	r0, #0
 8005a82:	bfab      	itete	ge
 8005a84:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005a86:	89a3      	ldrhlt	r3, [r4, #12]
 8005a88:	181b      	addge	r3, r3, r0
 8005a8a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005a8e:	bfac      	ite	ge
 8005a90:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005a92:	81a3      	strhlt	r3, [r4, #12]
 8005a94:	bd10      	pop	{r4, pc}

08005a96 <__seofread>:
 8005a96:	2000      	movs	r0, #0
 8005a98:	4770      	bx	lr

08005a9a <__swrite>:
 8005a9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a9e:	461f      	mov	r7, r3
 8005aa0:	898b      	ldrh	r3, [r1, #12]
 8005aa2:	4605      	mov	r5, r0
 8005aa4:	05db      	lsls	r3, r3, #23
 8005aa6:	460c      	mov	r4, r1
 8005aa8:	4616      	mov	r6, r2
 8005aaa:	d505      	bpl.n	8005ab8 <__swrite+0x1e>
 8005aac:	2302      	movs	r3, #2
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ab4:	f000 f840 	bl	8005b38 <_lseek_r>
 8005ab8:	89a3      	ldrh	r3, [r4, #12]
 8005aba:	4632      	mov	r2, r6
 8005abc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ac0:	81a3      	strh	r3, [r4, #12]
 8005ac2:	4628      	mov	r0, r5
 8005ac4:	463b      	mov	r3, r7
 8005ac6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005aca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ace:	f000 b857 	b.w	8005b80 <_write_r>

08005ad2 <__sseek>:
 8005ad2:	b510      	push	{r4, lr}
 8005ad4:	460c      	mov	r4, r1
 8005ad6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ada:	f000 f82d 	bl	8005b38 <_lseek_r>
 8005ade:	1c43      	adds	r3, r0, #1
 8005ae0:	89a3      	ldrh	r3, [r4, #12]
 8005ae2:	bf15      	itete	ne
 8005ae4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005ae6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005aea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005aee:	81a3      	strheq	r3, [r4, #12]
 8005af0:	bf18      	it	ne
 8005af2:	81a3      	strhne	r3, [r4, #12]
 8005af4:	bd10      	pop	{r4, pc}

08005af6 <__sclose>:
 8005af6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005afa:	f000 b80d 	b.w	8005b18 <_close_r>

08005afe <memset>:
 8005afe:	4603      	mov	r3, r0
 8005b00:	4402      	add	r2, r0
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d100      	bne.n	8005b08 <memset+0xa>
 8005b06:	4770      	bx	lr
 8005b08:	f803 1b01 	strb.w	r1, [r3], #1
 8005b0c:	e7f9      	b.n	8005b02 <memset+0x4>
	...

08005b10 <_localeconv_r>:
 8005b10:	4800      	ldr	r0, [pc, #0]	@ (8005b14 <_localeconv_r+0x4>)
 8005b12:	4770      	bx	lr
 8005b14:	2000016c 	.word	0x2000016c

08005b18 <_close_r>:
 8005b18:	b538      	push	{r3, r4, r5, lr}
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	4d05      	ldr	r5, [pc, #20]	@ (8005b34 <_close_r+0x1c>)
 8005b1e:	4604      	mov	r4, r0
 8005b20:	4608      	mov	r0, r1
 8005b22:	602b      	str	r3, [r5, #0]
 8005b24:	f7fb ffad 	bl	8001a82 <_close>
 8005b28:	1c43      	adds	r3, r0, #1
 8005b2a:	d102      	bne.n	8005b32 <_close_r+0x1a>
 8005b2c:	682b      	ldr	r3, [r5, #0]
 8005b2e:	b103      	cbz	r3, 8005b32 <_close_r+0x1a>
 8005b30:	6023      	str	r3, [r4, #0]
 8005b32:	bd38      	pop	{r3, r4, r5, pc}
 8005b34:	20000490 	.word	0x20000490

08005b38 <_lseek_r>:
 8005b38:	b538      	push	{r3, r4, r5, lr}
 8005b3a:	4604      	mov	r4, r0
 8005b3c:	4608      	mov	r0, r1
 8005b3e:	4611      	mov	r1, r2
 8005b40:	2200      	movs	r2, #0
 8005b42:	4d05      	ldr	r5, [pc, #20]	@ (8005b58 <_lseek_r+0x20>)
 8005b44:	602a      	str	r2, [r5, #0]
 8005b46:	461a      	mov	r2, r3
 8005b48:	f7fb ffbf 	bl	8001aca <_lseek>
 8005b4c:	1c43      	adds	r3, r0, #1
 8005b4e:	d102      	bne.n	8005b56 <_lseek_r+0x1e>
 8005b50:	682b      	ldr	r3, [r5, #0]
 8005b52:	b103      	cbz	r3, 8005b56 <_lseek_r+0x1e>
 8005b54:	6023      	str	r3, [r4, #0]
 8005b56:	bd38      	pop	{r3, r4, r5, pc}
 8005b58:	20000490 	.word	0x20000490

08005b5c <_read_r>:
 8005b5c:	b538      	push	{r3, r4, r5, lr}
 8005b5e:	4604      	mov	r4, r0
 8005b60:	4608      	mov	r0, r1
 8005b62:	4611      	mov	r1, r2
 8005b64:	2200      	movs	r2, #0
 8005b66:	4d05      	ldr	r5, [pc, #20]	@ (8005b7c <_read_r+0x20>)
 8005b68:	602a      	str	r2, [r5, #0]
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	f7fb ff50 	bl	8001a10 <_read>
 8005b70:	1c43      	adds	r3, r0, #1
 8005b72:	d102      	bne.n	8005b7a <_read_r+0x1e>
 8005b74:	682b      	ldr	r3, [r5, #0]
 8005b76:	b103      	cbz	r3, 8005b7a <_read_r+0x1e>
 8005b78:	6023      	str	r3, [r4, #0]
 8005b7a:	bd38      	pop	{r3, r4, r5, pc}
 8005b7c:	20000490 	.word	0x20000490

08005b80 <_write_r>:
 8005b80:	b538      	push	{r3, r4, r5, lr}
 8005b82:	4604      	mov	r4, r0
 8005b84:	4608      	mov	r0, r1
 8005b86:	4611      	mov	r1, r2
 8005b88:	2200      	movs	r2, #0
 8005b8a:	4d05      	ldr	r5, [pc, #20]	@ (8005ba0 <_write_r+0x20>)
 8005b8c:	602a      	str	r2, [r5, #0]
 8005b8e:	461a      	mov	r2, r3
 8005b90:	f7fb ff5b 	bl	8001a4a <_write>
 8005b94:	1c43      	adds	r3, r0, #1
 8005b96:	d102      	bne.n	8005b9e <_write_r+0x1e>
 8005b98:	682b      	ldr	r3, [r5, #0]
 8005b9a:	b103      	cbz	r3, 8005b9e <_write_r+0x1e>
 8005b9c:	6023      	str	r3, [r4, #0]
 8005b9e:	bd38      	pop	{r3, r4, r5, pc}
 8005ba0:	20000490 	.word	0x20000490

08005ba4 <__errno>:
 8005ba4:	4b01      	ldr	r3, [pc, #4]	@ (8005bac <__errno+0x8>)
 8005ba6:	6818      	ldr	r0, [r3, #0]
 8005ba8:	4770      	bx	lr
 8005baa:	bf00      	nop
 8005bac:	2000002c 	.word	0x2000002c

08005bb0 <__libc_init_array>:
 8005bb0:	b570      	push	{r4, r5, r6, lr}
 8005bb2:	2600      	movs	r6, #0
 8005bb4:	4d0c      	ldr	r5, [pc, #48]	@ (8005be8 <__libc_init_array+0x38>)
 8005bb6:	4c0d      	ldr	r4, [pc, #52]	@ (8005bec <__libc_init_array+0x3c>)
 8005bb8:	1b64      	subs	r4, r4, r5
 8005bba:	10a4      	asrs	r4, r4, #2
 8005bbc:	42a6      	cmp	r6, r4
 8005bbe:	d109      	bne.n	8005bd4 <__libc_init_array+0x24>
 8005bc0:	f002 fcee 	bl	80085a0 <_init>
 8005bc4:	2600      	movs	r6, #0
 8005bc6:	4d0a      	ldr	r5, [pc, #40]	@ (8005bf0 <__libc_init_array+0x40>)
 8005bc8:	4c0a      	ldr	r4, [pc, #40]	@ (8005bf4 <__libc_init_array+0x44>)
 8005bca:	1b64      	subs	r4, r4, r5
 8005bcc:	10a4      	asrs	r4, r4, #2
 8005bce:	42a6      	cmp	r6, r4
 8005bd0:	d105      	bne.n	8005bde <__libc_init_array+0x2e>
 8005bd2:	bd70      	pop	{r4, r5, r6, pc}
 8005bd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bd8:	4798      	blx	r3
 8005bda:	3601      	adds	r6, #1
 8005bdc:	e7ee      	b.n	8005bbc <__libc_init_array+0xc>
 8005bde:	f855 3b04 	ldr.w	r3, [r5], #4
 8005be2:	4798      	blx	r3
 8005be4:	3601      	adds	r6, #1
 8005be6:	e7f2      	b.n	8005bce <__libc_init_array+0x1e>
 8005be8:	08008a0c 	.word	0x08008a0c
 8005bec:	08008a0c 	.word	0x08008a0c
 8005bf0:	08008a0c 	.word	0x08008a0c
 8005bf4:	08008a10 	.word	0x08008a10

08005bf8 <__retarget_lock_init_recursive>:
 8005bf8:	4770      	bx	lr

08005bfa <__retarget_lock_acquire_recursive>:
 8005bfa:	4770      	bx	lr

08005bfc <__retarget_lock_release_recursive>:
 8005bfc:	4770      	bx	lr

08005bfe <memchr>:
 8005bfe:	4603      	mov	r3, r0
 8005c00:	b510      	push	{r4, lr}
 8005c02:	b2c9      	uxtb	r1, r1
 8005c04:	4402      	add	r2, r0
 8005c06:	4293      	cmp	r3, r2
 8005c08:	4618      	mov	r0, r3
 8005c0a:	d101      	bne.n	8005c10 <memchr+0x12>
 8005c0c:	2000      	movs	r0, #0
 8005c0e:	e003      	b.n	8005c18 <memchr+0x1a>
 8005c10:	7804      	ldrb	r4, [r0, #0]
 8005c12:	3301      	adds	r3, #1
 8005c14:	428c      	cmp	r4, r1
 8005c16:	d1f6      	bne.n	8005c06 <memchr+0x8>
 8005c18:	bd10      	pop	{r4, pc}

08005c1a <quorem>:
 8005c1a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c1e:	6903      	ldr	r3, [r0, #16]
 8005c20:	690c      	ldr	r4, [r1, #16]
 8005c22:	4607      	mov	r7, r0
 8005c24:	42a3      	cmp	r3, r4
 8005c26:	db7e      	blt.n	8005d26 <quorem+0x10c>
 8005c28:	3c01      	subs	r4, #1
 8005c2a:	00a3      	lsls	r3, r4, #2
 8005c2c:	f100 0514 	add.w	r5, r0, #20
 8005c30:	f101 0814 	add.w	r8, r1, #20
 8005c34:	9300      	str	r3, [sp, #0]
 8005c36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c3a:	9301      	str	r3, [sp, #4]
 8005c3c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005c40:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c44:	3301      	adds	r3, #1
 8005c46:	429a      	cmp	r2, r3
 8005c48:	fbb2 f6f3 	udiv	r6, r2, r3
 8005c4c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005c50:	d32e      	bcc.n	8005cb0 <quorem+0x96>
 8005c52:	f04f 0a00 	mov.w	sl, #0
 8005c56:	46c4      	mov	ip, r8
 8005c58:	46ae      	mov	lr, r5
 8005c5a:	46d3      	mov	fp, sl
 8005c5c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005c60:	b298      	uxth	r0, r3
 8005c62:	fb06 a000 	mla	r0, r6, r0, sl
 8005c66:	0c1b      	lsrs	r3, r3, #16
 8005c68:	0c02      	lsrs	r2, r0, #16
 8005c6a:	fb06 2303 	mla	r3, r6, r3, r2
 8005c6e:	f8de 2000 	ldr.w	r2, [lr]
 8005c72:	b280      	uxth	r0, r0
 8005c74:	b292      	uxth	r2, r2
 8005c76:	1a12      	subs	r2, r2, r0
 8005c78:	445a      	add	r2, fp
 8005c7a:	f8de 0000 	ldr.w	r0, [lr]
 8005c7e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005c88:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005c8c:	b292      	uxth	r2, r2
 8005c8e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005c92:	45e1      	cmp	r9, ip
 8005c94:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005c98:	f84e 2b04 	str.w	r2, [lr], #4
 8005c9c:	d2de      	bcs.n	8005c5c <quorem+0x42>
 8005c9e:	9b00      	ldr	r3, [sp, #0]
 8005ca0:	58eb      	ldr	r3, [r5, r3]
 8005ca2:	b92b      	cbnz	r3, 8005cb0 <quorem+0x96>
 8005ca4:	9b01      	ldr	r3, [sp, #4]
 8005ca6:	3b04      	subs	r3, #4
 8005ca8:	429d      	cmp	r5, r3
 8005caa:	461a      	mov	r2, r3
 8005cac:	d32f      	bcc.n	8005d0e <quorem+0xf4>
 8005cae:	613c      	str	r4, [r7, #16]
 8005cb0:	4638      	mov	r0, r7
 8005cb2:	f001 f981 	bl	8006fb8 <__mcmp>
 8005cb6:	2800      	cmp	r0, #0
 8005cb8:	db25      	blt.n	8005d06 <quorem+0xec>
 8005cba:	4629      	mov	r1, r5
 8005cbc:	2000      	movs	r0, #0
 8005cbe:	f858 2b04 	ldr.w	r2, [r8], #4
 8005cc2:	f8d1 c000 	ldr.w	ip, [r1]
 8005cc6:	fa1f fe82 	uxth.w	lr, r2
 8005cca:	fa1f f38c 	uxth.w	r3, ip
 8005cce:	eba3 030e 	sub.w	r3, r3, lr
 8005cd2:	4403      	add	r3, r0
 8005cd4:	0c12      	lsrs	r2, r2, #16
 8005cd6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005cda:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005ce4:	45c1      	cmp	r9, r8
 8005ce6:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005cea:	f841 3b04 	str.w	r3, [r1], #4
 8005cee:	d2e6      	bcs.n	8005cbe <quorem+0xa4>
 8005cf0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005cf4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005cf8:	b922      	cbnz	r2, 8005d04 <quorem+0xea>
 8005cfa:	3b04      	subs	r3, #4
 8005cfc:	429d      	cmp	r5, r3
 8005cfe:	461a      	mov	r2, r3
 8005d00:	d30b      	bcc.n	8005d1a <quorem+0x100>
 8005d02:	613c      	str	r4, [r7, #16]
 8005d04:	3601      	adds	r6, #1
 8005d06:	4630      	mov	r0, r6
 8005d08:	b003      	add	sp, #12
 8005d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d0e:	6812      	ldr	r2, [r2, #0]
 8005d10:	3b04      	subs	r3, #4
 8005d12:	2a00      	cmp	r2, #0
 8005d14:	d1cb      	bne.n	8005cae <quorem+0x94>
 8005d16:	3c01      	subs	r4, #1
 8005d18:	e7c6      	b.n	8005ca8 <quorem+0x8e>
 8005d1a:	6812      	ldr	r2, [r2, #0]
 8005d1c:	3b04      	subs	r3, #4
 8005d1e:	2a00      	cmp	r2, #0
 8005d20:	d1ef      	bne.n	8005d02 <quorem+0xe8>
 8005d22:	3c01      	subs	r4, #1
 8005d24:	e7ea      	b.n	8005cfc <quorem+0xe2>
 8005d26:	2000      	movs	r0, #0
 8005d28:	e7ee      	b.n	8005d08 <quorem+0xee>
 8005d2a:	0000      	movs	r0, r0
 8005d2c:	0000      	movs	r0, r0
	...

08005d30 <_dtoa_r>:
 8005d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d34:	4614      	mov	r4, r2
 8005d36:	461d      	mov	r5, r3
 8005d38:	69c7      	ldr	r7, [r0, #28]
 8005d3a:	b097      	sub	sp, #92	@ 0x5c
 8005d3c:	4681      	mov	r9, r0
 8005d3e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8005d42:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8005d44:	b97f      	cbnz	r7, 8005d66 <_dtoa_r+0x36>
 8005d46:	2010      	movs	r0, #16
 8005d48:	f000 fe0e 	bl	8006968 <malloc>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	f8c9 001c 	str.w	r0, [r9, #28]
 8005d52:	b920      	cbnz	r0, 8005d5e <_dtoa_r+0x2e>
 8005d54:	21ef      	movs	r1, #239	@ 0xef
 8005d56:	4bac      	ldr	r3, [pc, #688]	@ (8006008 <_dtoa_r+0x2d8>)
 8005d58:	48ac      	ldr	r0, [pc, #688]	@ (800600c <_dtoa_r+0x2dc>)
 8005d5a:	f001 fff9 	bl	8007d50 <__assert_func>
 8005d5e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005d62:	6007      	str	r7, [r0, #0]
 8005d64:	60c7      	str	r7, [r0, #12]
 8005d66:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005d6a:	6819      	ldr	r1, [r3, #0]
 8005d6c:	b159      	cbz	r1, 8005d86 <_dtoa_r+0x56>
 8005d6e:	685a      	ldr	r2, [r3, #4]
 8005d70:	2301      	movs	r3, #1
 8005d72:	4093      	lsls	r3, r2
 8005d74:	604a      	str	r2, [r1, #4]
 8005d76:	608b      	str	r3, [r1, #8]
 8005d78:	4648      	mov	r0, r9
 8005d7a:	f000 feeb 	bl	8006b54 <_Bfree>
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005d84:	601a      	str	r2, [r3, #0]
 8005d86:	1e2b      	subs	r3, r5, #0
 8005d88:	bfaf      	iteee	ge
 8005d8a:	2300      	movge	r3, #0
 8005d8c:	2201      	movlt	r2, #1
 8005d8e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005d92:	9307      	strlt	r3, [sp, #28]
 8005d94:	bfa8      	it	ge
 8005d96:	6033      	strge	r3, [r6, #0]
 8005d98:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8005d9c:	4b9c      	ldr	r3, [pc, #624]	@ (8006010 <_dtoa_r+0x2e0>)
 8005d9e:	bfb8      	it	lt
 8005da0:	6032      	strlt	r2, [r6, #0]
 8005da2:	ea33 0308 	bics.w	r3, r3, r8
 8005da6:	d112      	bne.n	8005dce <_dtoa_r+0x9e>
 8005da8:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005dac:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005dae:	6013      	str	r3, [r2, #0]
 8005db0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005db4:	4323      	orrs	r3, r4
 8005db6:	f000 855e 	beq.w	8006876 <_dtoa_r+0xb46>
 8005dba:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005dbc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006014 <_dtoa_r+0x2e4>
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	f000 8560 	beq.w	8006886 <_dtoa_r+0xb56>
 8005dc6:	f10a 0303 	add.w	r3, sl, #3
 8005dca:	f000 bd5a 	b.w	8006882 <_dtoa_r+0xb52>
 8005dce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005dd2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005dd6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005dda:	2200      	movs	r2, #0
 8005ddc:	2300      	movs	r3, #0
 8005dde:	f7fa fde3 	bl	80009a8 <__aeabi_dcmpeq>
 8005de2:	4607      	mov	r7, r0
 8005de4:	b158      	cbz	r0, 8005dfe <_dtoa_r+0xce>
 8005de6:	2301      	movs	r3, #1
 8005de8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005dea:	6013      	str	r3, [r2, #0]
 8005dec:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005dee:	b113      	cbz	r3, 8005df6 <_dtoa_r+0xc6>
 8005df0:	4b89      	ldr	r3, [pc, #548]	@ (8006018 <_dtoa_r+0x2e8>)
 8005df2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005df4:	6013      	str	r3, [r2, #0]
 8005df6:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800601c <_dtoa_r+0x2ec>
 8005dfa:	f000 bd44 	b.w	8006886 <_dtoa_r+0xb56>
 8005dfe:	ab14      	add	r3, sp, #80	@ 0x50
 8005e00:	9301      	str	r3, [sp, #4]
 8005e02:	ab15      	add	r3, sp, #84	@ 0x54
 8005e04:	9300      	str	r3, [sp, #0]
 8005e06:	4648      	mov	r0, r9
 8005e08:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005e0c:	f001 f984 	bl	8007118 <__d2b>
 8005e10:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8005e14:	9003      	str	r0, [sp, #12]
 8005e16:	2e00      	cmp	r6, #0
 8005e18:	d078      	beq.n	8005f0c <_dtoa_r+0x1dc>
 8005e1a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005e1e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e20:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005e24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e28:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005e2c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005e30:	9712      	str	r7, [sp, #72]	@ 0x48
 8005e32:	4619      	mov	r1, r3
 8005e34:	2200      	movs	r2, #0
 8005e36:	4b7a      	ldr	r3, [pc, #488]	@ (8006020 <_dtoa_r+0x2f0>)
 8005e38:	f7fa f996 	bl	8000168 <__aeabi_dsub>
 8005e3c:	a36c      	add	r3, pc, #432	@ (adr r3, 8005ff0 <_dtoa_r+0x2c0>)
 8005e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e42:	f7fa fb49 	bl	80004d8 <__aeabi_dmul>
 8005e46:	a36c      	add	r3, pc, #432	@ (adr r3, 8005ff8 <_dtoa_r+0x2c8>)
 8005e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e4c:	f7fa f98e 	bl	800016c <__adddf3>
 8005e50:	4604      	mov	r4, r0
 8005e52:	4630      	mov	r0, r6
 8005e54:	460d      	mov	r5, r1
 8005e56:	f7fa fad5 	bl	8000404 <__aeabi_i2d>
 8005e5a:	a369      	add	r3, pc, #420	@ (adr r3, 8006000 <_dtoa_r+0x2d0>)
 8005e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e60:	f7fa fb3a 	bl	80004d8 <__aeabi_dmul>
 8005e64:	4602      	mov	r2, r0
 8005e66:	460b      	mov	r3, r1
 8005e68:	4620      	mov	r0, r4
 8005e6a:	4629      	mov	r1, r5
 8005e6c:	f7fa f97e 	bl	800016c <__adddf3>
 8005e70:	4604      	mov	r4, r0
 8005e72:	460d      	mov	r5, r1
 8005e74:	f7fa fde0 	bl	8000a38 <__aeabi_d2iz>
 8005e78:	2200      	movs	r2, #0
 8005e7a:	4607      	mov	r7, r0
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	4620      	mov	r0, r4
 8005e80:	4629      	mov	r1, r5
 8005e82:	f7fa fd9b 	bl	80009bc <__aeabi_dcmplt>
 8005e86:	b140      	cbz	r0, 8005e9a <_dtoa_r+0x16a>
 8005e88:	4638      	mov	r0, r7
 8005e8a:	f7fa fabb 	bl	8000404 <__aeabi_i2d>
 8005e8e:	4622      	mov	r2, r4
 8005e90:	462b      	mov	r3, r5
 8005e92:	f7fa fd89 	bl	80009a8 <__aeabi_dcmpeq>
 8005e96:	b900      	cbnz	r0, 8005e9a <_dtoa_r+0x16a>
 8005e98:	3f01      	subs	r7, #1
 8005e9a:	2f16      	cmp	r7, #22
 8005e9c:	d854      	bhi.n	8005f48 <_dtoa_r+0x218>
 8005e9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005ea2:	4b60      	ldr	r3, [pc, #384]	@ (8006024 <_dtoa_r+0x2f4>)
 8005ea4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eac:	f7fa fd86 	bl	80009bc <__aeabi_dcmplt>
 8005eb0:	2800      	cmp	r0, #0
 8005eb2:	d04b      	beq.n	8005f4c <_dtoa_r+0x21c>
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	3f01      	subs	r7, #1
 8005eb8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005eba:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005ebc:	1b9b      	subs	r3, r3, r6
 8005ebe:	1e5a      	subs	r2, r3, #1
 8005ec0:	bf49      	itett	mi
 8005ec2:	f1c3 0301 	rsbmi	r3, r3, #1
 8005ec6:	2300      	movpl	r3, #0
 8005ec8:	9304      	strmi	r3, [sp, #16]
 8005eca:	2300      	movmi	r3, #0
 8005ecc:	9209      	str	r2, [sp, #36]	@ 0x24
 8005ece:	bf54      	ite	pl
 8005ed0:	9304      	strpl	r3, [sp, #16]
 8005ed2:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8005ed4:	2f00      	cmp	r7, #0
 8005ed6:	db3b      	blt.n	8005f50 <_dtoa_r+0x220>
 8005ed8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005eda:	970e      	str	r7, [sp, #56]	@ 0x38
 8005edc:	443b      	add	r3, r7
 8005ede:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ee4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005ee6:	2b09      	cmp	r3, #9
 8005ee8:	d865      	bhi.n	8005fb6 <_dtoa_r+0x286>
 8005eea:	2b05      	cmp	r3, #5
 8005eec:	bfc4      	itt	gt
 8005eee:	3b04      	subgt	r3, #4
 8005ef0:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005ef2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005ef4:	bfc8      	it	gt
 8005ef6:	2400      	movgt	r4, #0
 8005ef8:	f1a3 0302 	sub.w	r3, r3, #2
 8005efc:	bfd8      	it	le
 8005efe:	2401      	movle	r4, #1
 8005f00:	2b03      	cmp	r3, #3
 8005f02:	d864      	bhi.n	8005fce <_dtoa_r+0x29e>
 8005f04:	e8df f003 	tbb	[pc, r3]
 8005f08:	2c385553 	.word	0x2c385553
 8005f0c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005f10:	441e      	add	r6, r3
 8005f12:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005f16:	2b20      	cmp	r3, #32
 8005f18:	bfc1      	itttt	gt
 8005f1a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005f1e:	fa08 f803 	lslgt.w	r8, r8, r3
 8005f22:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005f26:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005f2a:	bfd6      	itet	le
 8005f2c:	f1c3 0320 	rsble	r3, r3, #32
 8005f30:	ea48 0003 	orrgt.w	r0, r8, r3
 8005f34:	fa04 f003 	lslle.w	r0, r4, r3
 8005f38:	f7fa fa54 	bl	80003e4 <__aeabi_ui2d>
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005f42:	3e01      	subs	r6, #1
 8005f44:	9212      	str	r2, [sp, #72]	@ 0x48
 8005f46:	e774      	b.n	8005e32 <_dtoa_r+0x102>
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e7b5      	b.n	8005eb8 <_dtoa_r+0x188>
 8005f4c:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005f4e:	e7b4      	b.n	8005eba <_dtoa_r+0x18a>
 8005f50:	9b04      	ldr	r3, [sp, #16]
 8005f52:	1bdb      	subs	r3, r3, r7
 8005f54:	9304      	str	r3, [sp, #16]
 8005f56:	427b      	negs	r3, r7
 8005f58:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	930e      	str	r3, [sp, #56]	@ 0x38
 8005f5e:	e7c1      	b.n	8005ee4 <_dtoa_r+0x1b4>
 8005f60:	2301      	movs	r3, #1
 8005f62:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005f64:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005f66:	eb07 0b03 	add.w	fp, r7, r3
 8005f6a:	f10b 0301 	add.w	r3, fp, #1
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	9308      	str	r3, [sp, #32]
 8005f72:	bfb8      	it	lt
 8005f74:	2301      	movlt	r3, #1
 8005f76:	e006      	b.n	8005f86 <_dtoa_r+0x256>
 8005f78:	2301      	movs	r3, #1
 8005f7a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005f7c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	dd28      	ble.n	8005fd4 <_dtoa_r+0x2a4>
 8005f82:	469b      	mov	fp, r3
 8005f84:	9308      	str	r3, [sp, #32]
 8005f86:	2100      	movs	r1, #0
 8005f88:	2204      	movs	r2, #4
 8005f8a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8005f8e:	f102 0514 	add.w	r5, r2, #20
 8005f92:	429d      	cmp	r5, r3
 8005f94:	d926      	bls.n	8005fe4 <_dtoa_r+0x2b4>
 8005f96:	6041      	str	r1, [r0, #4]
 8005f98:	4648      	mov	r0, r9
 8005f9a:	f000 fd9b 	bl	8006ad4 <_Balloc>
 8005f9e:	4682      	mov	sl, r0
 8005fa0:	2800      	cmp	r0, #0
 8005fa2:	d143      	bne.n	800602c <_dtoa_r+0x2fc>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	f240 11af 	movw	r1, #431	@ 0x1af
 8005faa:	4b1f      	ldr	r3, [pc, #124]	@ (8006028 <_dtoa_r+0x2f8>)
 8005fac:	e6d4      	b.n	8005d58 <_dtoa_r+0x28>
 8005fae:	2300      	movs	r3, #0
 8005fb0:	e7e3      	b.n	8005f7a <_dtoa_r+0x24a>
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	e7d5      	b.n	8005f62 <_dtoa_r+0x232>
 8005fb6:	2401      	movs	r4, #1
 8005fb8:	2300      	movs	r3, #0
 8005fba:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005fbc:	9320      	str	r3, [sp, #128]	@ 0x80
 8005fbe:	f04f 3bff 	mov.w	fp, #4294967295
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	2312      	movs	r3, #18
 8005fc6:	f8cd b020 	str.w	fp, [sp, #32]
 8005fca:	9221      	str	r2, [sp, #132]	@ 0x84
 8005fcc:	e7db      	b.n	8005f86 <_dtoa_r+0x256>
 8005fce:	2301      	movs	r3, #1
 8005fd0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005fd2:	e7f4      	b.n	8005fbe <_dtoa_r+0x28e>
 8005fd4:	f04f 0b01 	mov.w	fp, #1
 8005fd8:	465b      	mov	r3, fp
 8005fda:	f8cd b020 	str.w	fp, [sp, #32]
 8005fde:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8005fe2:	e7d0      	b.n	8005f86 <_dtoa_r+0x256>
 8005fe4:	3101      	adds	r1, #1
 8005fe6:	0052      	lsls	r2, r2, #1
 8005fe8:	e7d1      	b.n	8005f8e <_dtoa_r+0x25e>
 8005fea:	bf00      	nop
 8005fec:	f3af 8000 	nop.w
 8005ff0:	636f4361 	.word	0x636f4361
 8005ff4:	3fd287a7 	.word	0x3fd287a7
 8005ff8:	8b60c8b3 	.word	0x8b60c8b3
 8005ffc:	3fc68a28 	.word	0x3fc68a28
 8006000:	509f79fb 	.word	0x509f79fb
 8006004:	3fd34413 	.word	0x3fd34413
 8006008:	080086b9 	.word	0x080086b9
 800600c:	080086d0 	.word	0x080086d0
 8006010:	7ff00000 	.word	0x7ff00000
 8006014:	080086b5 	.word	0x080086b5
 8006018:	080087ba 	.word	0x080087ba
 800601c:	080087b9 	.word	0x080087b9
 8006020:	3ff80000 	.word	0x3ff80000
 8006024:	08008838 	.word	0x08008838
 8006028:	08008728 	.word	0x08008728
 800602c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006030:	6018      	str	r0, [r3, #0]
 8006032:	9b08      	ldr	r3, [sp, #32]
 8006034:	2b0e      	cmp	r3, #14
 8006036:	f200 80a1 	bhi.w	800617c <_dtoa_r+0x44c>
 800603a:	2c00      	cmp	r4, #0
 800603c:	f000 809e 	beq.w	800617c <_dtoa_r+0x44c>
 8006040:	2f00      	cmp	r7, #0
 8006042:	dd33      	ble.n	80060ac <_dtoa_r+0x37c>
 8006044:	4b9c      	ldr	r3, [pc, #624]	@ (80062b8 <_dtoa_r+0x588>)
 8006046:	f007 020f 	and.w	r2, r7, #15
 800604a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800604e:	05f8      	lsls	r0, r7, #23
 8006050:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006054:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8006058:	ea4f 1427 	mov.w	r4, r7, asr #4
 800605c:	d516      	bpl.n	800608c <_dtoa_r+0x35c>
 800605e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006062:	4b96      	ldr	r3, [pc, #600]	@ (80062bc <_dtoa_r+0x58c>)
 8006064:	2603      	movs	r6, #3
 8006066:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800606a:	f7fa fb5f 	bl	800072c <__aeabi_ddiv>
 800606e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006072:	f004 040f 	and.w	r4, r4, #15
 8006076:	4d91      	ldr	r5, [pc, #580]	@ (80062bc <_dtoa_r+0x58c>)
 8006078:	b954      	cbnz	r4, 8006090 <_dtoa_r+0x360>
 800607a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800607e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006082:	f7fa fb53 	bl	800072c <__aeabi_ddiv>
 8006086:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800608a:	e028      	b.n	80060de <_dtoa_r+0x3ae>
 800608c:	2602      	movs	r6, #2
 800608e:	e7f2      	b.n	8006076 <_dtoa_r+0x346>
 8006090:	07e1      	lsls	r1, r4, #31
 8006092:	d508      	bpl.n	80060a6 <_dtoa_r+0x376>
 8006094:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006098:	e9d5 2300 	ldrd	r2, r3, [r5]
 800609c:	f7fa fa1c 	bl	80004d8 <__aeabi_dmul>
 80060a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80060a4:	3601      	adds	r6, #1
 80060a6:	1064      	asrs	r4, r4, #1
 80060a8:	3508      	adds	r5, #8
 80060aa:	e7e5      	b.n	8006078 <_dtoa_r+0x348>
 80060ac:	f000 80af 	beq.w	800620e <_dtoa_r+0x4de>
 80060b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80060b4:	427c      	negs	r4, r7
 80060b6:	4b80      	ldr	r3, [pc, #512]	@ (80062b8 <_dtoa_r+0x588>)
 80060b8:	f004 020f 	and.w	r2, r4, #15
 80060bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80060c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c4:	f7fa fa08 	bl	80004d8 <__aeabi_dmul>
 80060c8:	2602      	movs	r6, #2
 80060ca:	2300      	movs	r3, #0
 80060cc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80060d0:	4d7a      	ldr	r5, [pc, #488]	@ (80062bc <_dtoa_r+0x58c>)
 80060d2:	1124      	asrs	r4, r4, #4
 80060d4:	2c00      	cmp	r4, #0
 80060d6:	f040 808f 	bne.w	80061f8 <_dtoa_r+0x4c8>
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d1d3      	bne.n	8006086 <_dtoa_r+0x356>
 80060de:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80060e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	f000 8094 	beq.w	8006212 <_dtoa_r+0x4e2>
 80060ea:	2200      	movs	r2, #0
 80060ec:	4620      	mov	r0, r4
 80060ee:	4629      	mov	r1, r5
 80060f0:	4b73      	ldr	r3, [pc, #460]	@ (80062c0 <_dtoa_r+0x590>)
 80060f2:	f7fa fc63 	bl	80009bc <__aeabi_dcmplt>
 80060f6:	2800      	cmp	r0, #0
 80060f8:	f000 808b 	beq.w	8006212 <_dtoa_r+0x4e2>
 80060fc:	9b08      	ldr	r3, [sp, #32]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	f000 8087 	beq.w	8006212 <_dtoa_r+0x4e2>
 8006104:	f1bb 0f00 	cmp.w	fp, #0
 8006108:	dd34      	ble.n	8006174 <_dtoa_r+0x444>
 800610a:	4620      	mov	r0, r4
 800610c:	2200      	movs	r2, #0
 800610e:	4629      	mov	r1, r5
 8006110:	4b6c      	ldr	r3, [pc, #432]	@ (80062c4 <_dtoa_r+0x594>)
 8006112:	f7fa f9e1 	bl	80004d8 <__aeabi_dmul>
 8006116:	465c      	mov	r4, fp
 8006118:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800611c:	f107 38ff 	add.w	r8, r7, #4294967295
 8006120:	3601      	adds	r6, #1
 8006122:	4630      	mov	r0, r6
 8006124:	f7fa f96e 	bl	8000404 <__aeabi_i2d>
 8006128:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800612c:	f7fa f9d4 	bl	80004d8 <__aeabi_dmul>
 8006130:	2200      	movs	r2, #0
 8006132:	4b65      	ldr	r3, [pc, #404]	@ (80062c8 <_dtoa_r+0x598>)
 8006134:	f7fa f81a 	bl	800016c <__adddf3>
 8006138:	4605      	mov	r5, r0
 800613a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800613e:	2c00      	cmp	r4, #0
 8006140:	d16a      	bne.n	8006218 <_dtoa_r+0x4e8>
 8006142:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006146:	2200      	movs	r2, #0
 8006148:	4b60      	ldr	r3, [pc, #384]	@ (80062cc <_dtoa_r+0x59c>)
 800614a:	f7fa f80d 	bl	8000168 <__aeabi_dsub>
 800614e:	4602      	mov	r2, r0
 8006150:	460b      	mov	r3, r1
 8006152:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006156:	462a      	mov	r2, r5
 8006158:	4633      	mov	r3, r6
 800615a:	f7fa fc4d 	bl	80009f8 <__aeabi_dcmpgt>
 800615e:	2800      	cmp	r0, #0
 8006160:	f040 8298 	bne.w	8006694 <_dtoa_r+0x964>
 8006164:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006168:	462a      	mov	r2, r5
 800616a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800616e:	f7fa fc25 	bl	80009bc <__aeabi_dcmplt>
 8006172:	bb38      	cbnz	r0, 80061c4 <_dtoa_r+0x494>
 8006174:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006178:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800617c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800617e:	2b00      	cmp	r3, #0
 8006180:	f2c0 8157 	blt.w	8006432 <_dtoa_r+0x702>
 8006184:	2f0e      	cmp	r7, #14
 8006186:	f300 8154 	bgt.w	8006432 <_dtoa_r+0x702>
 800618a:	4b4b      	ldr	r3, [pc, #300]	@ (80062b8 <_dtoa_r+0x588>)
 800618c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006190:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006194:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006198:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800619a:	2b00      	cmp	r3, #0
 800619c:	f280 80e5 	bge.w	800636a <_dtoa_r+0x63a>
 80061a0:	9b08      	ldr	r3, [sp, #32]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	f300 80e1 	bgt.w	800636a <_dtoa_r+0x63a>
 80061a8:	d10c      	bne.n	80061c4 <_dtoa_r+0x494>
 80061aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80061ae:	2200      	movs	r2, #0
 80061b0:	4b46      	ldr	r3, [pc, #280]	@ (80062cc <_dtoa_r+0x59c>)
 80061b2:	f7fa f991 	bl	80004d8 <__aeabi_dmul>
 80061b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80061ba:	f7fa fc13 	bl	80009e4 <__aeabi_dcmpge>
 80061be:	2800      	cmp	r0, #0
 80061c0:	f000 8266 	beq.w	8006690 <_dtoa_r+0x960>
 80061c4:	2400      	movs	r4, #0
 80061c6:	4625      	mov	r5, r4
 80061c8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80061ca:	4656      	mov	r6, sl
 80061cc:	ea6f 0803 	mvn.w	r8, r3
 80061d0:	2700      	movs	r7, #0
 80061d2:	4621      	mov	r1, r4
 80061d4:	4648      	mov	r0, r9
 80061d6:	f000 fcbd 	bl	8006b54 <_Bfree>
 80061da:	2d00      	cmp	r5, #0
 80061dc:	f000 80bd 	beq.w	800635a <_dtoa_r+0x62a>
 80061e0:	b12f      	cbz	r7, 80061ee <_dtoa_r+0x4be>
 80061e2:	42af      	cmp	r7, r5
 80061e4:	d003      	beq.n	80061ee <_dtoa_r+0x4be>
 80061e6:	4639      	mov	r1, r7
 80061e8:	4648      	mov	r0, r9
 80061ea:	f000 fcb3 	bl	8006b54 <_Bfree>
 80061ee:	4629      	mov	r1, r5
 80061f0:	4648      	mov	r0, r9
 80061f2:	f000 fcaf 	bl	8006b54 <_Bfree>
 80061f6:	e0b0      	b.n	800635a <_dtoa_r+0x62a>
 80061f8:	07e2      	lsls	r2, r4, #31
 80061fa:	d505      	bpl.n	8006208 <_dtoa_r+0x4d8>
 80061fc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006200:	f7fa f96a 	bl	80004d8 <__aeabi_dmul>
 8006204:	2301      	movs	r3, #1
 8006206:	3601      	adds	r6, #1
 8006208:	1064      	asrs	r4, r4, #1
 800620a:	3508      	adds	r5, #8
 800620c:	e762      	b.n	80060d4 <_dtoa_r+0x3a4>
 800620e:	2602      	movs	r6, #2
 8006210:	e765      	b.n	80060de <_dtoa_r+0x3ae>
 8006212:	46b8      	mov	r8, r7
 8006214:	9c08      	ldr	r4, [sp, #32]
 8006216:	e784      	b.n	8006122 <_dtoa_r+0x3f2>
 8006218:	4b27      	ldr	r3, [pc, #156]	@ (80062b8 <_dtoa_r+0x588>)
 800621a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800621c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006220:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006224:	4454      	add	r4, sl
 8006226:	2900      	cmp	r1, #0
 8006228:	d054      	beq.n	80062d4 <_dtoa_r+0x5a4>
 800622a:	2000      	movs	r0, #0
 800622c:	4928      	ldr	r1, [pc, #160]	@ (80062d0 <_dtoa_r+0x5a0>)
 800622e:	f7fa fa7d 	bl	800072c <__aeabi_ddiv>
 8006232:	4633      	mov	r3, r6
 8006234:	462a      	mov	r2, r5
 8006236:	f7f9 ff97 	bl	8000168 <__aeabi_dsub>
 800623a:	4656      	mov	r6, sl
 800623c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006240:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006244:	f7fa fbf8 	bl	8000a38 <__aeabi_d2iz>
 8006248:	4605      	mov	r5, r0
 800624a:	f7fa f8db 	bl	8000404 <__aeabi_i2d>
 800624e:	4602      	mov	r2, r0
 8006250:	460b      	mov	r3, r1
 8006252:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006256:	f7f9 ff87 	bl	8000168 <__aeabi_dsub>
 800625a:	4602      	mov	r2, r0
 800625c:	460b      	mov	r3, r1
 800625e:	3530      	adds	r5, #48	@ 0x30
 8006260:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006264:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006268:	f806 5b01 	strb.w	r5, [r6], #1
 800626c:	f7fa fba6 	bl	80009bc <__aeabi_dcmplt>
 8006270:	2800      	cmp	r0, #0
 8006272:	d172      	bne.n	800635a <_dtoa_r+0x62a>
 8006274:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006278:	2000      	movs	r0, #0
 800627a:	4911      	ldr	r1, [pc, #68]	@ (80062c0 <_dtoa_r+0x590>)
 800627c:	f7f9 ff74 	bl	8000168 <__aeabi_dsub>
 8006280:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006284:	f7fa fb9a 	bl	80009bc <__aeabi_dcmplt>
 8006288:	2800      	cmp	r0, #0
 800628a:	f040 80b4 	bne.w	80063f6 <_dtoa_r+0x6c6>
 800628e:	42a6      	cmp	r6, r4
 8006290:	f43f af70 	beq.w	8006174 <_dtoa_r+0x444>
 8006294:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006298:	2200      	movs	r2, #0
 800629a:	4b0a      	ldr	r3, [pc, #40]	@ (80062c4 <_dtoa_r+0x594>)
 800629c:	f7fa f91c 	bl	80004d8 <__aeabi_dmul>
 80062a0:	2200      	movs	r2, #0
 80062a2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80062a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80062aa:	4b06      	ldr	r3, [pc, #24]	@ (80062c4 <_dtoa_r+0x594>)
 80062ac:	f7fa f914 	bl	80004d8 <__aeabi_dmul>
 80062b0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80062b4:	e7c4      	b.n	8006240 <_dtoa_r+0x510>
 80062b6:	bf00      	nop
 80062b8:	08008838 	.word	0x08008838
 80062bc:	08008810 	.word	0x08008810
 80062c0:	3ff00000 	.word	0x3ff00000
 80062c4:	40240000 	.word	0x40240000
 80062c8:	401c0000 	.word	0x401c0000
 80062cc:	40140000 	.word	0x40140000
 80062d0:	3fe00000 	.word	0x3fe00000
 80062d4:	4631      	mov	r1, r6
 80062d6:	4628      	mov	r0, r5
 80062d8:	f7fa f8fe 	bl	80004d8 <__aeabi_dmul>
 80062dc:	4656      	mov	r6, sl
 80062de:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80062e2:	9413      	str	r4, [sp, #76]	@ 0x4c
 80062e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80062e8:	f7fa fba6 	bl	8000a38 <__aeabi_d2iz>
 80062ec:	4605      	mov	r5, r0
 80062ee:	f7fa f889 	bl	8000404 <__aeabi_i2d>
 80062f2:	4602      	mov	r2, r0
 80062f4:	460b      	mov	r3, r1
 80062f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80062fa:	f7f9 ff35 	bl	8000168 <__aeabi_dsub>
 80062fe:	4602      	mov	r2, r0
 8006300:	460b      	mov	r3, r1
 8006302:	3530      	adds	r5, #48	@ 0x30
 8006304:	f806 5b01 	strb.w	r5, [r6], #1
 8006308:	42a6      	cmp	r6, r4
 800630a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800630e:	f04f 0200 	mov.w	r2, #0
 8006312:	d124      	bne.n	800635e <_dtoa_r+0x62e>
 8006314:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006318:	4bae      	ldr	r3, [pc, #696]	@ (80065d4 <_dtoa_r+0x8a4>)
 800631a:	f7f9 ff27 	bl	800016c <__adddf3>
 800631e:	4602      	mov	r2, r0
 8006320:	460b      	mov	r3, r1
 8006322:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006326:	f7fa fb67 	bl	80009f8 <__aeabi_dcmpgt>
 800632a:	2800      	cmp	r0, #0
 800632c:	d163      	bne.n	80063f6 <_dtoa_r+0x6c6>
 800632e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006332:	2000      	movs	r0, #0
 8006334:	49a7      	ldr	r1, [pc, #668]	@ (80065d4 <_dtoa_r+0x8a4>)
 8006336:	f7f9 ff17 	bl	8000168 <__aeabi_dsub>
 800633a:	4602      	mov	r2, r0
 800633c:	460b      	mov	r3, r1
 800633e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006342:	f7fa fb3b 	bl	80009bc <__aeabi_dcmplt>
 8006346:	2800      	cmp	r0, #0
 8006348:	f43f af14 	beq.w	8006174 <_dtoa_r+0x444>
 800634c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800634e:	1e73      	subs	r3, r6, #1
 8006350:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006352:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006356:	2b30      	cmp	r3, #48	@ 0x30
 8006358:	d0f8      	beq.n	800634c <_dtoa_r+0x61c>
 800635a:	4647      	mov	r7, r8
 800635c:	e03b      	b.n	80063d6 <_dtoa_r+0x6a6>
 800635e:	4b9e      	ldr	r3, [pc, #632]	@ (80065d8 <_dtoa_r+0x8a8>)
 8006360:	f7fa f8ba 	bl	80004d8 <__aeabi_dmul>
 8006364:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006368:	e7bc      	b.n	80062e4 <_dtoa_r+0x5b4>
 800636a:	4656      	mov	r6, sl
 800636c:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8006370:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006374:	4620      	mov	r0, r4
 8006376:	4629      	mov	r1, r5
 8006378:	f7fa f9d8 	bl	800072c <__aeabi_ddiv>
 800637c:	f7fa fb5c 	bl	8000a38 <__aeabi_d2iz>
 8006380:	4680      	mov	r8, r0
 8006382:	f7fa f83f 	bl	8000404 <__aeabi_i2d>
 8006386:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800638a:	f7fa f8a5 	bl	80004d8 <__aeabi_dmul>
 800638e:	4602      	mov	r2, r0
 8006390:	460b      	mov	r3, r1
 8006392:	4620      	mov	r0, r4
 8006394:	4629      	mov	r1, r5
 8006396:	f7f9 fee7 	bl	8000168 <__aeabi_dsub>
 800639a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800639e:	9d08      	ldr	r5, [sp, #32]
 80063a0:	f806 4b01 	strb.w	r4, [r6], #1
 80063a4:	eba6 040a 	sub.w	r4, r6, sl
 80063a8:	42a5      	cmp	r5, r4
 80063aa:	4602      	mov	r2, r0
 80063ac:	460b      	mov	r3, r1
 80063ae:	d133      	bne.n	8006418 <_dtoa_r+0x6e8>
 80063b0:	f7f9 fedc 	bl	800016c <__adddf3>
 80063b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80063b8:	4604      	mov	r4, r0
 80063ba:	460d      	mov	r5, r1
 80063bc:	f7fa fb1c 	bl	80009f8 <__aeabi_dcmpgt>
 80063c0:	b9c0      	cbnz	r0, 80063f4 <_dtoa_r+0x6c4>
 80063c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80063c6:	4620      	mov	r0, r4
 80063c8:	4629      	mov	r1, r5
 80063ca:	f7fa faed 	bl	80009a8 <__aeabi_dcmpeq>
 80063ce:	b110      	cbz	r0, 80063d6 <_dtoa_r+0x6a6>
 80063d0:	f018 0f01 	tst.w	r8, #1
 80063d4:	d10e      	bne.n	80063f4 <_dtoa_r+0x6c4>
 80063d6:	4648      	mov	r0, r9
 80063d8:	9903      	ldr	r1, [sp, #12]
 80063da:	f000 fbbb 	bl	8006b54 <_Bfree>
 80063de:	2300      	movs	r3, #0
 80063e0:	7033      	strb	r3, [r6, #0]
 80063e2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80063e4:	3701      	adds	r7, #1
 80063e6:	601f      	str	r7, [r3, #0]
 80063e8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	f000 824b 	beq.w	8006886 <_dtoa_r+0xb56>
 80063f0:	601e      	str	r6, [r3, #0]
 80063f2:	e248      	b.n	8006886 <_dtoa_r+0xb56>
 80063f4:	46b8      	mov	r8, r7
 80063f6:	4633      	mov	r3, r6
 80063f8:	461e      	mov	r6, r3
 80063fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80063fe:	2a39      	cmp	r2, #57	@ 0x39
 8006400:	d106      	bne.n	8006410 <_dtoa_r+0x6e0>
 8006402:	459a      	cmp	sl, r3
 8006404:	d1f8      	bne.n	80063f8 <_dtoa_r+0x6c8>
 8006406:	2230      	movs	r2, #48	@ 0x30
 8006408:	f108 0801 	add.w	r8, r8, #1
 800640c:	f88a 2000 	strb.w	r2, [sl]
 8006410:	781a      	ldrb	r2, [r3, #0]
 8006412:	3201      	adds	r2, #1
 8006414:	701a      	strb	r2, [r3, #0]
 8006416:	e7a0      	b.n	800635a <_dtoa_r+0x62a>
 8006418:	2200      	movs	r2, #0
 800641a:	4b6f      	ldr	r3, [pc, #444]	@ (80065d8 <_dtoa_r+0x8a8>)
 800641c:	f7fa f85c 	bl	80004d8 <__aeabi_dmul>
 8006420:	2200      	movs	r2, #0
 8006422:	2300      	movs	r3, #0
 8006424:	4604      	mov	r4, r0
 8006426:	460d      	mov	r5, r1
 8006428:	f7fa fabe 	bl	80009a8 <__aeabi_dcmpeq>
 800642c:	2800      	cmp	r0, #0
 800642e:	d09f      	beq.n	8006370 <_dtoa_r+0x640>
 8006430:	e7d1      	b.n	80063d6 <_dtoa_r+0x6a6>
 8006432:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006434:	2a00      	cmp	r2, #0
 8006436:	f000 80ea 	beq.w	800660e <_dtoa_r+0x8de>
 800643a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800643c:	2a01      	cmp	r2, #1
 800643e:	f300 80cd 	bgt.w	80065dc <_dtoa_r+0x8ac>
 8006442:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006444:	2a00      	cmp	r2, #0
 8006446:	f000 80c1 	beq.w	80065cc <_dtoa_r+0x89c>
 800644a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800644e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006450:	9e04      	ldr	r6, [sp, #16]
 8006452:	9a04      	ldr	r2, [sp, #16]
 8006454:	2101      	movs	r1, #1
 8006456:	441a      	add	r2, r3
 8006458:	9204      	str	r2, [sp, #16]
 800645a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800645c:	4648      	mov	r0, r9
 800645e:	441a      	add	r2, r3
 8006460:	9209      	str	r2, [sp, #36]	@ 0x24
 8006462:	f000 fc2b 	bl	8006cbc <__i2b>
 8006466:	4605      	mov	r5, r0
 8006468:	b166      	cbz	r6, 8006484 <_dtoa_r+0x754>
 800646a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800646c:	2b00      	cmp	r3, #0
 800646e:	dd09      	ble.n	8006484 <_dtoa_r+0x754>
 8006470:	42b3      	cmp	r3, r6
 8006472:	bfa8      	it	ge
 8006474:	4633      	movge	r3, r6
 8006476:	9a04      	ldr	r2, [sp, #16]
 8006478:	1af6      	subs	r6, r6, r3
 800647a:	1ad2      	subs	r2, r2, r3
 800647c:	9204      	str	r2, [sp, #16]
 800647e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006480:	1ad3      	subs	r3, r2, r3
 8006482:	9309      	str	r3, [sp, #36]	@ 0x24
 8006484:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006486:	b30b      	cbz	r3, 80064cc <_dtoa_r+0x79c>
 8006488:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800648a:	2b00      	cmp	r3, #0
 800648c:	f000 80c6 	beq.w	800661c <_dtoa_r+0x8ec>
 8006490:	2c00      	cmp	r4, #0
 8006492:	f000 80c0 	beq.w	8006616 <_dtoa_r+0x8e6>
 8006496:	4629      	mov	r1, r5
 8006498:	4622      	mov	r2, r4
 800649a:	4648      	mov	r0, r9
 800649c:	f000 fcc6 	bl	8006e2c <__pow5mult>
 80064a0:	9a03      	ldr	r2, [sp, #12]
 80064a2:	4601      	mov	r1, r0
 80064a4:	4605      	mov	r5, r0
 80064a6:	4648      	mov	r0, r9
 80064a8:	f000 fc1e 	bl	8006ce8 <__multiply>
 80064ac:	9903      	ldr	r1, [sp, #12]
 80064ae:	4680      	mov	r8, r0
 80064b0:	4648      	mov	r0, r9
 80064b2:	f000 fb4f 	bl	8006b54 <_Bfree>
 80064b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80064b8:	1b1b      	subs	r3, r3, r4
 80064ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80064bc:	f000 80b1 	beq.w	8006622 <_dtoa_r+0x8f2>
 80064c0:	4641      	mov	r1, r8
 80064c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80064c4:	4648      	mov	r0, r9
 80064c6:	f000 fcb1 	bl	8006e2c <__pow5mult>
 80064ca:	9003      	str	r0, [sp, #12]
 80064cc:	2101      	movs	r1, #1
 80064ce:	4648      	mov	r0, r9
 80064d0:	f000 fbf4 	bl	8006cbc <__i2b>
 80064d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80064d6:	4604      	mov	r4, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	f000 81d8 	beq.w	800688e <_dtoa_r+0xb5e>
 80064de:	461a      	mov	r2, r3
 80064e0:	4601      	mov	r1, r0
 80064e2:	4648      	mov	r0, r9
 80064e4:	f000 fca2 	bl	8006e2c <__pow5mult>
 80064e8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80064ea:	4604      	mov	r4, r0
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	f300 809f 	bgt.w	8006630 <_dtoa_r+0x900>
 80064f2:	9b06      	ldr	r3, [sp, #24]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	f040 8097 	bne.w	8006628 <_dtoa_r+0x8f8>
 80064fa:	9b07      	ldr	r3, [sp, #28]
 80064fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006500:	2b00      	cmp	r3, #0
 8006502:	f040 8093 	bne.w	800662c <_dtoa_r+0x8fc>
 8006506:	9b07      	ldr	r3, [sp, #28]
 8006508:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800650c:	0d1b      	lsrs	r3, r3, #20
 800650e:	051b      	lsls	r3, r3, #20
 8006510:	b133      	cbz	r3, 8006520 <_dtoa_r+0x7f0>
 8006512:	9b04      	ldr	r3, [sp, #16]
 8006514:	3301      	adds	r3, #1
 8006516:	9304      	str	r3, [sp, #16]
 8006518:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800651a:	3301      	adds	r3, #1
 800651c:	9309      	str	r3, [sp, #36]	@ 0x24
 800651e:	2301      	movs	r3, #1
 8006520:	930a      	str	r3, [sp, #40]	@ 0x28
 8006522:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006524:	2b00      	cmp	r3, #0
 8006526:	f000 81b8 	beq.w	800689a <_dtoa_r+0xb6a>
 800652a:	6923      	ldr	r3, [r4, #16]
 800652c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006530:	6918      	ldr	r0, [r3, #16]
 8006532:	f000 fb77 	bl	8006c24 <__hi0bits>
 8006536:	f1c0 0020 	rsb	r0, r0, #32
 800653a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800653c:	4418      	add	r0, r3
 800653e:	f010 001f 	ands.w	r0, r0, #31
 8006542:	f000 8082 	beq.w	800664a <_dtoa_r+0x91a>
 8006546:	f1c0 0320 	rsb	r3, r0, #32
 800654a:	2b04      	cmp	r3, #4
 800654c:	dd73      	ble.n	8006636 <_dtoa_r+0x906>
 800654e:	9b04      	ldr	r3, [sp, #16]
 8006550:	f1c0 001c 	rsb	r0, r0, #28
 8006554:	4403      	add	r3, r0
 8006556:	9304      	str	r3, [sp, #16]
 8006558:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800655a:	4406      	add	r6, r0
 800655c:	4403      	add	r3, r0
 800655e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006560:	9b04      	ldr	r3, [sp, #16]
 8006562:	2b00      	cmp	r3, #0
 8006564:	dd05      	ble.n	8006572 <_dtoa_r+0x842>
 8006566:	461a      	mov	r2, r3
 8006568:	4648      	mov	r0, r9
 800656a:	9903      	ldr	r1, [sp, #12]
 800656c:	f000 fcb8 	bl	8006ee0 <__lshift>
 8006570:	9003      	str	r0, [sp, #12]
 8006572:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006574:	2b00      	cmp	r3, #0
 8006576:	dd05      	ble.n	8006584 <_dtoa_r+0x854>
 8006578:	4621      	mov	r1, r4
 800657a:	461a      	mov	r2, r3
 800657c:	4648      	mov	r0, r9
 800657e:	f000 fcaf 	bl	8006ee0 <__lshift>
 8006582:	4604      	mov	r4, r0
 8006584:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006586:	2b00      	cmp	r3, #0
 8006588:	d061      	beq.n	800664e <_dtoa_r+0x91e>
 800658a:	4621      	mov	r1, r4
 800658c:	9803      	ldr	r0, [sp, #12]
 800658e:	f000 fd13 	bl	8006fb8 <__mcmp>
 8006592:	2800      	cmp	r0, #0
 8006594:	da5b      	bge.n	800664e <_dtoa_r+0x91e>
 8006596:	2300      	movs	r3, #0
 8006598:	220a      	movs	r2, #10
 800659a:	4648      	mov	r0, r9
 800659c:	9903      	ldr	r1, [sp, #12]
 800659e:	f000 fafb 	bl	8006b98 <__multadd>
 80065a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80065a4:	f107 38ff 	add.w	r8, r7, #4294967295
 80065a8:	9003      	str	r0, [sp, #12]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	f000 8177 	beq.w	800689e <_dtoa_r+0xb6e>
 80065b0:	4629      	mov	r1, r5
 80065b2:	2300      	movs	r3, #0
 80065b4:	220a      	movs	r2, #10
 80065b6:	4648      	mov	r0, r9
 80065b8:	f000 faee 	bl	8006b98 <__multadd>
 80065bc:	f1bb 0f00 	cmp.w	fp, #0
 80065c0:	4605      	mov	r5, r0
 80065c2:	dc6f      	bgt.n	80066a4 <_dtoa_r+0x974>
 80065c4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80065c6:	2b02      	cmp	r3, #2
 80065c8:	dc49      	bgt.n	800665e <_dtoa_r+0x92e>
 80065ca:	e06b      	b.n	80066a4 <_dtoa_r+0x974>
 80065cc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80065ce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80065d2:	e73c      	b.n	800644e <_dtoa_r+0x71e>
 80065d4:	3fe00000 	.word	0x3fe00000
 80065d8:	40240000 	.word	0x40240000
 80065dc:	9b08      	ldr	r3, [sp, #32]
 80065de:	1e5c      	subs	r4, r3, #1
 80065e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80065e2:	42a3      	cmp	r3, r4
 80065e4:	db09      	blt.n	80065fa <_dtoa_r+0x8ca>
 80065e6:	1b1c      	subs	r4, r3, r4
 80065e8:	9b08      	ldr	r3, [sp, #32]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	f6bf af30 	bge.w	8006450 <_dtoa_r+0x720>
 80065f0:	9b04      	ldr	r3, [sp, #16]
 80065f2:	9a08      	ldr	r2, [sp, #32]
 80065f4:	1a9e      	subs	r6, r3, r2
 80065f6:	2300      	movs	r3, #0
 80065f8:	e72b      	b.n	8006452 <_dtoa_r+0x722>
 80065fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80065fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80065fe:	1ae3      	subs	r3, r4, r3
 8006600:	441a      	add	r2, r3
 8006602:	940a      	str	r4, [sp, #40]	@ 0x28
 8006604:	9e04      	ldr	r6, [sp, #16]
 8006606:	2400      	movs	r4, #0
 8006608:	9b08      	ldr	r3, [sp, #32]
 800660a:	920e      	str	r2, [sp, #56]	@ 0x38
 800660c:	e721      	b.n	8006452 <_dtoa_r+0x722>
 800660e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006610:	9e04      	ldr	r6, [sp, #16]
 8006612:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006614:	e728      	b.n	8006468 <_dtoa_r+0x738>
 8006616:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800661a:	e751      	b.n	80064c0 <_dtoa_r+0x790>
 800661c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800661e:	9903      	ldr	r1, [sp, #12]
 8006620:	e750      	b.n	80064c4 <_dtoa_r+0x794>
 8006622:	f8cd 800c 	str.w	r8, [sp, #12]
 8006626:	e751      	b.n	80064cc <_dtoa_r+0x79c>
 8006628:	2300      	movs	r3, #0
 800662a:	e779      	b.n	8006520 <_dtoa_r+0x7f0>
 800662c:	9b06      	ldr	r3, [sp, #24]
 800662e:	e777      	b.n	8006520 <_dtoa_r+0x7f0>
 8006630:	2300      	movs	r3, #0
 8006632:	930a      	str	r3, [sp, #40]	@ 0x28
 8006634:	e779      	b.n	800652a <_dtoa_r+0x7fa>
 8006636:	d093      	beq.n	8006560 <_dtoa_r+0x830>
 8006638:	9a04      	ldr	r2, [sp, #16]
 800663a:	331c      	adds	r3, #28
 800663c:	441a      	add	r2, r3
 800663e:	9204      	str	r2, [sp, #16]
 8006640:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006642:	441e      	add	r6, r3
 8006644:	441a      	add	r2, r3
 8006646:	9209      	str	r2, [sp, #36]	@ 0x24
 8006648:	e78a      	b.n	8006560 <_dtoa_r+0x830>
 800664a:	4603      	mov	r3, r0
 800664c:	e7f4      	b.n	8006638 <_dtoa_r+0x908>
 800664e:	9b08      	ldr	r3, [sp, #32]
 8006650:	46b8      	mov	r8, r7
 8006652:	2b00      	cmp	r3, #0
 8006654:	dc20      	bgt.n	8006698 <_dtoa_r+0x968>
 8006656:	469b      	mov	fp, r3
 8006658:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800665a:	2b02      	cmp	r3, #2
 800665c:	dd1e      	ble.n	800669c <_dtoa_r+0x96c>
 800665e:	f1bb 0f00 	cmp.w	fp, #0
 8006662:	f47f adb1 	bne.w	80061c8 <_dtoa_r+0x498>
 8006666:	4621      	mov	r1, r4
 8006668:	465b      	mov	r3, fp
 800666a:	2205      	movs	r2, #5
 800666c:	4648      	mov	r0, r9
 800666e:	f000 fa93 	bl	8006b98 <__multadd>
 8006672:	4601      	mov	r1, r0
 8006674:	4604      	mov	r4, r0
 8006676:	9803      	ldr	r0, [sp, #12]
 8006678:	f000 fc9e 	bl	8006fb8 <__mcmp>
 800667c:	2800      	cmp	r0, #0
 800667e:	f77f ada3 	ble.w	80061c8 <_dtoa_r+0x498>
 8006682:	4656      	mov	r6, sl
 8006684:	2331      	movs	r3, #49	@ 0x31
 8006686:	f108 0801 	add.w	r8, r8, #1
 800668a:	f806 3b01 	strb.w	r3, [r6], #1
 800668e:	e59f      	b.n	80061d0 <_dtoa_r+0x4a0>
 8006690:	46b8      	mov	r8, r7
 8006692:	9c08      	ldr	r4, [sp, #32]
 8006694:	4625      	mov	r5, r4
 8006696:	e7f4      	b.n	8006682 <_dtoa_r+0x952>
 8006698:	f8dd b020 	ldr.w	fp, [sp, #32]
 800669c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800669e:	2b00      	cmp	r3, #0
 80066a0:	f000 8101 	beq.w	80068a6 <_dtoa_r+0xb76>
 80066a4:	2e00      	cmp	r6, #0
 80066a6:	dd05      	ble.n	80066b4 <_dtoa_r+0x984>
 80066a8:	4629      	mov	r1, r5
 80066aa:	4632      	mov	r2, r6
 80066ac:	4648      	mov	r0, r9
 80066ae:	f000 fc17 	bl	8006ee0 <__lshift>
 80066b2:	4605      	mov	r5, r0
 80066b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d05c      	beq.n	8006774 <_dtoa_r+0xa44>
 80066ba:	4648      	mov	r0, r9
 80066bc:	6869      	ldr	r1, [r5, #4]
 80066be:	f000 fa09 	bl	8006ad4 <_Balloc>
 80066c2:	4606      	mov	r6, r0
 80066c4:	b928      	cbnz	r0, 80066d2 <_dtoa_r+0x9a2>
 80066c6:	4602      	mov	r2, r0
 80066c8:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80066cc:	4b80      	ldr	r3, [pc, #512]	@ (80068d0 <_dtoa_r+0xba0>)
 80066ce:	f7ff bb43 	b.w	8005d58 <_dtoa_r+0x28>
 80066d2:	692a      	ldr	r2, [r5, #16]
 80066d4:	f105 010c 	add.w	r1, r5, #12
 80066d8:	3202      	adds	r2, #2
 80066da:	0092      	lsls	r2, r2, #2
 80066dc:	300c      	adds	r0, #12
 80066de:	f001 fb29 	bl	8007d34 <memcpy>
 80066e2:	2201      	movs	r2, #1
 80066e4:	4631      	mov	r1, r6
 80066e6:	4648      	mov	r0, r9
 80066e8:	f000 fbfa 	bl	8006ee0 <__lshift>
 80066ec:	462f      	mov	r7, r5
 80066ee:	4605      	mov	r5, r0
 80066f0:	f10a 0301 	add.w	r3, sl, #1
 80066f4:	9304      	str	r3, [sp, #16]
 80066f6:	eb0a 030b 	add.w	r3, sl, fp
 80066fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80066fc:	9b06      	ldr	r3, [sp, #24]
 80066fe:	f003 0301 	and.w	r3, r3, #1
 8006702:	9309      	str	r3, [sp, #36]	@ 0x24
 8006704:	9b04      	ldr	r3, [sp, #16]
 8006706:	4621      	mov	r1, r4
 8006708:	9803      	ldr	r0, [sp, #12]
 800670a:	f103 3bff 	add.w	fp, r3, #4294967295
 800670e:	f7ff fa84 	bl	8005c1a <quorem>
 8006712:	4603      	mov	r3, r0
 8006714:	4639      	mov	r1, r7
 8006716:	3330      	adds	r3, #48	@ 0x30
 8006718:	9006      	str	r0, [sp, #24]
 800671a:	9803      	ldr	r0, [sp, #12]
 800671c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800671e:	f000 fc4b 	bl	8006fb8 <__mcmp>
 8006722:	462a      	mov	r2, r5
 8006724:	9008      	str	r0, [sp, #32]
 8006726:	4621      	mov	r1, r4
 8006728:	4648      	mov	r0, r9
 800672a:	f000 fc61 	bl	8006ff0 <__mdiff>
 800672e:	68c2      	ldr	r2, [r0, #12]
 8006730:	4606      	mov	r6, r0
 8006732:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006734:	bb02      	cbnz	r2, 8006778 <_dtoa_r+0xa48>
 8006736:	4601      	mov	r1, r0
 8006738:	9803      	ldr	r0, [sp, #12]
 800673a:	f000 fc3d 	bl	8006fb8 <__mcmp>
 800673e:	4602      	mov	r2, r0
 8006740:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006742:	4631      	mov	r1, r6
 8006744:	4648      	mov	r0, r9
 8006746:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800674a:	f000 fa03 	bl	8006b54 <_Bfree>
 800674e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006750:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006752:	9e04      	ldr	r6, [sp, #16]
 8006754:	ea42 0103 	orr.w	r1, r2, r3
 8006758:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800675a:	4319      	orrs	r1, r3
 800675c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800675e:	d10d      	bne.n	800677c <_dtoa_r+0xa4c>
 8006760:	2b39      	cmp	r3, #57	@ 0x39
 8006762:	d027      	beq.n	80067b4 <_dtoa_r+0xa84>
 8006764:	9a08      	ldr	r2, [sp, #32]
 8006766:	2a00      	cmp	r2, #0
 8006768:	dd01      	ble.n	800676e <_dtoa_r+0xa3e>
 800676a:	9b06      	ldr	r3, [sp, #24]
 800676c:	3331      	adds	r3, #49	@ 0x31
 800676e:	f88b 3000 	strb.w	r3, [fp]
 8006772:	e52e      	b.n	80061d2 <_dtoa_r+0x4a2>
 8006774:	4628      	mov	r0, r5
 8006776:	e7b9      	b.n	80066ec <_dtoa_r+0x9bc>
 8006778:	2201      	movs	r2, #1
 800677a:	e7e2      	b.n	8006742 <_dtoa_r+0xa12>
 800677c:	9908      	ldr	r1, [sp, #32]
 800677e:	2900      	cmp	r1, #0
 8006780:	db04      	blt.n	800678c <_dtoa_r+0xa5c>
 8006782:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8006784:	4301      	orrs	r1, r0
 8006786:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006788:	4301      	orrs	r1, r0
 800678a:	d120      	bne.n	80067ce <_dtoa_r+0xa9e>
 800678c:	2a00      	cmp	r2, #0
 800678e:	ddee      	ble.n	800676e <_dtoa_r+0xa3e>
 8006790:	2201      	movs	r2, #1
 8006792:	9903      	ldr	r1, [sp, #12]
 8006794:	4648      	mov	r0, r9
 8006796:	9304      	str	r3, [sp, #16]
 8006798:	f000 fba2 	bl	8006ee0 <__lshift>
 800679c:	4621      	mov	r1, r4
 800679e:	9003      	str	r0, [sp, #12]
 80067a0:	f000 fc0a 	bl	8006fb8 <__mcmp>
 80067a4:	2800      	cmp	r0, #0
 80067a6:	9b04      	ldr	r3, [sp, #16]
 80067a8:	dc02      	bgt.n	80067b0 <_dtoa_r+0xa80>
 80067aa:	d1e0      	bne.n	800676e <_dtoa_r+0xa3e>
 80067ac:	07da      	lsls	r2, r3, #31
 80067ae:	d5de      	bpl.n	800676e <_dtoa_r+0xa3e>
 80067b0:	2b39      	cmp	r3, #57	@ 0x39
 80067b2:	d1da      	bne.n	800676a <_dtoa_r+0xa3a>
 80067b4:	2339      	movs	r3, #57	@ 0x39
 80067b6:	f88b 3000 	strb.w	r3, [fp]
 80067ba:	4633      	mov	r3, r6
 80067bc:	461e      	mov	r6, r3
 80067be:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80067c2:	3b01      	subs	r3, #1
 80067c4:	2a39      	cmp	r2, #57	@ 0x39
 80067c6:	d04e      	beq.n	8006866 <_dtoa_r+0xb36>
 80067c8:	3201      	adds	r2, #1
 80067ca:	701a      	strb	r2, [r3, #0]
 80067cc:	e501      	b.n	80061d2 <_dtoa_r+0x4a2>
 80067ce:	2a00      	cmp	r2, #0
 80067d0:	dd03      	ble.n	80067da <_dtoa_r+0xaaa>
 80067d2:	2b39      	cmp	r3, #57	@ 0x39
 80067d4:	d0ee      	beq.n	80067b4 <_dtoa_r+0xa84>
 80067d6:	3301      	adds	r3, #1
 80067d8:	e7c9      	b.n	800676e <_dtoa_r+0xa3e>
 80067da:	9a04      	ldr	r2, [sp, #16]
 80067dc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80067de:	f802 3c01 	strb.w	r3, [r2, #-1]
 80067e2:	428a      	cmp	r2, r1
 80067e4:	d028      	beq.n	8006838 <_dtoa_r+0xb08>
 80067e6:	2300      	movs	r3, #0
 80067e8:	220a      	movs	r2, #10
 80067ea:	9903      	ldr	r1, [sp, #12]
 80067ec:	4648      	mov	r0, r9
 80067ee:	f000 f9d3 	bl	8006b98 <__multadd>
 80067f2:	42af      	cmp	r7, r5
 80067f4:	9003      	str	r0, [sp, #12]
 80067f6:	f04f 0300 	mov.w	r3, #0
 80067fa:	f04f 020a 	mov.w	r2, #10
 80067fe:	4639      	mov	r1, r7
 8006800:	4648      	mov	r0, r9
 8006802:	d107      	bne.n	8006814 <_dtoa_r+0xae4>
 8006804:	f000 f9c8 	bl	8006b98 <__multadd>
 8006808:	4607      	mov	r7, r0
 800680a:	4605      	mov	r5, r0
 800680c:	9b04      	ldr	r3, [sp, #16]
 800680e:	3301      	adds	r3, #1
 8006810:	9304      	str	r3, [sp, #16]
 8006812:	e777      	b.n	8006704 <_dtoa_r+0x9d4>
 8006814:	f000 f9c0 	bl	8006b98 <__multadd>
 8006818:	4629      	mov	r1, r5
 800681a:	4607      	mov	r7, r0
 800681c:	2300      	movs	r3, #0
 800681e:	220a      	movs	r2, #10
 8006820:	4648      	mov	r0, r9
 8006822:	f000 f9b9 	bl	8006b98 <__multadd>
 8006826:	4605      	mov	r5, r0
 8006828:	e7f0      	b.n	800680c <_dtoa_r+0xadc>
 800682a:	f1bb 0f00 	cmp.w	fp, #0
 800682e:	bfcc      	ite	gt
 8006830:	465e      	movgt	r6, fp
 8006832:	2601      	movle	r6, #1
 8006834:	2700      	movs	r7, #0
 8006836:	4456      	add	r6, sl
 8006838:	2201      	movs	r2, #1
 800683a:	9903      	ldr	r1, [sp, #12]
 800683c:	4648      	mov	r0, r9
 800683e:	9304      	str	r3, [sp, #16]
 8006840:	f000 fb4e 	bl	8006ee0 <__lshift>
 8006844:	4621      	mov	r1, r4
 8006846:	9003      	str	r0, [sp, #12]
 8006848:	f000 fbb6 	bl	8006fb8 <__mcmp>
 800684c:	2800      	cmp	r0, #0
 800684e:	dcb4      	bgt.n	80067ba <_dtoa_r+0xa8a>
 8006850:	d102      	bne.n	8006858 <_dtoa_r+0xb28>
 8006852:	9b04      	ldr	r3, [sp, #16]
 8006854:	07db      	lsls	r3, r3, #31
 8006856:	d4b0      	bmi.n	80067ba <_dtoa_r+0xa8a>
 8006858:	4633      	mov	r3, r6
 800685a:	461e      	mov	r6, r3
 800685c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006860:	2a30      	cmp	r2, #48	@ 0x30
 8006862:	d0fa      	beq.n	800685a <_dtoa_r+0xb2a>
 8006864:	e4b5      	b.n	80061d2 <_dtoa_r+0x4a2>
 8006866:	459a      	cmp	sl, r3
 8006868:	d1a8      	bne.n	80067bc <_dtoa_r+0xa8c>
 800686a:	2331      	movs	r3, #49	@ 0x31
 800686c:	f108 0801 	add.w	r8, r8, #1
 8006870:	f88a 3000 	strb.w	r3, [sl]
 8006874:	e4ad      	b.n	80061d2 <_dtoa_r+0x4a2>
 8006876:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006878:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80068d4 <_dtoa_r+0xba4>
 800687c:	b11b      	cbz	r3, 8006886 <_dtoa_r+0xb56>
 800687e:	f10a 0308 	add.w	r3, sl, #8
 8006882:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006884:	6013      	str	r3, [r2, #0]
 8006886:	4650      	mov	r0, sl
 8006888:	b017      	add	sp, #92	@ 0x5c
 800688a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800688e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006890:	2b01      	cmp	r3, #1
 8006892:	f77f ae2e 	ble.w	80064f2 <_dtoa_r+0x7c2>
 8006896:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006898:	930a      	str	r3, [sp, #40]	@ 0x28
 800689a:	2001      	movs	r0, #1
 800689c:	e64d      	b.n	800653a <_dtoa_r+0x80a>
 800689e:	f1bb 0f00 	cmp.w	fp, #0
 80068a2:	f77f aed9 	ble.w	8006658 <_dtoa_r+0x928>
 80068a6:	4656      	mov	r6, sl
 80068a8:	4621      	mov	r1, r4
 80068aa:	9803      	ldr	r0, [sp, #12]
 80068ac:	f7ff f9b5 	bl	8005c1a <quorem>
 80068b0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80068b4:	f806 3b01 	strb.w	r3, [r6], #1
 80068b8:	eba6 020a 	sub.w	r2, r6, sl
 80068bc:	4593      	cmp	fp, r2
 80068be:	ddb4      	ble.n	800682a <_dtoa_r+0xafa>
 80068c0:	2300      	movs	r3, #0
 80068c2:	220a      	movs	r2, #10
 80068c4:	4648      	mov	r0, r9
 80068c6:	9903      	ldr	r1, [sp, #12]
 80068c8:	f000 f966 	bl	8006b98 <__multadd>
 80068cc:	9003      	str	r0, [sp, #12]
 80068ce:	e7eb      	b.n	80068a8 <_dtoa_r+0xb78>
 80068d0:	08008728 	.word	0x08008728
 80068d4:	080086ac 	.word	0x080086ac

080068d8 <_free_r>:
 80068d8:	b538      	push	{r3, r4, r5, lr}
 80068da:	4605      	mov	r5, r0
 80068dc:	2900      	cmp	r1, #0
 80068de:	d040      	beq.n	8006962 <_free_r+0x8a>
 80068e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068e4:	1f0c      	subs	r4, r1, #4
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	bfb8      	it	lt
 80068ea:	18e4      	addlt	r4, r4, r3
 80068ec:	f000 f8e6 	bl	8006abc <__malloc_lock>
 80068f0:	4a1c      	ldr	r2, [pc, #112]	@ (8006964 <_free_r+0x8c>)
 80068f2:	6813      	ldr	r3, [r2, #0]
 80068f4:	b933      	cbnz	r3, 8006904 <_free_r+0x2c>
 80068f6:	6063      	str	r3, [r4, #4]
 80068f8:	6014      	str	r4, [r2, #0]
 80068fa:	4628      	mov	r0, r5
 80068fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006900:	f000 b8e2 	b.w	8006ac8 <__malloc_unlock>
 8006904:	42a3      	cmp	r3, r4
 8006906:	d908      	bls.n	800691a <_free_r+0x42>
 8006908:	6820      	ldr	r0, [r4, #0]
 800690a:	1821      	adds	r1, r4, r0
 800690c:	428b      	cmp	r3, r1
 800690e:	bf01      	itttt	eq
 8006910:	6819      	ldreq	r1, [r3, #0]
 8006912:	685b      	ldreq	r3, [r3, #4]
 8006914:	1809      	addeq	r1, r1, r0
 8006916:	6021      	streq	r1, [r4, #0]
 8006918:	e7ed      	b.n	80068f6 <_free_r+0x1e>
 800691a:	461a      	mov	r2, r3
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	b10b      	cbz	r3, 8006924 <_free_r+0x4c>
 8006920:	42a3      	cmp	r3, r4
 8006922:	d9fa      	bls.n	800691a <_free_r+0x42>
 8006924:	6811      	ldr	r1, [r2, #0]
 8006926:	1850      	adds	r0, r2, r1
 8006928:	42a0      	cmp	r0, r4
 800692a:	d10b      	bne.n	8006944 <_free_r+0x6c>
 800692c:	6820      	ldr	r0, [r4, #0]
 800692e:	4401      	add	r1, r0
 8006930:	1850      	adds	r0, r2, r1
 8006932:	4283      	cmp	r3, r0
 8006934:	6011      	str	r1, [r2, #0]
 8006936:	d1e0      	bne.n	80068fa <_free_r+0x22>
 8006938:	6818      	ldr	r0, [r3, #0]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	4408      	add	r0, r1
 800693e:	6010      	str	r0, [r2, #0]
 8006940:	6053      	str	r3, [r2, #4]
 8006942:	e7da      	b.n	80068fa <_free_r+0x22>
 8006944:	d902      	bls.n	800694c <_free_r+0x74>
 8006946:	230c      	movs	r3, #12
 8006948:	602b      	str	r3, [r5, #0]
 800694a:	e7d6      	b.n	80068fa <_free_r+0x22>
 800694c:	6820      	ldr	r0, [r4, #0]
 800694e:	1821      	adds	r1, r4, r0
 8006950:	428b      	cmp	r3, r1
 8006952:	bf01      	itttt	eq
 8006954:	6819      	ldreq	r1, [r3, #0]
 8006956:	685b      	ldreq	r3, [r3, #4]
 8006958:	1809      	addeq	r1, r1, r0
 800695a:	6021      	streq	r1, [r4, #0]
 800695c:	6063      	str	r3, [r4, #4]
 800695e:	6054      	str	r4, [r2, #4]
 8006960:	e7cb      	b.n	80068fa <_free_r+0x22>
 8006962:	bd38      	pop	{r3, r4, r5, pc}
 8006964:	2000049c 	.word	0x2000049c

08006968 <malloc>:
 8006968:	4b02      	ldr	r3, [pc, #8]	@ (8006974 <malloc+0xc>)
 800696a:	4601      	mov	r1, r0
 800696c:	6818      	ldr	r0, [r3, #0]
 800696e:	f000 b825 	b.w	80069bc <_malloc_r>
 8006972:	bf00      	nop
 8006974:	2000002c 	.word	0x2000002c

08006978 <sbrk_aligned>:
 8006978:	b570      	push	{r4, r5, r6, lr}
 800697a:	4e0f      	ldr	r6, [pc, #60]	@ (80069b8 <sbrk_aligned+0x40>)
 800697c:	460c      	mov	r4, r1
 800697e:	6831      	ldr	r1, [r6, #0]
 8006980:	4605      	mov	r5, r0
 8006982:	b911      	cbnz	r1, 800698a <sbrk_aligned+0x12>
 8006984:	f001 f9c6 	bl	8007d14 <_sbrk_r>
 8006988:	6030      	str	r0, [r6, #0]
 800698a:	4621      	mov	r1, r4
 800698c:	4628      	mov	r0, r5
 800698e:	f001 f9c1 	bl	8007d14 <_sbrk_r>
 8006992:	1c43      	adds	r3, r0, #1
 8006994:	d103      	bne.n	800699e <sbrk_aligned+0x26>
 8006996:	f04f 34ff 	mov.w	r4, #4294967295
 800699a:	4620      	mov	r0, r4
 800699c:	bd70      	pop	{r4, r5, r6, pc}
 800699e:	1cc4      	adds	r4, r0, #3
 80069a0:	f024 0403 	bic.w	r4, r4, #3
 80069a4:	42a0      	cmp	r0, r4
 80069a6:	d0f8      	beq.n	800699a <sbrk_aligned+0x22>
 80069a8:	1a21      	subs	r1, r4, r0
 80069aa:	4628      	mov	r0, r5
 80069ac:	f001 f9b2 	bl	8007d14 <_sbrk_r>
 80069b0:	3001      	adds	r0, #1
 80069b2:	d1f2      	bne.n	800699a <sbrk_aligned+0x22>
 80069b4:	e7ef      	b.n	8006996 <sbrk_aligned+0x1e>
 80069b6:	bf00      	nop
 80069b8:	20000498 	.word	0x20000498

080069bc <_malloc_r>:
 80069bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069c0:	1ccd      	adds	r5, r1, #3
 80069c2:	f025 0503 	bic.w	r5, r5, #3
 80069c6:	3508      	adds	r5, #8
 80069c8:	2d0c      	cmp	r5, #12
 80069ca:	bf38      	it	cc
 80069cc:	250c      	movcc	r5, #12
 80069ce:	2d00      	cmp	r5, #0
 80069d0:	4606      	mov	r6, r0
 80069d2:	db01      	blt.n	80069d8 <_malloc_r+0x1c>
 80069d4:	42a9      	cmp	r1, r5
 80069d6:	d904      	bls.n	80069e2 <_malloc_r+0x26>
 80069d8:	230c      	movs	r3, #12
 80069da:	6033      	str	r3, [r6, #0]
 80069dc:	2000      	movs	r0, #0
 80069de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006ab8 <_malloc_r+0xfc>
 80069e6:	f000 f869 	bl	8006abc <__malloc_lock>
 80069ea:	f8d8 3000 	ldr.w	r3, [r8]
 80069ee:	461c      	mov	r4, r3
 80069f0:	bb44      	cbnz	r4, 8006a44 <_malloc_r+0x88>
 80069f2:	4629      	mov	r1, r5
 80069f4:	4630      	mov	r0, r6
 80069f6:	f7ff ffbf 	bl	8006978 <sbrk_aligned>
 80069fa:	1c43      	adds	r3, r0, #1
 80069fc:	4604      	mov	r4, r0
 80069fe:	d158      	bne.n	8006ab2 <_malloc_r+0xf6>
 8006a00:	f8d8 4000 	ldr.w	r4, [r8]
 8006a04:	4627      	mov	r7, r4
 8006a06:	2f00      	cmp	r7, #0
 8006a08:	d143      	bne.n	8006a92 <_malloc_r+0xd6>
 8006a0a:	2c00      	cmp	r4, #0
 8006a0c:	d04b      	beq.n	8006aa6 <_malloc_r+0xea>
 8006a0e:	6823      	ldr	r3, [r4, #0]
 8006a10:	4639      	mov	r1, r7
 8006a12:	4630      	mov	r0, r6
 8006a14:	eb04 0903 	add.w	r9, r4, r3
 8006a18:	f001 f97c 	bl	8007d14 <_sbrk_r>
 8006a1c:	4581      	cmp	r9, r0
 8006a1e:	d142      	bne.n	8006aa6 <_malloc_r+0xea>
 8006a20:	6821      	ldr	r1, [r4, #0]
 8006a22:	4630      	mov	r0, r6
 8006a24:	1a6d      	subs	r5, r5, r1
 8006a26:	4629      	mov	r1, r5
 8006a28:	f7ff ffa6 	bl	8006978 <sbrk_aligned>
 8006a2c:	3001      	adds	r0, #1
 8006a2e:	d03a      	beq.n	8006aa6 <_malloc_r+0xea>
 8006a30:	6823      	ldr	r3, [r4, #0]
 8006a32:	442b      	add	r3, r5
 8006a34:	6023      	str	r3, [r4, #0]
 8006a36:	f8d8 3000 	ldr.w	r3, [r8]
 8006a3a:	685a      	ldr	r2, [r3, #4]
 8006a3c:	bb62      	cbnz	r2, 8006a98 <_malloc_r+0xdc>
 8006a3e:	f8c8 7000 	str.w	r7, [r8]
 8006a42:	e00f      	b.n	8006a64 <_malloc_r+0xa8>
 8006a44:	6822      	ldr	r2, [r4, #0]
 8006a46:	1b52      	subs	r2, r2, r5
 8006a48:	d420      	bmi.n	8006a8c <_malloc_r+0xd0>
 8006a4a:	2a0b      	cmp	r2, #11
 8006a4c:	d917      	bls.n	8006a7e <_malloc_r+0xc2>
 8006a4e:	1961      	adds	r1, r4, r5
 8006a50:	42a3      	cmp	r3, r4
 8006a52:	6025      	str	r5, [r4, #0]
 8006a54:	bf18      	it	ne
 8006a56:	6059      	strne	r1, [r3, #4]
 8006a58:	6863      	ldr	r3, [r4, #4]
 8006a5a:	bf08      	it	eq
 8006a5c:	f8c8 1000 	streq.w	r1, [r8]
 8006a60:	5162      	str	r2, [r4, r5]
 8006a62:	604b      	str	r3, [r1, #4]
 8006a64:	4630      	mov	r0, r6
 8006a66:	f000 f82f 	bl	8006ac8 <__malloc_unlock>
 8006a6a:	f104 000b 	add.w	r0, r4, #11
 8006a6e:	1d23      	adds	r3, r4, #4
 8006a70:	f020 0007 	bic.w	r0, r0, #7
 8006a74:	1ac2      	subs	r2, r0, r3
 8006a76:	bf1c      	itt	ne
 8006a78:	1a1b      	subne	r3, r3, r0
 8006a7a:	50a3      	strne	r3, [r4, r2]
 8006a7c:	e7af      	b.n	80069de <_malloc_r+0x22>
 8006a7e:	6862      	ldr	r2, [r4, #4]
 8006a80:	42a3      	cmp	r3, r4
 8006a82:	bf0c      	ite	eq
 8006a84:	f8c8 2000 	streq.w	r2, [r8]
 8006a88:	605a      	strne	r2, [r3, #4]
 8006a8a:	e7eb      	b.n	8006a64 <_malloc_r+0xa8>
 8006a8c:	4623      	mov	r3, r4
 8006a8e:	6864      	ldr	r4, [r4, #4]
 8006a90:	e7ae      	b.n	80069f0 <_malloc_r+0x34>
 8006a92:	463c      	mov	r4, r7
 8006a94:	687f      	ldr	r7, [r7, #4]
 8006a96:	e7b6      	b.n	8006a06 <_malloc_r+0x4a>
 8006a98:	461a      	mov	r2, r3
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	42a3      	cmp	r3, r4
 8006a9e:	d1fb      	bne.n	8006a98 <_malloc_r+0xdc>
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	6053      	str	r3, [r2, #4]
 8006aa4:	e7de      	b.n	8006a64 <_malloc_r+0xa8>
 8006aa6:	230c      	movs	r3, #12
 8006aa8:	4630      	mov	r0, r6
 8006aaa:	6033      	str	r3, [r6, #0]
 8006aac:	f000 f80c 	bl	8006ac8 <__malloc_unlock>
 8006ab0:	e794      	b.n	80069dc <_malloc_r+0x20>
 8006ab2:	6005      	str	r5, [r0, #0]
 8006ab4:	e7d6      	b.n	8006a64 <_malloc_r+0xa8>
 8006ab6:	bf00      	nop
 8006ab8:	2000049c 	.word	0x2000049c

08006abc <__malloc_lock>:
 8006abc:	4801      	ldr	r0, [pc, #4]	@ (8006ac4 <__malloc_lock+0x8>)
 8006abe:	f7ff b89c 	b.w	8005bfa <__retarget_lock_acquire_recursive>
 8006ac2:	bf00      	nop
 8006ac4:	20000494 	.word	0x20000494

08006ac8 <__malloc_unlock>:
 8006ac8:	4801      	ldr	r0, [pc, #4]	@ (8006ad0 <__malloc_unlock+0x8>)
 8006aca:	f7ff b897 	b.w	8005bfc <__retarget_lock_release_recursive>
 8006ace:	bf00      	nop
 8006ad0:	20000494 	.word	0x20000494

08006ad4 <_Balloc>:
 8006ad4:	b570      	push	{r4, r5, r6, lr}
 8006ad6:	69c6      	ldr	r6, [r0, #28]
 8006ad8:	4604      	mov	r4, r0
 8006ada:	460d      	mov	r5, r1
 8006adc:	b976      	cbnz	r6, 8006afc <_Balloc+0x28>
 8006ade:	2010      	movs	r0, #16
 8006ae0:	f7ff ff42 	bl	8006968 <malloc>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	61e0      	str	r0, [r4, #28]
 8006ae8:	b920      	cbnz	r0, 8006af4 <_Balloc+0x20>
 8006aea:	216b      	movs	r1, #107	@ 0x6b
 8006aec:	4b17      	ldr	r3, [pc, #92]	@ (8006b4c <_Balloc+0x78>)
 8006aee:	4818      	ldr	r0, [pc, #96]	@ (8006b50 <_Balloc+0x7c>)
 8006af0:	f001 f92e 	bl	8007d50 <__assert_func>
 8006af4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006af8:	6006      	str	r6, [r0, #0]
 8006afa:	60c6      	str	r6, [r0, #12]
 8006afc:	69e6      	ldr	r6, [r4, #28]
 8006afe:	68f3      	ldr	r3, [r6, #12]
 8006b00:	b183      	cbz	r3, 8006b24 <_Balloc+0x50>
 8006b02:	69e3      	ldr	r3, [r4, #28]
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006b0a:	b9b8      	cbnz	r0, 8006b3c <_Balloc+0x68>
 8006b0c:	2101      	movs	r1, #1
 8006b0e:	fa01 f605 	lsl.w	r6, r1, r5
 8006b12:	1d72      	adds	r2, r6, #5
 8006b14:	4620      	mov	r0, r4
 8006b16:	0092      	lsls	r2, r2, #2
 8006b18:	f001 f938 	bl	8007d8c <_calloc_r>
 8006b1c:	b160      	cbz	r0, 8006b38 <_Balloc+0x64>
 8006b1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006b22:	e00e      	b.n	8006b42 <_Balloc+0x6e>
 8006b24:	2221      	movs	r2, #33	@ 0x21
 8006b26:	2104      	movs	r1, #4
 8006b28:	4620      	mov	r0, r4
 8006b2a:	f001 f92f 	bl	8007d8c <_calloc_r>
 8006b2e:	69e3      	ldr	r3, [r4, #28]
 8006b30:	60f0      	str	r0, [r6, #12]
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d1e4      	bne.n	8006b02 <_Balloc+0x2e>
 8006b38:	2000      	movs	r0, #0
 8006b3a:	bd70      	pop	{r4, r5, r6, pc}
 8006b3c:	6802      	ldr	r2, [r0, #0]
 8006b3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006b42:	2300      	movs	r3, #0
 8006b44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006b48:	e7f7      	b.n	8006b3a <_Balloc+0x66>
 8006b4a:	bf00      	nop
 8006b4c:	080086b9 	.word	0x080086b9
 8006b50:	08008739 	.word	0x08008739

08006b54 <_Bfree>:
 8006b54:	b570      	push	{r4, r5, r6, lr}
 8006b56:	69c6      	ldr	r6, [r0, #28]
 8006b58:	4605      	mov	r5, r0
 8006b5a:	460c      	mov	r4, r1
 8006b5c:	b976      	cbnz	r6, 8006b7c <_Bfree+0x28>
 8006b5e:	2010      	movs	r0, #16
 8006b60:	f7ff ff02 	bl	8006968 <malloc>
 8006b64:	4602      	mov	r2, r0
 8006b66:	61e8      	str	r0, [r5, #28]
 8006b68:	b920      	cbnz	r0, 8006b74 <_Bfree+0x20>
 8006b6a:	218f      	movs	r1, #143	@ 0x8f
 8006b6c:	4b08      	ldr	r3, [pc, #32]	@ (8006b90 <_Bfree+0x3c>)
 8006b6e:	4809      	ldr	r0, [pc, #36]	@ (8006b94 <_Bfree+0x40>)
 8006b70:	f001 f8ee 	bl	8007d50 <__assert_func>
 8006b74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006b78:	6006      	str	r6, [r0, #0]
 8006b7a:	60c6      	str	r6, [r0, #12]
 8006b7c:	b13c      	cbz	r4, 8006b8e <_Bfree+0x3a>
 8006b7e:	69eb      	ldr	r3, [r5, #28]
 8006b80:	6862      	ldr	r2, [r4, #4]
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006b88:	6021      	str	r1, [r4, #0]
 8006b8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006b8e:	bd70      	pop	{r4, r5, r6, pc}
 8006b90:	080086b9 	.word	0x080086b9
 8006b94:	08008739 	.word	0x08008739

08006b98 <__multadd>:
 8006b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b9c:	4607      	mov	r7, r0
 8006b9e:	460c      	mov	r4, r1
 8006ba0:	461e      	mov	r6, r3
 8006ba2:	2000      	movs	r0, #0
 8006ba4:	690d      	ldr	r5, [r1, #16]
 8006ba6:	f101 0c14 	add.w	ip, r1, #20
 8006baa:	f8dc 3000 	ldr.w	r3, [ip]
 8006bae:	3001      	adds	r0, #1
 8006bb0:	b299      	uxth	r1, r3
 8006bb2:	fb02 6101 	mla	r1, r2, r1, r6
 8006bb6:	0c1e      	lsrs	r6, r3, #16
 8006bb8:	0c0b      	lsrs	r3, r1, #16
 8006bba:	fb02 3306 	mla	r3, r2, r6, r3
 8006bbe:	b289      	uxth	r1, r1
 8006bc0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006bc4:	4285      	cmp	r5, r0
 8006bc6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006bca:	f84c 1b04 	str.w	r1, [ip], #4
 8006bce:	dcec      	bgt.n	8006baa <__multadd+0x12>
 8006bd0:	b30e      	cbz	r6, 8006c16 <__multadd+0x7e>
 8006bd2:	68a3      	ldr	r3, [r4, #8]
 8006bd4:	42ab      	cmp	r3, r5
 8006bd6:	dc19      	bgt.n	8006c0c <__multadd+0x74>
 8006bd8:	6861      	ldr	r1, [r4, #4]
 8006bda:	4638      	mov	r0, r7
 8006bdc:	3101      	adds	r1, #1
 8006bde:	f7ff ff79 	bl	8006ad4 <_Balloc>
 8006be2:	4680      	mov	r8, r0
 8006be4:	b928      	cbnz	r0, 8006bf2 <__multadd+0x5a>
 8006be6:	4602      	mov	r2, r0
 8006be8:	21ba      	movs	r1, #186	@ 0xba
 8006bea:	4b0c      	ldr	r3, [pc, #48]	@ (8006c1c <__multadd+0x84>)
 8006bec:	480c      	ldr	r0, [pc, #48]	@ (8006c20 <__multadd+0x88>)
 8006bee:	f001 f8af 	bl	8007d50 <__assert_func>
 8006bf2:	6922      	ldr	r2, [r4, #16]
 8006bf4:	f104 010c 	add.w	r1, r4, #12
 8006bf8:	3202      	adds	r2, #2
 8006bfa:	0092      	lsls	r2, r2, #2
 8006bfc:	300c      	adds	r0, #12
 8006bfe:	f001 f899 	bl	8007d34 <memcpy>
 8006c02:	4621      	mov	r1, r4
 8006c04:	4638      	mov	r0, r7
 8006c06:	f7ff ffa5 	bl	8006b54 <_Bfree>
 8006c0a:	4644      	mov	r4, r8
 8006c0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006c10:	3501      	adds	r5, #1
 8006c12:	615e      	str	r6, [r3, #20]
 8006c14:	6125      	str	r5, [r4, #16]
 8006c16:	4620      	mov	r0, r4
 8006c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c1c:	08008728 	.word	0x08008728
 8006c20:	08008739 	.word	0x08008739

08006c24 <__hi0bits>:
 8006c24:	4603      	mov	r3, r0
 8006c26:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006c2a:	bf3a      	itte	cc
 8006c2c:	0403      	lslcc	r3, r0, #16
 8006c2e:	2010      	movcc	r0, #16
 8006c30:	2000      	movcs	r0, #0
 8006c32:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006c36:	bf3c      	itt	cc
 8006c38:	021b      	lslcc	r3, r3, #8
 8006c3a:	3008      	addcc	r0, #8
 8006c3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c40:	bf3c      	itt	cc
 8006c42:	011b      	lslcc	r3, r3, #4
 8006c44:	3004      	addcc	r0, #4
 8006c46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c4a:	bf3c      	itt	cc
 8006c4c:	009b      	lslcc	r3, r3, #2
 8006c4e:	3002      	addcc	r0, #2
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	db05      	blt.n	8006c60 <__hi0bits+0x3c>
 8006c54:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006c58:	f100 0001 	add.w	r0, r0, #1
 8006c5c:	bf08      	it	eq
 8006c5e:	2020      	moveq	r0, #32
 8006c60:	4770      	bx	lr

08006c62 <__lo0bits>:
 8006c62:	6803      	ldr	r3, [r0, #0]
 8006c64:	4602      	mov	r2, r0
 8006c66:	f013 0007 	ands.w	r0, r3, #7
 8006c6a:	d00b      	beq.n	8006c84 <__lo0bits+0x22>
 8006c6c:	07d9      	lsls	r1, r3, #31
 8006c6e:	d421      	bmi.n	8006cb4 <__lo0bits+0x52>
 8006c70:	0798      	lsls	r0, r3, #30
 8006c72:	bf49      	itett	mi
 8006c74:	085b      	lsrmi	r3, r3, #1
 8006c76:	089b      	lsrpl	r3, r3, #2
 8006c78:	2001      	movmi	r0, #1
 8006c7a:	6013      	strmi	r3, [r2, #0]
 8006c7c:	bf5c      	itt	pl
 8006c7e:	2002      	movpl	r0, #2
 8006c80:	6013      	strpl	r3, [r2, #0]
 8006c82:	4770      	bx	lr
 8006c84:	b299      	uxth	r1, r3
 8006c86:	b909      	cbnz	r1, 8006c8c <__lo0bits+0x2a>
 8006c88:	2010      	movs	r0, #16
 8006c8a:	0c1b      	lsrs	r3, r3, #16
 8006c8c:	b2d9      	uxtb	r1, r3
 8006c8e:	b909      	cbnz	r1, 8006c94 <__lo0bits+0x32>
 8006c90:	3008      	adds	r0, #8
 8006c92:	0a1b      	lsrs	r3, r3, #8
 8006c94:	0719      	lsls	r1, r3, #28
 8006c96:	bf04      	itt	eq
 8006c98:	091b      	lsreq	r3, r3, #4
 8006c9a:	3004      	addeq	r0, #4
 8006c9c:	0799      	lsls	r1, r3, #30
 8006c9e:	bf04      	itt	eq
 8006ca0:	089b      	lsreq	r3, r3, #2
 8006ca2:	3002      	addeq	r0, #2
 8006ca4:	07d9      	lsls	r1, r3, #31
 8006ca6:	d403      	bmi.n	8006cb0 <__lo0bits+0x4e>
 8006ca8:	085b      	lsrs	r3, r3, #1
 8006caa:	f100 0001 	add.w	r0, r0, #1
 8006cae:	d003      	beq.n	8006cb8 <__lo0bits+0x56>
 8006cb0:	6013      	str	r3, [r2, #0]
 8006cb2:	4770      	bx	lr
 8006cb4:	2000      	movs	r0, #0
 8006cb6:	4770      	bx	lr
 8006cb8:	2020      	movs	r0, #32
 8006cba:	4770      	bx	lr

08006cbc <__i2b>:
 8006cbc:	b510      	push	{r4, lr}
 8006cbe:	460c      	mov	r4, r1
 8006cc0:	2101      	movs	r1, #1
 8006cc2:	f7ff ff07 	bl	8006ad4 <_Balloc>
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	b928      	cbnz	r0, 8006cd6 <__i2b+0x1a>
 8006cca:	f240 1145 	movw	r1, #325	@ 0x145
 8006cce:	4b04      	ldr	r3, [pc, #16]	@ (8006ce0 <__i2b+0x24>)
 8006cd0:	4804      	ldr	r0, [pc, #16]	@ (8006ce4 <__i2b+0x28>)
 8006cd2:	f001 f83d 	bl	8007d50 <__assert_func>
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	6144      	str	r4, [r0, #20]
 8006cda:	6103      	str	r3, [r0, #16]
 8006cdc:	bd10      	pop	{r4, pc}
 8006cde:	bf00      	nop
 8006ce0:	08008728 	.word	0x08008728
 8006ce4:	08008739 	.word	0x08008739

08006ce8 <__multiply>:
 8006ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cec:	4617      	mov	r7, r2
 8006cee:	690a      	ldr	r2, [r1, #16]
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	4689      	mov	r9, r1
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	bfa2      	ittt	ge
 8006cf8:	463b      	movge	r3, r7
 8006cfa:	460f      	movge	r7, r1
 8006cfc:	4699      	movge	r9, r3
 8006cfe:	693d      	ldr	r5, [r7, #16]
 8006d00:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	6879      	ldr	r1, [r7, #4]
 8006d08:	eb05 060a 	add.w	r6, r5, sl
 8006d0c:	42b3      	cmp	r3, r6
 8006d0e:	b085      	sub	sp, #20
 8006d10:	bfb8      	it	lt
 8006d12:	3101      	addlt	r1, #1
 8006d14:	f7ff fede 	bl	8006ad4 <_Balloc>
 8006d18:	b930      	cbnz	r0, 8006d28 <__multiply+0x40>
 8006d1a:	4602      	mov	r2, r0
 8006d1c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006d20:	4b40      	ldr	r3, [pc, #256]	@ (8006e24 <__multiply+0x13c>)
 8006d22:	4841      	ldr	r0, [pc, #260]	@ (8006e28 <__multiply+0x140>)
 8006d24:	f001 f814 	bl	8007d50 <__assert_func>
 8006d28:	f100 0414 	add.w	r4, r0, #20
 8006d2c:	4623      	mov	r3, r4
 8006d2e:	2200      	movs	r2, #0
 8006d30:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8006d34:	4573      	cmp	r3, lr
 8006d36:	d320      	bcc.n	8006d7a <__multiply+0x92>
 8006d38:	f107 0814 	add.w	r8, r7, #20
 8006d3c:	f109 0114 	add.w	r1, r9, #20
 8006d40:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8006d44:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8006d48:	9302      	str	r3, [sp, #8]
 8006d4a:	1beb      	subs	r3, r5, r7
 8006d4c:	3b15      	subs	r3, #21
 8006d4e:	f023 0303 	bic.w	r3, r3, #3
 8006d52:	3304      	adds	r3, #4
 8006d54:	3715      	adds	r7, #21
 8006d56:	42bd      	cmp	r5, r7
 8006d58:	bf38      	it	cc
 8006d5a:	2304      	movcc	r3, #4
 8006d5c:	9301      	str	r3, [sp, #4]
 8006d5e:	9b02      	ldr	r3, [sp, #8]
 8006d60:	9103      	str	r1, [sp, #12]
 8006d62:	428b      	cmp	r3, r1
 8006d64:	d80c      	bhi.n	8006d80 <__multiply+0x98>
 8006d66:	2e00      	cmp	r6, #0
 8006d68:	dd03      	ble.n	8006d72 <__multiply+0x8a>
 8006d6a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d055      	beq.n	8006e1e <__multiply+0x136>
 8006d72:	6106      	str	r6, [r0, #16]
 8006d74:	b005      	add	sp, #20
 8006d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d7a:	f843 2b04 	str.w	r2, [r3], #4
 8006d7e:	e7d9      	b.n	8006d34 <__multiply+0x4c>
 8006d80:	f8b1 a000 	ldrh.w	sl, [r1]
 8006d84:	f1ba 0f00 	cmp.w	sl, #0
 8006d88:	d01f      	beq.n	8006dca <__multiply+0xe2>
 8006d8a:	46c4      	mov	ip, r8
 8006d8c:	46a1      	mov	r9, r4
 8006d8e:	2700      	movs	r7, #0
 8006d90:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006d94:	f8d9 3000 	ldr.w	r3, [r9]
 8006d98:	fa1f fb82 	uxth.w	fp, r2
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	fb0a 330b 	mla	r3, sl, fp, r3
 8006da2:	443b      	add	r3, r7
 8006da4:	f8d9 7000 	ldr.w	r7, [r9]
 8006da8:	0c12      	lsrs	r2, r2, #16
 8006daa:	0c3f      	lsrs	r7, r7, #16
 8006dac:	fb0a 7202 	mla	r2, sl, r2, r7
 8006db0:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006dba:	4565      	cmp	r5, ip
 8006dbc:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8006dc0:	f849 3b04 	str.w	r3, [r9], #4
 8006dc4:	d8e4      	bhi.n	8006d90 <__multiply+0xa8>
 8006dc6:	9b01      	ldr	r3, [sp, #4]
 8006dc8:	50e7      	str	r7, [r4, r3]
 8006dca:	9b03      	ldr	r3, [sp, #12]
 8006dcc:	3104      	adds	r1, #4
 8006dce:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006dd2:	f1b9 0f00 	cmp.w	r9, #0
 8006dd6:	d020      	beq.n	8006e1a <__multiply+0x132>
 8006dd8:	4647      	mov	r7, r8
 8006dda:	46a4      	mov	ip, r4
 8006ddc:	f04f 0a00 	mov.w	sl, #0
 8006de0:	6823      	ldr	r3, [r4, #0]
 8006de2:	f8b7 b000 	ldrh.w	fp, [r7]
 8006de6:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	fb09 220b 	mla	r2, r9, fp, r2
 8006df0:	4452      	add	r2, sl
 8006df2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006df6:	f84c 3b04 	str.w	r3, [ip], #4
 8006dfa:	f857 3b04 	ldr.w	r3, [r7], #4
 8006dfe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006e02:	f8bc 3000 	ldrh.w	r3, [ip]
 8006e06:	42bd      	cmp	r5, r7
 8006e08:	fb09 330a 	mla	r3, r9, sl, r3
 8006e0c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006e10:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006e14:	d8e5      	bhi.n	8006de2 <__multiply+0xfa>
 8006e16:	9a01      	ldr	r2, [sp, #4]
 8006e18:	50a3      	str	r3, [r4, r2]
 8006e1a:	3404      	adds	r4, #4
 8006e1c:	e79f      	b.n	8006d5e <__multiply+0x76>
 8006e1e:	3e01      	subs	r6, #1
 8006e20:	e7a1      	b.n	8006d66 <__multiply+0x7e>
 8006e22:	bf00      	nop
 8006e24:	08008728 	.word	0x08008728
 8006e28:	08008739 	.word	0x08008739

08006e2c <__pow5mult>:
 8006e2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e30:	4615      	mov	r5, r2
 8006e32:	f012 0203 	ands.w	r2, r2, #3
 8006e36:	4607      	mov	r7, r0
 8006e38:	460e      	mov	r6, r1
 8006e3a:	d007      	beq.n	8006e4c <__pow5mult+0x20>
 8006e3c:	4c25      	ldr	r4, [pc, #148]	@ (8006ed4 <__pow5mult+0xa8>)
 8006e3e:	3a01      	subs	r2, #1
 8006e40:	2300      	movs	r3, #0
 8006e42:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006e46:	f7ff fea7 	bl	8006b98 <__multadd>
 8006e4a:	4606      	mov	r6, r0
 8006e4c:	10ad      	asrs	r5, r5, #2
 8006e4e:	d03d      	beq.n	8006ecc <__pow5mult+0xa0>
 8006e50:	69fc      	ldr	r4, [r7, #28]
 8006e52:	b97c      	cbnz	r4, 8006e74 <__pow5mult+0x48>
 8006e54:	2010      	movs	r0, #16
 8006e56:	f7ff fd87 	bl	8006968 <malloc>
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	61f8      	str	r0, [r7, #28]
 8006e5e:	b928      	cbnz	r0, 8006e6c <__pow5mult+0x40>
 8006e60:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006e64:	4b1c      	ldr	r3, [pc, #112]	@ (8006ed8 <__pow5mult+0xac>)
 8006e66:	481d      	ldr	r0, [pc, #116]	@ (8006edc <__pow5mult+0xb0>)
 8006e68:	f000 ff72 	bl	8007d50 <__assert_func>
 8006e6c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006e70:	6004      	str	r4, [r0, #0]
 8006e72:	60c4      	str	r4, [r0, #12]
 8006e74:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006e78:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006e7c:	b94c      	cbnz	r4, 8006e92 <__pow5mult+0x66>
 8006e7e:	f240 2171 	movw	r1, #625	@ 0x271
 8006e82:	4638      	mov	r0, r7
 8006e84:	f7ff ff1a 	bl	8006cbc <__i2b>
 8006e88:	2300      	movs	r3, #0
 8006e8a:	4604      	mov	r4, r0
 8006e8c:	f8c8 0008 	str.w	r0, [r8, #8]
 8006e90:	6003      	str	r3, [r0, #0]
 8006e92:	f04f 0900 	mov.w	r9, #0
 8006e96:	07eb      	lsls	r3, r5, #31
 8006e98:	d50a      	bpl.n	8006eb0 <__pow5mult+0x84>
 8006e9a:	4631      	mov	r1, r6
 8006e9c:	4622      	mov	r2, r4
 8006e9e:	4638      	mov	r0, r7
 8006ea0:	f7ff ff22 	bl	8006ce8 <__multiply>
 8006ea4:	4680      	mov	r8, r0
 8006ea6:	4631      	mov	r1, r6
 8006ea8:	4638      	mov	r0, r7
 8006eaa:	f7ff fe53 	bl	8006b54 <_Bfree>
 8006eae:	4646      	mov	r6, r8
 8006eb0:	106d      	asrs	r5, r5, #1
 8006eb2:	d00b      	beq.n	8006ecc <__pow5mult+0xa0>
 8006eb4:	6820      	ldr	r0, [r4, #0]
 8006eb6:	b938      	cbnz	r0, 8006ec8 <__pow5mult+0x9c>
 8006eb8:	4622      	mov	r2, r4
 8006eba:	4621      	mov	r1, r4
 8006ebc:	4638      	mov	r0, r7
 8006ebe:	f7ff ff13 	bl	8006ce8 <__multiply>
 8006ec2:	6020      	str	r0, [r4, #0]
 8006ec4:	f8c0 9000 	str.w	r9, [r0]
 8006ec8:	4604      	mov	r4, r0
 8006eca:	e7e4      	b.n	8006e96 <__pow5mult+0x6a>
 8006ecc:	4630      	mov	r0, r6
 8006ece:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ed2:	bf00      	nop
 8006ed4:	08008804 	.word	0x08008804
 8006ed8:	080086b9 	.word	0x080086b9
 8006edc:	08008739 	.word	0x08008739

08006ee0 <__lshift>:
 8006ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ee4:	460c      	mov	r4, r1
 8006ee6:	4607      	mov	r7, r0
 8006ee8:	4691      	mov	r9, r2
 8006eea:	6923      	ldr	r3, [r4, #16]
 8006eec:	6849      	ldr	r1, [r1, #4]
 8006eee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006ef2:	68a3      	ldr	r3, [r4, #8]
 8006ef4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006ef8:	f108 0601 	add.w	r6, r8, #1
 8006efc:	42b3      	cmp	r3, r6
 8006efe:	db0b      	blt.n	8006f18 <__lshift+0x38>
 8006f00:	4638      	mov	r0, r7
 8006f02:	f7ff fde7 	bl	8006ad4 <_Balloc>
 8006f06:	4605      	mov	r5, r0
 8006f08:	b948      	cbnz	r0, 8006f1e <__lshift+0x3e>
 8006f0a:	4602      	mov	r2, r0
 8006f0c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006f10:	4b27      	ldr	r3, [pc, #156]	@ (8006fb0 <__lshift+0xd0>)
 8006f12:	4828      	ldr	r0, [pc, #160]	@ (8006fb4 <__lshift+0xd4>)
 8006f14:	f000 ff1c 	bl	8007d50 <__assert_func>
 8006f18:	3101      	adds	r1, #1
 8006f1a:	005b      	lsls	r3, r3, #1
 8006f1c:	e7ee      	b.n	8006efc <__lshift+0x1c>
 8006f1e:	2300      	movs	r3, #0
 8006f20:	f100 0114 	add.w	r1, r0, #20
 8006f24:	f100 0210 	add.w	r2, r0, #16
 8006f28:	4618      	mov	r0, r3
 8006f2a:	4553      	cmp	r3, sl
 8006f2c:	db33      	blt.n	8006f96 <__lshift+0xb6>
 8006f2e:	6920      	ldr	r0, [r4, #16]
 8006f30:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006f34:	f104 0314 	add.w	r3, r4, #20
 8006f38:	f019 091f 	ands.w	r9, r9, #31
 8006f3c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006f40:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006f44:	d02b      	beq.n	8006f9e <__lshift+0xbe>
 8006f46:	468a      	mov	sl, r1
 8006f48:	2200      	movs	r2, #0
 8006f4a:	f1c9 0e20 	rsb	lr, r9, #32
 8006f4e:	6818      	ldr	r0, [r3, #0]
 8006f50:	fa00 f009 	lsl.w	r0, r0, r9
 8006f54:	4310      	orrs	r0, r2
 8006f56:	f84a 0b04 	str.w	r0, [sl], #4
 8006f5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f5e:	459c      	cmp	ip, r3
 8006f60:	fa22 f20e 	lsr.w	r2, r2, lr
 8006f64:	d8f3      	bhi.n	8006f4e <__lshift+0x6e>
 8006f66:	ebac 0304 	sub.w	r3, ip, r4
 8006f6a:	3b15      	subs	r3, #21
 8006f6c:	f023 0303 	bic.w	r3, r3, #3
 8006f70:	3304      	adds	r3, #4
 8006f72:	f104 0015 	add.w	r0, r4, #21
 8006f76:	4560      	cmp	r0, ip
 8006f78:	bf88      	it	hi
 8006f7a:	2304      	movhi	r3, #4
 8006f7c:	50ca      	str	r2, [r1, r3]
 8006f7e:	b10a      	cbz	r2, 8006f84 <__lshift+0xa4>
 8006f80:	f108 0602 	add.w	r6, r8, #2
 8006f84:	3e01      	subs	r6, #1
 8006f86:	4638      	mov	r0, r7
 8006f88:	4621      	mov	r1, r4
 8006f8a:	612e      	str	r6, [r5, #16]
 8006f8c:	f7ff fde2 	bl	8006b54 <_Bfree>
 8006f90:	4628      	mov	r0, r5
 8006f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f96:	f842 0f04 	str.w	r0, [r2, #4]!
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	e7c5      	b.n	8006f2a <__lshift+0x4a>
 8006f9e:	3904      	subs	r1, #4
 8006fa0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fa4:	459c      	cmp	ip, r3
 8006fa6:	f841 2f04 	str.w	r2, [r1, #4]!
 8006faa:	d8f9      	bhi.n	8006fa0 <__lshift+0xc0>
 8006fac:	e7ea      	b.n	8006f84 <__lshift+0xa4>
 8006fae:	bf00      	nop
 8006fb0:	08008728 	.word	0x08008728
 8006fb4:	08008739 	.word	0x08008739

08006fb8 <__mcmp>:
 8006fb8:	4603      	mov	r3, r0
 8006fba:	690a      	ldr	r2, [r1, #16]
 8006fbc:	6900      	ldr	r0, [r0, #16]
 8006fbe:	b530      	push	{r4, r5, lr}
 8006fc0:	1a80      	subs	r0, r0, r2
 8006fc2:	d10e      	bne.n	8006fe2 <__mcmp+0x2a>
 8006fc4:	3314      	adds	r3, #20
 8006fc6:	3114      	adds	r1, #20
 8006fc8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006fcc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006fd0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006fd4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006fd8:	4295      	cmp	r5, r2
 8006fda:	d003      	beq.n	8006fe4 <__mcmp+0x2c>
 8006fdc:	d205      	bcs.n	8006fea <__mcmp+0x32>
 8006fde:	f04f 30ff 	mov.w	r0, #4294967295
 8006fe2:	bd30      	pop	{r4, r5, pc}
 8006fe4:	42a3      	cmp	r3, r4
 8006fe6:	d3f3      	bcc.n	8006fd0 <__mcmp+0x18>
 8006fe8:	e7fb      	b.n	8006fe2 <__mcmp+0x2a>
 8006fea:	2001      	movs	r0, #1
 8006fec:	e7f9      	b.n	8006fe2 <__mcmp+0x2a>
	...

08006ff0 <__mdiff>:
 8006ff0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ff4:	4689      	mov	r9, r1
 8006ff6:	4606      	mov	r6, r0
 8006ff8:	4611      	mov	r1, r2
 8006ffa:	4648      	mov	r0, r9
 8006ffc:	4614      	mov	r4, r2
 8006ffe:	f7ff ffdb 	bl	8006fb8 <__mcmp>
 8007002:	1e05      	subs	r5, r0, #0
 8007004:	d112      	bne.n	800702c <__mdiff+0x3c>
 8007006:	4629      	mov	r1, r5
 8007008:	4630      	mov	r0, r6
 800700a:	f7ff fd63 	bl	8006ad4 <_Balloc>
 800700e:	4602      	mov	r2, r0
 8007010:	b928      	cbnz	r0, 800701e <__mdiff+0x2e>
 8007012:	f240 2137 	movw	r1, #567	@ 0x237
 8007016:	4b3e      	ldr	r3, [pc, #248]	@ (8007110 <__mdiff+0x120>)
 8007018:	483e      	ldr	r0, [pc, #248]	@ (8007114 <__mdiff+0x124>)
 800701a:	f000 fe99 	bl	8007d50 <__assert_func>
 800701e:	2301      	movs	r3, #1
 8007020:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007024:	4610      	mov	r0, r2
 8007026:	b003      	add	sp, #12
 8007028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800702c:	bfbc      	itt	lt
 800702e:	464b      	movlt	r3, r9
 8007030:	46a1      	movlt	r9, r4
 8007032:	4630      	mov	r0, r6
 8007034:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007038:	bfba      	itte	lt
 800703a:	461c      	movlt	r4, r3
 800703c:	2501      	movlt	r5, #1
 800703e:	2500      	movge	r5, #0
 8007040:	f7ff fd48 	bl	8006ad4 <_Balloc>
 8007044:	4602      	mov	r2, r0
 8007046:	b918      	cbnz	r0, 8007050 <__mdiff+0x60>
 8007048:	f240 2145 	movw	r1, #581	@ 0x245
 800704c:	4b30      	ldr	r3, [pc, #192]	@ (8007110 <__mdiff+0x120>)
 800704e:	e7e3      	b.n	8007018 <__mdiff+0x28>
 8007050:	f100 0b14 	add.w	fp, r0, #20
 8007054:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007058:	f109 0310 	add.w	r3, r9, #16
 800705c:	60c5      	str	r5, [r0, #12]
 800705e:	f04f 0c00 	mov.w	ip, #0
 8007062:	f109 0514 	add.w	r5, r9, #20
 8007066:	46d9      	mov	r9, fp
 8007068:	6926      	ldr	r6, [r4, #16]
 800706a:	f104 0e14 	add.w	lr, r4, #20
 800706e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007072:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007076:	9301      	str	r3, [sp, #4]
 8007078:	9b01      	ldr	r3, [sp, #4]
 800707a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800707e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007082:	b281      	uxth	r1, r0
 8007084:	9301      	str	r3, [sp, #4]
 8007086:	fa1f f38a 	uxth.w	r3, sl
 800708a:	1a5b      	subs	r3, r3, r1
 800708c:	0c00      	lsrs	r0, r0, #16
 800708e:	4463      	add	r3, ip
 8007090:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007094:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007098:	b29b      	uxth	r3, r3
 800709a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800709e:	4576      	cmp	r6, lr
 80070a0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80070a4:	f849 3b04 	str.w	r3, [r9], #4
 80070a8:	d8e6      	bhi.n	8007078 <__mdiff+0x88>
 80070aa:	1b33      	subs	r3, r6, r4
 80070ac:	3b15      	subs	r3, #21
 80070ae:	f023 0303 	bic.w	r3, r3, #3
 80070b2:	3415      	adds	r4, #21
 80070b4:	3304      	adds	r3, #4
 80070b6:	42a6      	cmp	r6, r4
 80070b8:	bf38      	it	cc
 80070ba:	2304      	movcc	r3, #4
 80070bc:	441d      	add	r5, r3
 80070be:	445b      	add	r3, fp
 80070c0:	461e      	mov	r6, r3
 80070c2:	462c      	mov	r4, r5
 80070c4:	4544      	cmp	r4, r8
 80070c6:	d30e      	bcc.n	80070e6 <__mdiff+0xf6>
 80070c8:	f108 0103 	add.w	r1, r8, #3
 80070cc:	1b49      	subs	r1, r1, r5
 80070ce:	f021 0103 	bic.w	r1, r1, #3
 80070d2:	3d03      	subs	r5, #3
 80070d4:	45a8      	cmp	r8, r5
 80070d6:	bf38      	it	cc
 80070d8:	2100      	movcc	r1, #0
 80070da:	440b      	add	r3, r1
 80070dc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80070e0:	b199      	cbz	r1, 800710a <__mdiff+0x11a>
 80070e2:	6117      	str	r7, [r2, #16]
 80070e4:	e79e      	b.n	8007024 <__mdiff+0x34>
 80070e6:	46e6      	mov	lr, ip
 80070e8:	f854 1b04 	ldr.w	r1, [r4], #4
 80070ec:	fa1f fc81 	uxth.w	ip, r1
 80070f0:	44f4      	add	ip, lr
 80070f2:	0c08      	lsrs	r0, r1, #16
 80070f4:	4471      	add	r1, lr
 80070f6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80070fa:	b289      	uxth	r1, r1
 80070fc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007100:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007104:	f846 1b04 	str.w	r1, [r6], #4
 8007108:	e7dc      	b.n	80070c4 <__mdiff+0xd4>
 800710a:	3f01      	subs	r7, #1
 800710c:	e7e6      	b.n	80070dc <__mdiff+0xec>
 800710e:	bf00      	nop
 8007110:	08008728 	.word	0x08008728
 8007114:	08008739 	.word	0x08008739

08007118 <__d2b>:
 8007118:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800711c:	2101      	movs	r1, #1
 800711e:	4690      	mov	r8, r2
 8007120:	4699      	mov	r9, r3
 8007122:	9e08      	ldr	r6, [sp, #32]
 8007124:	f7ff fcd6 	bl	8006ad4 <_Balloc>
 8007128:	4604      	mov	r4, r0
 800712a:	b930      	cbnz	r0, 800713a <__d2b+0x22>
 800712c:	4602      	mov	r2, r0
 800712e:	f240 310f 	movw	r1, #783	@ 0x30f
 8007132:	4b23      	ldr	r3, [pc, #140]	@ (80071c0 <__d2b+0xa8>)
 8007134:	4823      	ldr	r0, [pc, #140]	@ (80071c4 <__d2b+0xac>)
 8007136:	f000 fe0b 	bl	8007d50 <__assert_func>
 800713a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800713e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007142:	b10d      	cbz	r5, 8007148 <__d2b+0x30>
 8007144:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007148:	9301      	str	r3, [sp, #4]
 800714a:	f1b8 0300 	subs.w	r3, r8, #0
 800714e:	d024      	beq.n	800719a <__d2b+0x82>
 8007150:	4668      	mov	r0, sp
 8007152:	9300      	str	r3, [sp, #0]
 8007154:	f7ff fd85 	bl	8006c62 <__lo0bits>
 8007158:	e9dd 1200 	ldrd	r1, r2, [sp]
 800715c:	b1d8      	cbz	r0, 8007196 <__d2b+0x7e>
 800715e:	f1c0 0320 	rsb	r3, r0, #32
 8007162:	fa02 f303 	lsl.w	r3, r2, r3
 8007166:	430b      	orrs	r3, r1
 8007168:	40c2      	lsrs	r2, r0
 800716a:	6163      	str	r3, [r4, #20]
 800716c:	9201      	str	r2, [sp, #4]
 800716e:	9b01      	ldr	r3, [sp, #4]
 8007170:	2b00      	cmp	r3, #0
 8007172:	bf0c      	ite	eq
 8007174:	2201      	moveq	r2, #1
 8007176:	2202      	movne	r2, #2
 8007178:	61a3      	str	r3, [r4, #24]
 800717a:	6122      	str	r2, [r4, #16]
 800717c:	b1ad      	cbz	r5, 80071aa <__d2b+0x92>
 800717e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007182:	4405      	add	r5, r0
 8007184:	6035      	str	r5, [r6, #0]
 8007186:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800718a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800718c:	6018      	str	r0, [r3, #0]
 800718e:	4620      	mov	r0, r4
 8007190:	b002      	add	sp, #8
 8007192:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007196:	6161      	str	r1, [r4, #20]
 8007198:	e7e9      	b.n	800716e <__d2b+0x56>
 800719a:	a801      	add	r0, sp, #4
 800719c:	f7ff fd61 	bl	8006c62 <__lo0bits>
 80071a0:	9b01      	ldr	r3, [sp, #4]
 80071a2:	2201      	movs	r2, #1
 80071a4:	6163      	str	r3, [r4, #20]
 80071a6:	3020      	adds	r0, #32
 80071a8:	e7e7      	b.n	800717a <__d2b+0x62>
 80071aa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80071ae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80071b2:	6030      	str	r0, [r6, #0]
 80071b4:	6918      	ldr	r0, [r3, #16]
 80071b6:	f7ff fd35 	bl	8006c24 <__hi0bits>
 80071ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80071be:	e7e4      	b.n	800718a <__d2b+0x72>
 80071c0:	08008728 	.word	0x08008728
 80071c4:	08008739 	.word	0x08008739

080071c8 <__ssputs_r>:
 80071c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071cc:	461f      	mov	r7, r3
 80071ce:	688e      	ldr	r6, [r1, #8]
 80071d0:	4682      	mov	sl, r0
 80071d2:	42be      	cmp	r6, r7
 80071d4:	460c      	mov	r4, r1
 80071d6:	4690      	mov	r8, r2
 80071d8:	680b      	ldr	r3, [r1, #0]
 80071da:	d82d      	bhi.n	8007238 <__ssputs_r+0x70>
 80071dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80071e0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80071e4:	d026      	beq.n	8007234 <__ssputs_r+0x6c>
 80071e6:	6965      	ldr	r5, [r4, #20]
 80071e8:	6909      	ldr	r1, [r1, #16]
 80071ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80071ee:	eba3 0901 	sub.w	r9, r3, r1
 80071f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80071f6:	1c7b      	adds	r3, r7, #1
 80071f8:	444b      	add	r3, r9
 80071fa:	106d      	asrs	r5, r5, #1
 80071fc:	429d      	cmp	r5, r3
 80071fe:	bf38      	it	cc
 8007200:	461d      	movcc	r5, r3
 8007202:	0553      	lsls	r3, r2, #21
 8007204:	d527      	bpl.n	8007256 <__ssputs_r+0x8e>
 8007206:	4629      	mov	r1, r5
 8007208:	f7ff fbd8 	bl	80069bc <_malloc_r>
 800720c:	4606      	mov	r6, r0
 800720e:	b360      	cbz	r0, 800726a <__ssputs_r+0xa2>
 8007210:	464a      	mov	r2, r9
 8007212:	6921      	ldr	r1, [r4, #16]
 8007214:	f000 fd8e 	bl	8007d34 <memcpy>
 8007218:	89a3      	ldrh	r3, [r4, #12]
 800721a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800721e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007222:	81a3      	strh	r3, [r4, #12]
 8007224:	6126      	str	r6, [r4, #16]
 8007226:	444e      	add	r6, r9
 8007228:	6026      	str	r6, [r4, #0]
 800722a:	463e      	mov	r6, r7
 800722c:	6165      	str	r5, [r4, #20]
 800722e:	eba5 0509 	sub.w	r5, r5, r9
 8007232:	60a5      	str	r5, [r4, #8]
 8007234:	42be      	cmp	r6, r7
 8007236:	d900      	bls.n	800723a <__ssputs_r+0x72>
 8007238:	463e      	mov	r6, r7
 800723a:	4632      	mov	r2, r6
 800723c:	4641      	mov	r1, r8
 800723e:	6820      	ldr	r0, [r4, #0]
 8007240:	f000 fd4d 	bl	8007cde <memmove>
 8007244:	2000      	movs	r0, #0
 8007246:	68a3      	ldr	r3, [r4, #8]
 8007248:	1b9b      	subs	r3, r3, r6
 800724a:	60a3      	str	r3, [r4, #8]
 800724c:	6823      	ldr	r3, [r4, #0]
 800724e:	4433      	add	r3, r6
 8007250:	6023      	str	r3, [r4, #0]
 8007252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007256:	462a      	mov	r2, r5
 8007258:	f000 fdbe 	bl	8007dd8 <_realloc_r>
 800725c:	4606      	mov	r6, r0
 800725e:	2800      	cmp	r0, #0
 8007260:	d1e0      	bne.n	8007224 <__ssputs_r+0x5c>
 8007262:	4650      	mov	r0, sl
 8007264:	6921      	ldr	r1, [r4, #16]
 8007266:	f7ff fb37 	bl	80068d8 <_free_r>
 800726a:	230c      	movs	r3, #12
 800726c:	f8ca 3000 	str.w	r3, [sl]
 8007270:	89a3      	ldrh	r3, [r4, #12]
 8007272:	f04f 30ff 	mov.w	r0, #4294967295
 8007276:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800727a:	81a3      	strh	r3, [r4, #12]
 800727c:	e7e9      	b.n	8007252 <__ssputs_r+0x8a>
	...

08007280 <_svfiprintf_r>:
 8007280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007284:	4698      	mov	r8, r3
 8007286:	898b      	ldrh	r3, [r1, #12]
 8007288:	4607      	mov	r7, r0
 800728a:	061b      	lsls	r3, r3, #24
 800728c:	460d      	mov	r5, r1
 800728e:	4614      	mov	r4, r2
 8007290:	b09d      	sub	sp, #116	@ 0x74
 8007292:	d510      	bpl.n	80072b6 <_svfiprintf_r+0x36>
 8007294:	690b      	ldr	r3, [r1, #16]
 8007296:	b973      	cbnz	r3, 80072b6 <_svfiprintf_r+0x36>
 8007298:	2140      	movs	r1, #64	@ 0x40
 800729a:	f7ff fb8f 	bl	80069bc <_malloc_r>
 800729e:	6028      	str	r0, [r5, #0]
 80072a0:	6128      	str	r0, [r5, #16]
 80072a2:	b930      	cbnz	r0, 80072b2 <_svfiprintf_r+0x32>
 80072a4:	230c      	movs	r3, #12
 80072a6:	603b      	str	r3, [r7, #0]
 80072a8:	f04f 30ff 	mov.w	r0, #4294967295
 80072ac:	b01d      	add	sp, #116	@ 0x74
 80072ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072b2:	2340      	movs	r3, #64	@ 0x40
 80072b4:	616b      	str	r3, [r5, #20]
 80072b6:	2300      	movs	r3, #0
 80072b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80072ba:	2320      	movs	r3, #32
 80072bc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80072c0:	2330      	movs	r3, #48	@ 0x30
 80072c2:	f04f 0901 	mov.w	r9, #1
 80072c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80072ca:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007464 <_svfiprintf_r+0x1e4>
 80072ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80072d2:	4623      	mov	r3, r4
 80072d4:	469a      	mov	sl, r3
 80072d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072da:	b10a      	cbz	r2, 80072e0 <_svfiprintf_r+0x60>
 80072dc:	2a25      	cmp	r2, #37	@ 0x25
 80072de:	d1f9      	bne.n	80072d4 <_svfiprintf_r+0x54>
 80072e0:	ebba 0b04 	subs.w	fp, sl, r4
 80072e4:	d00b      	beq.n	80072fe <_svfiprintf_r+0x7e>
 80072e6:	465b      	mov	r3, fp
 80072e8:	4622      	mov	r2, r4
 80072ea:	4629      	mov	r1, r5
 80072ec:	4638      	mov	r0, r7
 80072ee:	f7ff ff6b 	bl	80071c8 <__ssputs_r>
 80072f2:	3001      	adds	r0, #1
 80072f4:	f000 80a7 	beq.w	8007446 <_svfiprintf_r+0x1c6>
 80072f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80072fa:	445a      	add	r2, fp
 80072fc:	9209      	str	r2, [sp, #36]	@ 0x24
 80072fe:	f89a 3000 	ldrb.w	r3, [sl]
 8007302:	2b00      	cmp	r3, #0
 8007304:	f000 809f 	beq.w	8007446 <_svfiprintf_r+0x1c6>
 8007308:	2300      	movs	r3, #0
 800730a:	f04f 32ff 	mov.w	r2, #4294967295
 800730e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007312:	f10a 0a01 	add.w	sl, sl, #1
 8007316:	9304      	str	r3, [sp, #16]
 8007318:	9307      	str	r3, [sp, #28]
 800731a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800731e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007320:	4654      	mov	r4, sl
 8007322:	2205      	movs	r2, #5
 8007324:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007328:	484e      	ldr	r0, [pc, #312]	@ (8007464 <_svfiprintf_r+0x1e4>)
 800732a:	f7fe fc68 	bl	8005bfe <memchr>
 800732e:	9a04      	ldr	r2, [sp, #16]
 8007330:	b9d8      	cbnz	r0, 800736a <_svfiprintf_r+0xea>
 8007332:	06d0      	lsls	r0, r2, #27
 8007334:	bf44      	itt	mi
 8007336:	2320      	movmi	r3, #32
 8007338:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800733c:	0711      	lsls	r1, r2, #28
 800733e:	bf44      	itt	mi
 8007340:	232b      	movmi	r3, #43	@ 0x2b
 8007342:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007346:	f89a 3000 	ldrb.w	r3, [sl]
 800734a:	2b2a      	cmp	r3, #42	@ 0x2a
 800734c:	d015      	beq.n	800737a <_svfiprintf_r+0xfa>
 800734e:	4654      	mov	r4, sl
 8007350:	2000      	movs	r0, #0
 8007352:	f04f 0c0a 	mov.w	ip, #10
 8007356:	9a07      	ldr	r2, [sp, #28]
 8007358:	4621      	mov	r1, r4
 800735a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800735e:	3b30      	subs	r3, #48	@ 0x30
 8007360:	2b09      	cmp	r3, #9
 8007362:	d94b      	bls.n	80073fc <_svfiprintf_r+0x17c>
 8007364:	b1b0      	cbz	r0, 8007394 <_svfiprintf_r+0x114>
 8007366:	9207      	str	r2, [sp, #28]
 8007368:	e014      	b.n	8007394 <_svfiprintf_r+0x114>
 800736a:	eba0 0308 	sub.w	r3, r0, r8
 800736e:	fa09 f303 	lsl.w	r3, r9, r3
 8007372:	4313      	orrs	r3, r2
 8007374:	46a2      	mov	sl, r4
 8007376:	9304      	str	r3, [sp, #16]
 8007378:	e7d2      	b.n	8007320 <_svfiprintf_r+0xa0>
 800737a:	9b03      	ldr	r3, [sp, #12]
 800737c:	1d19      	adds	r1, r3, #4
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	9103      	str	r1, [sp, #12]
 8007382:	2b00      	cmp	r3, #0
 8007384:	bfbb      	ittet	lt
 8007386:	425b      	neglt	r3, r3
 8007388:	f042 0202 	orrlt.w	r2, r2, #2
 800738c:	9307      	strge	r3, [sp, #28]
 800738e:	9307      	strlt	r3, [sp, #28]
 8007390:	bfb8      	it	lt
 8007392:	9204      	strlt	r2, [sp, #16]
 8007394:	7823      	ldrb	r3, [r4, #0]
 8007396:	2b2e      	cmp	r3, #46	@ 0x2e
 8007398:	d10a      	bne.n	80073b0 <_svfiprintf_r+0x130>
 800739a:	7863      	ldrb	r3, [r4, #1]
 800739c:	2b2a      	cmp	r3, #42	@ 0x2a
 800739e:	d132      	bne.n	8007406 <_svfiprintf_r+0x186>
 80073a0:	9b03      	ldr	r3, [sp, #12]
 80073a2:	3402      	adds	r4, #2
 80073a4:	1d1a      	adds	r2, r3, #4
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	9203      	str	r2, [sp, #12]
 80073aa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80073ae:	9305      	str	r3, [sp, #20]
 80073b0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8007468 <_svfiprintf_r+0x1e8>
 80073b4:	2203      	movs	r2, #3
 80073b6:	4650      	mov	r0, sl
 80073b8:	7821      	ldrb	r1, [r4, #0]
 80073ba:	f7fe fc20 	bl	8005bfe <memchr>
 80073be:	b138      	cbz	r0, 80073d0 <_svfiprintf_r+0x150>
 80073c0:	2240      	movs	r2, #64	@ 0x40
 80073c2:	9b04      	ldr	r3, [sp, #16]
 80073c4:	eba0 000a 	sub.w	r0, r0, sl
 80073c8:	4082      	lsls	r2, r0
 80073ca:	4313      	orrs	r3, r2
 80073cc:	3401      	adds	r4, #1
 80073ce:	9304      	str	r3, [sp, #16]
 80073d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073d4:	2206      	movs	r2, #6
 80073d6:	4825      	ldr	r0, [pc, #148]	@ (800746c <_svfiprintf_r+0x1ec>)
 80073d8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80073dc:	f7fe fc0f 	bl	8005bfe <memchr>
 80073e0:	2800      	cmp	r0, #0
 80073e2:	d036      	beq.n	8007452 <_svfiprintf_r+0x1d2>
 80073e4:	4b22      	ldr	r3, [pc, #136]	@ (8007470 <_svfiprintf_r+0x1f0>)
 80073e6:	bb1b      	cbnz	r3, 8007430 <_svfiprintf_r+0x1b0>
 80073e8:	9b03      	ldr	r3, [sp, #12]
 80073ea:	3307      	adds	r3, #7
 80073ec:	f023 0307 	bic.w	r3, r3, #7
 80073f0:	3308      	adds	r3, #8
 80073f2:	9303      	str	r3, [sp, #12]
 80073f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073f6:	4433      	add	r3, r6
 80073f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80073fa:	e76a      	b.n	80072d2 <_svfiprintf_r+0x52>
 80073fc:	460c      	mov	r4, r1
 80073fe:	2001      	movs	r0, #1
 8007400:	fb0c 3202 	mla	r2, ip, r2, r3
 8007404:	e7a8      	b.n	8007358 <_svfiprintf_r+0xd8>
 8007406:	2300      	movs	r3, #0
 8007408:	f04f 0c0a 	mov.w	ip, #10
 800740c:	4619      	mov	r1, r3
 800740e:	3401      	adds	r4, #1
 8007410:	9305      	str	r3, [sp, #20]
 8007412:	4620      	mov	r0, r4
 8007414:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007418:	3a30      	subs	r2, #48	@ 0x30
 800741a:	2a09      	cmp	r2, #9
 800741c:	d903      	bls.n	8007426 <_svfiprintf_r+0x1a6>
 800741e:	2b00      	cmp	r3, #0
 8007420:	d0c6      	beq.n	80073b0 <_svfiprintf_r+0x130>
 8007422:	9105      	str	r1, [sp, #20]
 8007424:	e7c4      	b.n	80073b0 <_svfiprintf_r+0x130>
 8007426:	4604      	mov	r4, r0
 8007428:	2301      	movs	r3, #1
 800742a:	fb0c 2101 	mla	r1, ip, r1, r2
 800742e:	e7f0      	b.n	8007412 <_svfiprintf_r+0x192>
 8007430:	ab03      	add	r3, sp, #12
 8007432:	9300      	str	r3, [sp, #0]
 8007434:	462a      	mov	r2, r5
 8007436:	4638      	mov	r0, r7
 8007438:	4b0e      	ldr	r3, [pc, #56]	@ (8007474 <_svfiprintf_r+0x1f4>)
 800743a:	a904      	add	r1, sp, #16
 800743c:	f7fd fe4e 	bl	80050dc <_printf_float>
 8007440:	1c42      	adds	r2, r0, #1
 8007442:	4606      	mov	r6, r0
 8007444:	d1d6      	bne.n	80073f4 <_svfiprintf_r+0x174>
 8007446:	89ab      	ldrh	r3, [r5, #12]
 8007448:	065b      	lsls	r3, r3, #25
 800744a:	f53f af2d 	bmi.w	80072a8 <_svfiprintf_r+0x28>
 800744e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007450:	e72c      	b.n	80072ac <_svfiprintf_r+0x2c>
 8007452:	ab03      	add	r3, sp, #12
 8007454:	9300      	str	r3, [sp, #0]
 8007456:	462a      	mov	r2, r5
 8007458:	4638      	mov	r0, r7
 800745a:	4b06      	ldr	r3, [pc, #24]	@ (8007474 <_svfiprintf_r+0x1f4>)
 800745c:	a904      	add	r1, sp, #16
 800745e:	f7fe f8db 	bl	8005618 <_printf_i>
 8007462:	e7ed      	b.n	8007440 <_svfiprintf_r+0x1c0>
 8007464:	08008792 	.word	0x08008792
 8007468:	08008798 	.word	0x08008798
 800746c:	0800879c 	.word	0x0800879c
 8007470:	080050dd 	.word	0x080050dd
 8007474:	080071c9 	.word	0x080071c9

08007478 <_sungetc_r>:
 8007478:	b538      	push	{r3, r4, r5, lr}
 800747a:	1c4b      	adds	r3, r1, #1
 800747c:	4614      	mov	r4, r2
 800747e:	d103      	bne.n	8007488 <_sungetc_r+0x10>
 8007480:	f04f 35ff 	mov.w	r5, #4294967295
 8007484:	4628      	mov	r0, r5
 8007486:	bd38      	pop	{r3, r4, r5, pc}
 8007488:	8993      	ldrh	r3, [r2, #12]
 800748a:	b2cd      	uxtb	r5, r1
 800748c:	f023 0320 	bic.w	r3, r3, #32
 8007490:	8193      	strh	r3, [r2, #12]
 8007492:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007494:	6852      	ldr	r2, [r2, #4]
 8007496:	b18b      	cbz	r3, 80074bc <_sungetc_r+0x44>
 8007498:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800749a:	4293      	cmp	r3, r2
 800749c:	dd08      	ble.n	80074b0 <_sungetc_r+0x38>
 800749e:	6823      	ldr	r3, [r4, #0]
 80074a0:	1e5a      	subs	r2, r3, #1
 80074a2:	6022      	str	r2, [r4, #0]
 80074a4:	f803 5c01 	strb.w	r5, [r3, #-1]
 80074a8:	6863      	ldr	r3, [r4, #4]
 80074aa:	3301      	adds	r3, #1
 80074ac:	6063      	str	r3, [r4, #4]
 80074ae:	e7e9      	b.n	8007484 <_sungetc_r+0xc>
 80074b0:	4621      	mov	r1, r4
 80074b2:	f000 fbdc 	bl	8007c6e <__submore>
 80074b6:	2800      	cmp	r0, #0
 80074b8:	d0f1      	beq.n	800749e <_sungetc_r+0x26>
 80074ba:	e7e1      	b.n	8007480 <_sungetc_r+0x8>
 80074bc:	6921      	ldr	r1, [r4, #16]
 80074be:	6823      	ldr	r3, [r4, #0]
 80074c0:	b151      	cbz	r1, 80074d8 <_sungetc_r+0x60>
 80074c2:	4299      	cmp	r1, r3
 80074c4:	d208      	bcs.n	80074d8 <_sungetc_r+0x60>
 80074c6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80074ca:	42a9      	cmp	r1, r5
 80074cc:	d104      	bne.n	80074d8 <_sungetc_r+0x60>
 80074ce:	3b01      	subs	r3, #1
 80074d0:	3201      	adds	r2, #1
 80074d2:	6023      	str	r3, [r4, #0]
 80074d4:	6062      	str	r2, [r4, #4]
 80074d6:	e7d5      	b.n	8007484 <_sungetc_r+0xc>
 80074d8:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 80074dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80074e0:	6363      	str	r3, [r4, #52]	@ 0x34
 80074e2:	2303      	movs	r3, #3
 80074e4:	63a3      	str	r3, [r4, #56]	@ 0x38
 80074e6:	4623      	mov	r3, r4
 80074e8:	f803 5f46 	strb.w	r5, [r3, #70]!
 80074ec:	6023      	str	r3, [r4, #0]
 80074ee:	2301      	movs	r3, #1
 80074f0:	e7dc      	b.n	80074ac <_sungetc_r+0x34>

080074f2 <__ssrefill_r>:
 80074f2:	b510      	push	{r4, lr}
 80074f4:	460c      	mov	r4, r1
 80074f6:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80074f8:	b169      	cbz	r1, 8007516 <__ssrefill_r+0x24>
 80074fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80074fe:	4299      	cmp	r1, r3
 8007500:	d001      	beq.n	8007506 <__ssrefill_r+0x14>
 8007502:	f7ff f9e9 	bl	80068d8 <_free_r>
 8007506:	2000      	movs	r0, #0
 8007508:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800750a:	6360      	str	r0, [r4, #52]	@ 0x34
 800750c:	6063      	str	r3, [r4, #4]
 800750e:	b113      	cbz	r3, 8007516 <__ssrefill_r+0x24>
 8007510:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007512:	6023      	str	r3, [r4, #0]
 8007514:	bd10      	pop	{r4, pc}
 8007516:	6923      	ldr	r3, [r4, #16]
 8007518:	f04f 30ff 	mov.w	r0, #4294967295
 800751c:	6023      	str	r3, [r4, #0]
 800751e:	2300      	movs	r3, #0
 8007520:	6063      	str	r3, [r4, #4]
 8007522:	89a3      	ldrh	r3, [r4, #12]
 8007524:	f043 0320 	orr.w	r3, r3, #32
 8007528:	81a3      	strh	r3, [r4, #12]
 800752a:	e7f3      	b.n	8007514 <__ssrefill_r+0x22>

0800752c <__ssvfiscanf_r>:
 800752c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007530:	460c      	mov	r4, r1
 8007532:	2100      	movs	r1, #0
 8007534:	4606      	mov	r6, r0
 8007536:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800753a:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800753e:	49ab      	ldr	r1, [pc, #684]	@ (80077ec <__ssvfiscanf_r+0x2c0>)
 8007540:	f10d 0804 	add.w	r8, sp, #4
 8007544:	91a0      	str	r1, [sp, #640]	@ 0x280
 8007546:	49aa      	ldr	r1, [pc, #680]	@ (80077f0 <__ssvfiscanf_r+0x2c4>)
 8007548:	4faa      	ldr	r7, [pc, #680]	@ (80077f4 <__ssvfiscanf_r+0x2c8>)
 800754a:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800754e:	91a1      	str	r1, [sp, #644]	@ 0x284
 8007550:	9300      	str	r3, [sp, #0]
 8007552:	f892 9000 	ldrb.w	r9, [r2]
 8007556:	f1b9 0f00 	cmp.w	r9, #0
 800755a:	f000 8159 	beq.w	8007810 <__ssvfiscanf_r+0x2e4>
 800755e:	f817 3009 	ldrb.w	r3, [r7, r9]
 8007562:	1c55      	adds	r5, r2, #1
 8007564:	f013 0308 	ands.w	r3, r3, #8
 8007568:	d019      	beq.n	800759e <__ssvfiscanf_r+0x72>
 800756a:	6863      	ldr	r3, [r4, #4]
 800756c:	2b00      	cmp	r3, #0
 800756e:	dd0f      	ble.n	8007590 <__ssvfiscanf_r+0x64>
 8007570:	6823      	ldr	r3, [r4, #0]
 8007572:	781a      	ldrb	r2, [r3, #0]
 8007574:	5cba      	ldrb	r2, [r7, r2]
 8007576:	0712      	lsls	r2, r2, #28
 8007578:	d401      	bmi.n	800757e <__ssvfiscanf_r+0x52>
 800757a:	462a      	mov	r2, r5
 800757c:	e7e9      	b.n	8007552 <__ssvfiscanf_r+0x26>
 800757e:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8007580:	3301      	adds	r3, #1
 8007582:	3201      	adds	r2, #1
 8007584:	9245      	str	r2, [sp, #276]	@ 0x114
 8007586:	6862      	ldr	r2, [r4, #4]
 8007588:	6023      	str	r3, [r4, #0]
 800758a:	3a01      	subs	r2, #1
 800758c:	6062      	str	r2, [r4, #4]
 800758e:	e7ec      	b.n	800756a <__ssvfiscanf_r+0x3e>
 8007590:	4621      	mov	r1, r4
 8007592:	4630      	mov	r0, r6
 8007594:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8007596:	4798      	blx	r3
 8007598:	2800      	cmp	r0, #0
 800759a:	d0e9      	beq.n	8007570 <__ssvfiscanf_r+0x44>
 800759c:	e7ed      	b.n	800757a <__ssvfiscanf_r+0x4e>
 800759e:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 80075a2:	f040 8086 	bne.w	80076b2 <__ssvfiscanf_r+0x186>
 80075a6:	9341      	str	r3, [sp, #260]	@ 0x104
 80075a8:	9343      	str	r3, [sp, #268]	@ 0x10c
 80075aa:	7853      	ldrb	r3, [r2, #1]
 80075ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80075ae:	bf04      	itt	eq
 80075b0:	2310      	moveq	r3, #16
 80075b2:	1c95      	addeq	r5, r2, #2
 80075b4:	f04f 020a 	mov.w	r2, #10
 80075b8:	bf08      	it	eq
 80075ba:	9341      	streq	r3, [sp, #260]	@ 0x104
 80075bc:	46aa      	mov	sl, r5
 80075be:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80075c2:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80075c6:	2b09      	cmp	r3, #9
 80075c8:	d91e      	bls.n	8007608 <__ssvfiscanf_r+0xdc>
 80075ca:	f8df b22c 	ldr.w	fp, [pc, #556]	@ 80077f8 <__ssvfiscanf_r+0x2cc>
 80075ce:	2203      	movs	r2, #3
 80075d0:	4658      	mov	r0, fp
 80075d2:	f7fe fb14 	bl	8005bfe <memchr>
 80075d6:	b138      	cbz	r0, 80075e8 <__ssvfiscanf_r+0xbc>
 80075d8:	2301      	movs	r3, #1
 80075da:	4655      	mov	r5, sl
 80075dc:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80075de:	eba0 000b 	sub.w	r0, r0, fp
 80075e2:	4083      	lsls	r3, r0
 80075e4:	4313      	orrs	r3, r2
 80075e6:	9341      	str	r3, [sp, #260]	@ 0x104
 80075e8:	f815 3b01 	ldrb.w	r3, [r5], #1
 80075ec:	2b78      	cmp	r3, #120	@ 0x78
 80075ee:	d806      	bhi.n	80075fe <__ssvfiscanf_r+0xd2>
 80075f0:	2b57      	cmp	r3, #87	@ 0x57
 80075f2:	d810      	bhi.n	8007616 <__ssvfiscanf_r+0xea>
 80075f4:	2b25      	cmp	r3, #37	@ 0x25
 80075f6:	d05c      	beq.n	80076b2 <__ssvfiscanf_r+0x186>
 80075f8:	d856      	bhi.n	80076a8 <__ssvfiscanf_r+0x17c>
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d074      	beq.n	80076e8 <__ssvfiscanf_r+0x1bc>
 80075fe:	2303      	movs	r3, #3
 8007600:	9347      	str	r3, [sp, #284]	@ 0x11c
 8007602:	230a      	movs	r3, #10
 8007604:	9342      	str	r3, [sp, #264]	@ 0x108
 8007606:	e087      	b.n	8007718 <__ssvfiscanf_r+0x1ec>
 8007608:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800760a:	4655      	mov	r5, sl
 800760c:	fb02 1103 	mla	r1, r2, r3, r1
 8007610:	3930      	subs	r1, #48	@ 0x30
 8007612:	9143      	str	r1, [sp, #268]	@ 0x10c
 8007614:	e7d2      	b.n	80075bc <__ssvfiscanf_r+0x90>
 8007616:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800761a:	2a20      	cmp	r2, #32
 800761c:	d8ef      	bhi.n	80075fe <__ssvfiscanf_r+0xd2>
 800761e:	a101      	add	r1, pc, #4	@ (adr r1, 8007624 <__ssvfiscanf_r+0xf8>)
 8007620:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007624:	080076f7 	.word	0x080076f7
 8007628:	080075ff 	.word	0x080075ff
 800762c:	080075ff 	.word	0x080075ff
 8007630:	08007751 	.word	0x08007751
 8007634:	080075ff 	.word	0x080075ff
 8007638:	080075ff 	.word	0x080075ff
 800763c:	080075ff 	.word	0x080075ff
 8007640:	080075ff 	.word	0x080075ff
 8007644:	080075ff 	.word	0x080075ff
 8007648:	080075ff 	.word	0x080075ff
 800764c:	080075ff 	.word	0x080075ff
 8007650:	08007767 	.word	0x08007767
 8007654:	0800774d 	.word	0x0800774d
 8007658:	080076af 	.word	0x080076af
 800765c:	080076af 	.word	0x080076af
 8007660:	080076af 	.word	0x080076af
 8007664:	080075ff 	.word	0x080075ff
 8007668:	08007709 	.word	0x08007709
 800766c:	080075ff 	.word	0x080075ff
 8007670:	080075ff 	.word	0x080075ff
 8007674:	080075ff 	.word	0x080075ff
 8007678:	080075ff 	.word	0x080075ff
 800767c:	08007777 	.word	0x08007777
 8007680:	08007711 	.word	0x08007711
 8007684:	080076ef 	.word	0x080076ef
 8007688:	080075ff 	.word	0x080075ff
 800768c:	080075ff 	.word	0x080075ff
 8007690:	08007773 	.word	0x08007773
 8007694:	080075ff 	.word	0x080075ff
 8007698:	0800774d 	.word	0x0800774d
 800769c:	080075ff 	.word	0x080075ff
 80076a0:	080075ff 	.word	0x080075ff
 80076a4:	080076f7 	.word	0x080076f7
 80076a8:	3b45      	subs	r3, #69	@ 0x45
 80076aa:	2b02      	cmp	r3, #2
 80076ac:	d8a7      	bhi.n	80075fe <__ssvfiscanf_r+0xd2>
 80076ae:	2305      	movs	r3, #5
 80076b0:	e031      	b.n	8007716 <__ssvfiscanf_r+0x1ea>
 80076b2:	6863      	ldr	r3, [r4, #4]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	dd0d      	ble.n	80076d4 <__ssvfiscanf_r+0x1a8>
 80076b8:	6823      	ldr	r3, [r4, #0]
 80076ba:	781a      	ldrb	r2, [r3, #0]
 80076bc:	454a      	cmp	r2, r9
 80076be:	f040 80a7 	bne.w	8007810 <__ssvfiscanf_r+0x2e4>
 80076c2:	3301      	adds	r3, #1
 80076c4:	6862      	ldr	r2, [r4, #4]
 80076c6:	6023      	str	r3, [r4, #0]
 80076c8:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80076ca:	3a01      	subs	r2, #1
 80076cc:	3301      	adds	r3, #1
 80076ce:	6062      	str	r2, [r4, #4]
 80076d0:	9345      	str	r3, [sp, #276]	@ 0x114
 80076d2:	e752      	b.n	800757a <__ssvfiscanf_r+0x4e>
 80076d4:	4621      	mov	r1, r4
 80076d6:	4630      	mov	r0, r6
 80076d8:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80076da:	4798      	blx	r3
 80076dc:	2800      	cmp	r0, #0
 80076de:	d0eb      	beq.n	80076b8 <__ssvfiscanf_r+0x18c>
 80076e0:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80076e2:	2800      	cmp	r0, #0
 80076e4:	f040 808c 	bne.w	8007800 <__ssvfiscanf_r+0x2d4>
 80076e8:	f04f 30ff 	mov.w	r0, #4294967295
 80076ec:	e08c      	b.n	8007808 <__ssvfiscanf_r+0x2dc>
 80076ee:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80076f0:	f042 0220 	orr.w	r2, r2, #32
 80076f4:	9241      	str	r2, [sp, #260]	@ 0x104
 80076f6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80076f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80076fc:	9241      	str	r2, [sp, #260]	@ 0x104
 80076fe:	2210      	movs	r2, #16
 8007700:	2b6e      	cmp	r3, #110	@ 0x6e
 8007702:	9242      	str	r2, [sp, #264]	@ 0x108
 8007704:	d902      	bls.n	800770c <__ssvfiscanf_r+0x1e0>
 8007706:	e005      	b.n	8007714 <__ssvfiscanf_r+0x1e8>
 8007708:	2300      	movs	r3, #0
 800770a:	9342      	str	r3, [sp, #264]	@ 0x108
 800770c:	2303      	movs	r3, #3
 800770e:	e002      	b.n	8007716 <__ssvfiscanf_r+0x1ea>
 8007710:	2308      	movs	r3, #8
 8007712:	9342      	str	r3, [sp, #264]	@ 0x108
 8007714:	2304      	movs	r3, #4
 8007716:	9347      	str	r3, [sp, #284]	@ 0x11c
 8007718:	6863      	ldr	r3, [r4, #4]
 800771a:	2b00      	cmp	r3, #0
 800771c:	dd39      	ble.n	8007792 <__ssvfiscanf_r+0x266>
 800771e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8007720:	0659      	lsls	r1, r3, #25
 8007722:	d404      	bmi.n	800772e <__ssvfiscanf_r+0x202>
 8007724:	6823      	ldr	r3, [r4, #0]
 8007726:	781a      	ldrb	r2, [r3, #0]
 8007728:	5cba      	ldrb	r2, [r7, r2]
 800772a:	0712      	lsls	r2, r2, #28
 800772c:	d438      	bmi.n	80077a0 <__ssvfiscanf_r+0x274>
 800772e:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8007730:	2b02      	cmp	r3, #2
 8007732:	dc47      	bgt.n	80077c4 <__ssvfiscanf_r+0x298>
 8007734:	466b      	mov	r3, sp
 8007736:	4622      	mov	r2, r4
 8007738:	4630      	mov	r0, r6
 800773a:	a941      	add	r1, sp, #260	@ 0x104
 800773c:	f000 f86a 	bl	8007814 <_scanf_chars>
 8007740:	2801      	cmp	r0, #1
 8007742:	d065      	beq.n	8007810 <__ssvfiscanf_r+0x2e4>
 8007744:	2802      	cmp	r0, #2
 8007746:	f47f af18 	bne.w	800757a <__ssvfiscanf_r+0x4e>
 800774a:	e7c9      	b.n	80076e0 <__ssvfiscanf_r+0x1b4>
 800774c:	220a      	movs	r2, #10
 800774e:	e7d7      	b.n	8007700 <__ssvfiscanf_r+0x1d4>
 8007750:	4629      	mov	r1, r5
 8007752:	4640      	mov	r0, r8
 8007754:	f000 fa52 	bl	8007bfc <__sccl>
 8007758:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800775a:	4605      	mov	r5, r0
 800775c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007760:	9341      	str	r3, [sp, #260]	@ 0x104
 8007762:	2301      	movs	r3, #1
 8007764:	e7d7      	b.n	8007716 <__ssvfiscanf_r+0x1ea>
 8007766:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8007768:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800776c:	9341      	str	r3, [sp, #260]	@ 0x104
 800776e:	2300      	movs	r3, #0
 8007770:	e7d1      	b.n	8007716 <__ssvfiscanf_r+0x1ea>
 8007772:	2302      	movs	r3, #2
 8007774:	e7cf      	b.n	8007716 <__ssvfiscanf_r+0x1ea>
 8007776:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8007778:	06c3      	lsls	r3, r0, #27
 800777a:	f53f aefe 	bmi.w	800757a <__ssvfiscanf_r+0x4e>
 800777e:	9b00      	ldr	r3, [sp, #0]
 8007780:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8007782:	1d19      	adds	r1, r3, #4
 8007784:	9100      	str	r1, [sp, #0]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	07c0      	lsls	r0, r0, #31
 800778a:	bf4c      	ite	mi
 800778c:	801a      	strhmi	r2, [r3, #0]
 800778e:	601a      	strpl	r2, [r3, #0]
 8007790:	e6f3      	b.n	800757a <__ssvfiscanf_r+0x4e>
 8007792:	4621      	mov	r1, r4
 8007794:	4630      	mov	r0, r6
 8007796:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8007798:	4798      	blx	r3
 800779a:	2800      	cmp	r0, #0
 800779c:	d0bf      	beq.n	800771e <__ssvfiscanf_r+0x1f2>
 800779e:	e79f      	b.n	80076e0 <__ssvfiscanf_r+0x1b4>
 80077a0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80077a2:	3201      	adds	r2, #1
 80077a4:	9245      	str	r2, [sp, #276]	@ 0x114
 80077a6:	6862      	ldr	r2, [r4, #4]
 80077a8:	3a01      	subs	r2, #1
 80077aa:	2a00      	cmp	r2, #0
 80077ac:	6062      	str	r2, [r4, #4]
 80077ae:	dd02      	ble.n	80077b6 <__ssvfiscanf_r+0x28a>
 80077b0:	3301      	adds	r3, #1
 80077b2:	6023      	str	r3, [r4, #0]
 80077b4:	e7b6      	b.n	8007724 <__ssvfiscanf_r+0x1f8>
 80077b6:	4621      	mov	r1, r4
 80077b8:	4630      	mov	r0, r6
 80077ba:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80077bc:	4798      	blx	r3
 80077be:	2800      	cmp	r0, #0
 80077c0:	d0b0      	beq.n	8007724 <__ssvfiscanf_r+0x1f8>
 80077c2:	e78d      	b.n	80076e0 <__ssvfiscanf_r+0x1b4>
 80077c4:	2b04      	cmp	r3, #4
 80077c6:	dc06      	bgt.n	80077d6 <__ssvfiscanf_r+0x2aa>
 80077c8:	466b      	mov	r3, sp
 80077ca:	4622      	mov	r2, r4
 80077cc:	4630      	mov	r0, r6
 80077ce:	a941      	add	r1, sp, #260	@ 0x104
 80077d0:	f000 f87a 	bl	80078c8 <_scanf_i>
 80077d4:	e7b4      	b.n	8007740 <__ssvfiscanf_r+0x214>
 80077d6:	4b09      	ldr	r3, [pc, #36]	@ (80077fc <__ssvfiscanf_r+0x2d0>)
 80077d8:	2b00      	cmp	r3, #0
 80077da:	f43f aece 	beq.w	800757a <__ssvfiscanf_r+0x4e>
 80077de:	466b      	mov	r3, sp
 80077e0:	4622      	mov	r2, r4
 80077e2:	4630      	mov	r0, r6
 80077e4:	a941      	add	r1, sp, #260	@ 0x104
 80077e6:	f3af 8000 	nop.w
 80077ea:	e7a9      	b.n	8007740 <__ssvfiscanf_r+0x214>
 80077ec:	08007479 	.word	0x08007479
 80077f0:	080074f3 	.word	0x080074f3
 80077f4:	08008901 	.word	0x08008901
 80077f8:	08008798 	.word	0x08008798
 80077fc:	00000000 	.word	0x00000000
 8007800:	89a3      	ldrh	r3, [r4, #12]
 8007802:	065b      	lsls	r3, r3, #25
 8007804:	f53f af70 	bmi.w	80076e8 <__ssvfiscanf_r+0x1bc>
 8007808:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 800780c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007810:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8007812:	e7f9      	b.n	8007808 <__ssvfiscanf_r+0x2dc>

08007814 <_scanf_chars>:
 8007814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007818:	4615      	mov	r5, r2
 800781a:	688a      	ldr	r2, [r1, #8]
 800781c:	4680      	mov	r8, r0
 800781e:	460c      	mov	r4, r1
 8007820:	b932      	cbnz	r2, 8007830 <_scanf_chars+0x1c>
 8007822:	698a      	ldr	r2, [r1, #24]
 8007824:	2a00      	cmp	r2, #0
 8007826:	bf14      	ite	ne
 8007828:	f04f 32ff 	movne.w	r2, #4294967295
 800782c:	2201      	moveq	r2, #1
 800782e:	608a      	str	r2, [r1, #8]
 8007830:	2700      	movs	r7, #0
 8007832:	6822      	ldr	r2, [r4, #0]
 8007834:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 80078c4 <_scanf_chars+0xb0>
 8007838:	06d1      	lsls	r1, r2, #27
 800783a:	bf5f      	itttt	pl
 800783c:	681a      	ldrpl	r2, [r3, #0]
 800783e:	1d11      	addpl	r1, r2, #4
 8007840:	6019      	strpl	r1, [r3, #0]
 8007842:	6816      	ldrpl	r6, [r2, #0]
 8007844:	69a0      	ldr	r0, [r4, #24]
 8007846:	b188      	cbz	r0, 800786c <_scanf_chars+0x58>
 8007848:	2801      	cmp	r0, #1
 800784a:	d107      	bne.n	800785c <_scanf_chars+0x48>
 800784c:	682b      	ldr	r3, [r5, #0]
 800784e:	781a      	ldrb	r2, [r3, #0]
 8007850:	6963      	ldr	r3, [r4, #20]
 8007852:	5c9b      	ldrb	r3, [r3, r2]
 8007854:	b953      	cbnz	r3, 800786c <_scanf_chars+0x58>
 8007856:	2f00      	cmp	r7, #0
 8007858:	d031      	beq.n	80078be <_scanf_chars+0xaa>
 800785a:	e022      	b.n	80078a2 <_scanf_chars+0x8e>
 800785c:	2802      	cmp	r0, #2
 800785e:	d120      	bne.n	80078a2 <_scanf_chars+0x8e>
 8007860:	682b      	ldr	r3, [r5, #0]
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	f819 3003 	ldrb.w	r3, [r9, r3]
 8007868:	071b      	lsls	r3, r3, #28
 800786a:	d41a      	bmi.n	80078a2 <_scanf_chars+0x8e>
 800786c:	6823      	ldr	r3, [r4, #0]
 800786e:	3701      	adds	r7, #1
 8007870:	06da      	lsls	r2, r3, #27
 8007872:	bf5e      	ittt	pl
 8007874:	682b      	ldrpl	r3, [r5, #0]
 8007876:	781b      	ldrbpl	r3, [r3, #0]
 8007878:	f806 3b01 	strbpl.w	r3, [r6], #1
 800787c:	682a      	ldr	r2, [r5, #0]
 800787e:	686b      	ldr	r3, [r5, #4]
 8007880:	3201      	adds	r2, #1
 8007882:	602a      	str	r2, [r5, #0]
 8007884:	68a2      	ldr	r2, [r4, #8]
 8007886:	3b01      	subs	r3, #1
 8007888:	3a01      	subs	r2, #1
 800788a:	606b      	str	r3, [r5, #4]
 800788c:	60a2      	str	r2, [r4, #8]
 800788e:	b142      	cbz	r2, 80078a2 <_scanf_chars+0x8e>
 8007890:	2b00      	cmp	r3, #0
 8007892:	dcd7      	bgt.n	8007844 <_scanf_chars+0x30>
 8007894:	4629      	mov	r1, r5
 8007896:	4640      	mov	r0, r8
 8007898:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800789c:	4798      	blx	r3
 800789e:	2800      	cmp	r0, #0
 80078a0:	d0d0      	beq.n	8007844 <_scanf_chars+0x30>
 80078a2:	6823      	ldr	r3, [r4, #0]
 80078a4:	f013 0310 	ands.w	r3, r3, #16
 80078a8:	d105      	bne.n	80078b6 <_scanf_chars+0xa2>
 80078aa:	68e2      	ldr	r2, [r4, #12]
 80078ac:	3201      	adds	r2, #1
 80078ae:	60e2      	str	r2, [r4, #12]
 80078b0:	69a2      	ldr	r2, [r4, #24]
 80078b2:	b102      	cbz	r2, 80078b6 <_scanf_chars+0xa2>
 80078b4:	7033      	strb	r3, [r6, #0]
 80078b6:	2000      	movs	r0, #0
 80078b8:	6923      	ldr	r3, [r4, #16]
 80078ba:	443b      	add	r3, r7
 80078bc:	6123      	str	r3, [r4, #16]
 80078be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078c2:	bf00      	nop
 80078c4:	08008901 	.word	0x08008901

080078c8 <_scanf_i>:
 80078c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078cc:	460c      	mov	r4, r1
 80078ce:	4698      	mov	r8, r3
 80078d0:	4b72      	ldr	r3, [pc, #456]	@ (8007a9c <_scanf_i+0x1d4>)
 80078d2:	b087      	sub	sp, #28
 80078d4:	4682      	mov	sl, r0
 80078d6:	4616      	mov	r6, r2
 80078d8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80078dc:	ab03      	add	r3, sp, #12
 80078de:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80078e2:	4b6f      	ldr	r3, [pc, #444]	@ (8007aa0 <_scanf_i+0x1d8>)
 80078e4:	69a1      	ldr	r1, [r4, #24]
 80078e6:	4a6f      	ldr	r2, [pc, #444]	@ (8007aa4 <_scanf_i+0x1dc>)
 80078e8:	4627      	mov	r7, r4
 80078ea:	2903      	cmp	r1, #3
 80078ec:	bf08      	it	eq
 80078ee:	461a      	moveq	r2, r3
 80078f0:	68a3      	ldr	r3, [r4, #8]
 80078f2:	9201      	str	r2, [sp, #4]
 80078f4:	1e5a      	subs	r2, r3, #1
 80078f6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80078fa:	bf81      	itttt	hi
 80078fc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007900:	eb03 0905 	addhi.w	r9, r3, r5
 8007904:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007908:	60a3      	strhi	r3, [r4, #8]
 800790a:	f857 3b1c 	ldr.w	r3, [r7], #28
 800790e:	bf98      	it	ls
 8007910:	f04f 0900 	movls.w	r9, #0
 8007914:	463d      	mov	r5, r7
 8007916:	f04f 0b00 	mov.w	fp, #0
 800791a:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800791e:	6023      	str	r3, [r4, #0]
 8007920:	6831      	ldr	r1, [r6, #0]
 8007922:	ab03      	add	r3, sp, #12
 8007924:	2202      	movs	r2, #2
 8007926:	7809      	ldrb	r1, [r1, #0]
 8007928:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800792c:	f7fe f967 	bl	8005bfe <memchr>
 8007930:	b328      	cbz	r0, 800797e <_scanf_i+0xb6>
 8007932:	f1bb 0f01 	cmp.w	fp, #1
 8007936:	d159      	bne.n	80079ec <_scanf_i+0x124>
 8007938:	6862      	ldr	r2, [r4, #4]
 800793a:	b92a      	cbnz	r2, 8007948 <_scanf_i+0x80>
 800793c:	2108      	movs	r1, #8
 800793e:	6822      	ldr	r2, [r4, #0]
 8007940:	6061      	str	r1, [r4, #4]
 8007942:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007946:	6022      	str	r2, [r4, #0]
 8007948:	6822      	ldr	r2, [r4, #0]
 800794a:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800794e:	6022      	str	r2, [r4, #0]
 8007950:	68a2      	ldr	r2, [r4, #8]
 8007952:	1e51      	subs	r1, r2, #1
 8007954:	60a1      	str	r1, [r4, #8]
 8007956:	b192      	cbz	r2, 800797e <_scanf_i+0xb6>
 8007958:	6832      	ldr	r2, [r6, #0]
 800795a:	1c51      	adds	r1, r2, #1
 800795c:	6031      	str	r1, [r6, #0]
 800795e:	7812      	ldrb	r2, [r2, #0]
 8007960:	f805 2b01 	strb.w	r2, [r5], #1
 8007964:	6872      	ldr	r2, [r6, #4]
 8007966:	3a01      	subs	r2, #1
 8007968:	2a00      	cmp	r2, #0
 800796a:	6072      	str	r2, [r6, #4]
 800796c:	dc07      	bgt.n	800797e <_scanf_i+0xb6>
 800796e:	4631      	mov	r1, r6
 8007970:	4650      	mov	r0, sl
 8007972:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8007976:	4790      	blx	r2
 8007978:	2800      	cmp	r0, #0
 800797a:	f040 8085 	bne.w	8007a88 <_scanf_i+0x1c0>
 800797e:	f10b 0b01 	add.w	fp, fp, #1
 8007982:	f1bb 0f03 	cmp.w	fp, #3
 8007986:	d1cb      	bne.n	8007920 <_scanf_i+0x58>
 8007988:	6863      	ldr	r3, [r4, #4]
 800798a:	b90b      	cbnz	r3, 8007990 <_scanf_i+0xc8>
 800798c:	230a      	movs	r3, #10
 800798e:	6063      	str	r3, [r4, #4]
 8007990:	6863      	ldr	r3, [r4, #4]
 8007992:	4945      	ldr	r1, [pc, #276]	@ (8007aa8 <_scanf_i+0x1e0>)
 8007994:	6960      	ldr	r0, [r4, #20]
 8007996:	1ac9      	subs	r1, r1, r3
 8007998:	f000 f930 	bl	8007bfc <__sccl>
 800799c:	f04f 0b00 	mov.w	fp, #0
 80079a0:	68a3      	ldr	r3, [r4, #8]
 80079a2:	6822      	ldr	r2, [r4, #0]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d03d      	beq.n	8007a24 <_scanf_i+0x15c>
 80079a8:	6831      	ldr	r1, [r6, #0]
 80079aa:	6960      	ldr	r0, [r4, #20]
 80079ac:	f891 c000 	ldrb.w	ip, [r1]
 80079b0:	f810 000c 	ldrb.w	r0, [r0, ip]
 80079b4:	2800      	cmp	r0, #0
 80079b6:	d035      	beq.n	8007a24 <_scanf_i+0x15c>
 80079b8:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80079bc:	d124      	bne.n	8007a08 <_scanf_i+0x140>
 80079be:	0510      	lsls	r0, r2, #20
 80079c0:	d522      	bpl.n	8007a08 <_scanf_i+0x140>
 80079c2:	f10b 0b01 	add.w	fp, fp, #1
 80079c6:	f1b9 0f00 	cmp.w	r9, #0
 80079ca:	d003      	beq.n	80079d4 <_scanf_i+0x10c>
 80079cc:	3301      	adds	r3, #1
 80079ce:	f109 39ff 	add.w	r9, r9, #4294967295
 80079d2:	60a3      	str	r3, [r4, #8]
 80079d4:	6873      	ldr	r3, [r6, #4]
 80079d6:	3b01      	subs	r3, #1
 80079d8:	2b00      	cmp	r3, #0
 80079da:	6073      	str	r3, [r6, #4]
 80079dc:	dd1b      	ble.n	8007a16 <_scanf_i+0x14e>
 80079de:	6833      	ldr	r3, [r6, #0]
 80079e0:	3301      	adds	r3, #1
 80079e2:	6033      	str	r3, [r6, #0]
 80079e4:	68a3      	ldr	r3, [r4, #8]
 80079e6:	3b01      	subs	r3, #1
 80079e8:	60a3      	str	r3, [r4, #8]
 80079ea:	e7d9      	b.n	80079a0 <_scanf_i+0xd8>
 80079ec:	f1bb 0f02 	cmp.w	fp, #2
 80079f0:	d1ae      	bne.n	8007950 <_scanf_i+0x88>
 80079f2:	6822      	ldr	r2, [r4, #0]
 80079f4:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80079f8:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80079fc:	d1c4      	bne.n	8007988 <_scanf_i+0xc0>
 80079fe:	2110      	movs	r1, #16
 8007a00:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007a04:	6061      	str	r1, [r4, #4]
 8007a06:	e7a2      	b.n	800794e <_scanf_i+0x86>
 8007a08:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8007a0c:	6022      	str	r2, [r4, #0]
 8007a0e:	780b      	ldrb	r3, [r1, #0]
 8007a10:	f805 3b01 	strb.w	r3, [r5], #1
 8007a14:	e7de      	b.n	80079d4 <_scanf_i+0x10c>
 8007a16:	4631      	mov	r1, r6
 8007a18:	4650      	mov	r0, sl
 8007a1a:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007a1e:	4798      	blx	r3
 8007a20:	2800      	cmp	r0, #0
 8007a22:	d0df      	beq.n	80079e4 <_scanf_i+0x11c>
 8007a24:	6823      	ldr	r3, [r4, #0]
 8007a26:	05d9      	lsls	r1, r3, #23
 8007a28:	d50d      	bpl.n	8007a46 <_scanf_i+0x17e>
 8007a2a:	42bd      	cmp	r5, r7
 8007a2c:	d909      	bls.n	8007a42 <_scanf_i+0x17a>
 8007a2e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007a32:	4632      	mov	r2, r6
 8007a34:	4650      	mov	r0, sl
 8007a36:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007a3a:	f105 39ff 	add.w	r9, r5, #4294967295
 8007a3e:	4798      	blx	r3
 8007a40:	464d      	mov	r5, r9
 8007a42:	42bd      	cmp	r5, r7
 8007a44:	d028      	beq.n	8007a98 <_scanf_i+0x1d0>
 8007a46:	6822      	ldr	r2, [r4, #0]
 8007a48:	f012 0210 	ands.w	r2, r2, #16
 8007a4c:	d113      	bne.n	8007a76 <_scanf_i+0x1ae>
 8007a4e:	702a      	strb	r2, [r5, #0]
 8007a50:	4639      	mov	r1, r7
 8007a52:	6863      	ldr	r3, [r4, #4]
 8007a54:	4650      	mov	r0, sl
 8007a56:	9e01      	ldr	r6, [sp, #4]
 8007a58:	47b0      	blx	r6
 8007a5a:	f8d8 3000 	ldr.w	r3, [r8]
 8007a5e:	6821      	ldr	r1, [r4, #0]
 8007a60:	1d1a      	adds	r2, r3, #4
 8007a62:	f8c8 2000 	str.w	r2, [r8]
 8007a66:	f011 0f20 	tst.w	r1, #32
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	d00f      	beq.n	8007a8e <_scanf_i+0x1c6>
 8007a6e:	6018      	str	r0, [r3, #0]
 8007a70:	68e3      	ldr	r3, [r4, #12]
 8007a72:	3301      	adds	r3, #1
 8007a74:	60e3      	str	r3, [r4, #12]
 8007a76:	2000      	movs	r0, #0
 8007a78:	6923      	ldr	r3, [r4, #16]
 8007a7a:	1bed      	subs	r5, r5, r7
 8007a7c:	445d      	add	r5, fp
 8007a7e:	442b      	add	r3, r5
 8007a80:	6123      	str	r3, [r4, #16]
 8007a82:	b007      	add	sp, #28
 8007a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a88:	f04f 0b00 	mov.w	fp, #0
 8007a8c:	e7ca      	b.n	8007a24 <_scanf_i+0x15c>
 8007a8e:	07ca      	lsls	r2, r1, #31
 8007a90:	bf4c      	ite	mi
 8007a92:	8018      	strhmi	r0, [r3, #0]
 8007a94:	6018      	strpl	r0, [r3, #0]
 8007a96:	e7eb      	b.n	8007a70 <_scanf_i+0x1a8>
 8007a98:	2001      	movs	r0, #1
 8007a9a:	e7f2      	b.n	8007a82 <_scanf_i+0x1ba>
 8007a9c:	08008630 	.word	0x08008630
 8007aa0:	08007f29 	.word	0x08007f29
 8007aa4:	08008009 	.word	0x08008009
 8007aa8:	080087b3 	.word	0x080087b3

08007aac <__sflush_r>:
 8007aac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ab2:	0716      	lsls	r6, r2, #28
 8007ab4:	4605      	mov	r5, r0
 8007ab6:	460c      	mov	r4, r1
 8007ab8:	d454      	bmi.n	8007b64 <__sflush_r+0xb8>
 8007aba:	684b      	ldr	r3, [r1, #4]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	dc02      	bgt.n	8007ac6 <__sflush_r+0x1a>
 8007ac0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	dd48      	ble.n	8007b58 <__sflush_r+0xac>
 8007ac6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007ac8:	2e00      	cmp	r6, #0
 8007aca:	d045      	beq.n	8007b58 <__sflush_r+0xac>
 8007acc:	2300      	movs	r3, #0
 8007ace:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007ad2:	682f      	ldr	r7, [r5, #0]
 8007ad4:	6a21      	ldr	r1, [r4, #32]
 8007ad6:	602b      	str	r3, [r5, #0]
 8007ad8:	d030      	beq.n	8007b3c <__sflush_r+0x90>
 8007ada:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007adc:	89a3      	ldrh	r3, [r4, #12]
 8007ade:	0759      	lsls	r1, r3, #29
 8007ae0:	d505      	bpl.n	8007aee <__sflush_r+0x42>
 8007ae2:	6863      	ldr	r3, [r4, #4]
 8007ae4:	1ad2      	subs	r2, r2, r3
 8007ae6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007ae8:	b10b      	cbz	r3, 8007aee <__sflush_r+0x42>
 8007aea:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007aec:	1ad2      	subs	r2, r2, r3
 8007aee:	2300      	movs	r3, #0
 8007af0:	4628      	mov	r0, r5
 8007af2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007af4:	6a21      	ldr	r1, [r4, #32]
 8007af6:	47b0      	blx	r6
 8007af8:	1c43      	adds	r3, r0, #1
 8007afa:	89a3      	ldrh	r3, [r4, #12]
 8007afc:	d106      	bne.n	8007b0c <__sflush_r+0x60>
 8007afe:	6829      	ldr	r1, [r5, #0]
 8007b00:	291d      	cmp	r1, #29
 8007b02:	d82b      	bhi.n	8007b5c <__sflush_r+0xb0>
 8007b04:	4a28      	ldr	r2, [pc, #160]	@ (8007ba8 <__sflush_r+0xfc>)
 8007b06:	40ca      	lsrs	r2, r1
 8007b08:	07d6      	lsls	r6, r2, #31
 8007b0a:	d527      	bpl.n	8007b5c <__sflush_r+0xb0>
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	6062      	str	r2, [r4, #4]
 8007b10:	6922      	ldr	r2, [r4, #16]
 8007b12:	04d9      	lsls	r1, r3, #19
 8007b14:	6022      	str	r2, [r4, #0]
 8007b16:	d504      	bpl.n	8007b22 <__sflush_r+0x76>
 8007b18:	1c42      	adds	r2, r0, #1
 8007b1a:	d101      	bne.n	8007b20 <__sflush_r+0x74>
 8007b1c:	682b      	ldr	r3, [r5, #0]
 8007b1e:	b903      	cbnz	r3, 8007b22 <__sflush_r+0x76>
 8007b20:	6560      	str	r0, [r4, #84]	@ 0x54
 8007b22:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007b24:	602f      	str	r7, [r5, #0]
 8007b26:	b1b9      	cbz	r1, 8007b58 <__sflush_r+0xac>
 8007b28:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007b2c:	4299      	cmp	r1, r3
 8007b2e:	d002      	beq.n	8007b36 <__sflush_r+0x8a>
 8007b30:	4628      	mov	r0, r5
 8007b32:	f7fe fed1 	bl	80068d8 <_free_r>
 8007b36:	2300      	movs	r3, #0
 8007b38:	6363      	str	r3, [r4, #52]	@ 0x34
 8007b3a:	e00d      	b.n	8007b58 <__sflush_r+0xac>
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	4628      	mov	r0, r5
 8007b40:	47b0      	blx	r6
 8007b42:	4602      	mov	r2, r0
 8007b44:	1c50      	adds	r0, r2, #1
 8007b46:	d1c9      	bne.n	8007adc <__sflush_r+0x30>
 8007b48:	682b      	ldr	r3, [r5, #0]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d0c6      	beq.n	8007adc <__sflush_r+0x30>
 8007b4e:	2b1d      	cmp	r3, #29
 8007b50:	d001      	beq.n	8007b56 <__sflush_r+0xaa>
 8007b52:	2b16      	cmp	r3, #22
 8007b54:	d11d      	bne.n	8007b92 <__sflush_r+0xe6>
 8007b56:	602f      	str	r7, [r5, #0]
 8007b58:	2000      	movs	r0, #0
 8007b5a:	e021      	b.n	8007ba0 <__sflush_r+0xf4>
 8007b5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b60:	b21b      	sxth	r3, r3
 8007b62:	e01a      	b.n	8007b9a <__sflush_r+0xee>
 8007b64:	690f      	ldr	r7, [r1, #16]
 8007b66:	2f00      	cmp	r7, #0
 8007b68:	d0f6      	beq.n	8007b58 <__sflush_r+0xac>
 8007b6a:	0793      	lsls	r3, r2, #30
 8007b6c:	bf18      	it	ne
 8007b6e:	2300      	movne	r3, #0
 8007b70:	680e      	ldr	r6, [r1, #0]
 8007b72:	bf08      	it	eq
 8007b74:	694b      	ldreq	r3, [r1, #20]
 8007b76:	1bf6      	subs	r6, r6, r7
 8007b78:	600f      	str	r7, [r1, #0]
 8007b7a:	608b      	str	r3, [r1, #8]
 8007b7c:	2e00      	cmp	r6, #0
 8007b7e:	ddeb      	ble.n	8007b58 <__sflush_r+0xac>
 8007b80:	4633      	mov	r3, r6
 8007b82:	463a      	mov	r2, r7
 8007b84:	4628      	mov	r0, r5
 8007b86:	6a21      	ldr	r1, [r4, #32]
 8007b88:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007b8c:	47e0      	blx	ip
 8007b8e:	2800      	cmp	r0, #0
 8007b90:	dc07      	bgt.n	8007ba2 <__sflush_r+0xf6>
 8007b92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8007b9e:	81a3      	strh	r3, [r4, #12]
 8007ba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ba2:	4407      	add	r7, r0
 8007ba4:	1a36      	subs	r6, r6, r0
 8007ba6:	e7e9      	b.n	8007b7c <__sflush_r+0xd0>
 8007ba8:	20400001 	.word	0x20400001

08007bac <_fflush_r>:
 8007bac:	b538      	push	{r3, r4, r5, lr}
 8007bae:	690b      	ldr	r3, [r1, #16]
 8007bb0:	4605      	mov	r5, r0
 8007bb2:	460c      	mov	r4, r1
 8007bb4:	b913      	cbnz	r3, 8007bbc <_fflush_r+0x10>
 8007bb6:	2500      	movs	r5, #0
 8007bb8:	4628      	mov	r0, r5
 8007bba:	bd38      	pop	{r3, r4, r5, pc}
 8007bbc:	b118      	cbz	r0, 8007bc6 <_fflush_r+0x1a>
 8007bbe:	6a03      	ldr	r3, [r0, #32]
 8007bc0:	b90b      	cbnz	r3, 8007bc6 <_fflush_r+0x1a>
 8007bc2:	f7fd fed3 	bl	800596c <__sinit>
 8007bc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d0f3      	beq.n	8007bb6 <_fflush_r+0xa>
 8007bce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007bd0:	07d0      	lsls	r0, r2, #31
 8007bd2:	d404      	bmi.n	8007bde <_fflush_r+0x32>
 8007bd4:	0599      	lsls	r1, r3, #22
 8007bd6:	d402      	bmi.n	8007bde <_fflush_r+0x32>
 8007bd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007bda:	f7fe f80e 	bl	8005bfa <__retarget_lock_acquire_recursive>
 8007bde:	4628      	mov	r0, r5
 8007be0:	4621      	mov	r1, r4
 8007be2:	f7ff ff63 	bl	8007aac <__sflush_r>
 8007be6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007be8:	4605      	mov	r5, r0
 8007bea:	07da      	lsls	r2, r3, #31
 8007bec:	d4e4      	bmi.n	8007bb8 <_fflush_r+0xc>
 8007bee:	89a3      	ldrh	r3, [r4, #12]
 8007bf0:	059b      	lsls	r3, r3, #22
 8007bf2:	d4e1      	bmi.n	8007bb8 <_fflush_r+0xc>
 8007bf4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007bf6:	f7fe f801 	bl	8005bfc <__retarget_lock_release_recursive>
 8007bfa:	e7dd      	b.n	8007bb8 <_fflush_r+0xc>

08007bfc <__sccl>:
 8007bfc:	b570      	push	{r4, r5, r6, lr}
 8007bfe:	780b      	ldrb	r3, [r1, #0]
 8007c00:	4604      	mov	r4, r0
 8007c02:	2b5e      	cmp	r3, #94	@ 0x5e
 8007c04:	bf0b      	itete	eq
 8007c06:	784b      	ldrbeq	r3, [r1, #1]
 8007c08:	1c4a      	addne	r2, r1, #1
 8007c0a:	1c8a      	addeq	r2, r1, #2
 8007c0c:	2100      	movne	r1, #0
 8007c0e:	bf08      	it	eq
 8007c10:	2101      	moveq	r1, #1
 8007c12:	3801      	subs	r0, #1
 8007c14:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8007c18:	f800 1f01 	strb.w	r1, [r0, #1]!
 8007c1c:	42a8      	cmp	r0, r5
 8007c1e:	d1fb      	bne.n	8007c18 <__sccl+0x1c>
 8007c20:	b90b      	cbnz	r3, 8007c26 <__sccl+0x2a>
 8007c22:	1e50      	subs	r0, r2, #1
 8007c24:	bd70      	pop	{r4, r5, r6, pc}
 8007c26:	f081 0101 	eor.w	r1, r1, #1
 8007c2a:	4610      	mov	r0, r2
 8007c2c:	54e1      	strb	r1, [r4, r3]
 8007c2e:	4602      	mov	r2, r0
 8007c30:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007c34:	2d2d      	cmp	r5, #45	@ 0x2d
 8007c36:	d005      	beq.n	8007c44 <__sccl+0x48>
 8007c38:	2d5d      	cmp	r5, #93	@ 0x5d
 8007c3a:	d016      	beq.n	8007c6a <__sccl+0x6e>
 8007c3c:	2d00      	cmp	r5, #0
 8007c3e:	d0f1      	beq.n	8007c24 <__sccl+0x28>
 8007c40:	462b      	mov	r3, r5
 8007c42:	e7f2      	b.n	8007c2a <__sccl+0x2e>
 8007c44:	7846      	ldrb	r6, [r0, #1]
 8007c46:	2e5d      	cmp	r6, #93	@ 0x5d
 8007c48:	d0fa      	beq.n	8007c40 <__sccl+0x44>
 8007c4a:	42b3      	cmp	r3, r6
 8007c4c:	dcf8      	bgt.n	8007c40 <__sccl+0x44>
 8007c4e:	461a      	mov	r2, r3
 8007c50:	3002      	adds	r0, #2
 8007c52:	3201      	adds	r2, #1
 8007c54:	4296      	cmp	r6, r2
 8007c56:	54a1      	strb	r1, [r4, r2]
 8007c58:	dcfb      	bgt.n	8007c52 <__sccl+0x56>
 8007c5a:	1af2      	subs	r2, r6, r3
 8007c5c:	3a01      	subs	r2, #1
 8007c5e:	42b3      	cmp	r3, r6
 8007c60:	bfa8      	it	ge
 8007c62:	2200      	movge	r2, #0
 8007c64:	1c5d      	adds	r5, r3, #1
 8007c66:	18ab      	adds	r3, r5, r2
 8007c68:	e7e1      	b.n	8007c2e <__sccl+0x32>
 8007c6a:	4610      	mov	r0, r2
 8007c6c:	e7da      	b.n	8007c24 <__sccl+0x28>

08007c6e <__submore>:
 8007c6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c72:	460c      	mov	r4, r1
 8007c74:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8007c76:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007c7a:	4299      	cmp	r1, r3
 8007c7c:	d11b      	bne.n	8007cb6 <__submore+0x48>
 8007c7e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007c82:	f7fe fe9b 	bl	80069bc <_malloc_r>
 8007c86:	b918      	cbnz	r0, 8007c90 <__submore+0x22>
 8007c88:	f04f 30ff 	mov.w	r0, #4294967295
 8007c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c90:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007c94:	63a3      	str	r3, [r4, #56]	@ 0x38
 8007c96:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8007c9a:	6360      	str	r0, [r4, #52]	@ 0x34
 8007c9c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8007ca0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007ca4:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8007ca8:	7043      	strb	r3, [r0, #1]
 8007caa:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007cae:	7003      	strb	r3, [r0, #0]
 8007cb0:	6020      	str	r0, [r4, #0]
 8007cb2:	2000      	movs	r0, #0
 8007cb4:	e7ea      	b.n	8007c8c <__submore+0x1e>
 8007cb6:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8007cb8:	0077      	lsls	r7, r6, #1
 8007cba:	463a      	mov	r2, r7
 8007cbc:	f000 f88c 	bl	8007dd8 <_realloc_r>
 8007cc0:	4605      	mov	r5, r0
 8007cc2:	2800      	cmp	r0, #0
 8007cc4:	d0e0      	beq.n	8007c88 <__submore+0x1a>
 8007cc6:	eb00 0806 	add.w	r8, r0, r6
 8007cca:	4601      	mov	r1, r0
 8007ccc:	4632      	mov	r2, r6
 8007cce:	4640      	mov	r0, r8
 8007cd0:	f000 f830 	bl	8007d34 <memcpy>
 8007cd4:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8007cd8:	f8c4 8000 	str.w	r8, [r4]
 8007cdc:	e7e9      	b.n	8007cb2 <__submore+0x44>

08007cde <memmove>:
 8007cde:	4288      	cmp	r0, r1
 8007ce0:	b510      	push	{r4, lr}
 8007ce2:	eb01 0402 	add.w	r4, r1, r2
 8007ce6:	d902      	bls.n	8007cee <memmove+0x10>
 8007ce8:	4284      	cmp	r4, r0
 8007cea:	4623      	mov	r3, r4
 8007cec:	d807      	bhi.n	8007cfe <memmove+0x20>
 8007cee:	1e43      	subs	r3, r0, #1
 8007cf0:	42a1      	cmp	r1, r4
 8007cf2:	d008      	beq.n	8007d06 <memmove+0x28>
 8007cf4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007cf8:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007cfc:	e7f8      	b.n	8007cf0 <memmove+0x12>
 8007cfe:	4601      	mov	r1, r0
 8007d00:	4402      	add	r2, r0
 8007d02:	428a      	cmp	r2, r1
 8007d04:	d100      	bne.n	8007d08 <memmove+0x2a>
 8007d06:	bd10      	pop	{r4, pc}
 8007d08:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007d0c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007d10:	e7f7      	b.n	8007d02 <memmove+0x24>
	...

08007d14 <_sbrk_r>:
 8007d14:	b538      	push	{r3, r4, r5, lr}
 8007d16:	2300      	movs	r3, #0
 8007d18:	4d05      	ldr	r5, [pc, #20]	@ (8007d30 <_sbrk_r+0x1c>)
 8007d1a:	4604      	mov	r4, r0
 8007d1c:	4608      	mov	r0, r1
 8007d1e:	602b      	str	r3, [r5, #0]
 8007d20:	f7f9 fee0 	bl	8001ae4 <_sbrk>
 8007d24:	1c43      	adds	r3, r0, #1
 8007d26:	d102      	bne.n	8007d2e <_sbrk_r+0x1a>
 8007d28:	682b      	ldr	r3, [r5, #0]
 8007d2a:	b103      	cbz	r3, 8007d2e <_sbrk_r+0x1a>
 8007d2c:	6023      	str	r3, [r4, #0]
 8007d2e:	bd38      	pop	{r3, r4, r5, pc}
 8007d30:	20000490 	.word	0x20000490

08007d34 <memcpy>:
 8007d34:	440a      	add	r2, r1
 8007d36:	4291      	cmp	r1, r2
 8007d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d3c:	d100      	bne.n	8007d40 <memcpy+0xc>
 8007d3e:	4770      	bx	lr
 8007d40:	b510      	push	{r4, lr}
 8007d42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d46:	4291      	cmp	r1, r2
 8007d48:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d4c:	d1f9      	bne.n	8007d42 <memcpy+0xe>
 8007d4e:	bd10      	pop	{r4, pc}

08007d50 <__assert_func>:
 8007d50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007d52:	4614      	mov	r4, r2
 8007d54:	461a      	mov	r2, r3
 8007d56:	4b09      	ldr	r3, [pc, #36]	@ (8007d7c <__assert_func+0x2c>)
 8007d58:	4605      	mov	r5, r0
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	68d8      	ldr	r0, [r3, #12]
 8007d5e:	b14c      	cbz	r4, 8007d74 <__assert_func+0x24>
 8007d60:	4b07      	ldr	r3, [pc, #28]	@ (8007d80 <__assert_func+0x30>)
 8007d62:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007d66:	9100      	str	r1, [sp, #0]
 8007d68:	462b      	mov	r3, r5
 8007d6a:	4906      	ldr	r1, [pc, #24]	@ (8007d84 <__assert_func+0x34>)
 8007d6c:	f000 f95c 	bl	8008028 <fiprintf>
 8007d70:	f000 f96c 	bl	800804c <abort>
 8007d74:	4b04      	ldr	r3, [pc, #16]	@ (8007d88 <__assert_func+0x38>)
 8007d76:	461c      	mov	r4, r3
 8007d78:	e7f3      	b.n	8007d62 <__assert_func+0x12>
 8007d7a:	bf00      	nop
 8007d7c:	2000002c 	.word	0x2000002c
 8007d80:	080087c8 	.word	0x080087c8
 8007d84:	080087d5 	.word	0x080087d5
 8007d88:	08008803 	.word	0x08008803

08007d8c <_calloc_r>:
 8007d8c:	b570      	push	{r4, r5, r6, lr}
 8007d8e:	fba1 5402 	umull	r5, r4, r1, r2
 8007d92:	b934      	cbnz	r4, 8007da2 <_calloc_r+0x16>
 8007d94:	4629      	mov	r1, r5
 8007d96:	f7fe fe11 	bl	80069bc <_malloc_r>
 8007d9a:	4606      	mov	r6, r0
 8007d9c:	b928      	cbnz	r0, 8007daa <_calloc_r+0x1e>
 8007d9e:	4630      	mov	r0, r6
 8007da0:	bd70      	pop	{r4, r5, r6, pc}
 8007da2:	220c      	movs	r2, #12
 8007da4:	2600      	movs	r6, #0
 8007da6:	6002      	str	r2, [r0, #0]
 8007da8:	e7f9      	b.n	8007d9e <_calloc_r+0x12>
 8007daa:	462a      	mov	r2, r5
 8007dac:	4621      	mov	r1, r4
 8007dae:	f7fd fea6 	bl	8005afe <memset>
 8007db2:	e7f4      	b.n	8007d9e <_calloc_r+0x12>

08007db4 <__ascii_mbtowc>:
 8007db4:	b082      	sub	sp, #8
 8007db6:	b901      	cbnz	r1, 8007dba <__ascii_mbtowc+0x6>
 8007db8:	a901      	add	r1, sp, #4
 8007dba:	b142      	cbz	r2, 8007dce <__ascii_mbtowc+0x1a>
 8007dbc:	b14b      	cbz	r3, 8007dd2 <__ascii_mbtowc+0x1e>
 8007dbe:	7813      	ldrb	r3, [r2, #0]
 8007dc0:	600b      	str	r3, [r1, #0]
 8007dc2:	7812      	ldrb	r2, [r2, #0]
 8007dc4:	1e10      	subs	r0, r2, #0
 8007dc6:	bf18      	it	ne
 8007dc8:	2001      	movne	r0, #1
 8007dca:	b002      	add	sp, #8
 8007dcc:	4770      	bx	lr
 8007dce:	4610      	mov	r0, r2
 8007dd0:	e7fb      	b.n	8007dca <__ascii_mbtowc+0x16>
 8007dd2:	f06f 0001 	mvn.w	r0, #1
 8007dd6:	e7f8      	b.n	8007dca <__ascii_mbtowc+0x16>

08007dd8 <_realloc_r>:
 8007dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ddc:	4607      	mov	r7, r0
 8007dde:	4614      	mov	r4, r2
 8007de0:	460d      	mov	r5, r1
 8007de2:	b921      	cbnz	r1, 8007dee <_realloc_r+0x16>
 8007de4:	4611      	mov	r1, r2
 8007de6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007dea:	f7fe bde7 	b.w	80069bc <_malloc_r>
 8007dee:	b92a      	cbnz	r2, 8007dfc <_realloc_r+0x24>
 8007df0:	f7fe fd72 	bl	80068d8 <_free_r>
 8007df4:	4625      	mov	r5, r4
 8007df6:	4628      	mov	r0, r5
 8007df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dfc:	f000 f92d 	bl	800805a <_malloc_usable_size_r>
 8007e00:	4284      	cmp	r4, r0
 8007e02:	4606      	mov	r6, r0
 8007e04:	d802      	bhi.n	8007e0c <_realloc_r+0x34>
 8007e06:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007e0a:	d8f4      	bhi.n	8007df6 <_realloc_r+0x1e>
 8007e0c:	4621      	mov	r1, r4
 8007e0e:	4638      	mov	r0, r7
 8007e10:	f7fe fdd4 	bl	80069bc <_malloc_r>
 8007e14:	4680      	mov	r8, r0
 8007e16:	b908      	cbnz	r0, 8007e1c <_realloc_r+0x44>
 8007e18:	4645      	mov	r5, r8
 8007e1a:	e7ec      	b.n	8007df6 <_realloc_r+0x1e>
 8007e1c:	42b4      	cmp	r4, r6
 8007e1e:	4622      	mov	r2, r4
 8007e20:	4629      	mov	r1, r5
 8007e22:	bf28      	it	cs
 8007e24:	4632      	movcs	r2, r6
 8007e26:	f7ff ff85 	bl	8007d34 <memcpy>
 8007e2a:	4629      	mov	r1, r5
 8007e2c:	4638      	mov	r0, r7
 8007e2e:	f7fe fd53 	bl	80068d8 <_free_r>
 8007e32:	e7f1      	b.n	8007e18 <_realloc_r+0x40>

08007e34 <_strtol_l.isra.0>:
 8007e34:	2b24      	cmp	r3, #36	@ 0x24
 8007e36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e3a:	4686      	mov	lr, r0
 8007e3c:	4690      	mov	r8, r2
 8007e3e:	d801      	bhi.n	8007e44 <_strtol_l.isra.0+0x10>
 8007e40:	2b01      	cmp	r3, #1
 8007e42:	d106      	bne.n	8007e52 <_strtol_l.isra.0+0x1e>
 8007e44:	f7fd feae 	bl	8005ba4 <__errno>
 8007e48:	2316      	movs	r3, #22
 8007e4a:	6003      	str	r3, [r0, #0]
 8007e4c:	2000      	movs	r0, #0
 8007e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e52:	460d      	mov	r5, r1
 8007e54:	4833      	ldr	r0, [pc, #204]	@ (8007f24 <_strtol_l.isra.0+0xf0>)
 8007e56:	462a      	mov	r2, r5
 8007e58:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007e5c:	5d06      	ldrb	r6, [r0, r4]
 8007e5e:	f016 0608 	ands.w	r6, r6, #8
 8007e62:	d1f8      	bne.n	8007e56 <_strtol_l.isra.0+0x22>
 8007e64:	2c2d      	cmp	r4, #45	@ 0x2d
 8007e66:	d110      	bne.n	8007e8a <_strtol_l.isra.0+0x56>
 8007e68:	2601      	movs	r6, #1
 8007e6a:	782c      	ldrb	r4, [r5, #0]
 8007e6c:	1c95      	adds	r5, r2, #2
 8007e6e:	f033 0210 	bics.w	r2, r3, #16
 8007e72:	d115      	bne.n	8007ea0 <_strtol_l.isra.0+0x6c>
 8007e74:	2c30      	cmp	r4, #48	@ 0x30
 8007e76:	d10d      	bne.n	8007e94 <_strtol_l.isra.0+0x60>
 8007e78:	782a      	ldrb	r2, [r5, #0]
 8007e7a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007e7e:	2a58      	cmp	r2, #88	@ 0x58
 8007e80:	d108      	bne.n	8007e94 <_strtol_l.isra.0+0x60>
 8007e82:	786c      	ldrb	r4, [r5, #1]
 8007e84:	3502      	adds	r5, #2
 8007e86:	2310      	movs	r3, #16
 8007e88:	e00a      	b.n	8007ea0 <_strtol_l.isra.0+0x6c>
 8007e8a:	2c2b      	cmp	r4, #43	@ 0x2b
 8007e8c:	bf04      	itt	eq
 8007e8e:	782c      	ldrbeq	r4, [r5, #0]
 8007e90:	1c95      	addeq	r5, r2, #2
 8007e92:	e7ec      	b.n	8007e6e <_strtol_l.isra.0+0x3a>
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d1f6      	bne.n	8007e86 <_strtol_l.isra.0+0x52>
 8007e98:	2c30      	cmp	r4, #48	@ 0x30
 8007e9a:	bf14      	ite	ne
 8007e9c:	230a      	movne	r3, #10
 8007e9e:	2308      	moveq	r3, #8
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007ea6:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007eaa:	fbbc f9f3 	udiv	r9, ip, r3
 8007eae:	4610      	mov	r0, r2
 8007eb0:	fb03 ca19 	mls	sl, r3, r9, ip
 8007eb4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007eb8:	2f09      	cmp	r7, #9
 8007eba:	d80f      	bhi.n	8007edc <_strtol_l.isra.0+0xa8>
 8007ebc:	463c      	mov	r4, r7
 8007ebe:	42a3      	cmp	r3, r4
 8007ec0:	dd1b      	ble.n	8007efa <_strtol_l.isra.0+0xc6>
 8007ec2:	1c57      	adds	r7, r2, #1
 8007ec4:	d007      	beq.n	8007ed6 <_strtol_l.isra.0+0xa2>
 8007ec6:	4581      	cmp	r9, r0
 8007ec8:	d314      	bcc.n	8007ef4 <_strtol_l.isra.0+0xc0>
 8007eca:	d101      	bne.n	8007ed0 <_strtol_l.isra.0+0x9c>
 8007ecc:	45a2      	cmp	sl, r4
 8007ece:	db11      	blt.n	8007ef4 <_strtol_l.isra.0+0xc0>
 8007ed0:	2201      	movs	r2, #1
 8007ed2:	fb00 4003 	mla	r0, r0, r3, r4
 8007ed6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007eda:	e7eb      	b.n	8007eb4 <_strtol_l.isra.0+0x80>
 8007edc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007ee0:	2f19      	cmp	r7, #25
 8007ee2:	d801      	bhi.n	8007ee8 <_strtol_l.isra.0+0xb4>
 8007ee4:	3c37      	subs	r4, #55	@ 0x37
 8007ee6:	e7ea      	b.n	8007ebe <_strtol_l.isra.0+0x8a>
 8007ee8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007eec:	2f19      	cmp	r7, #25
 8007eee:	d804      	bhi.n	8007efa <_strtol_l.isra.0+0xc6>
 8007ef0:	3c57      	subs	r4, #87	@ 0x57
 8007ef2:	e7e4      	b.n	8007ebe <_strtol_l.isra.0+0x8a>
 8007ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ef8:	e7ed      	b.n	8007ed6 <_strtol_l.isra.0+0xa2>
 8007efa:	1c53      	adds	r3, r2, #1
 8007efc:	d108      	bne.n	8007f10 <_strtol_l.isra.0+0xdc>
 8007efe:	2322      	movs	r3, #34	@ 0x22
 8007f00:	4660      	mov	r0, ip
 8007f02:	f8ce 3000 	str.w	r3, [lr]
 8007f06:	f1b8 0f00 	cmp.w	r8, #0
 8007f0a:	d0a0      	beq.n	8007e4e <_strtol_l.isra.0+0x1a>
 8007f0c:	1e69      	subs	r1, r5, #1
 8007f0e:	e006      	b.n	8007f1e <_strtol_l.isra.0+0xea>
 8007f10:	b106      	cbz	r6, 8007f14 <_strtol_l.isra.0+0xe0>
 8007f12:	4240      	negs	r0, r0
 8007f14:	f1b8 0f00 	cmp.w	r8, #0
 8007f18:	d099      	beq.n	8007e4e <_strtol_l.isra.0+0x1a>
 8007f1a:	2a00      	cmp	r2, #0
 8007f1c:	d1f6      	bne.n	8007f0c <_strtol_l.isra.0+0xd8>
 8007f1e:	f8c8 1000 	str.w	r1, [r8]
 8007f22:	e794      	b.n	8007e4e <_strtol_l.isra.0+0x1a>
 8007f24:	08008901 	.word	0x08008901

08007f28 <_strtol_r>:
 8007f28:	f7ff bf84 	b.w	8007e34 <_strtol_l.isra.0>

08007f2c <_strtoul_l.isra.0>:
 8007f2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007f30:	4686      	mov	lr, r0
 8007f32:	460d      	mov	r5, r1
 8007f34:	4e33      	ldr	r6, [pc, #204]	@ (8008004 <_strtoul_l.isra.0+0xd8>)
 8007f36:	4628      	mov	r0, r5
 8007f38:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007f3c:	5d37      	ldrb	r7, [r6, r4]
 8007f3e:	f017 0708 	ands.w	r7, r7, #8
 8007f42:	d1f8      	bne.n	8007f36 <_strtoul_l.isra.0+0xa>
 8007f44:	2c2d      	cmp	r4, #45	@ 0x2d
 8007f46:	d110      	bne.n	8007f6a <_strtoul_l.isra.0+0x3e>
 8007f48:	2701      	movs	r7, #1
 8007f4a:	782c      	ldrb	r4, [r5, #0]
 8007f4c:	1c85      	adds	r5, r0, #2
 8007f4e:	f033 0010 	bics.w	r0, r3, #16
 8007f52:	d115      	bne.n	8007f80 <_strtoul_l.isra.0+0x54>
 8007f54:	2c30      	cmp	r4, #48	@ 0x30
 8007f56:	d10d      	bne.n	8007f74 <_strtoul_l.isra.0+0x48>
 8007f58:	7828      	ldrb	r0, [r5, #0]
 8007f5a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8007f5e:	2858      	cmp	r0, #88	@ 0x58
 8007f60:	d108      	bne.n	8007f74 <_strtoul_l.isra.0+0x48>
 8007f62:	786c      	ldrb	r4, [r5, #1]
 8007f64:	3502      	adds	r5, #2
 8007f66:	2310      	movs	r3, #16
 8007f68:	e00a      	b.n	8007f80 <_strtoul_l.isra.0+0x54>
 8007f6a:	2c2b      	cmp	r4, #43	@ 0x2b
 8007f6c:	bf04      	itt	eq
 8007f6e:	782c      	ldrbeq	r4, [r5, #0]
 8007f70:	1c85      	addeq	r5, r0, #2
 8007f72:	e7ec      	b.n	8007f4e <_strtoul_l.isra.0+0x22>
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d1f6      	bne.n	8007f66 <_strtoul_l.isra.0+0x3a>
 8007f78:	2c30      	cmp	r4, #48	@ 0x30
 8007f7a:	bf14      	ite	ne
 8007f7c:	230a      	movne	r3, #10
 8007f7e:	2308      	moveq	r3, #8
 8007f80:	f04f 38ff 	mov.w	r8, #4294967295
 8007f84:	fbb8 f8f3 	udiv	r8, r8, r3
 8007f88:	2600      	movs	r6, #0
 8007f8a:	fb03 f908 	mul.w	r9, r3, r8
 8007f8e:	4630      	mov	r0, r6
 8007f90:	ea6f 0909 	mvn.w	r9, r9
 8007f94:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8007f98:	f1bc 0f09 	cmp.w	ip, #9
 8007f9c:	d810      	bhi.n	8007fc0 <_strtoul_l.isra.0+0x94>
 8007f9e:	4664      	mov	r4, ip
 8007fa0:	42a3      	cmp	r3, r4
 8007fa2:	dd1e      	ble.n	8007fe2 <_strtoul_l.isra.0+0xb6>
 8007fa4:	f1b6 3fff 	cmp.w	r6, #4294967295
 8007fa8:	d007      	beq.n	8007fba <_strtoul_l.isra.0+0x8e>
 8007faa:	4580      	cmp	r8, r0
 8007fac:	d316      	bcc.n	8007fdc <_strtoul_l.isra.0+0xb0>
 8007fae:	d101      	bne.n	8007fb4 <_strtoul_l.isra.0+0x88>
 8007fb0:	45a1      	cmp	r9, r4
 8007fb2:	db13      	blt.n	8007fdc <_strtoul_l.isra.0+0xb0>
 8007fb4:	2601      	movs	r6, #1
 8007fb6:	fb00 4003 	mla	r0, r0, r3, r4
 8007fba:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007fbe:	e7e9      	b.n	8007f94 <_strtoul_l.isra.0+0x68>
 8007fc0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8007fc4:	f1bc 0f19 	cmp.w	ip, #25
 8007fc8:	d801      	bhi.n	8007fce <_strtoul_l.isra.0+0xa2>
 8007fca:	3c37      	subs	r4, #55	@ 0x37
 8007fcc:	e7e8      	b.n	8007fa0 <_strtoul_l.isra.0+0x74>
 8007fce:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8007fd2:	f1bc 0f19 	cmp.w	ip, #25
 8007fd6:	d804      	bhi.n	8007fe2 <_strtoul_l.isra.0+0xb6>
 8007fd8:	3c57      	subs	r4, #87	@ 0x57
 8007fda:	e7e1      	b.n	8007fa0 <_strtoul_l.isra.0+0x74>
 8007fdc:	f04f 36ff 	mov.w	r6, #4294967295
 8007fe0:	e7eb      	b.n	8007fba <_strtoul_l.isra.0+0x8e>
 8007fe2:	1c73      	adds	r3, r6, #1
 8007fe4:	d106      	bne.n	8007ff4 <_strtoul_l.isra.0+0xc8>
 8007fe6:	2322      	movs	r3, #34	@ 0x22
 8007fe8:	4630      	mov	r0, r6
 8007fea:	f8ce 3000 	str.w	r3, [lr]
 8007fee:	b932      	cbnz	r2, 8007ffe <_strtoul_l.isra.0+0xd2>
 8007ff0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ff4:	b107      	cbz	r7, 8007ff8 <_strtoul_l.isra.0+0xcc>
 8007ff6:	4240      	negs	r0, r0
 8007ff8:	2a00      	cmp	r2, #0
 8007ffa:	d0f9      	beq.n	8007ff0 <_strtoul_l.isra.0+0xc4>
 8007ffc:	b106      	cbz	r6, 8008000 <_strtoul_l.isra.0+0xd4>
 8007ffe:	1e69      	subs	r1, r5, #1
 8008000:	6011      	str	r1, [r2, #0]
 8008002:	e7f5      	b.n	8007ff0 <_strtoul_l.isra.0+0xc4>
 8008004:	08008901 	.word	0x08008901

08008008 <_strtoul_r>:
 8008008:	f7ff bf90 	b.w	8007f2c <_strtoul_l.isra.0>

0800800c <__ascii_wctomb>:
 800800c:	4603      	mov	r3, r0
 800800e:	4608      	mov	r0, r1
 8008010:	b141      	cbz	r1, 8008024 <__ascii_wctomb+0x18>
 8008012:	2aff      	cmp	r2, #255	@ 0xff
 8008014:	d904      	bls.n	8008020 <__ascii_wctomb+0x14>
 8008016:	228a      	movs	r2, #138	@ 0x8a
 8008018:	f04f 30ff 	mov.w	r0, #4294967295
 800801c:	601a      	str	r2, [r3, #0]
 800801e:	4770      	bx	lr
 8008020:	2001      	movs	r0, #1
 8008022:	700a      	strb	r2, [r1, #0]
 8008024:	4770      	bx	lr
	...

08008028 <fiprintf>:
 8008028:	b40e      	push	{r1, r2, r3}
 800802a:	b503      	push	{r0, r1, lr}
 800802c:	4601      	mov	r1, r0
 800802e:	ab03      	add	r3, sp, #12
 8008030:	4805      	ldr	r0, [pc, #20]	@ (8008048 <fiprintf+0x20>)
 8008032:	f853 2b04 	ldr.w	r2, [r3], #4
 8008036:	6800      	ldr	r0, [r0, #0]
 8008038:	9301      	str	r3, [sp, #4]
 800803a:	f000 f83d 	bl	80080b8 <_vfiprintf_r>
 800803e:	b002      	add	sp, #8
 8008040:	f85d eb04 	ldr.w	lr, [sp], #4
 8008044:	b003      	add	sp, #12
 8008046:	4770      	bx	lr
 8008048:	2000002c 	.word	0x2000002c

0800804c <abort>:
 800804c:	2006      	movs	r0, #6
 800804e:	b508      	push	{r3, lr}
 8008050:	f000 fa06 	bl	8008460 <raise>
 8008054:	2001      	movs	r0, #1
 8008056:	f7f9 fcd0 	bl	80019fa <_exit>

0800805a <_malloc_usable_size_r>:
 800805a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800805e:	1f18      	subs	r0, r3, #4
 8008060:	2b00      	cmp	r3, #0
 8008062:	bfbc      	itt	lt
 8008064:	580b      	ldrlt	r3, [r1, r0]
 8008066:	18c0      	addlt	r0, r0, r3
 8008068:	4770      	bx	lr

0800806a <__sfputc_r>:
 800806a:	6893      	ldr	r3, [r2, #8]
 800806c:	b410      	push	{r4}
 800806e:	3b01      	subs	r3, #1
 8008070:	2b00      	cmp	r3, #0
 8008072:	6093      	str	r3, [r2, #8]
 8008074:	da07      	bge.n	8008086 <__sfputc_r+0x1c>
 8008076:	6994      	ldr	r4, [r2, #24]
 8008078:	42a3      	cmp	r3, r4
 800807a:	db01      	blt.n	8008080 <__sfputc_r+0x16>
 800807c:	290a      	cmp	r1, #10
 800807e:	d102      	bne.n	8008086 <__sfputc_r+0x1c>
 8008080:	bc10      	pop	{r4}
 8008082:	f000 b931 	b.w	80082e8 <__swbuf_r>
 8008086:	6813      	ldr	r3, [r2, #0]
 8008088:	1c58      	adds	r0, r3, #1
 800808a:	6010      	str	r0, [r2, #0]
 800808c:	7019      	strb	r1, [r3, #0]
 800808e:	4608      	mov	r0, r1
 8008090:	bc10      	pop	{r4}
 8008092:	4770      	bx	lr

08008094 <__sfputs_r>:
 8008094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008096:	4606      	mov	r6, r0
 8008098:	460f      	mov	r7, r1
 800809a:	4614      	mov	r4, r2
 800809c:	18d5      	adds	r5, r2, r3
 800809e:	42ac      	cmp	r4, r5
 80080a0:	d101      	bne.n	80080a6 <__sfputs_r+0x12>
 80080a2:	2000      	movs	r0, #0
 80080a4:	e007      	b.n	80080b6 <__sfputs_r+0x22>
 80080a6:	463a      	mov	r2, r7
 80080a8:	4630      	mov	r0, r6
 80080aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080ae:	f7ff ffdc 	bl	800806a <__sfputc_r>
 80080b2:	1c43      	adds	r3, r0, #1
 80080b4:	d1f3      	bne.n	800809e <__sfputs_r+0xa>
 80080b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080080b8 <_vfiprintf_r>:
 80080b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080bc:	460d      	mov	r5, r1
 80080be:	4614      	mov	r4, r2
 80080c0:	4698      	mov	r8, r3
 80080c2:	4606      	mov	r6, r0
 80080c4:	b09d      	sub	sp, #116	@ 0x74
 80080c6:	b118      	cbz	r0, 80080d0 <_vfiprintf_r+0x18>
 80080c8:	6a03      	ldr	r3, [r0, #32]
 80080ca:	b90b      	cbnz	r3, 80080d0 <_vfiprintf_r+0x18>
 80080cc:	f7fd fc4e 	bl	800596c <__sinit>
 80080d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80080d2:	07d9      	lsls	r1, r3, #31
 80080d4:	d405      	bmi.n	80080e2 <_vfiprintf_r+0x2a>
 80080d6:	89ab      	ldrh	r3, [r5, #12]
 80080d8:	059a      	lsls	r2, r3, #22
 80080da:	d402      	bmi.n	80080e2 <_vfiprintf_r+0x2a>
 80080dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80080de:	f7fd fd8c 	bl	8005bfa <__retarget_lock_acquire_recursive>
 80080e2:	89ab      	ldrh	r3, [r5, #12]
 80080e4:	071b      	lsls	r3, r3, #28
 80080e6:	d501      	bpl.n	80080ec <_vfiprintf_r+0x34>
 80080e8:	692b      	ldr	r3, [r5, #16]
 80080ea:	b99b      	cbnz	r3, 8008114 <_vfiprintf_r+0x5c>
 80080ec:	4629      	mov	r1, r5
 80080ee:	4630      	mov	r0, r6
 80080f0:	f000 f938 	bl	8008364 <__swsetup_r>
 80080f4:	b170      	cbz	r0, 8008114 <_vfiprintf_r+0x5c>
 80080f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80080f8:	07dc      	lsls	r4, r3, #31
 80080fa:	d504      	bpl.n	8008106 <_vfiprintf_r+0x4e>
 80080fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008100:	b01d      	add	sp, #116	@ 0x74
 8008102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008106:	89ab      	ldrh	r3, [r5, #12]
 8008108:	0598      	lsls	r0, r3, #22
 800810a:	d4f7      	bmi.n	80080fc <_vfiprintf_r+0x44>
 800810c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800810e:	f7fd fd75 	bl	8005bfc <__retarget_lock_release_recursive>
 8008112:	e7f3      	b.n	80080fc <_vfiprintf_r+0x44>
 8008114:	2300      	movs	r3, #0
 8008116:	9309      	str	r3, [sp, #36]	@ 0x24
 8008118:	2320      	movs	r3, #32
 800811a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800811e:	2330      	movs	r3, #48	@ 0x30
 8008120:	f04f 0901 	mov.w	r9, #1
 8008124:	f8cd 800c 	str.w	r8, [sp, #12]
 8008128:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80082d4 <_vfiprintf_r+0x21c>
 800812c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008130:	4623      	mov	r3, r4
 8008132:	469a      	mov	sl, r3
 8008134:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008138:	b10a      	cbz	r2, 800813e <_vfiprintf_r+0x86>
 800813a:	2a25      	cmp	r2, #37	@ 0x25
 800813c:	d1f9      	bne.n	8008132 <_vfiprintf_r+0x7a>
 800813e:	ebba 0b04 	subs.w	fp, sl, r4
 8008142:	d00b      	beq.n	800815c <_vfiprintf_r+0xa4>
 8008144:	465b      	mov	r3, fp
 8008146:	4622      	mov	r2, r4
 8008148:	4629      	mov	r1, r5
 800814a:	4630      	mov	r0, r6
 800814c:	f7ff ffa2 	bl	8008094 <__sfputs_r>
 8008150:	3001      	adds	r0, #1
 8008152:	f000 80a7 	beq.w	80082a4 <_vfiprintf_r+0x1ec>
 8008156:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008158:	445a      	add	r2, fp
 800815a:	9209      	str	r2, [sp, #36]	@ 0x24
 800815c:	f89a 3000 	ldrb.w	r3, [sl]
 8008160:	2b00      	cmp	r3, #0
 8008162:	f000 809f 	beq.w	80082a4 <_vfiprintf_r+0x1ec>
 8008166:	2300      	movs	r3, #0
 8008168:	f04f 32ff 	mov.w	r2, #4294967295
 800816c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008170:	f10a 0a01 	add.w	sl, sl, #1
 8008174:	9304      	str	r3, [sp, #16]
 8008176:	9307      	str	r3, [sp, #28]
 8008178:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800817c:	931a      	str	r3, [sp, #104]	@ 0x68
 800817e:	4654      	mov	r4, sl
 8008180:	2205      	movs	r2, #5
 8008182:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008186:	4853      	ldr	r0, [pc, #332]	@ (80082d4 <_vfiprintf_r+0x21c>)
 8008188:	f7fd fd39 	bl	8005bfe <memchr>
 800818c:	9a04      	ldr	r2, [sp, #16]
 800818e:	b9d8      	cbnz	r0, 80081c8 <_vfiprintf_r+0x110>
 8008190:	06d1      	lsls	r1, r2, #27
 8008192:	bf44      	itt	mi
 8008194:	2320      	movmi	r3, #32
 8008196:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800819a:	0713      	lsls	r3, r2, #28
 800819c:	bf44      	itt	mi
 800819e:	232b      	movmi	r3, #43	@ 0x2b
 80081a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80081a4:	f89a 3000 	ldrb.w	r3, [sl]
 80081a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80081aa:	d015      	beq.n	80081d8 <_vfiprintf_r+0x120>
 80081ac:	4654      	mov	r4, sl
 80081ae:	2000      	movs	r0, #0
 80081b0:	f04f 0c0a 	mov.w	ip, #10
 80081b4:	9a07      	ldr	r2, [sp, #28]
 80081b6:	4621      	mov	r1, r4
 80081b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081bc:	3b30      	subs	r3, #48	@ 0x30
 80081be:	2b09      	cmp	r3, #9
 80081c0:	d94b      	bls.n	800825a <_vfiprintf_r+0x1a2>
 80081c2:	b1b0      	cbz	r0, 80081f2 <_vfiprintf_r+0x13a>
 80081c4:	9207      	str	r2, [sp, #28]
 80081c6:	e014      	b.n	80081f2 <_vfiprintf_r+0x13a>
 80081c8:	eba0 0308 	sub.w	r3, r0, r8
 80081cc:	fa09 f303 	lsl.w	r3, r9, r3
 80081d0:	4313      	orrs	r3, r2
 80081d2:	46a2      	mov	sl, r4
 80081d4:	9304      	str	r3, [sp, #16]
 80081d6:	e7d2      	b.n	800817e <_vfiprintf_r+0xc6>
 80081d8:	9b03      	ldr	r3, [sp, #12]
 80081da:	1d19      	adds	r1, r3, #4
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	9103      	str	r1, [sp, #12]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	bfbb      	ittet	lt
 80081e4:	425b      	neglt	r3, r3
 80081e6:	f042 0202 	orrlt.w	r2, r2, #2
 80081ea:	9307      	strge	r3, [sp, #28]
 80081ec:	9307      	strlt	r3, [sp, #28]
 80081ee:	bfb8      	it	lt
 80081f0:	9204      	strlt	r2, [sp, #16]
 80081f2:	7823      	ldrb	r3, [r4, #0]
 80081f4:	2b2e      	cmp	r3, #46	@ 0x2e
 80081f6:	d10a      	bne.n	800820e <_vfiprintf_r+0x156>
 80081f8:	7863      	ldrb	r3, [r4, #1]
 80081fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80081fc:	d132      	bne.n	8008264 <_vfiprintf_r+0x1ac>
 80081fe:	9b03      	ldr	r3, [sp, #12]
 8008200:	3402      	adds	r4, #2
 8008202:	1d1a      	adds	r2, r3, #4
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	9203      	str	r2, [sp, #12]
 8008208:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800820c:	9305      	str	r3, [sp, #20]
 800820e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80082d8 <_vfiprintf_r+0x220>
 8008212:	2203      	movs	r2, #3
 8008214:	4650      	mov	r0, sl
 8008216:	7821      	ldrb	r1, [r4, #0]
 8008218:	f7fd fcf1 	bl	8005bfe <memchr>
 800821c:	b138      	cbz	r0, 800822e <_vfiprintf_r+0x176>
 800821e:	2240      	movs	r2, #64	@ 0x40
 8008220:	9b04      	ldr	r3, [sp, #16]
 8008222:	eba0 000a 	sub.w	r0, r0, sl
 8008226:	4082      	lsls	r2, r0
 8008228:	4313      	orrs	r3, r2
 800822a:	3401      	adds	r4, #1
 800822c:	9304      	str	r3, [sp, #16]
 800822e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008232:	2206      	movs	r2, #6
 8008234:	4829      	ldr	r0, [pc, #164]	@ (80082dc <_vfiprintf_r+0x224>)
 8008236:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800823a:	f7fd fce0 	bl	8005bfe <memchr>
 800823e:	2800      	cmp	r0, #0
 8008240:	d03f      	beq.n	80082c2 <_vfiprintf_r+0x20a>
 8008242:	4b27      	ldr	r3, [pc, #156]	@ (80082e0 <_vfiprintf_r+0x228>)
 8008244:	bb1b      	cbnz	r3, 800828e <_vfiprintf_r+0x1d6>
 8008246:	9b03      	ldr	r3, [sp, #12]
 8008248:	3307      	adds	r3, #7
 800824a:	f023 0307 	bic.w	r3, r3, #7
 800824e:	3308      	adds	r3, #8
 8008250:	9303      	str	r3, [sp, #12]
 8008252:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008254:	443b      	add	r3, r7
 8008256:	9309      	str	r3, [sp, #36]	@ 0x24
 8008258:	e76a      	b.n	8008130 <_vfiprintf_r+0x78>
 800825a:	460c      	mov	r4, r1
 800825c:	2001      	movs	r0, #1
 800825e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008262:	e7a8      	b.n	80081b6 <_vfiprintf_r+0xfe>
 8008264:	2300      	movs	r3, #0
 8008266:	f04f 0c0a 	mov.w	ip, #10
 800826a:	4619      	mov	r1, r3
 800826c:	3401      	adds	r4, #1
 800826e:	9305      	str	r3, [sp, #20]
 8008270:	4620      	mov	r0, r4
 8008272:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008276:	3a30      	subs	r2, #48	@ 0x30
 8008278:	2a09      	cmp	r2, #9
 800827a:	d903      	bls.n	8008284 <_vfiprintf_r+0x1cc>
 800827c:	2b00      	cmp	r3, #0
 800827e:	d0c6      	beq.n	800820e <_vfiprintf_r+0x156>
 8008280:	9105      	str	r1, [sp, #20]
 8008282:	e7c4      	b.n	800820e <_vfiprintf_r+0x156>
 8008284:	4604      	mov	r4, r0
 8008286:	2301      	movs	r3, #1
 8008288:	fb0c 2101 	mla	r1, ip, r1, r2
 800828c:	e7f0      	b.n	8008270 <_vfiprintf_r+0x1b8>
 800828e:	ab03      	add	r3, sp, #12
 8008290:	9300      	str	r3, [sp, #0]
 8008292:	462a      	mov	r2, r5
 8008294:	4630      	mov	r0, r6
 8008296:	4b13      	ldr	r3, [pc, #76]	@ (80082e4 <_vfiprintf_r+0x22c>)
 8008298:	a904      	add	r1, sp, #16
 800829a:	f7fc ff1f 	bl	80050dc <_printf_float>
 800829e:	4607      	mov	r7, r0
 80082a0:	1c78      	adds	r0, r7, #1
 80082a2:	d1d6      	bne.n	8008252 <_vfiprintf_r+0x19a>
 80082a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80082a6:	07d9      	lsls	r1, r3, #31
 80082a8:	d405      	bmi.n	80082b6 <_vfiprintf_r+0x1fe>
 80082aa:	89ab      	ldrh	r3, [r5, #12]
 80082ac:	059a      	lsls	r2, r3, #22
 80082ae:	d402      	bmi.n	80082b6 <_vfiprintf_r+0x1fe>
 80082b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80082b2:	f7fd fca3 	bl	8005bfc <__retarget_lock_release_recursive>
 80082b6:	89ab      	ldrh	r3, [r5, #12]
 80082b8:	065b      	lsls	r3, r3, #25
 80082ba:	f53f af1f 	bmi.w	80080fc <_vfiprintf_r+0x44>
 80082be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80082c0:	e71e      	b.n	8008100 <_vfiprintf_r+0x48>
 80082c2:	ab03      	add	r3, sp, #12
 80082c4:	9300      	str	r3, [sp, #0]
 80082c6:	462a      	mov	r2, r5
 80082c8:	4630      	mov	r0, r6
 80082ca:	4b06      	ldr	r3, [pc, #24]	@ (80082e4 <_vfiprintf_r+0x22c>)
 80082cc:	a904      	add	r1, sp, #16
 80082ce:	f7fd f9a3 	bl	8005618 <_printf_i>
 80082d2:	e7e4      	b.n	800829e <_vfiprintf_r+0x1e6>
 80082d4:	08008792 	.word	0x08008792
 80082d8:	08008798 	.word	0x08008798
 80082dc:	0800879c 	.word	0x0800879c
 80082e0:	080050dd 	.word	0x080050dd
 80082e4:	08008095 	.word	0x08008095

080082e8 <__swbuf_r>:
 80082e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ea:	460e      	mov	r6, r1
 80082ec:	4614      	mov	r4, r2
 80082ee:	4605      	mov	r5, r0
 80082f0:	b118      	cbz	r0, 80082fa <__swbuf_r+0x12>
 80082f2:	6a03      	ldr	r3, [r0, #32]
 80082f4:	b90b      	cbnz	r3, 80082fa <__swbuf_r+0x12>
 80082f6:	f7fd fb39 	bl	800596c <__sinit>
 80082fa:	69a3      	ldr	r3, [r4, #24]
 80082fc:	60a3      	str	r3, [r4, #8]
 80082fe:	89a3      	ldrh	r3, [r4, #12]
 8008300:	071a      	lsls	r2, r3, #28
 8008302:	d501      	bpl.n	8008308 <__swbuf_r+0x20>
 8008304:	6923      	ldr	r3, [r4, #16]
 8008306:	b943      	cbnz	r3, 800831a <__swbuf_r+0x32>
 8008308:	4621      	mov	r1, r4
 800830a:	4628      	mov	r0, r5
 800830c:	f000 f82a 	bl	8008364 <__swsetup_r>
 8008310:	b118      	cbz	r0, 800831a <__swbuf_r+0x32>
 8008312:	f04f 37ff 	mov.w	r7, #4294967295
 8008316:	4638      	mov	r0, r7
 8008318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800831a:	6823      	ldr	r3, [r4, #0]
 800831c:	6922      	ldr	r2, [r4, #16]
 800831e:	b2f6      	uxtb	r6, r6
 8008320:	1a98      	subs	r0, r3, r2
 8008322:	6963      	ldr	r3, [r4, #20]
 8008324:	4637      	mov	r7, r6
 8008326:	4283      	cmp	r3, r0
 8008328:	dc05      	bgt.n	8008336 <__swbuf_r+0x4e>
 800832a:	4621      	mov	r1, r4
 800832c:	4628      	mov	r0, r5
 800832e:	f7ff fc3d 	bl	8007bac <_fflush_r>
 8008332:	2800      	cmp	r0, #0
 8008334:	d1ed      	bne.n	8008312 <__swbuf_r+0x2a>
 8008336:	68a3      	ldr	r3, [r4, #8]
 8008338:	3b01      	subs	r3, #1
 800833a:	60a3      	str	r3, [r4, #8]
 800833c:	6823      	ldr	r3, [r4, #0]
 800833e:	1c5a      	adds	r2, r3, #1
 8008340:	6022      	str	r2, [r4, #0]
 8008342:	701e      	strb	r6, [r3, #0]
 8008344:	6962      	ldr	r2, [r4, #20]
 8008346:	1c43      	adds	r3, r0, #1
 8008348:	429a      	cmp	r2, r3
 800834a:	d004      	beq.n	8008356 <__swbuf_r+0x6e>
 800834c:	89a3      	ldrh	r3, [r4, #12]
 800834e:	07db      	lsls	r3, r3, #31
 8008350:	d5e1      	bpl.n	8008316 <__swbuf_r+0x2e>
 8008352:	2e0a      	cmp	r6, #10
 8008354:	d1df      	bne.n	8008316 <__swbuf_r+0x2e>
 8008356:	4621      	mov	r1, r4
 8008358:	4628      	mov	r0, r5
 800835a:	f7ff fc27 	bl	8007bac <_fflush_r>
 800835e:	2800      	cmp	r0, #0
 8008360:	d0d9      	beq.n	8008316 <__swbuf_r+0x2e>
 8008362:	e7d6      	b.n	8008312 <__swbuf_r+0x2a>

08008364 <__swsetup_r>:
 8008364:	b538      	push	{r3, r4, r5, lr}
 8008366:	4b29      	ldr	r3, [pc, #164]	@ (800840c <__swsetup_r+0xa8>)
 8008368:	4605      	mov	r5, r0
 800836a:	6818      	ldr	r0, [r3, #0]
 800836c:	460c      	mov	r4, r1
 800836e:	b118      	cbz	r0, 8008378 <__swsetup_r+0x14>
 8008370:	6a03      	ldr	r3, [r0, #32]
 8008372:	b90b      	cbnz	r3, 8008378 <__swsetup_r+0x14>
 8008374:	f7fd fafa 	bl	800596c <__sinit>
 8008378:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800837c:	0719      	lsls	r1, r3, #28
 800837e:	d422      	bmi.n	80083c6 <__swsetup_r+0x62>
 8008380:	06da      	lsls	r2, r3, #27
 8008382:	d407      	bmi.n	8008394 <__swsetup_r+0x30>
 8008384:	2209      	movs	r2, #9
 8008386:	602a      	str	r2, [r5, #0]
 8008388:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800838c:	f04f 30ff 	mov.w	r0, #4294967295
 8008390:	81a3      	strh	r3, [r4, #12]
 8008392:	e033      	b.n	80083fc <__swsetup_r+0x98>
 8008394:	0758      	lsls	r0, r3, #29
 8008396:	d512      	bpl.n	80083be <__swsetup_r+0x5a>
 8008398:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800839a:	b141      	cbz	r1, 80083ae <__swsetup_r+0x4a>
 800839c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80083a0:	4299      	cmp	r1, r3
 80083a2:	d002      	beq.n	80083aa <__swsetup_r+0x46>
 80083a4:	4628      	mov	r0, r5
 80083a6:	f7fe fa97 	bl	80068d8 <_free_r>
 80083aa:	2300      	movs	r3, #0
 80083ac:	6363      	str	r3, [r4, #52]	@ 0x34
 80083ae:	89a3      	ldrh	r3, [r4, #12]
 80083b0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80083b4:	81a3      	strh	r3, [r4, #12]
 80083b6:	2300      	movs	r3, #0
 80083b8:	6063      	str	r3, [r4, #4]
 80083ba:	6923      	ldr	r3, [r4, #16]
 80083bc:	6023      	str	r3, [r4, #0]
 80083be:	89a3      	ldrh	r3, [r4, #12]
 80083c0:	f043 0308 	orr.w	r3, r3, #8
 80083c4:	81a3      	strh	r3, [r4, #12]
 80083c6:	6923      	ldr	r3, [r4, #16]
 80083c8:	b94b      	cbnz	r3, 80083de <__swsetup_r+0x7a>
 80083ca:	89a3      	ldrh	r3, [r4, #12]
 80083cc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80083d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80083d4:	d003      	beq.n	80083de <__swsetup_r+0x7a>
 80083d6:	4621      	mov	r1, r4
 80083d8:	4628      	mov	r0, r5
 80083da:	f000 f882 	bl	80084e2 <__smakebuf_r>
 80083de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083e2:	f013 0201 	ands.w	r2, r3, #1
 80083e6:	d00a      	beq.n	80083fe <__swsetup_r+0x9a>
 80083e8:	2200      	movs	r2, #0
 80083ea:	60a2      	str	r2, [r4, #8]
 80083ec:	6962      	ldr	r2, [r4, #20]
 80083ee:	4252      	negs	r2, r2
 80083f0:	61a2      	str	r2, [r4, #24]
 80083f2:	6922      	ldr	r2, [r4, #16]
 80083f4:	b942      	cbnz	r2, 8008408 <__swsetup_r+0xa4>
 80083f6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80083fa:	d1c5      	bne.n	8008388 <__swsetup_r+0x24>
 80083fc:	bd38      	pop	{r3, r4, r5, pc}
 80083fe:	0799      	lsls	r1, r3, #30
 8008400:	bf58      	it	pl
 8008402:	6962      	ldrpl	r2, [r4, #20]
 8008404:	60a2      	str	r2, [r4, #8]
 8008406:	e7f4      	b.n	80083f2 <__swsetup_r+0x8e>
 8008408:	2000      	movs	r0, #0
 800840a:	e7f7      	b.n	80083fc <__swsetup_r+0x98>
 800840c:	2000002c 	.word	0x2000002c

08008410 <_raise_r>:
 8008410:	291f      	cmp	r1, #31
 8008412:	b538      	push	{r3, r4, r5, lr}
 8008414:	4605      	mov	r5, r0
 8008416:	460c      	mov	r4, r1
 8008418:	d904      	bls.n	8008424 <_raise_r+0x14>
 800841a:	2316      	movs	r3, #22
 800841c:	6003      	str	r3, [r0, #0]
 800841e:	f04f 30ff 	mov.w	r0, #4294967295
 8008422:	bd38      	pop	{r3, r4, r5, pc}
 8008424:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008426:	b112      	cbz	r2, 800842e <_raise_r+0x1e>
 8008428:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800842c:	b94b      	cbnz	r3, 8008442 <_raise_r+0x32>
 800842e:	4628      	mov	r0, r5
 8008430:	f000 f830 	bl	8008494 <_getpid_r>
 8008434:	4622      	mov	r2, r4
 8008436:	4601      	mov	r1, r0
 8008438:	4628      	mov	r0, r5
 800843a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800843e:	f000 b817 	b.w	8008470 <_kill_r>
 8008442:	2b01      	cmp	r3, #1
 8008444:	d00a      	beq.n	800845c <_raise_r+0x4c>
 8008446:	1c59      	adds	r1, r3, #1
 8008448:	d103      	bne.n	8008452 <_raise_r+0x42>
 800844a:	2316      	movs	r3, #22
 800844c:	6003      	str	r3, [r0, #0]
 800844e:	2001      	movs	r0, #1
 8008450:	e7e7      	b.n	8008422 <_raise_r+0x12>
 8008452:	2100      	movs	r1, #0
 8008454:	4620      	mov	r0, r4
 8008456:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800845a:	4798      	blx	r3
 800845c:	2000      	movs	r0, #0
 800845e:	e7e0      	b.n	8008422 <_raise_r+0x12>

08008460 <raise>:
 8008460:	4b02      	ldr	r3, [pc, #8]	@ (800846c <raise+0xc>)
 8008462:	4601      	mov	r1, r0
 8008464:	6818      	ldr	r0, [r3, #0]
 8008466:	f7ff bfd3 	b.w	8008410 <_raise_r>
 800846a:	bf00      	nop
 800846c:	2000002c 	.word	0x2000002c

08008470 <_kill_r>:
 8008470:	b538      	push	{r3, r4, r5, lr}
 8008472:	2300      	movs	r3, #0
 8008474:	4d06      	ldr	r5, [pc, #24]	@ (8008490 <_kill_r+0x20>)
 8008476:	4604      	mov	r4, r0
 8008478:	4608      	mov	r0, r1
 800847a:	4611      	mov	r1, r2
 800847c:	602b      	str	r3, [r5, #0]
 800847e:	f7f9 faac 	bl	80019da <_kill>
 8008482:	1c43      	adds	r3, r0, #1
 8008484:	d102      	bne.n	800848c <_kill_r+0x1c>
 8008486:	682b      	ldr	r3, [r5, #0]
 8008488:	b103      	cbz	r3, 800848c <_kill_r+0x1c>
 800848a:	6023      	str	r3, [r4, #0]
 800848c:	bd38      	pop	{r3, r4, r5, pc}
 800848e:	bf00      	nop
 8008490:	20000490 	.word	0x20000490

08008494 <_getpid_r>:
 8008494:	f7f9 ba9a 	b.w	80019cc <_getpid>

08008498 <__swhatbuf_r>:
 8008498:	b570      	push	{r4, r5, r6, lr}
 800849a:	460c      	mov	r4, r1
 800849c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084a0:	4615      	mov	r5, r2
 80084a2:	2900      	cmp	r1, #0
 80084a4:	461e      	mov	r6, r3
 80084a6:	b096      	sub	sp, #88	@ 0x58
 80084a8:	da0c      	bge.n	80084c4 <__swhatbuf_r+0x2c>
 80084aa:	89a3      	ldrh	r3, [r4, #12]
 80084ac:	2100      	movs	r1, #0
 80084ae:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80084b2:	bf14      	ite	ne
 80084b4:	2340      	movne	r3, #64	@ 0x40
 80084b6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80084ba:	2000      	movs	r0, #0
 80084bc:	6031      	str	r1, [r6, #0]
 80084be:	602b      	str	r3, [r5, #0]
 80084c0:	b016      	add	sp, #88	@ 0x58
 80084c2:	bd70      	pop	{r4, r5, r6, pc}
 80084c4:	466a      	mov	r2, sp
 80084c6:	f000 f849 	bl	800855c <_fstat_r>
 80084ca:	2800      	cmp	r0, #0
 80084cc:	dbed      	blt.n	80084aa <__swhatbuf_r+0x12>
 80084ce:	9901      	ldr	r1, [sp, #4]
 80084d0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80084d4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80084d8:	4259      	negs	r1, r3
 80084da:	4159      	adcs	r1, r3
 80084dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80084e0:	e7eb      	b.n	80084ba <__swhatbuf_r+0x22>

080084e2 <__smakebuf_r>:
 80084e2:	898b      	ldrh	r3, [r1, #12]
 80084e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80084e6:	079d      	lsls	r5, r3, #30
 80084e8:	4606      	mov	r6, r0
 80084ea:	460c      	mov	r4, r1
 80084ec:	d507      	bpl.n	80084fe <__smakebuf_r+0x1c>
 80084ee:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80084f2:	6023      	str	r3, [r4, #0]
 80084f4:	6123      	str	r3, [r4, #16]
 80084f6:	2301      	movs	r3, #1
 80084f8:	6163      	str	r3, [r4, #20]
 80084fa:	b003      	add	sp, #12
 80084fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084fe:	466a      	mov	r2, sp
 8008500:	ab01      	add	r3, sp, #4
 8008502:	f7ff ffc9 	bl	8008498 <__swhatbuf_r>
 8008506:	9f00      	ldr	r7, [sp, #0]
 8008508:	4605      	mov	r5, r0
 800850a:	4639      	mov	r1, r7
 800850c:	4630      	mov	r0, r6
 800850e:	f7fe fa55 	bl	80069bc <_malloc_r>
 8008512:	b948      	cbnz	r0, 8008528 <__smakebuf_r+0x46>
 8008514:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008518:	059a      	lsls	r2, r3, #22
 800851a:	d4ee      	bmi.n	80084fa <__smakebuf_r+0x18>
 800851c:	f023 0303 	bic.w	r3, r3, #3
 8008520:	f043 0302 	orr.w	r3, r3, #2
 8008524:	81a3      	strh	r3, [r4, #12]
 8008526:	e7e2      	b.n	80084ee <__smakebuf_r+0xc>
 8008528:	89a3      	ldrh	r3, [r4, #12]
 800852a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800852e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008532:	81a3      	strh	r3, [r4, #12]
 8008534:	9b01      	ldr	r3, [sp, #4]
 8008536:	6020      	str	r0, [r4, #0]
 8008538:	b15b      	cbz	r3, 8008552 <__smakebuf_r+0x70>
 800853a:	4630      	mov	r0, r6
 800853c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008540:	f000 f81e 	bl	8008580 <_isatty_r>
 8008544:	b128      	cbz	r0, 8008552 <__smakebuf_r+0x70>
 8008546:	89a3      	ldrh	r3, [r4, #12]
 8008548:	f023 0303 	bic.w	r3, r3, #3
 800854c:	f043 0301 	orr.w	r3, r3, #1
 8008550:	81a3      	strh	r3, [r4, #12]
 8008552:	89a3      	ldrh	r3, [r4, #12]
 8008554:	431d      	orrs	r5, r3
 8008556:	81a5      	strh	r5, [r4, #12]
 8008558:	e7cf      	b.n	80084fa <__smakebuf_r+0x18>
	...

0800855c <_fstat_r>:
 800855c:	b538      	push	{r3, r4, r5, lr}
 800855e:	2300      	movs	r3, #0
 8008560:	4d06      	ldr	r5, [pc, #24]	@ (800857c <_fstat_r+0x20>)
 8008562:	4604      	mov	r4, r0
 8008564:	4608      	mov	r0, r1
 8008566:	4611      	mov	r1, r2
 8008568:	602b      	str	r3, [r5, #0]
 800856a:	f7f9 fa95 	bl	8001a98 <_fstat>
 800856e:	1c43      	adds	r3, r0, #1
 8008570:	d102      	bne.n	8008578 <_fstat_r+0x1c>
 8008572:	682b      	ldr	r3, [r5, #0]
 8008574:	b103      	cbz	r3, 8008578 <_fstat_r+0x1c>
 8008576:	6023      	str	r3, [r4, #0]
 8008578:	bd38      	pop	{r3, r4, r5, pc}
 800857a:	bf00      	nop
 800857c:	20000490 	.word	0x20000490

08008580 <_isatty_r>:
 8008580:	b538      	push	{r3, r4, r5, lr}
 8008582:	2300      	movs	r3, #0
 8008584:	4d05      	ldr	r5, [pc, #20]	@ (800859c <_isatty_r+0x1c>)
 8008586:	4604      	mov	r4, r0
 8008588:	4608      	mov	r0, r1
 800858a:	602b      	str	r3, [r5, #0]
 800858c:	f7f9 fa93 	bl	8001ab6 <_isatty>
 8008590:	1c43      	adds	r3, r0, #1
 8008592:	d102      	bne.n	800859a <_isatty_r+0x1a>
 8008594:	682b      	ldr	r3, [r5, #0]
 8008596:	b103      	cbz	r3, 800859a <_isatty_r+0x1a>
 8008598:	6023      	str	r3, [r4, #0]
 800859a:	bd38      	pop	{r3, r4, r5, pc}
 800859c:	20000490 	.word	0x20000490

080085a0 <_init>:
 80085a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085a2:	bf00      	nop
 80085a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085a6:	bc08      	pop	{r3}
 80085a8:	469e      	mov	lr, r3
 80085aa:	4770      	bx	lr

080085ac <_fini>:
 80085ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ae:	bf00      	nop
 80085b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085b2:	bc08      	pop	{r3}
 80085b4:	469e      	mov	lr, r3
 80085b6:	4770      	bx	lr
